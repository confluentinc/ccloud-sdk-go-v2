// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Key Management API for BYOK

Upload and retrieve self-managed keys on dedicated Confluent Cloud clusters. 

API version: 0.0.1
Contact: cire-storage@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ByokV1KeySpecKeyOneOf - struct for ByokV1KeySpecKeyOneOf
type ByokV1KeySpecKeyOneOf struct {
	ByokV1AwsKey *ByokV1AwsKey
	ByokV1AzureKey *ByokV1AzureKey
}

// ByokV1AwsKeyAsByokV1KeySpecKeyOneOf is a convenience function that returns ByokV1AwsKey wrapped in ByokV1KeySpecKeyOneOf
func ByokV1AwsKeyAsByokV1KeySpecKeyOneOf(v *ByokV1AwsKey) ByokV1KeySpecKeyOneOf {
	return ByokV1KeySpecKeyOneOf{ ByokV1AwsKey: v}
}

// ByokV1AzureKeyAsByokV1KeySpecKeyOneOf is a convenience function that returns ByokV1AzureKey wrapped in ByokV1KeySpecKeyOneOf
func ByokV1AzureKeyAsByokV1KeySpecKeyOneOf(v *ByokV1AzureKey) ByokV1KeySpecKeyOneOf {
	return ByokV1KeySpecKeyOneOf{ ByokV1AzureKey: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ByokV1KeySpecKeyOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsKey'
	if jsonDict["kind"] == "AwsKey" {
		// try to unmarshal JSON data into ByokV1AwsKey
		err = json.Unmarshal(data, &dst.ByokV1AwsKey)
		if err == nil {
			return nil // data stored in dst.ByokV1AwsKey, return on the first match
		} else {
			dst.ByokV1AwsKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeySpecKeyOneOf as ByokV1AwsKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureKey'
	if jsonDict["kind"] == "AzureKey" {
		// try to unmarshal JSON data into ByokV1AzureKey
		err = json.Unmarshal(data, &dst.ByokV1AzureKey)
		if err == nil {
			return nil // data stored in dst.ByokV1AzureKey, return on the first match
		} else {
			dst.ByokV1AzureKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeySpecKeyOneOf as ByokV1AzureKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'byok.v1.AwsKey'
	if jsonDict["kind"] == "byok.v1.AwsKey" {
		// try to unmarshal JSON data into ByokV1AwsKey
		err = json.Unmarshal(data, &dst.ByokV1AwsKey)
		if err == nil {
			return nil // data stored in dst.ByokV1AwsKey, return on the first match
		} else {
			dst.ByokV1AwsKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeySpecKeyOneOf as ByokV1AwsKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'byok.v1.AzureKey'
	if jsonDict["kind"] == "byok.v1.AzureKey" {
		// try to unmarshal JSON data into ByokV1AzureKey
		err = json.Unmarshal(data, &dst.ByokV1AzureKey)
		if err == nil {
			return nil // data stored in dst.ByokV1AzureKey, return on the first match
		} else {
			dst.ByokV1AzureKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeySpecKeyOneOf as ByokV1AzureKey: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ByokV1KeySpecKeyOneOf) MarshalJSON() ([]byte, error) {
	if src.ByokV1AwsKey != nil {
		return json.Marshal(&src.ByokV1AwsKey)
	}

	if src.ByokV1AzureKey != nil {
		return json.Marshal(&src.ByokV1AzureKey)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ByokV1KeySpecKeyOneOf) GetActualInstance() (interface{}) {
	if obj.ByokV1AwsKey != nil {
		return obj.ByokV1AwsKey
	}

	if obj.ByokV1AzureKey != nil {
		return obj.ByokV1AzureKey
	}

	// all schemas are nil
	return nil
}

type NullableByokV1KeySpecKeyOneOf struct {
	value *ByokV1KeySpecKeyOneOf
	isSet bool
}

func (v NullableByokV1KeySpecKeyOneOf) Get() *ByokV1KeySpecKeyOneOf {
	return v.value
}

func (v *NullableByokV1KeySpecKeyOneOf) Set(val *ByokV1KeySpecKeyOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableByokV1KeySpecKeyOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableByokV1KeySpecKeyOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableByokV1KeySpecKeyOneOf(val *ByokV1KeySpecKeyOneOf) *NullableByokV1KeySpecKeyOneOf {
	return &NullableByokV1KeySpecKeyOneOf{value: val, isSet: true}
}

func (v NullableByokV1KeySpecKeyOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableByokV1KeySpecKeyOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


