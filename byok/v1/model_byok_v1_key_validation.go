// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Key Management API for BYOK

Upload and retrieve self-managed keys on dedicated Confluent Cloud clusters.

API version: 0.0.1
Contact: cire-storage@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// ByokV1KeyValidation The validation details of the key.
type ByokV1KeyValidation struct {
	// The validation phase of the key:    INITIALIZING: Initial phase for new keys awaiting first successful validation.    VALID: Last validation attempt succeeded.    INVALID: Last validation attempt failed.
	Phase string `json:"phase,omitempty"`
	// A message describing validation events.
	Message *string `json:"message,omitempty"`
	// The timestamp since which the key is in the current validation phase. Changes to the validation message or phase will update this timestamp.
	Since time.Time `json:"since,omitempty"`
	// The cloud region where the key is deployed. This value is computed by the API after the key is successfully validated.
	Region *string `json:"region,omitempty"`
}

// NewByokV1KeyValidation instantiates a new ByokV1KeyValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewByokV1KeyValidation(phase string, since time.Time) *ByokV1KeyValidation {
	this := ByokV1KeyValidation{}
	this.Phase = phase
	this.Since = since
	return &this
}

// NewByokV1KeyValidationWithDefaults instantiates a new ByokV1KeyValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewByokV1KeyValidationWithDefaults() *ByokV1KeyValidation {
	this := ByokV1KeyValidation{}
	return &this
}

// GetPhase returns the Phase field value
func (o *ByokV1KeyValidation) GetPhase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *ByokV1KeyValidation) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *ByokV1KeyValidation) SetPhase(v string) {
	o.Phase = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ByokV1KeyValidation) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByokV1KeyValidation) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ByokV1KeyValidation) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ByokV1KeyValidation) SetMessage(v string) {
	o.Message = &v
}

// GetSince returns the Since field value
func (o *ByokV1KeyValidation) GetSince() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Since
}

// GetSinceOk returns a tuple with the Since field value
// and a boolean to check if the value has been set.
func (o *ByokV1KeyValidation) GetSinceOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Since, true
}

// SetSince sets field value
func (o *ByokV1KeyValidation) SetSince(v time.Time) {
	o.Since = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ByokV1KeyValidation) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByokV1KeyValidation) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ByokV1KeyValidation) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ByokV1KeyValidation) SetRegion(v string) {
	o.Region = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ByokV1KeyValidation) Redact() {
	o.recurseRedact(&o.Phase)
	o.recurseRedact(o.Message)
	o.recurseRedact(&o.Since)
	o.recurseRedact(o.Region)
}

func (o *ByokV1KeyValidation) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ByokV1KeyValidation) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ByokV1KeyValidation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["phase"] = o.Phase
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["since"] = o.Since
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableByokV1KeyValidation struct {
	value *ByokV1KeyValidation
	isSet bool
}

func (v NullableByokV1KeyValidation) Get() *ByokV1KeyValidation {
	return v.value
}

func (v *NullableByokV1KeyValidation) Set(val *ByokV1KeyValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableByokV1KeyValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableByokV1KeyValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableByokV1KeyValidation(val *ByokV1KeyValidation) *NullableByokV1KeyValidation {
	return &NullableByokV1KeyValidation{value: val, isSet: true}
}

func (v NullableByokV1KeyValidation) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableByokV1KeyValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
