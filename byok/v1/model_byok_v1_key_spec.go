// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Key Management API for BYOK

Upload and retrieve self-managed keys on dedicated Confluent Cloud clusters. 

API version: 0.0.1
Contact: cire-storage@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// ByokV1KeySpec The desired state of the Key
type ByokV1KeySpec struct {
	// The cloud-specific key details.  For AWS please provide the corresponding `key_arn`. For Azure please provide the corresponding `key_id`. 
	Key *ByokV1KeySpecKeyOneOf `json:"key,omitempty"`
	// The environment to which this belongs.
	Environment *ObjectReference `json:"environment,omitempty"`
}

// NewByokV1KeySpec instantiates a new ByokV1KeySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewByokV1KeySpec() *ByokV1KeySpec {
	this := ByokV1KeySpec{}
	return &this
}

// NewByokV1KeySpecWithDefaults instantiates a new ByokV1KeySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewByokV1KeySpecWithDefaults() *ByokV1KeySpec {
	this := ByokV1KeySpec{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ByokV1KeySpec) GetKey() ByokV1KeySpecKeyOneOf {
	if o == nil || o.Key == nil {
		var ret ByokV1KeySpecKeyOneOf
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByokV1KeySpec) GetKeyOk() (*ByokV1KeySpecKeyOneOf, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ByokV1KeySpec) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given ByokV1KeySpecKeyOneOf and assigns it to the Key field.
func (o *ByokV1KeySpec) SetKey(v ByokV1KeySpecKeyOneOf) {
	o.Key = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ByokV1KeySpec) GetEnvironment() ObjectReference {
	if o == nil || o.Environment == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByokV1KeySpec) GetEnvironmentOk() (*ObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ByokV1KeySpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectReference and assigns it to the Environment field.
func (o *ByokV1KeySpec) SetEnvironment(v ObjectReference) {
	o.Environment = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ByokV1KeySpec) Redact() {
    o.recurseRedact(o.Key)
    o.recurseRedact(o.Environment)
}

func (o *ByokV1KeySpec) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ByokV1KeySpec) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ByokV1KeySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	return json.Marshal(toSerialize)
}

type NullableByokV1KeySpec struct {
	value *ByokV1KeySpec
	isSet bool
}

func (v NullableByokV1KeySpec) Get() *ByokV1KeySpec {
	return v.value
}

func (v *NullableByokV1KeySpec) Set(val *ByokV1KeySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableByokV1KeySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableByokV1KeySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableByokV1KeySpec(val *ByokV1KeySpec) *NullableByokV1KeySpec {
	return &NullableByokV1KeySpec{value: val, isSet: true}
}

func (v NullableByokV1KeySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableByokV1KeySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


