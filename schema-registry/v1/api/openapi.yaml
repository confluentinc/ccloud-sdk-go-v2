openapi: 3.0.1
info:
  contact:
    email: data-governance@confluent.io
    name: Data Governance Team
    url: https://confluent.slack.com/app_redirect?channel=data-governance-eng
  description: REST API for the Schema Registry
  title: Confluent Schema Registry APIs
  version: 1.0.0
  x-api-id: cbdaa8a3-56f3-4de9-95a5-b4b61172ea3a
  x-api-group: v1
  x-audience: external-public
  x-tag-group: Schema Registry API (%s)
servers:
- description: Confluent Cloud Schema Registry Endpoint.
  url: https://psrc-00000.region.provider.confluent.cloud
tags:
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to test schema compatibility.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Compatibility (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to configure schema compatibility settings.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Config (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to retrieve information about schema contexts.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Contexts (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schema subjects modes of operation.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Modes (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schemas.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Schemas (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schema subject versions.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Subject Versions (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schema subjects.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Subjects (v1)
paths:
  /clusterconfig:
    get:
      description: Retrieves cluster config information.
      operationId: getClusterConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
          description: The cluster config
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Get cluster config
      tags:
      - Cluster Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/clusterconfig \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/clusterconfig")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/clusterconfig\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/clusterconfig", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/clusterconfig",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/clusterconfig");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/clusterconfig");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /compatibility/subjects/{subject}/versions/{version}:
    post:
      description: 'Test input schema against a particular version of a subject''s
        schema for compatibility. The compatibility level applied for the check is
        the configured compatibility level for the subject (http:get:: /config/(string:
        subject)). If this subject''s compatibility level was never changed, then
        the global compatibility level applies (http:get:: /config).'
      operationId: testCompatibilityBySubjectName
      parameters:
      - description: Subject of the schema version against which compatibility is
          to be tested
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the subject's schema against which compatibility is
          to be tested. Valid values for versionId are between [1,2^31-1] or the string
          "latest"."latest" checks compatibility of the input schema with the last
          registered schema under the specified subject
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return detailed error messages
        explode: true
        in: query
        name: verbose
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
          description: Compatibility check result.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable entity. Error code 42201 indicates an invalid
            schema or schema type. Error code 42202 indicates an invalid version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Test schema compatibility against a particular schema subject-version
      tags:
      - Compatibility (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}?verbose=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"string","subject":"string","version":0}],"schema":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/vnd.schemaregistry.v1+json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}?verbose=SOME_BOOLEAN_VALUE")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}?verbose=SOME_BOOLEAN_VALUE\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"subject\\\":\\\"string\\\",\\\"version\\\":0}],\\\"schema\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/compatibility/subjects/{subject}/versions/{version}?verbose=SOME_BOOLEAN_VALUE", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/compatibility/subjects/{subject}/versions/{version}?verbose=SOME_BOOLEAN_VALUE",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write("{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}?verbose=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}?verbose=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /compatibility/subjects/{subject}/versions:
    post:
      description: 'Test input schema against a subject''s schemas for compatibility,
        based on the configured compatibility level of the subject. In other words,
        it will perform the same compatibility check as register for that subject.
        The compatibility level applied for the check is the configured compatibility
        level for the subject (http:get:: /config/(string: subject)). If this subject''s
        compatibility level was never changed, then the global compatibility level
        applies (http:get:: /config).'
      operationId: testCompatibilityForSubject
      parameters:
      - description: Subject of the schema version against which compatibility is
          to be tested
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return detailed error messages
        explode: true
        in: query
        name: verbose
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
          description: Compatibility check result.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42201 indicates an invalid
            schema or schema type. Error code 42202 indicates an invalid version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Test schema compatibility against all schemas under a subject
      tags:
      - Compatibility (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions?verbose=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"string","subject":"string","version":0}],"schema":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/vnd.schemaregistry.v1+json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions?verbose=SOME_BOOLEAN_VALUE")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions?verbose=SOME_BOOLEAN_VALUE\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"subject\\\":\\\"string\\\",\\\"version\\\":0}],\\\"schema\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/compatibility/subjects/{subject}/versions?verbose=SOME_BOOLEAN_VALUE", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/compatibility/subjects/{subject}/versions?verbose=SOME_BOOLEAN_VALUE",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write("{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions?verbose=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions?verbose=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /config/{subject}:
    delete:
      description: Deletes the specified subject-level compatibility level config
        and reverts to the global default.
      operationId: deleteSubjectConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/json; qs=0.5:
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
          description: Operation succeeded. Returns old compatibility level.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Delete subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://psrc-00000.region.provider.confluent.cloud/config/{subject}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/{subject}")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/{subject}\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/config/{subject}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/{subject}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/{subject}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/{subject}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves compatibility level for a subject.
      operationId: getSubjectLevelConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return the global compatibility level  if subject
          compatibility level not found
        explode: true
        in: query
        name: defaultToGlobal
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
          description: The subject compatibility level.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Get subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/config/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/config/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: Update compatibility level for the specified subject. On success,
        echoes the original request back to the client.
      operationId: updateSubjectLevelConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        description: Config Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
          description: The original request.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42203 indicates invalid compatibility
            level.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Update subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url 'https://psrc-00000.region.provider.confluent.cloud/config/{subject}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"compatibility":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/vnd.schemaregistry.v1+json");
          RequestBody body = RequestBody.create(mediaType, "{\"compatibility\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/{subject}")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/{subject}\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"compatibility\\\":\\\"string\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"compatibility\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/config/{subject}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/{subject}",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write("{\"compatibility\":\"string\"}");
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/{subject}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"compatibility\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/{subject}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"compatibility\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /config:
    delete:
      description: Deletes the global compatibility level config and reverts to the
        default.
      operationId: deleteTopLevelConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/json; qs=0.5:
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
          description: Operation succeeded. Returns old global compatibility level.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Delete global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves the global compatibility level.
      operationId: getTopLevelConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
          description: The global compatibility level.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Get global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: Updates the global compatibility level. On success, echoes the
        original request back to the client.
      operationId: updateTopLevelConfig
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        description: Config Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
          description: The original request.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42203 indicates invalid compatibility
            level.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Update global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"compatibility":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/vnd.schemaregistry.v1+json");
          RequestBody body = RequestBody.create(mediaType, "{\"compatibility\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"compatibility\\\":\\\"string\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"compatibility\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/config", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write("{\"compatibility\":\"string\"}");
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"compatibility\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"compatibility\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /contexts:
    get:
      description: Retrieves a list of contexts.
      operationId: listContexts
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  type: string
                type: array
          description: The contexts.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. '
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: List contexts
      tags:
      - Contexts (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/contexts \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/contexts")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/contexts\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/contexts", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/contexts",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/contexts");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/contexts");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /mode/{subject}:
    delete:
      description: Deletes the specified subject-level mode and reverts to the global
        default.
      operationId: deleteSubjectMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: Operation succeeded. Returns old mode.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Delete subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://psrc-00000.region.provider.confluent.cloud/mode/{subject}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/{subject}\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/mode/{subject}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/{subject}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/{subject}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves the subject mode.
      operationId: getMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return the global mode if subject mode not found
        explode: true
        in: query
        name: defaultToGlobal
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: The subject mode.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Get subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/mode/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?defaultToGlobal=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: Update mode for the specified subject. On success, echoes the original
        request back to the client.
      operationId: updateMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        description: Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
          description: The original request.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42204 indicates an invalid
            mode. Error code 42205 indicates operation not permitted.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary. Error code 50004 indicates unknown leader.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Update subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url 'https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?force=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"mode":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/vnd.schemaregistry.v1+json");
          RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?force=SOME_BOOLEAN_VALUE")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?force=SOME_BOOLEAN_VALUE\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mode\\\":\\\"string\\\"}\")\n\n\
          \treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"mode\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/mode/{subject}?force=SOME_BOOLEAN_VALUE", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/{subject}?force=SOME_BOOLEAN_VALUE",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write("{\"mode\":\"string\"}");
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?force=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mode\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}?force=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"mode\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /mode:
    get:
      description: Retrieves global mode.
      operationId: getTopLevelMode
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: The global mode
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Get global mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/mode \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/mode", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: Update global mode. On success, echoes the original request back
        to the client.
      operationId: updateTopLevelMode
      parameters:
      - description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        description: Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
          description: The original request.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42204 indicates an invalid
            mode. Error code 42205 indicates operation not permitted.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary. Error code 50004 indicates unknown leader.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Update global mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url 'https://psrc-00000.region.provider.confluent.cloud/mode?force=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"mode":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/vnd.schemaregistry.v1+json");
          RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode?force=SOME_BOOLEAN_VALUE")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode?force=SOME_BOOLEAN_VALUE\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mode\\\":\\\"string\\\"}\")\n\n\
          \treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"mode\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/mode?force=SOME_BOOLEAN_VALUE", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode?force=SOME_BOOLEAN_VALUE",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write("{\"mode\":\"string\"}");
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode?force=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mode\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode?force=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"mode\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /schemas/ids/{id}:
    get:
      description: Retrieves the schema string identified by the input ID.
      operationId: getSchema
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Name of the subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Desired output format, dependent on schema type
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Whether to fetch the maximum schema identifier that exists
        explode: true
        in: query
        name: fetchMaxId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/SchemaString'
          description: The schema string.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Get schema string by ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE&fetchMaxId=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE&fetchMaxId=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE&fetchMaxId=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/{id}?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE&fetchMaxId=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/{id}?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE&fetchMaxId=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE&fetchMaxId=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE&fetchMaxId=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas/ids/{id}/schema:
    get:
      description: Retrieves the schema identified by the input ID.
      operationId: getSchemaOnly
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Name of the subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Desired output format, dependent on schema type
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
            application/json; qs=0.5:
              schema:
                type: string
          description: Raw schema string.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Get schema by ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/{id}/schema?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/{id}/schema?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema?subject=SOME_STRING_VALUE&format=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas/types:
    get:
      description: Retrieve the schema types supported by this registry.
      operationId: getSchemaTypes
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  type: string
                type: array
          description: List of supported schema types.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: List supported schema types
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/types \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/types")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/types\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/types", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/types",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/types");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/types");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas:
    get:
      description: Get the schemas matching the specified parameters.
      operationId: getSchemas
      parameters:
      - description: Filters results by the respective subject prefix
        explode: true
        in: query
        name: subjectPrefix
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Whether to return soft deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Whether to return latest schema versions only for each matching
          subject
        explode: true
        in: query
        name: latestOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Pagination offset for results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Pagination size for results. Ignored if negative
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
          description: List of schemas matching the specified parameters.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: List schemas
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/schemas?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE&latestOnly=SOME_BOOLEAN_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE&latestOnly=SOME_BOOLEAN_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE&latestOnly=SOME_BOOLEAN_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE&latestOnly=SOME_BOOLEAN_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE&latestOnly=SOME_BOOLEAN_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE&latestOnly=SOME_BOOLEAN_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE&latestOnly=SOME_BOOLEAN_VALUE&offset=SOME_INTEGER_VALUE&limit=SOME_INTEGER_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas/ids/{id}/subjects:
    get:
      description: Retrieves all the subjects associated with a particular schema
        ID.
      operationId: getSubjects
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Filters results by the respective subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Whether to include subjects where the schema was deleted
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  type: string
                type: array
          description: List of subjects matching the specified parameters.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: List subjects associated to schema ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/{id}/subjects?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/{id}/subjects?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas/ids/{id}/versions:
    get:
      description: Get all the subject-version pairs associated with the input ID.
      operationId: getVersions
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Filters results by the respective subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Whether to include subject versions where the schema was deleted
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
          description: List of subject versions matching the specified parameters.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: List subject-versions associated to schema ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/{id}/versions?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/{id}/versions?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions?subject=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /subjects/{subject}/versions/{version}:
    delete:
      description: Deletes a specific version of the schema registered under this
        subject. This only deletes the version and the schema ID remains intact making
        it still possible to decode data using the schema ID. This API is recommended
        to be used only in development environments or under extreme circumstances
        where-in, its required to delete a previously registered schema for compatibility
        purposes or re-register previously registered schema.
      operationId: deleteSchemaVersion
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                format: int32
                type: integer
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                format: int32
                type: integer
            application/json; qs=0.5:
              schema:
                format: int32
                type: integer
          description: Operation succeeded. Returns the schema version.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Delete schema version
      tags:
      - Subject Versions (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?permanent=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?permanent=SOME_BOOLEAN_VALUE")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?permanent=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/subjects/{subject}/versions/{version}?permanent=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/{subject}/versions/{version}?permanent=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?permanent=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?permanent=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves a specific version of the schema registered under this
        subject.
      operationId: getSchemaByVersion
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schema
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
          description: The schema.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Get schema by version
      tags:
      - Subject Versions (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?deleted=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?deleted=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?deleted=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/{subject}/versions/{version}?deleted=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/{subject}/versions/{version}?deleted=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?deleted=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}?deleted=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /subjects/{subject}/versions/{version}/referencedby:
    get:
      description: Retrieves the IDs of schemas that reference the specified schema.
      operationId: getReferencedBy
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
          description: List of IDs for schemas that reference the specified schema.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: List schemas referencing a schema
      tags:
      - Subject Versions (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/{subject}/versions/{version}/referencedby", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/{subject}/versions/{version}/referencedby",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /subjects/{subject}/versions/{version}/schema:
    get:
      description: Retrieves the schema for the specified version of this subject.
        Only the unescaped schema string is returned.
      operationId: getSchemaOnly_1
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schema
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
            application/json; qs=0.5:
              schema:
                type: string
          description: The schema string.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Get schema string by version
      tags:
      - Subject Versions (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema?deleted=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema?deleted=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema?deleted=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/{subject}/versions/{version}/schema?deleted=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/{subject}/versions/{version}/schema?deleted=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema?deleted=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema?deleted=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /subjects/{subject}/versions:
    get:
      description: Retrieves a list of versions registered under the specified subject.
      operationId: listVersions
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
          description: List of version numbers matching the specified parameters.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Not Found. Error code 40401 indicates subject not found. '
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: List versions under subject
      tags:
      - Subject Versions (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?deleted=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?deleted=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?deleted=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/{subject}/versions?deleted=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/{subject}/versions?deleted=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?deleted=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?deleted=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        Register a new schema under the specified subject. If successfully registered, this returns the unique identifier of this schema in the registry. The returned identifier should be used to retrieve this schema from the schemas resource and is different from the schema's version which is associated with the subject. If the same schema is registered under a different subject, the same identifier will be returned. However, the version of the schema may be different under different subjects.
        A schema should be compatible with the previously registered schema or schemas (if there are any) as per the configured compatibility level. The configured compatibility level can be obtained by issuing a GET http:get:: /config/(string: subject). If that returns null, then GET http:get:: /config
        When there are multiple instances of Schema Registry running in the same cluster, the schema registration request will be forwarded to one of the instances designated as the primary. If the primary is not available, the client will get an error code indicating that the forwarding has failed.
      operationId: register
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to register the normalized schema
        explode: true
        in: query
        name: normalize
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
          description: Schema successfully registered.
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Conflict. Incompatible schema.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Unprocessable entity. Error code 42201 indicates an invalid
            schema or schema type. '
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.Error code 50002 indicates operation timed out.
            Error code 50003 indicates a failure forwarding the request to the primary.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Register schema under a subject
      tags:
      - Subject Versions (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?normalize=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"string","subject":"string","version":0}],"schema":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/vnd.schemaregistry.v1+json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?normalize=SOME_BOOLEAN_VALUE")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?normalize=SOME_BOOLEAN_VALUE\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"subject\\\":\\\"string\\\",\\\"version\\\":0}],\\\"schema\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/subjects/{subject}/versions?normalize=SOME_BOOLEAN_VALUE", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/{subject}/versions?normalize=SOME_BOOLEAN_VALUE",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write("{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?normalize=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions?normalize=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subjects/{subject}:
    delete:
      description: Deletes the specified subject and its associated compatibility
        level if registered. It is recommended to use this API only when a topic needs
        to be recycled or in development environment.
      operationId: deleteSubject
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
          description: Operation succeeded. Returns list of schema versions deleted
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Delete subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?permanent=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?permanent=SOME_BOOLEAN_VALUE")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?permanent=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/subjects/{subject}?permanent=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/{subject}?permanent=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?permanent=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?permanent=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: Check if a schema has already been registered under the specified
        subject. If so, this returns the schema string along with its globally unique
        identifier, its version under this subject and the subject name.
      operationId: lookUpSchemaUnderSubject
      parameters:
      - description: Subject under which the schema will be registered
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to lookup the normalized schema
        explode: true
        in: query
        name: normalize
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to lookup deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
          description: The schema.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: Lookup schema under subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?normalize=SOME_BOOLEAN_VALUE&deleted=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"string","subject":"string","version":0}],"schema":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/vnd.schemaregistry.v1+json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?normalize=SOME_BOOLEAN_VALUE&deleted=SOME_BOOLEAN_VALUE")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?normalize=SOME_BOOLEAN_VALUE&deleted=SOME_BOOLEAN_VALUE\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"subject\\\":\\\"string\\\",\\\"version\\\":0}],\\\"schema\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/subjects/{subject}?normalize=SOME_BOOLEAN_VALUE&deleted=SOME_BOOLEAN_VALUE", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/{subject}?normalize=SOME_BOOLEAN_VALUE&deleted=SOME_BOOLEAN_VALUE",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write("{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?normalize=SOME_BOOLEAN_VALUE&deleted=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}?normalize=SOME_BOOLEAN_VALUE&deleted=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"string\",\"subject\":\"string\",\"version\":0}],\"schema\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subjects:
    get:
      description: Retrieves a list of registered subjects matching specified parameters.
      operationId: list
      parameters:
      - description: Subject name prefix
        explode: true
        in: query
        name: subjectPrefix
        required: false
        schema:
          default: ':*:'
          type: string
        style: form
      - description: Whether to look up deleted subjects
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  type: string
                type: array
          description: List of subjects matching the specified parameters.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error:
                  code: 403
                  message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - api-key: []
      summary: List subjects
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://psrc-00000.region.provider.confluent.cloud/subjects?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects?subjectPrefix=SOME_STRING_VALUE&deleted=SOME_BOOLEAN_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
components:
  responses:
    schemaregistry.v1.BadRequestError:
      content:
        application/json:
          example:
            error:
              code: 400
              message: Bad Request
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Bad Request
    schemaregistry.v1.UnauthorizedError:
      content:
        application/json:
          example:
            error:
              code: 401
              message: Unauthorized
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Unauthorized
    schemaregistry.v1.ForbiddenError:
      content:
        application/json:
          example:
            error:
              code: 403
              message: Forbidden
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Forbidden
    schemaregistry.v1.AccountNotFoundError:
      content:
        application/json:
          example:
            error:
              code: 404
              message: account not found
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Not Found
    schemaregistry.v1.ResourceNotFoundError:
      content:
        application/json:
          example:
            error:
              code: 404
              message: resource not found
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Not Found
    schemaregistry.v1.DefaultSystemError:
      content:
        application/json:
          example:
            error:
              code: 500
              message: Oops, something went wrong
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Internal Server Error
    RateLimitError:
      description: Rate Limit Exceeded
      headers:
        Retry-After:
          description: The number of seconds to wait until the rate limit window resets.
            Only sent when the rate limit is reached.
          explode: false
          schema:
            type: integer
          style: simple
  schemas:
    ClusterConfig:
      description: Cluster Config
      example:
        maxSchemas: 0
        maxRequestsPerSec: 6
      properties:
        maxSchemas:
          description: Maximum number of registered schemas allowed
          format: int32
          type: integer
        maxRequestsPerSec:
          description: Maximum number of allowed requests per second
          format: int32
          type: integer
      type: object
    CompatibilityCheckResponse:
      description: Compatibility check response
      example:
        is_compatible: true
        messages:
        - messages
        - messages
      properties:
        is_compatible:
          description: Whether the compared schemas are compatible
          type: boolean
        messages:
          description: Error messages
          items:
            description: Error messages
            type: string
          type: array
      type: object
    ErrorMessage:
      description: Error message
      properties:
        error_code:
          description: Error code
          format: int32
          type: integer
        message:
          description: Detailed error message
          type: string
      type: object
    RegisterSchemaRequest:
      description: Schema register request
      example:
        schema: schema
        references:
        - subject: subject
          name: name
          version: 1
        - subject: subject
          name: name
          version: 1
        schemaType: schemaType
        id: 6
        version: 0
      properties:
        version:
          description: Version number
          format: int32
          type: integer
        id:
          description: Globally unique identifier of the schema
          format: int32
          type: integer
        schemaType:
          description: Schema type
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        schema:
          description: Schema definition string
          type: string
      type: object
    SchemaReference:
      description: Schema reference
      example:
        subject: subject
        name: name
        version: 1
      properties:
        name:
          description: Reference name
          type: string
        subject:
          description: Name of the referenced subject
          type: string
        version:
          description: Version number of the referenced subject
          format: int32
          type: integer
      type: object
    Config:
      description: Config
      example:
        compatibilityLevel: compatibilityLevel
      properties:
        compatibilityLevel:
          description: Compatibility Level
          type: string
          x-extensible-enum:
          - BACKWARD
          - BACKWARD_TRANSITIVE
          - FORWARD
          - FORWARD_TRANSITIVE
          - FULL
          - FULL_TRANSITIVE
          - NONE
      type: object
    ConfigUpdateRequest:
      description: Config update request
      example:
        compatibility: compatibility
      properties:
        compatibility:
          description: Compatibility Level
          type: string
          x-extensible-enum:
          - BACKWARD
          - BACKWARD_TRANSITIVE
          - FORWARD
          - FORWARD_TRANSITIVE
          - FULL
          - FULL_TRANSITIVE
          - NONE
      type: object
    Mode:
      description: Schema Registry operating mode
      example:
        mode: mode
      properties:
        mode:
          description: Schema Registry operating mode
          type: string
          x-extensible-enum:
          - READWRITE
          - READONLY
          - READONLY_OVERRIDE
          - IMPORT
      type: object
    ModeUpdateRequest:
      description: Mode update request
      example:
        mode: mode
      properties:
        mode:
          description: Schema Registry operating mode
          type: string
          x-extensible-enum:
          - READWRITE
          - READONLY
          - READONLY_OVERRIDE
          - IMPORT
      type: object
    SchemaString:
      description: Schema definition
      example:
        schema: schema
        maxId: 0
        references:
        - subject: subject
          name: name
          version: 1
        - subject: subject
          name: name
          version: 1
        schemaType: schemaType
      properties:
        schemaType:
          description: Schema type
          type: string
        schema:
          description: Schema string identified by the ID
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        maxId:
          description: Maximum ID
          format: int32
          type: integer
      type: object
    Schema:
      description: Schema
      example:
        schema: schema
        references:
        - subject: subject
          name: name
          version: 1
        - subject: subject
          name: name
          version: 1
        subject: subject
        schemaType: schemaType
        id: 6
        version: 0
      properties:
        subject:
          description: Name of the subject
          type: string
        version:
          description: Version number
          format: int32
          type: integer
        id:
          description: Globally unique identifier of the schema
          format: int32
          type: integer
        schemaType:
          description: Schema type
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        schema:
          description: Schema definition string
          type: string
      type: object
    SubjectVersion:
      description: Subject version pair
      example:
        subject: subject
        version: 0
      properties:
        subject:
          description: Name of the subject
          type: string
        version:
          description: Version number
          format: int32
          type: integer
      type: object
    RegisterSchemaResponse:
      description: Schema register response
      example:
        id: 0
      properties:
        id:
          description: Globally unique identifier of the schema
          format: int32
          type: integer
      type: object
  securitySchemes:
    api-key:
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API
        Key ID as the username and API Key Secret as the password.
      scheme: basic
      type: http
