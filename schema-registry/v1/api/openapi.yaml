openapi: 3.0.1
info:
  contact:
    email: data-governance@confluent.io
    name: Data Governance Team
    url: https://confluent.slack.com/app_redirect?channel=data-governance-eng
  description: REST API for the Schema Registry
  title: Confluent Schema Registry APIs
  version: 1.0.0
  x-api-id: cbdaa8a3-56f3-4de9-95a5-b4b61172ea3a
  x-api-group: v1
  x-audience: external-public
  x-tag-group: Schema Registry API (%s)
servers:
- description: Confluent Cloud Schema Registry Endpoint.
  url: https://psrc-00000.region.provider.confluent.cloud
tags:
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to test schema compatibility.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Compatibility (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to manage and query schema compatibility settings and cluster configurations.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Config (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to retrieve information about schema contexts.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Contexts (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete exporters.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Exporters (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schema subjects modes of operation.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Modes (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schemas.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Schemas (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete schema subjects and versions.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Subjects (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete key encryption keys.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Key Encryption Keys (v1)
- description: |-
    [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    The API allows you to create, retrieve, update, and delete data encryption keys.

    Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  name: Data Encryption Keys (v1)
paths:
  /clusterconfig:
    get:
      description: Retrieves cluster config information.
      operationId: getClusterConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
          description: The cluster config
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get cluster config
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/clusterconfig \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/clusterconfig")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/clusterconfig\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/clusterconfig", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/clusterconfig",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/clusterconfig");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/clusterconfig");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /compatibility/subjects/{subject}/versions/{version}:
    post:
      description: 'Test input schema against a particular version of a subject''s
        schema for compatibility. The compatibility level applied for the check is
        the configured compatibility level for the subject (http:get:: /config/(string:
        subject)). If this subject''s compatibility level was never changed, then
        the global compatibility level applies (http:get:: /config).'
      operationId: testCompatibilityBySubjectName
      parameters:
      - description: Subject of the schema version against which compatibility is
          to be tested
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the subject's schema against which compatibility is
          to be tested. Valid values for versionId are between [1,2^31-1] or the string
          "latest"."latest" checks compatibility of the input schema with the last
          registered schema under the specified subject
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return detailed error messages
        explode: true
        in: query
        name: verbose
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
          description: Compatibility check result.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable entity. Error code 42201 indicates an invalid
            schema or schema type. Error code 42202 indicates an invalid version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Test schema compatibility against a particular schema subject-version
      tags:
      - Compatibility (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string","metadata":{"tags":{"property1":["string"],"property2":["string"]},"properties":{"property1":"string","property2":"string"},"sensitive":["string"]},"ruleSet":{"migrationRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}],"domainRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}]}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\
          \",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"\
          string\\\",\\\"metadata\\\":{\\\"tags\\\":{\\\"property1\\\":[\\\"string\\\
          \"],\\\"property2\\\":[\\\"string\\\"]},\\\"properties\\\":{\\\"property1\\\
          \":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"sensitive\\\":[\\\
          \"string\\\"]},\\\"ruleSet\\\":{\\\"migrationRules\\\":[{\\\"name\\\":\\\
          \"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\
          \"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"\
          string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\
          \":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\
          \",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}],\\\"domainRules\\\
          \":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\"\
          :\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\
          \",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"\
          string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\"\
          ,\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"\
          disabled\\\":true}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            version: 0,
            id: 0,
            schemaType: 'string',
            references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
            schema: 'string',
            metadata: {
              tags: {property1: ['string'], property2: ['string']},
              properties: {property1: 'string', property2: 'string'},
              sensitive: ['string']
            },
            ruleSet: {
              migrationRules: [
                {
                  name: 'string',
                  doc: 'string',
                  kind: 'TRANSFORM',
                  mode: 'UPGRADE',
                  type: 'string',
                  tags: ['string'],
                  params: {property1: 'string', property2: 'string'},
                  expr: 'string',
                  onSuccess: 'string',
                  onFailure: 'string',
                  disabled: true
                }
              ],
              domainRules: [
                {
                  name: 'string',
                  doc: 'string',
                  kind: 'TRANSFORM',
                  mode: 'UPGRADE',
                  type: 'string',
                  tags: ['string'],
                  params: {property1: 'string', property2: 'string'},
                  expr: 'string',
                  onSuccess: 'string',
                  onFailure: 'string',
                  disabled: true
                }
              ]
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions/%7Bversion%7D");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /compatibility/subjects/{subject}/versions:
    post:
      description: 'Test input schema against a subject''s schemas for compatibility,
        based on the configured compatibility level of the subject. In other words,
        it will perform the same compatibility check as register for that subject.
        The compatibility level applied for the check is the configured compatibility
        level for the subject (http:get:: /config/(string: subject)). If this subject''s
        compatibility level was never changed, then the global compatibility level
        applies (http:get:: /config).'
      operationId: testCompatibilityForSubject
      parameters:
      - description: Subject of the schema version against which compatibility is
          to be tested
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return detailed error messages
        explode: true
        in: query
        name: verbose
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
          description: Compatibility check result.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Test schema compatibility against all schemas under a subject
      tags:
      - Compatibility (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string","metadata":{"tags":{"property1":["string"],"property2":["string"]},"properties":{"property1":"string","property2":"string"},"sensitive":["string"]},"ruleSet":{"migrationRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}],"domainRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}]}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\
          \",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"\
          string\\\",\\\"metadata\\\":{\\\"tags\\\":{\\\"property1\\\":[\\\"string\\\
          \"],\\\"property2\\\":[\\\"string\\\"]},\\\"properties\\\":{\\\"property1\\\
          \":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"sensitive\\\":[\\\
          \"string\\\"]},\\\"ruleSet\\\":{\\\"migrationRules\\\":[{\\\"name\\\":\\\
          \"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\
          \"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"\
          string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\
          \":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\
          \",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}],\\\"domainRules\\\
          \":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\"\
          :\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\
          \",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"\
          string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\"\
          ,\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"\
          disabled\\\":true}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/compatibility/subjects/%7Bsubject%7D/versions", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/compatibility/subjects/%7Bsubject%7D/versions",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            version: 0,
            id: 0,
            schemaType: 'string',
            references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
            schema: 'string',
            metadata: {
              tags: {property1: ['string'], property2: ['string']},
              properties: {property1: 'string', property2: 'string'},
              sensitive: ['string']
            },
            ruleSet: {
              migrationRules: [
                {
                  name: 'string',
                  doc: 'string',
                  kind: 'TRANSFORM',
                  mode: 'UPGRADE',
                  type: 'string',
                  tags: ['string'],
                  params: {property1: 'string', property2: 'string'},
                  expr: 'string',
                  onSuccess: 'string',
                  onFailure: 'string',
                  disabled: true
                }
              ],
              domainRules: [
                {
                  name: 'string',
                  doc: 'string',
                  kind: 'TRANSFORM',
                  mode: 'UPGRADE',
                  type: 'string',
                  tags: ['string'],
                  params: {property1: 'string', property2: 'string'},
                  expr: 'string',
                  onSuccess: 'string',
                  onFailure: 'string',
                  disabled: true
                }
              ]
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/%7Bsubject%7D/versions");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /config/{subject}:
    delete:
      description: Deletes the specified subject-level compatibility level config
        and reverts to the global default.
      operationId: deleteSubjectConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                example: FULL_TRANSITIVE
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                example: FULL_TRANSITIVE
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/json; qs=0.5:
              schema:
                example: FULL_TRANSITIVE
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
          description: Operation succeeded. Returns old compatibility level.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/config/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        Retrieves compatibility level, compatibility group, normalization,
        default metadata, and rule set for a subject.
      operationId: getSubjectLevelConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return the global compatibility level  if subject
          compatibility level not found
        explode: true
        in: query
        name: defaultToGlobal
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
          description: The subject compatibility level.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/config/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: |-
        Update compatibility level, compatibility group, normalization,
        default metadata, and rule set for the specified subject. On success,
        echoes the original request back to the client.
      operationId: updateSubjectLevelConfig
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        description: Config Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
          description: The original request.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42203 indicates invalid compatibility
            level.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Update subject compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"alias":"string","normalize":true,"compatibility":"FULL_TRANSITIVE","compatibilityGroup":"string","defaultMetadata":{"properties":{}},"overrideMetadata":{"properties":{}},"defaultRuleSet":{"properties":{}},"overrideRuleSet":{"properties":{}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"alias\\\":\\\"string\\\",\\\"\
          normalize\\\":true,\\\"compatibility\\\":\\\"FULL_TRANSITIVE\\\",\\\"compatibilityGroup\\\
          \":\\\"string\\\",\\\"defaultMetadata\\\":{\\\"properties\\\":{}},\\\"overrideMetadata\\\
          \":{\\\"properties\\\":{}},\\\"defaultRuleSet\\\":{\\\"properties\\\":{}},\\\
          \"overrideRuleSet\\\":{\\\"properties\\\":{}}}\")\n\n\treq, _ := http.NewRequest(\"\
          PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/config/%7Bsubject%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config/%7Bsubject%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            alias: 'string',
            normalize: true,
            compatibility: 'FULL_TRANSITIVE',
            compatibilityGroup: 'string',
            defaultMetadata: {properties: {}},
            overrideMetadata: {properties: {}},
            defaultRuleSet: {properties: {}},
            overrideRuleSet: {properties: {}}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/%7Bsubject%7D");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /config:
    delete:
      description: Deletes the global compatibility level config and reverts to the
        default.
      operationId: deleteTopLevelConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              example: FULL_TRANSITIVE
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              example: FULL_TRANSITIVE
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/json; qs=0.5:
              example: FULL_TRANSITIVE
              schema:
                type: string
                x-extensible-enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
          description: Operation succeeded. Returns old global compatibility level.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        Retrieves the global compatibility level, compatibility group,
        normalization, default metadata, and rule set.
      operationId: getTopLevelConfig
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
          description: The global compatibility level.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: |-
        Updates the global compatibility level, compatibility group,
        schema normalization, default metadata, and rule set. On success, echoes the
        original request back to the client.
      operationId: updateTopLevelConfig
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        description: Config Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
          description: The original request.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42203 indicates invalid compatibility
            level.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Update global compatibility level
      tags:
      - Config (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"alias":"string","normalize":true,"compatibility":"FULL_TRANSITIVE","compatibilityGroup":"string","defaultMetadata":{"properties":{}},"overrideMetadata":{"properties":{}},"defaultRuleSet":{"properties":{}},"overrideRuleSet":{"properties":{}}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/config")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"alias\\\":\\\"string\\\",\\\"\
          normalize\\\":true,\\\"compatibility\\\":\\\"FULL_TRANSITIVE\\\",\\\"compatibilityGroup\\\
          \":\\\"string\\\",\\\"defaultMetadata\\\":{\\\"properties\\\":{}},\\\"overrideMetadata\\\
          \":{\\\"properties\\\":{}},\\\"defaultRuleSet\\\":{\\\"properties\\\":{}},\\\
          \"overrideRuleSet\\\":{\\\"properties\\\":{}}}\")\n\n\treq, _ := http.NewRequest(\"\
          PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/config", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/config",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            alias: 'string',
            normalize: true,
            compatibility: 'FULL_TRANSITIVE',
            compatibilityGroup: 'string',
            defaultMetadata: {properties: {}},
            overrideMetadata: {properties: {}},
            defaultRuleSet: {properties: {}},
            overrideRuleSet: {properties: {}}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /exporters:
    get:
      description: Retrieves a list of schema exporters that have been created.
      operationId: listExporters
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: '["exporter1", "exporter2"]'
                  type: string
                type: array
          description: Name of the exporter
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Gets all schema exporters.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/exporters", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: Creates a new schema exporter. All attributes in request body are
        optional except config.
      operationId: registerExporter
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ExporterReference'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ExporterReference'
          application/json:
            schema:
              $ref: '#/components/schemas/ExporterReference'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
          description: Schema successfully registered.
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Conflict. Error code 40950 – Missing or invalid exporter name
            \ Error code 40951 – Missing or invalid exporter config \ Error code 40952
            – Invalid exporter subjects \ Error code 40960 – Exporter already exists
            \ Error code 40964 – Too many exporters
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Creates a new schema exporter.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"name":"test-exporter","contextType":"CUSTOM","context":"User","subjects":["string"],"subjectRenameFormat":"string","config":{"property1":"string","property2":"string"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"test-exporter\",\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"test-exporter\\\"\
          ,\\\"contextType\\\":\\\"CUSTOM\\\",\\\"context\\\":\\\"User\\\",\\\"subjects\\\
          \":[\\\"string\\\"],\\\"subjectRenameFormat\\\":\\\"string\\\",\\\"config\\\
          \":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"name\":\"test-exporter\",\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/exporters", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            name: 'test-exporter',
            contextType: 'CUSTOM',
            context: 'User',
            subjects: ['string'],
            subjectRenameFormat: 'string',
            config: {property1: 'string', property2: 'string'}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"name\":\"test-exporter\",\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"name\":\"test-exporter\",\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /exporters/{name}:
    delete:
      description: Deletes the schema exporter.
      operationId: deleteExporter
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content.
        "404":
          content:
            application/json:
              example:
                error_code: 404
                message: account not found
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete schema exporter by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/exporters/%7Bname%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves the information of the schema exporter.
      operationId: getExporterInfoByName
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterReference'
          description: The original request.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40450 – Exporter not found
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Gets schema exporter by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/exporters/%7Bname%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: Updates the information or configurations of the schema exporter.
        All attributes in request body are optional.
      operationId: updateExporterInfo
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ExporterUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ExporterUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ExporterUpdateRequest'
        description: Exporter Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
          description: The original request.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid. Error code 40952 – Invalid exporter subjects. Error
            code 40963 – Exporter not paused.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Update schema exporter by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"contextType":"CUSTOM","context":"User","subjects":["string"],"subjectRenameFormat":"string","config":{"property1":"string","property2":"string"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D")
            .put(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"contextType\\\":\\\"CUSTOM\\\"\
          ,\\\"context\\\":\\\"User\\\",\\\"subjects\\\":[\\\"string\\\"],\\\"subjectRenameFormat\\\
          \":\\\"string\\\",\\\"config\\\":{\\\"property1\\\":\\\"string\\\",\\\"\
          property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\"\
          , url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/exporters/%7Bname%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            contextType: 'CUSTOM',
            context: 'User',
            subjects: ['string'],
            subjectRenameFormat: 'string',
            config: {property1: 'string', property2: 'string'}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /exporters/{name}/status:
    get:
      description: Retrieves the status of the schema exporter.
      operationId: getExporterStatusByName
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterStatusResponse'
          description: The original request.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40450 – Exporter not found
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Gets schema exporter status by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/status \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/status")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/status\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/exporters/%7Bname%7D/status", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D/status",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/status");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/status");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /exporters/{name}/config:
    get:
      description: Retrieves the config of the schema exporter.
      operationId: getExporterConfigByName
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterConfigResponse'
          description: The original request
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40450 – Exporter not found
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Gets schema exporter config by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/exporters/%7Bname%7D/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D/config",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: Retrieves the config of the schema exporter.
      operationId: updateExporterConfigByName
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ExporterConfigResponse'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ExporterConfigResponse'
          application/json:
            schema:
              $ref: '#/components/schemas/ExporterConfigResponse'
        description: Exporter Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
          description: The original request.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid. Error code 40952 – Invalid exporter subjects. Error
            code 40963 – Exporter not paused.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Update schema exporter config by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"schema.registry.url":"<Physical SR Endpoint>","basic.auth.credentials.source":"USER_INFO","basic.auth.user.info":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"schema.registry.url\":\"<Physical SR Endpoint>\",\"basic.auth.credentials.source\":\"USER_INFO\",\"basic.auth.user.info\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config")
            .put(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"schema.registry.url\\\":\\\"<Physical\
          \ SR Endpoint>\\\",\\\"basic.auth.credentials.source\\\":\\\"USER_INFO\\\
          \",\\\"basic.auth.user.info\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"schema.registry.url\":\"<Physical SR Endpoint>\",\"basic.auth.credentials.source\":\"USER_INFO\",\"basic.auth.user.info\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/exporters/%7Bname%7D/config", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D/config",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            'schema.registry.url': '<Physical SR Endpoint>',
            'basic.auth.credentials.source': 'USER_INFO',
            'basic.auth.user.info': 'string'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"schema.registry.url\":\"<Physical SR Endpoint>\",\"basic.auth.credentials.source\":\"USER_INFO\",\"basic.auth.user.info\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/config");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"schema.registry.url\":\"<Physical SR Endpoint>\",\"basic.auth.credentials.source\":\"USER_INFO\",\"basic.auth.user.info\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /exporters/{name}/pause:
    put:
      description: Pauses the state of the schema exporter.
      operationId: pauseExporterByName
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
          description: The original request.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid. Error code 40952 – Invalid exporter subjects. Error
            code 40963 – Exporter not paused.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Pause schema exporter by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/pause \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/pause")
            .put(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/pause\"\
          \n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/exporters/%7Bname%7D/pause", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D/pause",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/pause");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/pause");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /exporters/{name}/reset:
    put:
      description: Reset the state of the schema exporter.
      operationId: resetExporterByName
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
          description: The original request.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40450 – Exporter not found
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid. Error code 40963 – Exporter not paused.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Reset schema exporter by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/reset \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/reset")
            .put(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/reset\"\
          \n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/exporters/%7Bname%7D/reset", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D/reset",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/reset");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/reset");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /exporters/{name}/resume:
    put:
      description: Resume running of the schema exporter.
      operationId: resumeExporterByName
      parameters:
      - description: Name of the exporter
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
          description: The original request.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40450 indicates subject not found.
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Invalid. Error code 40961 – Exporter already running.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Resume schema exporter by name.
      tags:
      - Exporters (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/resume \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/resume")
            .put(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/resume\"\
          \n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/exporters/%7Bname%7D/resume", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/exporters/%7Bname%7D/resume",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/resume");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/%7Bname%7D/resume");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /contexts:
    get:
      description: Retrieves a list of contexts.
      operationId: listContexts
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: "."
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: "."
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: "."
                  type: string
                type: array
          description: The contexts.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. '
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List contexts
      tags:
      - Contexts (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/contexts \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/contexts")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/contexts\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/contexts", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/contexts",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/contexts");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/contexts");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /mode/{subject}:
    delete:
      description: Deletes the specified subject-level mode and reverts to the global
        default.
      operationId: deleteSubjectMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: Operation succeeded. Returns old mode.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/mode/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves the subject mode.
      operationId: getMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return the global mode if subject mode not found
        explode: true
        in: query
        name: defaultToGlobal
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: The subject mode.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/mode/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: Update mode for the specified subject. On success, echoes the original
        request back to the client.
      operationId: updateMode
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        description: Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
          description: The original request.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42204 indicates an invalid
            mode. Error code 42205 indicates operation not permitted.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary. Error code 50004 indicates unknown leader.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Update subject mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"mode":"READWRITE"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"READWRITE\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mode\\\":\\\"READWRITE\\\"}\"\
          )\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"mode\":\"READWRITE\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/mode/%7Bsubject%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode/%7Bsubject%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mode: 'READWRITE'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mode\":\"READWRITE\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/%7Bsubject%7D");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"mode\":\"READWRITE\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /mode:
    get:
      description: Retrieves global mode.
      operationId: getTopLevelMode
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
          description: The global mode
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get global mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/mode \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/mode", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: Update global mode. On success, echoes the original request back
        to the client.
      operationId: updateTopLevelMode
      parameters:
      - description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        description: Update Request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
          description: The original request.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42204 indicates an invalid
            mode. Error code 42205 indicates operation not permitted.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store. Error code 50003 indicates a failure forwarding
            the request to the primary. Error code 50004 indicates unknown leader.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Update global mode
      tags:
      - Modes (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/mode \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"mode":"READWRITE"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"READWRITE\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/mode")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mode\\\":\\\"READWRITE\\\"}\"\
          )\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"mode\":\"READWRITE\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/mode", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/mode",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mode: 'READWRITE'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mode\":\"READWRITE\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"mode\":\"READWRITE\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /schemas/ids/{id}:
    get:
      description: Retrieves the schema string identified by the input ID.
      operationId: getSchema
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Name of the subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Desired output format, dependent on schema type
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Whether to fetch the maximum schema identifier that exists
        explode: true
        in: query
        name: fetchMaxId
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/SchemaString'
          description: The schema string.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get schema string by ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/%7Bid%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas/ids/{id}/schema:
    get:
      description: Retrieves the schema identified by the input ID.
      operationId: getSchemaOnly
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Name of the subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Desired output format, dependent on schema type
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: ""
          type: string
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                example: '{"schema": "{"type": "string"}"}'
                type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                example: '{"schema": "{"type": "string"}"}'
                type: string
            application/json; qs=0.5:
              schema:
                example: '{"schema": "{"type": "string"}"}'
                type: string
          description: Raw schema string.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get schema by ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/%7Bid%7D/schema", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/%7Bid%7D/schema",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/schema");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas/types:
    get:
      description: Retrieve the schema types supported by this registry.
      operationId: getSchemaTypes
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: AVRO
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: AVRO
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: AVRO
                  type: string
                type: array
          description: List of supported schema types.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List supported schema types
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/types \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/types")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/types\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/types", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/types",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/types");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/types");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas:
    get:
      description: Get the schemas matching the specified parameters.
      operationId: getSchemas
      parameters:
      - description: Filters results by the respective subject prefix
        explode: true
        in: query
        name: subjectPrefix
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Whether to return soft deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Whether to return latest schema versions only for each matching
          subject
        explode: true
        in: query
        name: latestOnly
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Pagination offset for results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - description: Pagination size for results. Ignored if negative
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: -1
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
          description: List of schemas matching the specified parameters.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List schemas
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas/ids/{id}/subjects:
    get:
      description: Retrieves all the subjects associated with a particular schema
        ID.
      operationId: getSubjects
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Filters results by the respective subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Whether to include subjects where the schema was deleted
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: User
                  type: string
                type: array
          description: List of subjects matching the specified parameters.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List subjects associated to schema ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/%7Bid%7D/subjects", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/%7Bid%7D/subjects",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/subjects");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /schemas/ids/{id}/versions:
    get:
      description: Get all the subject-version pairs associated with the input ID.
      operationId: getVersions
      parameters:
      - description: Globally unique identifier of the schema
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Filters results by the respective subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: Whether to include subject versions where the schema was deleted
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  $ref: '#/components/schemas/SubjectVersion'
                type: array
          description: List of subject versions matching the specified parameters.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List subject-versions associated to schema ID
      tags:
      - Schemas (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/schemas/ids/%7Bid%7D/versions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/schemas/ids/%7Bid%7D/versions",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/%7Bid%7D/versions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /subjects/{subject}/versions/{version}:
    delete:
      description: Deletes a specific version of the schema registered under this
        subject. This only deletes the version and the schema ID remains intact making
        it still possible to decode data using the schema ID. This API is recommended
        to be used only in development environments or under extreme circumstances
        where-in, its required to delete a previously registered schema for compatibility
        purposes or re-register previously registered schema.
      operationId: deleteSchemaVersion
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                example: 1
                format: int32
                type: integer
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                example: 1
                format: int32
                type: integer
            application/json; qs=0.5:
              schema:
                example: 1
                format: int32
                type: integer
          description: Operation succeeded. Returns the schema version.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete schema version
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/subjects/%7Bsubject%7D/versions/%7Bversion%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions/%7Bversion%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: Retrieves a specific version of the schema registered under this
        subject.
      operationId: getSchemaByVersion
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schema
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
          description: The schema.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get schema by version
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/%7Bsubject%7D/versions/%7Bversion%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions/%7Bversion%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /subjects/{subject}/versions/{version}/referencedby:
    get:
      description: Retrieves the IDs of schemas that reference the specified schema.
      operationId: getReferencedBy
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: 100001
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: 100001
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: 100001
                  format: int32
                  type: integer
                type: array
          description: List of IDs for schemas that reference the specified schema.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List schemas referencing a schema
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/referencedby");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /subjects/{subject}/versions/{version}/schema:
    get:
      description: Retrieves the schema for the specified version of this subject.
        Only the unescaped schema string is returned.
      operationId: getSchemaOnly_1
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schema
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                example: '{"schema": "{"type": "string"}"}'
                type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                example: '{"schema": "{"type": "string"}"}'
                type: string
            application/json; qs=0.5:
              schema:
                example: '{"schema": "{"type": "string"}"}'
                type: string
          description: The schema string.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40402 indicates version not found.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unprocessable Entity. Error code 42202 indicates an invalid
            version.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get schema string by version
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions/%7Bversion%7D/schema");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /subjects/{subject}/versions:
    get:
      description: Retrieves a list of versions registered under the specified subject.
      operationId: listVersions
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
          description: List of version numbers matching the specified parameters.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Not Found. Error code 40401 indicates subject not found. '
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List versions under subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects/%7Bsubject%7D/versions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        Register a new schema under the specified subject. If successfully registered, this returns the unique identifier of this schema in the registry. The returned identifier should be used to retrieve this schema from the schemas resource and is different from the schema's version which is associated with the subject. If the same schema is registered under a different subject, the same identifier will be returned. However, the version of the schema may be different under different subjects.
        A schema should be compatible with the previously registered schema or schemas (if there are any) as per the configured compatibility level. The configured compatibility level can be obtained by issuing a GET http:get:: /config/(string: subject). If that returns null, then GET http:get:: /config
        When there are multiple instances of Schema Registry running in the same cluster, the schema registration request will be forwarded to one of the instances designated as the primary. If the primary is not available, the client will get an error code indicating that the forwarding has failed.
      operationId: register
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to register the normalized schema
        explode: true
        in: query
        name: normalize
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
          description: Schema successfully registered.
        "409":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Conflict. Incompatible schema.
        "422":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Unprocessable entity. Error code 42201 indicates an invalid
            schema or schema type. '
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.Error code 50002 indicates operation timed out.
            Error code 50003 indicates a failure forwarding the request to the primary.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Register schema under a subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string","metadata":{"tags":{"property1":["string"],"property2":["string"]},"properties":{"property1":"string","property2":"string"},"sensitive":["string"]},"ruleSet":{"migrationRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}],"domainRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}]}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\
          \",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"\
          string\\\",\\\"metadata\\\":{\\\"tags\\\":{\\\"property1\\\":[\\\"string\\\
          \"],\\\"property2\\\":[\\\"string\\\"]},\\\"properties\\\":{\\\"property1\\\
          \":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"sensitive\\\":[\\\
          \"string\\\"]},\\\"ruleSet\\\":{\\\"migrationRules\\\":[{\\\"name\\\":\\\
          \"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\
          \"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"\
          string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\
          \":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\
          \",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}],\\\"domainRules\\\
          \":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\"\
          :\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\
          \",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"\
          string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\"\
          ,\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"\
          disabled\\\":true}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/subjects/%7Bsubject%7D/versions", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D/versions",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            version: 0,
            id: 0,
            schemaType: 'string',
            references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
            schema: 'string',
            metadata: {
              tags: {property1: ['string'], property2: ['string']},
              properties: {property1: 'string', property2: 'string'},
              sensitive: ['string']
            },
            ruleSet: {
              migrationRules: [
                {
                  name: 'string',
                  doc: 'string',
                  kind: 'TRANSFORM',
                  mode: 'UPGRADE',
                  type: 'string',
                  tags: ['string'],
                  params: {property1: 'string', property2: 'string'},
                  expr: 'string',
                  onSuccess: 'string',
                  onFailure: 'string',
                  disabled: true
                }
              ],
              domainRules: [
                {
                  name: 'string',
                  doc: 'string',
                  kind: 'TRANSFORM',
                  mode: 'UPGRADE',
                  type: 'string',
                  tags: ['string'],
                  params: {property1: 'string', property2: 'string'},
                  expr: 'string',
                  onSuccess: 'string',
                  onFailure: 'string',
                  disabled: true
                }
              ]
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D/versions");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subjects/{subject}:
    delete:
      description: Deletes the specified subject and its associated compatibility
        level if registered. It is recommended to use this API only when a topic needs
        to be recycled or in development environment.
      operationId: deleteSubject
      parameters:
      - description: Name of the subject
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
          description: Operation succeeded. Returns list of schema versions deleted
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/subjects/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: Check if a schema has already been registered under the specified
        subject. If so, this returns the schema string along with its globally unique
        identifier, its version under this subject and the subject name.
      operationId: lookUpSchemaUnderSubject
      parameters:
      - description: Subject under which the schema will be registered
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to lookup the normalized schema
        explode: true
        in: query
        name: normalize
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to lookup deleted schemas
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
          description: The schema.
        "404":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Not Found. Error code 40401 indicates subject not found. Error
            code 40403 indicates schema not found.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Lookup schema under subject
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string","metadata":{"tags":{"property1":["string"],"property2":["string"]},"properties":{"property1":"string","property2":"string"},"sensitive":["string"]},"ruleSet":{"migrationRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}],"domainRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}]}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"\
          schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\
          \",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"\
          string\\\",\\\"metadata\\\":{\\\"tags\\\":{\\\"property1\\\":[\\\"string\\\
          \"],\\\"property2\\\":[\\\"string\\\"]},\\\"properties\\\":{\\\"property1\\\
          \":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"sensitive\\\":[\\\
          \"string\\\"]},\\\"ruleSet\\\":{\\\"migrationRules\\\":[{\\\"name\\\":\\\
          \"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\
          \"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"\
          string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\
          \":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\
          \",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}],\\\"domainRules\\\
          \":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\"\
          :\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\
          \",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"\
          string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\"\
          ,\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"\
          disabled\\\":true}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/subjects/%7Bsubject%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects/%7Bsubject%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            version: 0,
            id: 0,
            schemaType: 'string',
            references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
            schema: 'string',
            metadata: {
              tags: {property1: ['string'], property2: ['string']},
              properties: {property1: 'string', property2: 'string'},
              sensitive: ['string']
            },
            ruleSet: {
              migrationRules: [
                {
                  name: 'string',
                  doc: 'string',
                  kind: 'TRANSFORM',
                  mode: 'UPGRADE',
                  type: 'string',
                  tags: ['string'],
                  params: {property1: 'string', property2: 'string'},
                  expr: 'string',
                  onSuccess: 'string',
                  onFailure: 'string',
                  disabled: true
                }
              ],
              domainRules: [
                {
                  name: 'string',
                  doc: 'string',
                  kind: 'TRANSFORM',
                  mode: 'UPGRADE',
                  type: 'string',
                  tags: ['string'],
                  params: {property1: 'string', property2: 'string'},
                  expr: 'string',
                  onSuccess: 'string',
                  onFailure: 'string',
                  disabled: true
                }
              ]
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/%7Bsubject%7D");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subjects:
    get:
      description: Retrieves a list of registered subjects matching specified parameters.
      operationId: list
      parameters:
      - description: Subject name prefix
        explode: true
        in: query
        name: subjectPrefix
        required: false
        schema:
          default: ':*:'
          type: string
        style: form
      - description: Whether to look up deleted subjects
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: User
                  type: string
                type: array
          description: List of subjects matching the specified parameters.
        "500":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Internal Server Error. Error code 50001 indicates a failure
            in the backend data store.
        "400":
          content:
            application/json:
              example:
                error_code: 400
                message: Bad Request
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error_code: 401
                message: Unauthorized
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Unauthorized
        "403":
          content:
            application/json:
              example:
                error_code: 403
                message: Forbidden
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Forbidden
        "429":
          description: Rate Limit Exceeded
          headers:
            Retry-After:
              description: The number of seconds to wait until the rate limit window
                resets. Only sent when the rate limit is reached.
              explode: false
              schema:
                type: integer
              style: simple
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List subjects
      tags:
      - Subjects (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/subjects \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/subjects")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/subjects", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/subjects",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks:
    get:
      operationId: getKekNames
      parameters:
      - description: Whether to include deleted keys
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: mykek
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: mykek
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: mykek
                  type: string
                type: array
          description: List of kek names
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get a list of kek names.
      tags:
      - Key Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/dek-registry/v1/keks", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      operationId: createKek
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/CreateKekRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/CreateKekRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKekRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/CreateKekRequest'
        description: The create request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Kek'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Kek'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Kek'
          description: The create response
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Create a kek.
      tags:
      - Key Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"kmsProps":{"key":"kmsProps"},"shared":true,"name":"name","doc":"doc","kmsKeyId":"kmsKeyId","kmsType":"kmsType"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"kmsProps\":{\"key\":\"kmsProps\"},\"shared\":true,\"name\":\"name\",\"doc\":\"doc\",\"kmsKeyId\":\"kmsKeyId\",\"kmsType\":\"kmsType\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"kmsProps\\\":{\\\"key\\\":\\\"\
          kmsProps\\\"},\\\"shared\\\":true,\\\"name\\\":\\\"name\\\",\\\"doc\\\"\
          :\\\"doc\\\",\\\"kmsKeyId\\\":\\\"kmsKeyId\\\",\\\"kmsType\\\":\\\"kmsType\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"kmsProps\":{\"key\":\"kmsProps\"},\"shared\":true,\"name\":\"name\",\"doc\":\"doc\",\"kmsKeyId\":\"kmsKeyId\",\"kmsType\":\"kmsType\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/dek-registry/v1/keks", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            kmsProps: {key: 'kmsProps'},
            shared: true,
            name: 'name',
            doc: 'doc',
            kmsKeyId: 'kmsKeyId',
            kmsType: 'kmsType'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"kmsProps\":{\"key\":\"kmsProps\"},\"shared\":true,\"name\":\"name\",\"doc\":\"doc\",\"kmsKeyId\":\"kmsKeyId\",\"kmsType\":\"kmsType\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"kmsProps\":{\"key\":\"kmsProps\"},\"shared\":true,\"name\":\"name\",\"doc\":\"doc\",\"kmsKeyId\":\"kmsKeyId\",\"kmsType\":\"kmsType\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks/{name}:
    delete:
      operationId: deleteKek
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: No Content
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete a kek.
      tags:
      - Key Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/dek-registry/v1/keks/%7Bname%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      operationId: getKek
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted keys
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Kek'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Kek'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Kek'
          description: The kek info
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get a kek by name.
      tags:
      - Key Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/dek-registry/v1/keks/%7Bname%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      operationId: putKek
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/UpdateKekRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/UpdateKekRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKekRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/UpdateKekRequest'
        description: The update request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Kek'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Kek'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Kek'
          description: The update response
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Alters a kek.
      tags:
      - Key Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"kmsProps":{"key":"kmsProps"},"shared":true,"doc":"doc"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"kmsProps\":{\"key\":\"kmsProps\"},\"shared\":true,\"doc\":\"doc\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D")
            .put(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"kmsProps\\\":{\\\"key\\\":\\\"\
          kmsProps\\\"},\\\"shared\\\":true,\\\"doc\\\":\\\"doc\\\"}\")\n\n\treq,\
          \ _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"\
          Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\
          \tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"kmsProps\":{\"key\":\"kmsProps\"},\"shared\":true,\"doc\":\"doc\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/dek-registry/v1/keks/%7Bname%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({kmsProps: {key: 'kmsProps'}, shared: true, doc: 'doc'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"kmsProps\":{\"key\":\"kmsProps\"},\"shared\":true,\"doc\":\"doc\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"kmsProps\":{\"key\":\"kmsProps\"},\"shared\":true,\"doc\":\"doc\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks/{name}/undelete:
    post:
      operationId: undeleteKek
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Undelete a kek.
      tags:
      - Key Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/undelete \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/undelete")
            .post(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/undelete\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/dek-registry/v1/keks/%7Bname%7D/undelete", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/undelete",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/undelete");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/undelete");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks/{name}/deks:
    get:
      operationId: getDekSubjects
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include deleted keys
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: User
                  type: string
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: User
                  type: string
                type: array
          description: List of dek subjects
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get a list of dek subjects.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/dek-registry/v1/keks/%7Bname%7D/deks", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      operationId: createDek
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/CreateDekRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/CreateDekRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDekRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/CreateDekRequest'
        description: The create request
        required: true
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Dek'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Dek'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Dek'
          description: The create response
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Create a dek.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/octet-stream' \
            --data '{"subject":"subject","encryptedKeyMaterial":"encryptedKeyMaterial","version":0,"algorithm":"AES128_GCM"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"subject\":\"subject\",\"encryptedKeyMaterial\":\"encryptedKeyMaterial\",\"version\":0,\"algorithm\":\"AES128_GCM\"}");
          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks")
            .post(body)
            .addHeader("content-type", "application/octet-stream")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"subject\\\":\\\"subject\\\",\\\
          \"encryptedKeyMaterial\\\":\\\"encryptedKeyMaterial\\\",\\\"version\\\"\
          :0,\\\"algorithm\\\":\\\"AES128_GCM\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          payload = "{\"subject\":\"subject\",\"encryptedKeyMaterial\":\"encryptedKeyMaterial\",\"version\":0,\"algorithm\":\"AES128_GCM\"}"

          headers = {
              'content-type': "application/octet-stream",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/dek-registry/v1/keks/%7Bname%7D/deks", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks",
            "headers": {
              "content-type": "application/octet-stream",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            subject: 'subject',
            encryptedKeyMaterial: 'encryptedKeyMaterial',
            version: 0,
            algorithm: 'AES128_GCM'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/octet-stream");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"subject\":\"subject\",\"encryptedKeyMaterial\":\"encryptedKeyMaterial\",\"version\":0,\"algorithm\":\"AES128_GCM\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/octet-stream");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/octet-stream", "{\"subject\":\"subject\",\"encryptedKeyMaterial\":\"encryptedKeyMaterial\",\"version\":0,\"algorithm\":\"AES128_GCM\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks/{name}/deks/{subject}:
    delete:
      operationId: deleteDekVersions
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Subject of the dek
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Algorithm of the dek
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        style: form
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: No Content
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete all versions of a dek.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      operationId: getDek
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Subject of the dek
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Algorithm of the dek
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        style: form
      - description: Whether to include deleted keys
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Dek'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Dek'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Dek'
          description: The dek info
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get a dek by subject.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks/{name}/deks/{subject}/versions/{version}:
    delete:
      operationId: deleteDekVersion
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Subject of the dek
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the dek
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Algorithm of the dek
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        style: form
      - description: Whether to perform a permanent delete
        explode: true
        in: query
        name: permanent
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: No Content
        "404":
          description: Error code 40470 -- Key not found
        "422":
          description: Error code 42202 -- Invalid version
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Delete a dek version.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      operationId: getDekByVersion
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Subject of the dek
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the dek
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Algorithm of the dek
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        style: form
      - description: Whether to include deleted keys
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Dek'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Dek'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Dek'
          description: The dek info
        "404":
          description: Error code 40470 -- Key not found
        "422":
          description: Error code 42202 -- Invalid version
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Get a dek by subject and version.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks/{name}/deks/{subject}/versions:
    get:
      operationId: getDekVersions
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Subject of the dek
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Algorithm of the dek
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        style: form
      - description: Whether to include deleted keys
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  example: 1
                  format: int32
                  type: integer
                type: array
          description: List of version numbers for dek
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: List versions of dek.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks/{name}/deks/{subject}/versions/{version}/undelete:
    post:
      operationId: undeleteDekVersion
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Subject of the dek
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the dek
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      - description: Algorithm of the dek
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "404":
          description: Error code 40470 -- Key not found
        "422":
          description: Error code 42202 -- Invalid version
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Undelete a dek version.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D/undelete \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D/undelete")
            .post(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D/undelete\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D/undelete", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D/undelete",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D/undelete");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/versions/%7Bversion%7D/undelete");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /dek-registry/v1/keks/{name}/deks/{subject}/undelete:
    post:
      operationId: undeleteDekVersions
      parameters:
      - description: Name of the kek
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Subject of the dek
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Algorithm of the dek
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        style: form
      responses:
        "204":
          description: No Content
        "404":
          description: Error code 40470 -- Key not found
      security:
      - resource-api-key: []
      - external-access-token: []
      summary: Undelete all versions of a dek.
      tags:
      - Data Encryption Keys (v1)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/undelete \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/undelete")
            .post(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/undelete\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/undelete", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "psrc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/undelete",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/undelete");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/dek-registry/v1/keks/%7Bname%7D/deks/%7Bsubject%7D/undelete");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
components:
  responses:
    schemaregistry.v1.BadRequestError:
      content:
        application/json:
          example:
            error_code: 400
            message: Bad Request
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Bad Request
    schemaregistry.v1.UnauthorizedError:
      content:
        application/json:
          example:
            error_code: 401
            message: Unauthorized
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Unauthorized
    schemaregistry.v1.ForbiddenError:
      content:
        application/json:
          example:
            error_code: 403
            message: Forbidden
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Forbidden
    schemaregistry.v1.AccountNotFoundError:
      content:
        application/json:
          example:
            error_code: 404
            message: account not found
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Not Found
    schemaregistry.v1.ResourceNotFoundError:
      content:
        application/json:
          example:
            error_code: 404
            message: resource not found
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Not Found
    schemaregistry.v1.DefaultSystemError:
      content:
        application/json:
          example:
            error_code: 500
            message: Oops, something went wrong
          schema:
            $ref: '#/components/schemas/ErrorMessage'
      description: Internal Server Error
    RateLimitError:
      description: Rate Limit Exceeded
      headers:
        Retry-After:
          description: The number of seconds to wait until the rate limit window resets.
            Only sent when the rate limit is reached.
          explode: false
          schema:
            type: integer
          style: simple
  schemas:
    ClusterConfig:
      description: Cluster Config
      example:
        maxSchemas: 20000
        maxRequestsPerSec: 25
      properties:
        maxSchemas:
          description: Maximum number of registered schemas allowed
          example: 20000
          format: int32
          type: integer
        maxRequestsPerSec:
          description: Maximum number of allowed requests per second
          example: 25
          format: int32
          type: integer
      type: object
    CompatibilityCheckResponse:
      description: Compatibility check response
      example:
        is_compatible: true
        messages: []
      properties:
        is_compatible:
          description: Whether the compared schemas are compatible
          type: boolean
        messages:
          description: Error messages
          example: []
          items:
            description: Error messages
            example: '[]'
            type: string
          type: array
      type: object
    ErrorMessage:
      description: Error message
      properties:
        error_code:
          description: Error code
          format: int32
          type: integer
        message:
          description: Detailed error message
          type: string
      type: object
    RegisterExporterRequest:
      description: Exporter register request
      properties:
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/ExporterReference'
          type: array
      type: object
    RegisterSchemaRequest:
      description: Schema register request
      example:
        schema: schema
        metadata:
          sensitive:
          - sensitive
          - sensitive
          properties:
            key: properties
          tags:
            key:
            - tags
            - tags
        references:
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        schemaType: schemaType
        ruleSet:
          domainRules:
          - mode: UPGRADE
            kind: TRANSFORM
            name: name
            doc: doc
            onFailure: onFailure
            expr: expr
            disabled: true
            type: type
            params:
              key: params
            tags:
            - tags
            - tags
            onSuccess: onSuccess
          - mode: UPGRADE
            kind: TRANSFORM
            name: name
            doc: doc
            onFailure: onFailure
            expr: expr
            disabled: true
            type: type
            params:
              key: params
            tags:
            - tags
            - tags
            onSuccess: onSuccess
          migrationRules:
          - mode: UPGRADE
            kind: TRANSFORM
            name: name
            doc: doc
            onFailure: onFailure
            expr: expr
            disabled: true
            type: type
            params:
              key: params
            tags:
            - tags
            - tags
            onSuccess: onSuccess
          - mode: UPGRADE
            kind: TRANSFORM
            name: name
            doc: doc
            onFailure: onFailure
            expr: expr
            disabled: true
            type: type
            params:
              key: params
            tags:
            - tags
            - tags
            onSuccess: onSuccess
        id: 6
        version: 0
      properties:
        version:
          description: Version number
          format: int32
          type: integer
        id:
          description: Globally unique identifier of the schema
          format: int32
          type: integer
        schemaType:
          description: Schema type
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        schema:
          description: Schema definition string
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        ruleSet:
          $ref: '#/components/schemas/RuleSet'
      type: object
    ExporterUpdateRequest:
      description: Exporter update request
      example:
        subjectRenameFormat: subjectRenameFormat
        contextType: CUSTOM
        subjects:
        - subjects
        - subjects
        context: User
        config:
          key: config
      properties:
        contextType:
          description: Context type of the exporter. One of CUSTOM, NONE or AUTO (default)
          example: CUSTOM
          type: string
          x-extensible-enum:
          - CUSTOM
          - AUTO
          - NONE
        context:
          description: Customized context of the exporter if contextType equals CUSTOM.
          example: User
          type: string
        subjects:
          description: Name of each exporter subject
          items:
            type: string
          type: array
        subjectRenameFormat:
          description: Format string for the subject name in the destination cluster,
            which may contain ${subject} as a placeholder for the originating subject
            name. For example, dc_${subject} for the subject orders will map to the
            destination subject name dc_orders.
          type: string
        config:
          additionalProperties:
            type: string
          description: The map containing exporter’s configurations
          type: object
      type: object
    ExporterStatusResponse:
      description: Exporter status get request
      example:
        trace: ""
        offset: 100
        name: test-exporter
        state: RUNNING
        ts: 1631206325
      properties:
        name:
          description: Name of exporter.
          example: test-exporter
          type: string
        state:
          description: State of the exporter. Could be STARTING, RUNNING or PAUSED
          example: RUNNING
          type: string
          x-extensible-enum:
          - STARTING
          - RUNNING
          - PAUSED
        offset:
          description: Offset of the exporter
          example: 100
          format: int64
          type: integer
        ts:
          description: Timestamp of the exporter
          example: 1631206325
          format: int64
          type: integer
        trace:
          description: Error trace of the exporter
          example: ""
          type: string
      type: object
    ExporterConfigResponse:
      description: The map containing exporter’s configurations
      example:
        schema.registry.url: <Physical SR Endpoint>
        basic.auth.user.info: basic.auth.user.info
        basic.auth.credentials.source: USER_INFO
      properties:
        schema.registry.url:
          description: Config SR URL
          example: <Physical SR Endpoint>
          type: string
        basic.auth.credentials.source:
          description: Config SR Auth
          example: USER_INFO
          type: string
        basic.auth.user.info:
          description: Config SR User Info
          type: string
      type: object
    SchemaReference:
      description: Schema reference
      example:
        subject: User
        name: io.confluent.kafka.example.User
        version: 1
      properties:
        name:
          description: Reference name
          example: io.confluent.kafka.example.User
          type: string
        subject:
          description: Name of the referenced subject
          example: User
          type: string
        version:
          description: Version number of the referenced subject
          example: 1
          format: int32
          type: integer
      type: object
    ExporterReference:
      description: The format for a typical exporter object
      example:
        subjectRenameFormat: subjectRenameFormat
        contextType: CUSTOM
        subjects:
        - subjects
        - subjects
        name: test-exporter
        context: User
        config:
          key: config
      properties:
        name:
          description: Name of the exporter
          example: test-exporter
          type: string
        contextType:
          description: Context type of the exporter. One of CUSTOM, NONE or AUTO (default)
          example: CUSTOM
          type: string
          x-extensible-enum:
          - CUSTOM
          - AUTO
          - NONE
        context:
          description: Customized context of the exporter if contextType equals CUSTOM.
          example: User
          type: string
        subjects:
          description: Name of each exporter subject
          items:
            type: string
          type: array
        subjectRenameFormat:
          description: Format string for the subject name in the destination cluster,
            which may contain ${subject} as a placeholder for the originating subject
            name. For example, dc_${subject} for the subject orders will map to the
            destination subject name dc_orders.
          type: string
        config:
          additionalProperties:
            type: string
          description: The map containing exporter’s configurations
          type: object
      type: object
    Config:
      description: Config
      example:
        overrideRuleSet:
          properties: '{}'
        defaultMetadata:
          properties: '{}'
        compatibilityLevel: FULL_TRANSITIVE
        normalize: true
        overrideMetadata:
          properties: '{}'
        defaultRuleSet:
          properties: '{}'
        alias: alias
        compatibilityGroup: compatibilityGroup
      properties:
        alias:
          description: |-
            If alias is specified, then this subject is an alias for the subject
            named by the alias. That means that any reference to this subject
            will be replaced by the alias.
          type: string
        normalize:
          description: |-
            If true, then schemas are automatically normalized when registered or
            when passed during lookups. This means that clients do not have to
            pass the "normalize" query parameter to have normalization occur.
          type: boolean
        compatibilityLevel:
          description: Compatibility Level
          example: FULL_TRANSITIVE
          type: string
          x-extensible-enum:
          - BACKWARD
          - BACKWARD_TRANSITIVE
          - FORWARD
          - FORWARD_TRANSITIVE
          - FULL
          - FULL_TRANSITIVE
          - NONE
        compatibilityGroup:
          description: |-
            Only schemas that belong to the same compatibility group will be
            checked for compatibility.
          type: string
        defaultMetadata:
          $ref: '#/components/schemas/Config_defaultMetadata'
        overrideMetadata:
          $ref: '#/components/schemas/Config_overrideMetadata'
        defaultRuleSet:
          $ref: '#/components/schemas/Config_defaultRuleSet'
        overrideRuleSet:
          $ref: '#/components/schemas/Config_overrideRuleSet'
      type: object
    ConfigUpdateRequest:
      description: Config update request
      example:
        overrideRuleSet:
          properties: '{}'
        defaultMetadata:
          properties: '{}'
        normalize: true
        overrideMetadata:
          properties: '{}'
        defaultRuleSet:
          properties: '{}'
        alias: alias
        compatibility: FULL_TRANSITIVE
        compatibilityGroup: compatibilityGroup
      properties:
        alias:
          description: |-
            If alias is specified, then this subject is an alias for the subject
            named by the alias. That means that any reference to this subject
            will be replaced by the alias.
          type: string
        normalize:
          description: |-
            If true, then schemas are automatically normalized when registered
            or when passed during lookups. This means that clients do not have
            to pass the "normalize" query parameter to have normalization occur.
          type: boolean
        compatibility:
          description: Compatibility Level
          example: FULL_TRANSITIVE
          type: string
          x-extensible-enum:
          - BACKWARD
          - BACKWARD_TRANSITIVE
          - FORWARD
          - FORWARD_TRANSITIVE
          - FULL
          - FULL_TRANSITIVE
          - NONE
        compatibilityGroup:
          description: |-
            Only schemas that belong to the same compatibility group will be
            checked for compatibility.
          type: string
        defaultMetadata:
          $ref: '#/components/schemas/Config_defaultMetadata'
        overrideMetadata:
          $ref: '#/components/schemas/Config_overrideMetadata'
        defaultRuleSet:
          $ref: '#/components/schemas/Config_defaultRuleSet'
        overrideRuleSet:
          $ref: '#/components/schemas/Config_overrideRuleSet'
      type: object
    Mode:
      description: Schema Registry operating mode
      example:
        mode: READWRITE
      properties:
        mode:
          description: Schema Registry operating mode
          example: READWRITE
          type: string
          x-extensible-enum:
          - READWRITE
          - READONLY
          - READONLY_OVERRIDE
          - IMPORT
      type: object
    ModeUpdateRequest:
      description: Mode update request
      example:
        mode: READWRITE
      properties:
        mode:
          description: Schema Registry operating mode
          example: READWRITE
          type: string
          x-extensible-enum:
          - READWRITE
          - READONLY
          - READONLY_OVERRIDE
          - IMPORT
      type: object
    SchemaString:
      description: Schema definition
      example:
        schema: '{"schema": "{"type": "string"}"}'
        maxId: 1
        references:
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        schemaType: AVRO
      properties:
        schemaType:
          description: Schema type
          example: AVRO
          type: string
        schema:
          description: Schema string identified by the ID
          example: '{"schema": "{"type": "string"}"}'
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        maxId:
          description: Maximum ID
          example: 1
          format: int32
          type: integer
      type: object
    Schema:
      description: Schema
      example:
        schema: '{"schema": "{"type": "string"}"}'
        metadata:
          sensitive:
          - sensitive
          - sensitive
          properties:
            key: properties
          tags:
            key:
            - tags
            - tags
        references:
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        - subject: User
          name: io.confluent.kafka.example.User
          version: 1
        subject: User
        schemaType: AVRO
        ruleSet:
          domainRules:
          - mode: UPGRADE
            kind: TRANSFORM
            name: name
            doc: doc
            onFailure: onFailure
            expr: expr
            disabled: true
            type: type
            params:
              key: params
            tags:
            - tags
            - tags
            onSuccess: onSuccess
          - mode: UPGRADE
            kind: TRANSFORM
            name: name
            doc: doc
            onFailure: onFailure
            expr: expr
            disabled: true
            type: type
            params:
              key: params
            tags:
            - tags
            - tags
            onSuccess: onSuccess
          migrationRules:
          - mode: UPGRADE
            kind: TRANSFORM
            name: name
            doc: doc
            onFailure: onFailure
            expr: expr
            disabled: true
            type: type
            params:
              key: params
            tags:
            - tags
            - tags
            onSuccess: onSuccess
          - mode: UPGRADE
            kind: TRANSFORM
            name: name
            doc: doc
            onFailure: onFailure
            expr: expr
            disabled: true
            type: type
            params:
              key: params
            tags:
            - tags
            - tags
            onSuccess: onSuccess
        id: 100001
        version: 1
      properties:
        subject:
          description: Name of the subject
          example: User
          type: string
        version:
          description: Version number
          example: 1
          format: int32
          type: integer
        id:
          description: Globally unique identifier of the schema
          example: 100001
          format: int32
          type: integer
        schemaType:
          description: Schema type
          example: AVRO
          type: string
        references:
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        schema:
          description: Schema definition string
          example: '{"schema": "{"type": "string"}"}'
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        ruleSet:
          $ref: '#/components/schemas/RuleSet'
      type: object
    SubjectVersion:
      description: Subject version pair
      example:
        subject: User
        version: 1
      properties:
        subject:
          description: Name of the subject
          example: User
          type: string
        version:
          description: Version number
          example: 1
          format: int32
          type: integer
      type: object
    ExporterResponse:
      description: Exporter register response
      example:
        name: test-exporter
      properties:
        name:
          description: Name of the exporter
          example: test-exporter
          type: string
      type: object
    RegisterSchemaResponse:
      description: Schema register response
      example:
        id: 100001
      properties:
        id:
          description: Globally unique identifier of the schema
          example: 100001
          format: int32
          type: integer
      type: object
    Dek:
      example:
        kekName: kekName
        keyMaterial: keyMaterial
        deleted: true
        subject: subject
        encryptedKeyMaterial: encryptedKeyMaterial
        version: 0
        algorithm: AES128_GCM
        ts: 6
      properties:
        kekName:
          type: string
        subject:
          type: string
        version:
          format: int32
          type: integer
        algorithm:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        encryptedKeyMaterial:
          type: string
        keyMaterial:
          type: string
        ts:
          format: int64
          type: integer
        deleted:
          type: boolean
      type: object
    CreateDekRequest:
      example:
        subject: subject
        encryptedKeyMaterial: encryptedKeyMaterial
        version: 0
        algorithm: AES128_GCM
      properties:
        subject:
          type: string
        version:
          format: int32
          type: integer
        algorithm:
          enum:
          - AES128_GCM
          - AES256_GCM
          - AES256_SIV
          type: string
        encryptedKeyMaterial:
          type: string
      type: object
    Kek:
      example:
        kmsProps:
          key: kmsProps
        shared: true
        deleted: true
        name: name
        doc: doc
        kmsKeyId: kmsKeyId
        kmsType: kmsType
        ts: 0
      properties:
        name:
          type: string
        kmsType:
          type: string
        kmsKeyId:
          type: string
        kmsProps:
          additionalProperties:
            type: string
          type: object
        doc:
          type: string
        shared:
          type: boolean
        ts:
          format: int64
          type: integer
        deleted:
          type: boolean
      type: object
    CreateKekRequest:
      example:
        kmsProps:
          key: kmsProps
        shared: true
        name: name
        doc: doc
        kmsKeyId: kmsKeyId
        kmsType: kmsType
      properties:
        name:
          type: string
        kmsType:
          type: string
        kmsKeyId:
          type: string
        kmsProps:
          additionalProperties:
            type: string
          type: object
        doc:
          type: string
        shared:
          type: boolean
      type: object
    UpdateKekRequest:
      example:
        kmsProps:
          key: kmsProps
        shared: true
        doc: doc
      properties:
        kmsProps:
          additionalProperties:
            type: string
          type: object
        doc:
          type: string
        shared:
          type: boolean
      type: object
    Metadata:
      description: User-defined metadata
      example:
        sensitive:
        - sensitive
        - sensitive
        properties:
          key: properties
        tags:
          key:
          - tags
          - tags
      nullable: true
      properties:
        tags:
          additionalProperties:
            items:
              type: string
            type: array
            uniqueItems: true
          type: object
        properties:
          additionalProperties:
            type: string
          type: object
        sensitive:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    RuleSet:
      description: Schema rule set
      example:
        domainRules:
        - mode: UPGRADE
          kind: TRANSFORM
          name: name
          doc: doc
          onFailure: onFailure
          expr: expr
          disabled: true
          type: type
          params:
            key: params
          tags:
          - tags
          - tags
          onSuccess: onSuccess
        - mode: UPGRADE
          kind: TRANSFORM
          name: name
          doc: doc
          onFailure: onFailure
          expr: expr
          disabled: true
          type: type
          params:
            key: params
          tags:
          - tags
          - tags
          onSuccess: onSuccess
        migrationRules:
        - mode: UPGRADE
          kind: TRANSFORM
          name: name
          doc: doc
          onFailure: onFailure
          expr: expr
          disabled: true
          type: type
          params:
            key: params
          tags:
          - tags
          - tags
          onSuccess: onSuccess
        - mode: UPGRADE
          kind: TRANSFORM
          name: name
          doc: doc
          onFailure: onFailure
          expr: expr
          disabled: true
          type: type
          params:
            key: params
          tags:
          - tags
          - tags
          onSuccess: onSuccess
      nullable: true
      properties:
        migrationRules:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
        domainRules:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
      type: object
    Rule:
      description: Rule
      example:
        mode: UPGRADE
        kind: TRANSFORM
        name: name
        doc: doc
        onFailure: onFailure
        expr: expr
        disabled: true
        type: type
        params:
          key: params
        tags:
        - tags
        - tags
        onSuccess: onSuccess
      properties:
        name:
          description: Rule name
          type: string
        doc:
          description: Rule doc
          type: string
        kind:
          description: Rule kind
          enum:
          - TRANSFORM
          - CONDITION
          type: string
        mode:
          description: Rule mode
          enum:
          - UPGRADE
          - DOWNGRADE
          - UPDOWN
          - WRITE
          - READ
          - WRITEREAD
          type: string
        type:
          description: Rule type
          type: string
        tags:
          description: The tags to which this rule applies
          items:
            description: The tags to which this rule applies
            type: string
          type: array
          uniqueItems: true
        params:
          additionalProperties:
            description: Optional params for the rule
            type: string
          description: Optional params for the rule
          type: object
        expr:
          description: Rule expression
          type: string
        onSuccess:
          description: Rule action on success
          type: string
        onFailure:
          description: Rule action on failure
          type: string
        disabled:
          description: Whether the rule is disabled
          type: boolean
      type: object
    Config_defaultMetadata:
      description: Default value for the metadata to be used during schema registration.
      example:
        properties: '{}'
      properties:
        properties:
          description: The metadata properties and their new values
          type: object
      type: object
    Config_overrideMetadata:
      description: Override value for the metadata to be used during schema registration.
      example:
        properties: '{}'
      properties:
        properties:
          description: The metadata properties and their new values
          type: object
      type: object
    Config_defaultRuleSet:
      description: Default value for the ruleSet to be used during schema registration.
      example:
        properties: '{}'
      properties:
        properties:
          description: The metadata properties and their new values
          type: object
      type: object
    Config_overrideRuleSet:
      description: Override value for the ruleSet to be used during schema registration.
      example:
        properties: '{}'
      properties:
        properties:
          description: The metadata properties and their new values
          type: object
      type: object
  securitySchemes:
    resource-api-key:
      description: "Authenticate with resource-specific API Keys using HTTP Basic\
        \ Auth. Treat the resource-specific API Key ID \nas the username and resource-specific\
        \ API Key Secret as the password.\n"
      scheme: basic
      type: http
    external-access-token:
      description: Authenticate with OAuth 2.0.
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: https://<oauth-identity-provider>/token
      type: oauth2
