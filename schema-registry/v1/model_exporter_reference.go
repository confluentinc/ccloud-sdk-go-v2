// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry APIs

REST API for the Schema Registry

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ExporterReference The format for a typical exporter object
type ExporterReference struct {
	// Name of the exporter
	Name *string `json:"name,omitempty"`
	// Context type of the exporter. One of CUSTOM, NONE or AUTO (default)
	ContextType interface{} `json:"contextType,omitempty"`
	// Customized context of the exporter if contextType equals CUSTOM.
	Context *string `json:"context,omitempty"`
	// Name of each exporter subject
	Subjects *[]string `json:"subjects,omitempty"`
	// Format string for the subject name in the destination cluster, which may contain ${subject} as a placeholder for the originating subject name. For example, dc_${subject} for the subject orders will map to the destination subject name dc_orders.
	SubjectRenameFormat *string `json:"subjectRenameFormat,omitempty"`
	// The map containing exporterâ€™s configurations
	Config *[]ExporterConfigResponse `json:"config,omitempty"`
}

// NewExporterReference instantiates a new ExporterReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExporterReference() *ExporterReference {
	this := ExporterReference{}
	return &this
}

// NewExporterReferenceWithDefaults instantiates a new ExporterReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExporterReferenceWithDefaults() *ExporterReference {
	this := ExporterReference{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExporterReference) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExporterReference) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExporterReference) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExporterReference) SetName(v string) {
	o.Name = &v
}

// GetContextType returns the ContextType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExporterReference) GetContextType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ContextType
}

// GetContextTypeOk returns a tuple with the ContextType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExporterReference) GetContextTypeOk() (*interface{}, bool) {
	if o == nil || o.ContextType == nil {
		return nil, false
	}
	return &o.ContextType, true
}

// HasContextType returns a boolean if a field has been set.
func (o *ExporterReference) HasContextType() bool {
	if o != nil && o.ContextType != nil {
		return true
	}

	return false
}

// SetContextType gets a reference to the given interface{} and assigns it to the ContextType field.
func (o *ExporterReference) SetContextType(v interface{}) {
	o.ContextType = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ExporterReference) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExporterReference) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ExporterReference) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *ExporterReference) SetContext(v string) {
	o.Context = &v
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *ExporterReference) GetSubjects() []string {
	if o == nil || o.Subjects == nil {
		var ret []string
		return ret
	}
	return *o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExporterReference) GetSubjectsOk() (*[]string, bool) {
	if o == nil || o.Subjects == nil {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *ExporterReference) HasSubjects() bool {
	if o != nil && o.Subjects != nil {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given []string and assigns it to the Subjects field.
func (o *ExporterReference) SetSubjects(v []string) {
	o.Subjects = &v
}

// GetSubjectRenameFormat returns the SubjectRenameFormat field value if set, zero value otherwise.
func (o *ExporterReference) GetSubjectRenameFormat() string {
	if o == nil || o.SubjectRenameFormat == nil {
		var ret string
		return ret
	}
	return *o.SubjectRenameFormat
}

// GetSubjectRenameFormatOk returns a tuple with the SubjectRenameFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExporterReference) GetSubjectRenameFormatOk() (*string, bool) {
	if o == nil || o.SubjectRenameFormat == nil {
		return nil, false
	}
	return o.SubjectRenameFormat, true
}

// HasSubjectRenameFormat returns a boolean if a field has been set.
func (o *ExporterReference) HasSubjectRenameFormat() bool {
	if o != nil && o.SubjectRenameFormat != nil {
		return true
	}

	return false
}

// SetSubjectRenameFormat gets a reference to the given string and assigns it to the SubjectRenameFormat field.
func (o *ExporterReference) SetSubjectRenameFormat(v string) {
	o.SubjectRenameFormat = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ExporterReference) GetConfig() []ExporterConfigResponse {
	if o == nil || o.Config == nil {
		var ret []ExporterConfigResponse
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExporterReference) GetConfigOk() (*[]ExporterConfigResponse, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ExporterReference) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given []ExporterConfigResponse and assigns it to the Config field.
func (o *ExporterReference) SetConfig(v []ExporterConfigResponse) {
	o.Config = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ExporterReference) Redact() {
	o.recurseRedact(o.Name)
	o.recurseRedact(o.ContextType)
	o.recurseRedact(o.Context)
	o.recurseRedact(o.Subjects)
	o.recurseRedact(o.SubjectRenameFormat)
	o.recurseRedact(o.Config)
}

func (o *ExporterReference) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ExporterReference) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ExporterReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ContextType != nil {
		toSerialize["contextType"] = o.ContextType
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Subjects != nil {
		toSerialize["subjects"] = o.Subjects
	}
	if o.SubjectRenameFormat != nil {
		toSerialize["subjectRenameFormat"] = o.SubjectRenameFormat
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableExporterReference struct {
	value *ExporterReference
	isSet bool
}

func (v NullableExporterReference) Get() *ExporterReference {
	return v.value
}

func (v *NullableExporterReference) Set(val *ExporterReference) {
	v.value = val
	v.isSet = true
}

func (v NullableExporterReference) IsSet() bool {
	return v.isSet
}

func (v *NullableExporterReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExporterReference(val *ExporterReference) *NullableExporterReference {
	return &NullableExporterReference{value: val, isSet: true}
}

func (v NullableExporterReference) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableExporterReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
