// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry APIs

REST API for the Schema Registry

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type DataEncryptionKeysV1Api interface {

	/*
		CreateDek Create a dek.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @return ApiCreateDekRequest
	*/
	CreateDek(ctx _context.Context, name string) ApiCreateDekRequest

	// CreateDekExecute executes the request
	//  @return Dek
	CreateDekExecute(r ApiCreateDekRequest) (Dek, *_nethttp.Response, error)

	/*
		DeleteDekVersion Delete a dek version.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @param subject Subject of the dek
		 @param version Version of the dek
		 @return ApiDeleteDekVersionRequest
	*/
	DeleteDekVersion(ctx _context.Context, name string, subject string, version string) ApiDeleteDekVersionRequest

	// DeleteDekVersionExecute executes the request
	DeleteDekVersionExecute(r ApiDeleteDekVersionRequest) (*_nethttp.Response, error)

	/*
		DeleteDekVersions Delete all versions of a dek.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @param subject Subject of the dek
		 @return ApiDeleteDekVersionsRequest
	*/
	DeleteDekVersions(ctx _context.Context, name string, subject string) ApiDeleteDekVersionsRequest

	// DeleteDekVersionsExecute executes the request
	DeleteDekVersionsExecute(r ApiDeleteDekVersionsRequest) (*_nethttp.Response, error)

	/*
		GetDek Get a dek by subject.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @param subject Subject of the dek
		 @return ApiGetDekRequest
	*/
	GetDek(ctx _context.Context, name string, subject string) ApiGetDekRequest

	// GetDekExecute executes the request
	//  @return Dek
	GetDekExecute(r ApiGetDekRequest) (Dek, *_nethttp.Response, error)

	/*
		GetDekByVersion Get a dek by subject and version.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @param subject Subject of the dek
		 @param version Version of the dek
		 @return ApiGetDekByVersionRequest
	*/
	GetDekByVersion(ctx _context.Context, name string, subject string, version string) ApiGetDekByVersionRequest

	// GetDekByVersionExecute executes the request
	//  @return Dek
	GetDekByVersionExecute(r ApiGetDekByVersionRequest) (Dek, *_nethttp.Response, error)

	/*
		GetDekSubjects Get a list of dek subjects.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @return ApiGetDekSubjectsRequest
	*/
	GetDekSubjects(ctx _context.Context, name string) ApiGetDekSubjectsRequest

	// GetDekSubjectsExecute executes the request
	//  @return []string
	GetDekSubjectsExecute(r ApiGetDekSubjectsRequest) ([]string, *_nethttp.Response, error)

	/*
		GetDekVersions List versions of dek.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @param subject Subject of the dek
		 @return ApiGetDekVersionsRequest
	*/
	GetDekVersions(ctx _context.Context, name string, subject string) ApiGetDekVersionsRequest

	// GetDekVersionsExecute executes the request
	//  @return []int32
	GetDekVersionsExecute(r ApiGetDekVersionsRequest) ([]int32, *_nethttp.Response, error)

	/*
		UndeleteDekVersion Undelete a dek version.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @param subject Subject of the dek
		 @param version Version of the dek
		 @return ApiUndeleteDekVersionRequest
	*/
	UndeleteDekVersion(ctx _context.Context, name string, subject string, version string) ApiUndeleteDekVersionRequest

	// UndeleteDekVersionExecute executes the request
	UndeleteDekVersionExecute(r ApiUndeleteDekVersionRequest) (*_nethttp.Response, error)

	/*
		UndeleteDekVersions Undelete all versions of a dek.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param name Name of the kek
		 @param subject Subject of the dek
		 @return ApiUndeleteDekVersionsRequest
	*/
	UndeleteDekVersions(ctx _context.Context, name string, subject string) ApiUndeleteDekVersionsRequest

	// UndeleteDekVersionsExecute executes the request
	UndeleteDekVersionsExecute(r ApiUndeleteDekVersionsRequest) (*_nethttp.Response, error)
}

// DataEncryptionKeysV1ApiService DataEncryptionKeysV1Api service
type DataEncryptionKeysV1ApiService service

type ApiCreateDekRequest struct {
	ctx              _context.Context
	ApiService       DataEncryptionKeysV1Api
	name             string
	createDekRequest *CreateDekRequest
}

// The create request
func (r ApiCreateDekRequest) CreateDekRequest(createDekRequest CreateDekRequest) ApiCreateDekRequest {
	r.createDekRequest = &createDekRequest
	return r
}

func (r ApiCreateDekRequest) Execute() (Dek, *_nethttp.Response, error) {
	return r.ApiService.CreateDekExecute(r)
}

/*
CreateDek Create a dek.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @return ApiCreateDekRequest
*/
func (a *DataEncryptionKeysV1ApiService) CreateDek(ctx _context.Context, name string) ApiCreateDekRequest {
	return ApiCreateDekRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

// Execute executes the request
//  @return Dek
func (a *DataEncryptionKeysV1ApiService) CreateDekExecute(r ApiCreateDekRequest) (Dek, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Dek
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.CreateDek")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.createDekRequest == nil {
		return localVarReturnValue, nil, reportError("createDekRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.schemaregistry.v1+json", "application/vnd.schemaregistry+json", "application/json", "application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.schemaregistry.v1+json", "application/vnd.schemaregistry+json; qs=0.9", "application/json; qs=0.5"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDekRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDekVersionRequest struct {
	ctx        _context.Context
	ApiService DataEncryptionKeysV1Api
	name       string
	subject    string
	version    string
	algorithm  *string
	permanent  *bool
}

// Algorithm of the dek
func (r ApiDeleteDekVersionRequest) Algorithm(algorithm string) ApiDeleteDekVersionRequest {
	r.algorithm = &algorithm
	return r
}

// Whether to perform a permanent delete
func (r ApiDeleteDekVersionRequest) Permanent(permanent bool) ApiDeleteDekVersionRequest {
	r.permanent = &permanent
	return r
}

func (r ApiDeleteDekVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDekVersionExecute(r)
}

/*
DeleteDekVersion Delete a dek version.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @param subject Subject of the dek
 @param version Version of the dek
 @return ApiDeleteDekVersionRequest
*/
func (a *DataEncryptionKeysV1ApiService) DeleteDekVersion(ctx _context.Context, name string, subject string, version string) ApiDeleteDekVersionRequest {
	return ApiDeleteDekVersionRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
		subject:    subject,
		version:    version,
	}
}

// Execute executes the request
func (a *DataEncryptionKeysV1ApiService) DeleteDekVersionExecute(r ApiDeleteDekVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.DeleteDekVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks/{subject}/versions/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subject"+"}", _neturl.PathEscape(parameterToString(r.subject, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.algorithm != nil {
		localVarQueryParams.Add("algorithm", parameterToString(*r.algorithm, ""))
	}
	if r.permanent != nil {
		localVarQueryParams.Add("permanent", parameterToString(*r.permanent, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDekVersionsRequest struct {
	ctx        _context.Context
	ApiService DataEncryptionKeysV1Api
	name       string
	subject    string
	algorithm  *string
	permanent  *bool
}

// Algorithm of the dek
func (r ApiDeleteDekVersionsRequest) Algorithm(algorithm string) ApiDeleteDekVersionsRequest {
	r.algorithm = &algorithm
	return r
}

// Whether to perform a permanent delete
func (r ApiDeleteDekVersionsRequest) Permanent(permanent bool) ApiDeleteDekVersionsRequest {
	r.permanent = &permanent
	return r
}

func (r ApiDeleteDekVersionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDekVersionsExecute(r)
}

/*
DeleteDekVersions Delete all versions of a dek.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @param subject Subject of the dek
 @return ApiDeleteDekVersionsRequest
*/
func (a *DataEncryptionKeysV1ApiService) DeleteDekVersions(ctx _context.Context, name string, subject string) ApiDeleteDekVersionsRequest {
	return ApiDeleteDekVersionsRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
		subject:    subject,
	}
}

// Execute executes the request
func (a *DataEncryptionKeysV1ApiService) DeleteDekVersionsExecute(r ApiDeleteDekVersionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.DeleteDekVersions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks/{subject}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subject"+"}", _neturl.PathEscape(parameterToString(r.subject, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.algorithm != nil {
		localVarQueryParams.Add("algorithm", parameterToString(*r.algorithm, ""))
	}
	if r.permanent != nil {
		localVarQueryParams.Add("permanent", parameterToString(*r.permanent, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDekRequest struct {
	ctx        _context.Context
	ApiService DataEncryptionKeysV1Api
	name       string
	subject    string
	algorithm  *string
	deleted    *bool
}

// Algorithm of the dek
func (r ApiGetDekRequest) Algorithm(algorithm string) ApiGetDekRequest {
	r.algorithm = &algorithm
	return r
}

// Whether to include deleted keys
func (r ApiGetDekRequest) Deleted(deleted bool) ApiGetDekRequest {
	r.deleted = &deleted
	return r
}

func (r ApiGetDekRequest) Execute() (Dek, *_nethttp.Response, error) {
	return r.ApiService.GetDekExecute(r)
}

/*
GetDek Get a dek by subject.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @param subject Subject of the dek
 @return ApiGetDekRequest
*/
func (a *DataEncryptionKeysV1ApiService) GetDek(ctx _context.Context, name string, subject string) ApiGetDekRequest {
	return ApiGetDekRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
		subject:    subject,
	}
}

// Execute executes the request
//  @return Dek
func (a *DataEncryptionKeysV1ApiService) GetDekExecute(r ApiGetDekRequest) (Dek, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Dek
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.GetDek")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks/{subject}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subject"+"}", _neturl.PathEscape(parameterToString(r.subject, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.algorithm != nil {
		localVarQueryParams.Add("algorithm", parameterToString(*r.algorithm, ""))
	}
	if r.deleted != nil {
		localVarQueryParams.Add("deleted", parameterToString(*r.deleted, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.schemaregistry.v1+json", "application/vnd.schemaregistry+json; qs=0.9", "application/json; qs=0.5"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDekByVersionRequest struct {
	ctx        _context.Context
	ApiService DataEncryptionKeysV1Api
	name       string
	subject    string
	version    string
	algorithm  *string
	deleted    *bool
}

// Algorithm of the dek
func (r ApiGetDekByVersionRequest) Algorithm(algorithm string) ApiGetDekByVersionRequest {
	r.algorithm = &algorithm
	return r
}

// Whether to include deleted keys
func (r ApiGetDekByVersionRequest) Deleted(deleted bool) ApiGetDekByVersionRequest {
	r.deleted = &deleted
	return r
}

func (r ApiGetDekByVersionRequest) Execute() (Dek, *_nethttp.Response, error) {
	return r.ApiService.GetDekByVersionExecute(r)
}

/*
GetDekByVersion Get a dek by subject and version.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @param subject Subject of the dek
 @param version Version of the dek
 @return ApiGetDekByVersionRequest
*/
func (a *DataEncryptionKeysV1ApiService) GetDekByVersion(ctx _context.Context, name string, subject string, version string) ApiGetDekByVersionRequest {
	return ApiGetDekByVersionRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
		subject:    subject,
		version:    version,
	}
}

// Execute executes the request
//  @return Dek
func (a *DataEncryptionKeysV1ApiService) GetDekByVersionExecute(r ApiGetDekByVersionRequest) (Dek, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Dek
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.GetDekByVersion")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks/{subject}/versions/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subject"+"}", _neturl.PathEscape(parameterToString(r.subject, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.algorithm != nil {
		localVarQueryParams.Add("algorithm", parameterToString(*r.algorithm, ""))
	}
	if r.deleted != nil {
		localVarQueryParams.Add("deleted", parameterToString(*r.deleted, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.schemaregistry.v1+json", "application/vnd.schemaregistry+json; qs=0.9", "application/json; qs=0.5"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDekSubjectsRequest struct {
	ctx        _context.Context
	ApiService DataEncryptionKeysV1Api
	name       string
	deleted    *bool
}

// Whether to include deleted keys
func (r ApiGetDekSubjectsRequest) Deleted(deleted bool) ApiGetDekSubjectsRequest {
	r.deleted = &deleted
	return r
}

func (r ApiGetDekSubjectsRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.GetDekSubjectsExecute(r)
}

/*
GetDekSubjects Get a list of dek subjects.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @return ApiGetDekSubjectsRequest
*/
func (a *DataEncryptionKeysV1ApiService) GetDekSubjects(ctx _context.Context, name string) ApiGetDekSubjectsRequest {
	return ApiGetDekSubjectsRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
	}
}

// Execute executes the request
//  @return []string
func (a *DataEncryptionKeysV1ApiService) GetDekSubjectsExecute(r ApiGetDekSubjectsRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.GetDekSubjects")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.deleted != nil {
		localVarQueryParams.Add("deleted", parameterToString(*r.deleted, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.schemaregistry.v1+json", "application/vnd.schemaregistry+json; qs=0.9", "application/json; qs=0.5"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDekVersionsRequest struct {
	ctx        _context.Context
	ApiService DataEncryptionKeysV1Api
	name       string
	subject    string
	algorithm  *string
	deleted    *bool
}

// Algorithm of the dek
func (r ApiGetDekVersionsRequest) Algorithm(algorithm string) ApiGetDekVersionsRequest {
	r.algorithm = &algorithm
	return r
}

// Whether to include deleted keys
func (r ApiGetDekVersionsRequest) Deleted(deleted bool) ApiGetDekVersionsRequest {
	r.deleted = &deleted
	return r
}

func (r ApiGetDekVersionsRequest) Execute() ([]int32, *_nethttp.Response, error) {
	return r.ApiService.GetDekVersionsExecute(r)
}

/*
GetDekVersions List versions of dek.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @param subject Subject of the dek
 @return ApiGetDekVersionsRequest
*/
func (a *DataEncryptionKeysV1ApiService) GetDekVersions(ctx _context.Context, name string, subject string) ApiGetDekVersionsRequest {
	return ApiGetDekVersionsRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
		subject:    subject,
	}
}

// Execute executes the request
//  @return []int32
func (a *DataEncryptionKeysV1ApiService) GetDekVersionsExecute(r ApiGetDekVersionsRequest) ([]int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.GetDekVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks/{subject}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subject"+"}", _neturl.PathEscape(parameterToString(r.subject, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.algorithm != nil {
		localVarQueryParams.Add("algorithm", parameterToString(*r.algorithm, ""))
	}
	if r.deleted != nil {
		localVarQueryParams.Add("deleted", parameterToString(*r.deleted, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.schemaregistry.v1+json", "application/vnd.schemaregistry+json; qs=0.9", "application/json; qs=0.5"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUndeleteDekVersionRequest struct {
	ctx        _context.Context
	ApiService DataEncryptionKeysV1Api
	name       string
	subject    string
	version    string
	algorithm  *string
}

// Algorithm of the dek
func (r ApiUndeleteDekVersionRequest) Algorithm(algorithm string) ApiUndeleteDekVersionRequest {
	r.algorithm = &algorithm
	return r
}

func (r ApiUndeleteDekVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UndeleteDekVersionExecute(r)
}

/*
UndeleteDekVersion Undelete a dek version.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @param subject Subject of the dek
 @param version Version of the dek
 @return ApiUndeleteDekVersionRequest
*/
func (a *DataEncryptionKeysV1ApiService) UndeleteDekVersion(ctx _context.Context, name string, subject string, version string) ApiUndeleteDekVersionRequest {
	return ApiUndeleteDekVersionRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
		subject:    subject,
		version:    version,
	}
}

// Execute executes the request
func (a *DataEncryptionKeysV1ApiService) UndeleteDekVersionExecute(r ApiUndeleteDekVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.UndeleteDekVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks/{subject}/versions/{version}/undelete"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subject"+"}", _neturl.PathEscape(parameterToString(r.subject, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.algorithm != nil {
		localVarQueryParams.Add("algorithm", parameterToString(*r.algorithm, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUndeleteDekVersionsRequest struct {
	ctx        _context.Context
	ApiService DataEncryptionKeysV1Api
	name       string
	subject    string
	algorithm  *string
}

// Algorithm of the dek
func (r ApiUndeleteDekVersionsRequest) Algorithm(algorithm string) ApiUndeleteDekVersionsRequest {
	r.algorithm = &algorithm
	return r
}

func (r ApiUndeleteDekVersionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UndeleteDekVersionsExecute(r)
}

/*
UndeleteDekVersions Undelete all versions of a dek.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the kek
 @param subject Subject of the dek
 @return ApiUndeleteDekVersionsRequest
*/
func (a *DataEncryptionKeysV1ApiService) UndeleteDekVersions(ctx _context.Context, name string, subject string) ApiUndeleteDekVersionsRequest {
	return ApiUndeleteDekVersionsRequest{
		ApiService: a,
		ctx:        ctx,
		name:       name,
		subject:    subject,
	}
}

// Execute executes the request
func (a *DataEncryptionKeysV1ApiService) UndeleteDekVersionsExecute(r ApiUndeleteDekVersionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataEncryptionKeysV1ApiService.UndeleteDekVersions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dek-registry/v1/keks/{name}/deks/{subject}/undelete"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subject"+"}", _neturl.PathEscape(parameterToString(r.subject, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.algorithm != nil {
		localVarQueryParams.Add("algorithm", parameterToString(*r.algorithm, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
