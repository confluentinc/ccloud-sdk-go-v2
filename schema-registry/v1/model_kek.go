// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry APIs

REST API for the Schema Registry

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// Kek struct for Kek
type Kek struct {
	Name     *string            `json:"name,omitempty"`
	KmsType  *string            `json:"kmsType,omitempty"`
	KmsKeyId *string            `json:"kmsKeyId,omitempty"`
	KmsProps *map[string]string `json:"kmsProps,omitempty"`
	Doc      *string            `json:"doc,omitempty"`
	Shared   *bool              `json:"shared,omitempty"`
	Ts       *int64             `json:"ts,omitempty"`
	Deleted  *bool              `json:"deleted,omitempty"`
	Error    *ErrorMessage      `json:"error,omitempty"`
}

// NewKek instantiates a new Kek object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKek() *Kek {
	this := Kek{}
	return &this
}

// NewKekWithDefaults instantiates a new Kek object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKekWithDefaults() *Kek {
	this := Kek{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Kek) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Kek) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Kek) SetName(v string) {
	o.Name = &v
}

// GetKmsType returns the KmsType field value if set, zero value otherwise.
func (o *Kek) GetKmsType() string {
	if o == nil || o.KmsType == nil {
		var ret string
		return ret
	}
	return *o.KmsType
}

// GetKmsTypeOk returns a tuple with the KmsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetKmsTypeOk() (*string, bool) {
	if o == nil || o.KmsType == nil {
		return nil, false
	}
	return o.KmsType, true
}

// HasKmsType returns a boolean if a field has been set.
func (o *Kek) HasKmsType() bool {
	if o != nil && o.KmsType != nil {
		return true
	}

	return false
}

// SetKmsType gets a reference to the given string and assigns it to the KmsType field.
func (o *Kek) SetKmsType(v string) {
	o.KmsType = &v
}

// GetKmsKeyId returns the KmsKeyId field value if set, zero value otherwise.
func (o *Kek) GetKmsKeyId() string {
	if o == nil || o.KmsKeyId == nil {
		var ret string
		return ret
	}
	return *o.KmsKeyId
}

// GetKmsKeyIdOk returns a tuple with the KmsKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetKmsKeyIdOk() (*string, bool) {
	if o == nil || o.KmsKeyId == nil {
		return nil, false
	}
	return o.KmsKeyId, true
}

// HasKmsKeyId returns a boolean if a field has been set.
func (o *Kek) HasKmsKeyId() bool {
	if o != nil && o.KmsKeyId != nil {
		return true
	}

	return false
}

// SetKmsKeyId gets a reference to the given string and assigns it to the KmsKeyId field.
func (o *Kek) SetKmsKeyId(v string) {
	o.KmsKeyId = &v
}

// GetKmsProps returns the KmsProps field value if set, zero value otherwise.
func (o *Kek) GetKmsProps() map[string]string {
	if o == nil || o.KmsProps == nil {
		var ret map[string]string
		return ret
	}
	return *o.KmsProps
}

// GetKmsPropsOk returns a tuple with the KmsProps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetKmsPropsOk() (*map[string]string, bool) {
	if o == nil || o.KmsProps == nil {
		return nil, false
	}
	return o.KmsProps, true
}

// HasKmsProps returns a boolean if a field has been set.
func (o *Kek) HasKmsProps() bool {
	if o != nil && o.KmsProps != nil {
		return true
	}

	return false
}

// SetKmsProps gets a reference to the given map[string]string and assigns it to the KmsProps field.
func (o *Kek) SetKmsProps(v map[string]string) {
	o.KmsProps = &v
}

// GetDoc returns the Doc field value if set, zero value otherwise.
func (o *Kek) GetDoc() string {
	if o == nil || o.Doc == nil {
		var ret string
		return ret
	}
	return *o.Doc
}

// GetDocOk returns a tuple with the Doc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetDocOk() (*string, bool) {
	if o == nil || o.Doc == nil {
		return nil, false
	}
	return o.Doc, true
}

// HasDoc returns a boolean if a field has been set.
func (o *Kek) HasDoc() bool {
	if o != nil && o.Doc != nil {
		return true
	}

	return false
}

// SetDoc gets a reference to the given string and assigns it to the Doc field.
func (o *Kek) SetDoc(v string) {
	o.Doc = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *Kek) GetShared() bool {
	if o == nil || o.Shared == nil {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetSharedOk() (*bool, bool) {
	if o == nil || o.Shared == nil {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *Kek) HasShared() bool {
	if o != nil && o.Shared != nil {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *Kek) SetShared(v bool) {
	o.Shared = &v
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *Kek) GetTs() int64 {
	if o == nil || o.Ts == nil {
		var ret int64
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetTsOk() (*int64, bool) {
	if o == nil || o.Ts == nil {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *Kek) HasTs() bool {
	if o != nil && o.Ts != nil {
		return true
	}

	return false
}

// SetTs gets a reference to the given int64 and assigns it to the Ts field.
func (o *Kek) SetTs(v int64) {
	o.Ts = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Kek) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Kek) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Kek) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Kek) GetError() ErrorMessage {
	if o == nil || o.Error == nil {
		var ret ErrorMessage
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kek) GetErrorOk() (*ErrorMessage, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Kek) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorMessage and assigns it to the Error field.
func (o *Kek) SetError(v ErrorMessage) {
	o.Error = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *Kek) Redact() {
	o.recurseRedact(o.Name)
	o.recurseRedact(o.KmsType)
	o.recurseRedact(o.KmsKeyId)
	o.recurseRedact(o.KmsProps)
	o.recurseRedact(o.Doc)
	o.recurseRedact(o.Shared)
	o.recurseRedact(o.Ts)
	o.recurseRedact(o.Deleted)
	o.recurseRedact(o.Error)
}

func (o *Kek) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o Kek) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o Kek) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.KmsType != nil {
		toSerialize["kmsType"] = o.KmsType
	}
	if o.KmsKeyId != nil {
		toSerialize["kmsKeyId"] = o.KmsKeyId
	}
	if o.KmsProps != nil {
		toSerialize["kmsProps"] = o.KmsProps
	}
	if o.Doc != nil {
		toSerialize["doc"] = o.Doc
	}
	if o.Shared != nil {
		toSerialize["shared"] = o.Shared
	}
	if o.Ts != nil {
		toSerialize["ts"] = o.Ts
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableKek struct {
	value *Kek
	isSet bool
}

func (v NullableKek) Get() *Kek {
	return v.value
}

func (v *NullableKek) Set(val *Kek) {
	v.value = val
	v.isSet = true
}

func (v NullableKek) IsSet() bool {
	return v.isSet
}

func (v *NullableKek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKek(val *Kek) *NullableKek {
	return &NullableKek{value: val, isSet: true}
}

func (v NullableKek) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableKek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
