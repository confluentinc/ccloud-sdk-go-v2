// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry APIs

REST API for the Schema Registry

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ExporterConfigResponse The map containing exporterâ€™s configurations
type ExporterConfigResponse struct {
	// Config SR URL
	SchemaRegistryUrl *string `json:"schema.registry.url,omitempty"`
	// Config SR Auth
	BasicAuthCredentialsSource *string `json:"basic.auth.credentials.source,omitempty"`
	// Config SR User Info
	BasicAuthUserInfo *string `json:"basic.auth.user.info,omitempty"`
}

// NewExporterConfigResponse instantiates a new ExporterConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExporterConfigResponse() *ExporterConfigResponse {
	this := ExporterConfigResponse{}
	return &this
}

// NewExporterConfigResponseWithDefaults instantiates a new ExporterConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExporterConfigResponseWithDefaults() *ExporterConfigResponse {
	this := ExporterConfigResponse{}
	return &this
}

// GetSchemaRegistryUrl returns the SchemaRegistryUrl field value if set, zero value otherwise.
func (o *ExporterConfigResponse) GetSchemaRegistryUrl() string {
	if o == nil || o.SchemaRegistryUrl == nil {
		var ret string
		return ret
	}
	return *o.SchemaRegistryUrl
}

// GetSchemaRegistryUrlOk returns a tuple with the SchemaRegistryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExporterConfigResponse) GetSchemaRegistryUrlOk() (*string, bool) {
	if o == nil || o.SchemaRegistryUrl == nil {
		return nil, false
	}
	return o.SchemaRegistryUrl, true
}

// HasSchemaRegistryUrl returns a boolean if a field has been set.
func (o *ExporterConfigResponse) HasSchemaRegistryUrl() bool {
	if o != nil && o.SchemaRegistryUrl != nil {
		return true
	}

	return false
}

// SetSchemaRegistryUrl gets a reference to the given string and assigns it to the SchemaRegistryUrl field.
func (o *ExporterConfigResponse) SetSchemaRegistryUrl(v string) {
	o.SchemaRegistryUrl = &v
}

// GetBasicAuthCredentialsSource returns the BasicAuthCredentialsSource field value if set, zero value otherwise.
func (o *ExporterConfigResponse) GetBasicAuthCredentialsSource() string {
	if o == nil || o.BasicAuthCredentialsSource == nil {
		var ret string
		return ret
	}
	return *o.BasicAuthCredentialsSource
}

// GetBasicAuthCredentialsSourceOk returns a tuple with the BasicAuthCredentialsSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExporterConfigResponse) GetBasicAuthCredentialsSourceOk() (*string, bool) {
	if o == nil || o.BasicAuthCredentialsSource == nil {
		return nil, false
	}
	return o.BasicAuthCredentialsSource, true
}

// HasBasicAuthCredentialsSource returns a boolean if a field has been set.
func (o *ExporterConfigResponse) HasBasicAuthCredentialsSource() bool {
	if o != nil && o.BasicAuthCredentialsSource != nil {
		return true
	}

	return false
}

// SetBasicAuthCredentialsSource gets a reference to the given string and assigns it to the BasicAuthCredentialsSource field.
func (o *ExporterConfigResponse) SetBasicAuthCredentialsSource(v string) {
	o.BasicAuthCredentialsSource = &v
}

// GetBasicAuthUserInfo returns the BasicAuthUserInfo field value if set, zero value otherwise.
func (o *ExporterConfigResponse) GetBasicAuthUserInfo() string {
	if o == nil || o.BasicAuthUserInfo == nil {
		var ret string
		return ret
	}
	return *o.BasicAuthUserInfo
}

// GetBasicAuthUserInfoOk returns a tuple with the BasicAuthUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExporterConfigResponse) GetBasicAuthUserInfoOk() (*string, bool) {
	if o == nil || o.BasicAuthUserInfo == nil {
		return nil, false
	}
	return o.BasicAuthUserInfo, true
}

// HasBasicAuthUserInfo returns a boolean if a field has been set.
func (o *ExporterConfigResponse) HasBasicAuthUserInfo() bool {
	if o != nil && o.BasicAuthUserInfo != nil {
		return true
	}

	return false
}

// SetBasicAuthUserInfo gets a reference to the given string and assigns it to the BasicAuthUserInfo field.
func (o *ExporterConfigResponse) SetBasicAuthUserInfo(v string) {
	o.BasicAuthUserInfo = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ExporterConfigResponse) Redact() {
	o.recurseRedact(o.SchemaRegistryUrl)
	o.recurseRedact(o.BasicAuthCredentialsSource)
	o.recurseRedact(o.BasicAuthUserInfo)
}

func (o *ExporterConfigResponse) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ExporterConfigResponse) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ExporterConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SchemaRegistryUrl != nil {
		toSerialize["schema.registry.url"] = o.SchemaRegistryUrl
	}
	if o.BasicAuthCredentialsSource != nil {
		toSerialize["basic.auth.credentials.source"] = o.BasicAuthCredentialsSource
	}
	if o.BasicAuthUserInfo != nil {
		toSerialize["basic.auth.user.info"] = o.BasicAuthUserInfo
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableExporterConfigResponse struct {
	value *ExporterConfigResponse
	isSet bool
}

func (v NullableExporterConfigResponse) Get() *ExporterConfigResponse {
	return v.value
}

func (v *NullableExporterConfigResponse) Set(val *ExporterConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExporterConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExporterConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExporterConfigResponse(val *ExporterConfigResponse) *NullableExporterConfigResponse {
	return &NullableExporterConfigResponse{value: val, isSet: true}
}

func (v NullableExporterConfigResponse) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableExporterConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
