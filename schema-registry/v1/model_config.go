// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry APIs

REST API for the Schema Registry

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// Config Config
type Config struct {
	// If alias is specified, then this subject is an alias for the subject named by the alias. That means that any reference to this subject will be replaced by the alias.
	Alias *string `json:"alias,omitempty"`
	// If true, then schemas are automatically normalized when registered or when passed during lookups. This means that clients do not have to pass the \"normalize\" query parameter to have normalization occur.
	Normalize *bool `json:"normalize,omitempty"`
	// Compatibility Level
	CompatibilityLevel *string `json:"compatibilityLevel,omitempty"`
	// Only schemas that belong to the same compatibility group will be checked for compatibility.
	CompatibilityGroup *string                 `json:"compatibilityGroup,omitempty"`
	DefaultMetadata    *ConfigDefaultMetadata  `json:"defaultMetadata,omitempty"`
	OverrideMetadata   *ConfigOverrideMetadata `json:"overrideMetadata,omitempty"`
	DefaultRuleSet     *ConfigDefaultRuleSet   `json:"defaultRuleSet,omitempty"`
	OverrideRuleSet    *ConfigOverrideRuleSet  `json:"overrideRuleSet,omitempty"`
}

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig() *Config {
	this := Config{}
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *Config) GetAlias() string {
	if o == nil || o.Alias == nil {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetAliasOk() (*string, bool) {
	if o == nil || o.Alias == nil {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *Config) HasAlias() bool {
	if o != nil && o.Alias != nil {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *Config) SetAlias(v string) {
	o.Alias = &v
}

// GetNormalize returns the Normalize field value if set, zero value otherwise.
func (o *Config) GetNormalize() bool {
	if o == nil || o.Normalize == nil {
		var ret bool
		return ret
	}
	return *o.Normalize
}

// GetNormalizeOk returns a tuple with the Normalize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetNormalizeOk() (*bool, bool) {
	if o == nil || o.Normalize == nil {
		return nil, false
	}
	return o.Normalize, true
}

// HasNormalize returns a boolean if a field has been set.
func (o *Config) HasNormalize() bool {
	if o != nil && o.Normalize != nil {
		return true
	}

	return false
}

// SetNormalize gets a reference to the given bool and assigns it to the Normalize field.
func (o *Config) SetNormalize(v bool) {
	o.Normalize = &v
}

// GetCompatibilityLevel returns the CompatibilityLevel field value if set, zero value otherwise.
func (o *Config) GetCompatibilityLevel() string {
	if o == nil || o.CompatibilityLevel == nil {
		var ret string
		return ret
	}
	return *o.CompatibilityLevel
}

// GetCompatibilityLevelOk returns a tuple with the CompatibilityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetCompatibilityLevelOk() (*string, bool) {
	if o == nil || o.CompatibilityLevel == nil {
		return nil, false
	}
	return o.CompatibilityLevel, true
}

// HasCompatibilityLevel returns a boolean if a field has been set.
func (o *Config) HasCompatibilityLevel() bool {
	if o != nil && o.CompatibilityLevel != nil {
		return true
	}

	return false
}

// SetCompatibilityLevel gets a reference to the given string and assigns it to the CompatibilityLevel field.
func (o *Config) SetCompatibilityLevel(v string) {
	o.CompatibilityLevel = &v
}

// GetCompatibilityGroup returns the CompatibilityGroup field value if set, zero value otherwise.
func (o *Config) GetCompatibilityGroup() string {
	if o == nil || o.CompatibilityGroup == nil {
		var ret string
		return ret
	}
	return *o.CompatibilityGroup
}

// GetCompatibilityGroupOk returns a tuple with the CompatibilityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetCompatibilityGroupOk() (*string, bool) {
	if o == nil || o.CompatibilityGroup == nil {
		return nil, false
	}
	return o.CompatibilityGroup, true
}

// HasCompatibilityGroup returns a boolean if a field has been set.
func (o *Config) HasCompatibilityGroup() bool {
	if o != nil && o.CompatibilityGroup != nil {
		return true
	}

	return false
}

// SetCompatibilityGroup gets a reference to the given string and assigns it to the CompatibilityGroup field.
func (o *Config) SetCompatibilityGroup(v string) {
	o.CompatibilityGroup = &v
}

// GetDefaultMetadata returns the DefaultMetadata field value if set, zero value otherwise.
func (o *Config) GetDefaultMetadata() ConfigDefaultMetadata {
	if o == nil || o.DefaultMetadata == nil {
		var ret ConfigDefaultMetadata
		return ret
	}
	return *o.DefaultMetadata
}

// GetDefaultMetadataOk returns a tuple with the DefaultMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetDefaultMetadataOk() (*ConfigDefaultMetadata, bool) {
	if o == nil || o.DefaultMetadata == nil {
		return nil, false
	}
	return o.DefaultMetadata, true
}

// HasDefaultMetadata returns a boolean if a field has been set.
func (o *Config) HasDefaultMetadata() bool {
	if o != nil && o.DefaultMetadata != nil {
		return true
	}

	return false
}

// SetDefaultMetadata gets a reference to the given ConfigDefaultMetadata and assigns it to the DefaultMetadata field.
func (o *Config) SetDefaultMetadata(v ConfigDefaultMetadata) {
	o.DefaultMetadata = &v
}

// GetOverrideMetadata returns the OverrideMetadata field value if set, zero value otherwise.
func (o *Config) GetOverrideMetadata() ConfigOverrideMetadata {
	if o == nil || o.OverrideMetadata == nil {
		var ret ConfigOverrideMetadata
		return ret
	}
	return *o.OverrideMetadata
}

// GetOverrideMetadataOk returns a tuple with the OverrideMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetOverrideMetadataOk() (*ConfigOverrideMetadata, bool) {
	if o == nil || o.OverrideMetadata == nil {
		return nil, false
	}
	return o.OverrideMetadata, true
}

// HasOverrideMetadata returns a boolean if a field has been set.
func (o *Config) HasOverrideMetadata() bool {
	if o != nil && o.OverrideMetadata != nil {
		return true
	}

	return false
}

// SetOverrideMetadata gets a reference to the given ConfigOverrideMetadata and assigns it to the OverrideMetadata field.
func (o *Config) SetOverrideMetadata(v ConfigOverrideMetadata) {
	o.OverrideMetadata = &v
}

// GetDefaultRuleSet returns the DefaultRuleSet field value if set, zero value otherwise.
func (o *Config) GetDefaultRuleSet() ConfigDefaultRuleSet {
	if o == nil || o.DefaultRuleSet == nil {
		var ret ConfigDefaultRuleSet
		return ret
	}
	return *o.DefaultRuleSet
}

// GetDefaultRuleSetOk returns a tuple with the DefaultRuleSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetDefaultRuleSetOk() (*ConfigDefaultRuleSet, bool) {
	if o == nil || o.DefaultRuleSet == nil {
		return nil, false
	}
	return o.DefaultRuleSet, true
}

// HasDefaultRuleSet returns a boolean if a field has been set.
func (o *Config) HasDefaultRuleSet() bool {
	if o != nil && o.DefaultRuleSet != nil {
		return true
	}

	return false
}

// SetDefaultRuleSet gets a reference to the given ConfigDefaultRuleSet and assigns it to the DefaultRuleSet field.
func (o *Config) SetDefaultRuleSet(v ConfigDefaultRuleSet) {
	o.DefaultRuleSet = &v
}

// GetOverrideRuleSet returns the OverrideRuleSet field value if set, zero value otherwise.
func (o *Config) GetOverrideRuleSet() ConfigOverrideRuleSet {
	if o == nil || o.OverrideRuleSet == nil {
		var ret ConfigOverrideRuleSet
		return ret
	}
	return *o.OverrideRuleSet
}

// GetOverrideRuleSetOk returns a tuple with the OverrideRuleSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetOverrideRuleSetOk() (*ConfigOverrideRuleSet, bool) {
	if o == nil || o.OverrideRuleSet == nil {
		return nil, false
	}
	return o.OverrideRuleSet, true
}

// HasOverrideRuleSet returns a boolean if a field has been set.
func (o *Config) HasOverrideRuleSet() bool {
	if o != nil && o.OverrideRuleSet != nil {
		return true
	}

	return false
}

// SetOverrideRuleSet gets a reference to the given ConfigOverrideRuleSet and assigns it to the OverrideRuleSet field.
func (o *Config) SetOverrideRuleSet(v ConfigOverrideRuleSet) {
	o.OverrideRuleSet = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *Config) Redact() {
	o.recurseRedact(o.Alias)
	o.recurseRedact(o.Normalize)
	o.recurseRedact(o.CompatibilityLevel)
	o.recurseRedact(o.CompatibilityGroup)
	o.recurseRedact(o.DefaultMetadata)
	o.recurseRedact(o.OverrideMetadata)
	o.recurseRedact(o.DefaultRuleSet)
	o.recurseRedact(o.OverrideRuleSet)
}

func (o *Config) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o Config) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o Config) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Alias != nil {
		toSerialize["alias"] = o.Alias
	}
	if o.Normalize != nil {
		toSerialize["normalize"] = o.Normalize
	}
	if o.CompatibilityLevel != nil {
		toSerialize["compatibilityLevel"] = o.CompatibilityLevel
	}
	if o.CompatibilityGroup != nil {
		toSerialize["compatibilityGroup"] = o.CompatibilityGroup
	}
	if o.DefaultMetadata != nil {
		toSerialize["defaultMetadata"] = o.DefaultMetadata
	}
	if o.OverrideMetadata != nil {
		toSerialize["overrideMetadata"] = o.OverrideMetadata
	}
	if o.DefaultRuleSet != nil {
		toSerialize["defaultRuleSet"] = o.DefaultRuleSet
	}
	if o.OverrideRuleSet != nil {
		toSerialize["overrideRuleSet"] = o.OverrideRuleSet
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
