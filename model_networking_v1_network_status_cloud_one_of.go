/*
 * Network API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1-alpha1
 * Contact: cire-traffic@confluent.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccloud

import (
	"encoding/json"
	"fmt"
)

// NetworkingV1NetworkStatusCloudOneOf - struct for NetworkingV1NetworkStatusCloudOneOf
type NetworkingV1NetworkStatusCloudOneOf struct {
	NetworkingV1AwsNetwork *NetworkingV1AwsNetwork
	NetworkingV1AzureNetwork *NetworkingV1AzureNetwork
	NetworkingV1GcpNetwork *NetworkingV1GcpNetwork
}

// NetworkingV1AwsNetworkAsNetworkingV1NetworkStatusCloudOneOf is a convenience function that returns NetworkingV1AwsNetwork wrapped in NetworkingV1NetworkStatusCloudOneOf
func NetworkingV1AwsNetworkAsNetworkingV1NetworkStatusCloudOneOf(v *NetworkingV1AwsNetwork) NetworkingV1NetworkStatusCloudOneOf {
	return NetworkingV1NetworkStatusCloudOneOf{ NetworkingV1AwsNetwork: v}
}

// NetworkingV1AzureNetworkAsNetworkingV1NetworkStatusCloudOneOf is a convenience function that returns NetworkingV1AzureNetwork wrapped in NetworkingV1NetworkStatusCloudOneOf
func NetworkingV1AzureNetworkAsNetworkingV1NetworkStatusCloudOneOf(v *NetworkingV1AzureNetwork) NetworkingV1NetworkStatusCloudOneOf {
	return NetworkingV1NetworkStatusCloudOneOf{ NetworkingV1AzureNetwork: v}
}

// NetworkingV1GcpNetworkAsNetworkingV1NetworkStatusCloudOneOf is a convenience function that returns NetworkingV1GcpNetwork wrapped in NetworkingV1NetworkStatusCloudOneOf
func NetworkingV1GcpNetworkAsNetworkingV1NetworkStatusCloudOneOf(v *NetworkingV1GcpNetwork) NetworkingV1NetworkStatusCloudOneOf {
	return NetworkingV1NetworkStatusCloudOneOf{ NetworkingV1GcpNetwork: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkingV1NetworkStatusCloudOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'AWS'
	if jsonDict["kind"] == "AWS" {
		// try to unmarshal JSON data into NetworkingV1AwsNetwork
		err = json.Unmarshal(data, &dst.NetworkingV1AwsNetwork)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsNetwork, return on the first match
		} else {
			dst.NetworkingV1AwsNetwork = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1NetworkStatusCloudOneOf as NetworkingV1AwsNetwork: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AZURE'
	if jsonDict["kind"] == "AZURE" {
		// try to unmarshal JSON data into NetworkingV1AzureNetwork
		err = json.Unmarshal(data, &dst.NetworkingV1AzureNetwork)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzureNetwork, return on the first match
		} else {
			dst.NetworkingV1AzureNetwork = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1NetworkStatusCloudOneOf as NetworkingV1AzureNetwork: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCP'
	if jsonDict["kind"] == "GCP" {
		// try to unmarshal JSON data into NetworkingV1GcpNetwork
		err = json.Unmarshal(data, &dst.NetworkingV1GcpNetwork)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpNetwork, return on the first match
		} else {
			dst.NetworkingV1GcpNetwork = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1NetworkStatusCloudOneOf as NetworkingV1GcpNetwork: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AwsNetwork'
	if jsonDict["kind"] == "networking.v1.AwsNetwork" {
		// try to unmarshal JSON data into NetworkingV1AwsNetwork
		err = json.Unmarshal(data, &dst.NetworkingV1AwsNetwork)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsNetwork, return on the first match
		} else {
			dst.NetworkingV1AwsNetwork = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1NetworkStatusCloudOneOf as NetworkingV1AwsNetwork: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AzureNetwork'
	if jsonDict["kind"] == "networking.v1.AzureNetwork" {
		// try to unmarshal JSON data into NetworkingV1AzureNetwork
		err = json.Unmarshal(data, &dst.NetworkingV1AzureNetwork)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzureNetwork, return on the first match
		} else {
			dst.NetworkingV1AzureNetwork = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1NetworkStatusCloudOneOf as NetworkingV1AzureNetwork: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.GcpNetwork'
	if jsonDict["kind"] == "networking.v1.GcpNetwork" {
		// try to unmarshal JSON data into NetworkingV1GcpNetwork
		err = json.Unmarshal(data, &dst.NetworkingV1GcpNetwork)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpNetwork, return on the first match
		} else {
			dst.NetworkingV1GcpNetwork = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1NetworkStatusCloudOneOf as NetworkingV1GcpNetwork: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkingV1NetworkStatusCloudOneOf) MarshalJSON() ([]byte, error) {
	if src.NetworkingV1AwsNetwork != nil {
		return json.Marshal(&src.NetworkingV1AwsNetwork)
	}

	if src.NetworkingV1AzureNetwork != nil {
		return json.Marshal(&src.NetworkingV1AzureNetwork)
	}

	if src.NetworkingV1GcpNetwork != nil {
		return json.Marshal(&src.NetworkingV1GcpNetwork)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkingV1NetworkStatusCloudOneOf) GetActualInstance() (interface{}) {
	if obj.NetworkingV1AwsNetwork != nil {
		return obj.NetworkingV1AwsNetwork
	}

	if obj.NetworkingV1AzureNetwork != nil {
		return obj.NetworkingV1AzureNetwork
	}

	if obj.NetworkingV1GcpNetwork != nil {
		return obj.NetworkingV1GcpNetwork
	}

	// all schemas are nil
	return nil
}

type NullableNetworkingV1NetworkStatusCloudOneOf struct {
	value *NetworkingV1NetworkStatusCloudOneOf
	isSet bool
}

func (v NullableNetworkingV1NetworkStatusCloudOneOf) Get() *NetworkingV1NetworkStatusCloudOneOf {
	return v.value
}

func (v *NullableNetworkingV1NetworkStatusCloudOneOf) Set(val *NetworkingV1NetworkStatusCloudOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingV1NetworkStatusCloudOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingV1NetworkStatusCloudOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingV1NetworkStatusCloudOneOf(val *NetworkingV1NetworkStatusCloudOneOf) *NullableNetworkingV1NetworkStatusCloudOneOf {
	return &NullableNetworkingV1NetworkStatusCloudOneOf{value: val, isSet: true}
}

func (v NullableNetworkingV1NetworkStatusCloudOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkingV1NetworkStatusCloudOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


