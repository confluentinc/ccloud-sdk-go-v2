// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// TableflowV1CatalogIntegrationUpdateSpecConfigOneOf - struct for TableflowV1CatalogIntegrationUpdateSpecConfigOneOf
type TableflowV1CatalogIntegrationUpdateSpecConfigOneOf struct {
	TableflowV1CatalogIntegrationAwsGlueUpdateSpec   *TableflowV1CatalogIntegrationAwsGlueUpdateSpec
	TableflowV1CatalogIntegrationSnowflakeUpdateSpec *TableflowV1CatalogIntegrationSnowflakeUpdateSpec
	TableflowV1CatalogIntegrationUnityUpdateSpec     *TableflowV1CatalogIntegrationUnityUpdateSpec
}

// TableflowV1CatalogIntegrationAwsGlueUpdateSpecAsTableflowV1CatalogIntegrationUpdateSpecConfigOneOf is a convenience function that returns TableflowV1CatalogIntegrationAwsGlueUpdateSpec wrapped in TableflowV1CatalogIntegrationUpdateSpecConfigOneOf
func TableflowV1CatalogIntegrationAwsGlueUpdateSpecAsTableflowV1CatalogIntegrationUpdateSpecConfigOneOf(v *TableflowV1CatalogIntegrationAwsGlueUpdateSpec) TableflowV1CatalogIntegrationUpdateSpecConfigOneOf {
	return TableflowV1CatalogIntegrationUpdateSpecConfigOneOf{TableflowV1CatalogIntegrationAwsGlueUpdateSpec: v}
}

// TableflowV1CatalogIntegrationSnowflakeUpdateSpecAsTableflowV1CatalogIntegrationUpdateSpecConfigOneOf is a convenience function that returns TableflowV1CatalogIntegrationSnowflakeUpdateSpec wrapped in TableflowV1CatalogIntegrationUpdateSpecConfigOneOf
func TableflowV1CatalogIntegrationSnowflakeUpdateSpecAsTableflowV1CatalogIntegrationUpdateSpecConfigOneOf(v *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) TableflowV1CatalogIntegrationUpdateSpecConfigOneOf {
	return TableflowV1CatalogIntegrationUpdateSpecConfigOneOf{TableflowV1CatalogIntegrationSnowflakeUpdateSpec: v}
}

// TableflowV1CatalogIntegrationUnityUpdateSpecAsTableflowV1CatalogIntegrationUpdateSpecConfigOneOf is a convenience function that returns TableflowV1CatalogIntegrationUnityUpdateSpec wrapped in TableflowV1CatalogIntegrationUpdateSpecConfigOneOf
func TableflowV1CatalogIntegrationUnityUpdateSpecAsTableflowV1CatalogIntegrationUpdateSpecConfigOneOf(v *TableflowV1CatalogIntegrationUnityUpdateSpec) TableflowV1CatalogIntegrationUpdateSpecConfigOneOf {
	return TableflowV1CatalogIntegrationUpdateSpecConfigOneOf{TableflowV1CatalogIntegrationUnityUpdateSpec: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TableflowV1CatalogIntegrationUpdateSpecConfigOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsGlue'
	if jsonDict["kind"] == "AwsGlue" {
		// try to unmarshal JSON data into TableflowV1CatalogIntegrationAwsGlueUpdateSpec
		err = json.Unmarshal(data, &dst.TableflowV1CatalogIntegrationAwsGlueUpdateSpec)
		if err == nil {
			return nil // data stored in dst.TableflowV1CatalogIntegrationAwsGlueUpdateSpec, return on the first match
		} else {
			dst.TableflowV1CatalogIntegrationAwsGlueUpdateSpec = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1CatalogIntegrationUpdateSpecConfigOneOf as TableflowV1CatalogIntegrationAwsGlueUpdateSpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Snowflake'
	if jsonDict["kind"] == "Snowflake" {
		// try to unmarshal JSON data into TableflowV1CatalogIntegrationSnowflakeUpdateSpec
		err = json.Unmarshal(data, &dst.TableflowV1CatalogIntegrationSnowflakeUpdateSpec)
		if err == nil {
			return nil // data stored in dst.TableflowV1CatalogIntegrationSnowflakeUpdateSpec, return on the first match
		} else {
			dst.TableflowV1CatalogIntegrationSnowflakeUpdateSpec = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1CatalogIntegrationUpdateSpecConfigOneOf as TableflowV1CatalogIntegrationSnowflakeUpdateSpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Unity'
	if jsonDict["kind"] == "Unity" {
		// try to unmarshal JSON data into TableflowV1CatalogIntegrationUnityUpdateSpec
		err = json.Unmarshal(data, &dst.TableflowV1CatalogIntegrationUnityUpdateSpec)
		if err == nil {
			return nil // data stored in dst.TableflowV1CatalogIntegrationUnityUpdateSpec, return on the first match
		} else {
			dst.TableflowV1CatalogIntegrationUnityUpdateSpec = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1CatalogIntegrationUpdateSpecConfigOneOf as TableflowV1CatalogIntegrationUnityUpdateSpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'tableflow.v1.CatalogIntegrationAwsGlueUpdateSpec'
	if jsonDict["kind"] == "tableflow.v1.CatalogIntegrationAwsGlueUpdateSpec" {
		// try to unmarshal JSON data into TableflowV1CatalogIntegrationAwsGlueUpdateSpec
		err = json.Unmarshal(data, &dst.TableflowV1CatalogIntegrationAwsGlueUpdateSpec)
		if err == nil {
			return nil // data stored in dst.TableflowV1CatalogIntegrationAwsGlueUpdateSpec, return on the first match
		} else {
			dst.TableflowV1CatalogIntegrationAwsGlueUpdateSpec = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1CatalogIntegrationUpdateSpecConfigOneOf as TableflowV1CatalogIntegrationAwsGlueUpdateSpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'tableflow.v1.CatalogIntegrationSnowflakeUpdateSpec'
	if jsonDict["kind"] == "tableflow.v1.CatalogIntegrationSnowflakeUpdateSpec" {
		// try to unmarshal JSON data into TableflowV1CatalogIntegrationSnowflakeUpdateSpec
		err = json.Unmarshal(data, &dst.TableflowV1CatalogIntegrationSnowflakeUpdateSpec)
		if err == nil {
			return nil // data stored in dst.TableflowV1CatalogIntegrationSnowflakeUpdateSpec, return on the first match
		} else {
			dst.TableflowV1CatalogIntegrationSnowflakeUpdateSpec = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1CatalogIntegrationUpdateSpecConfigOneOf as TableflowV1CatalogIntegrationSnowflakeUpdateSpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'tableflow.v1.CatalogIntegrationUnityUpdateSpec'
	if jsonDict["kind"] == "tableflow.v1.CatalogIntegrationUnityUpdateSpec" {
		// try to unmarshal JSON data into TableflowV1CatalogIntegrationUnityUpdateSpec
		err = json.Unmarshal(data, &dst.TableflowV1CatalogIntegrationUnityUpdateSpec)
		if err == nil {
			return nil // data stored in dst.TableflowV1CatalogIntegrationUnityUpdateSpec, return on the first match
		} else {
			dst.TableflowV1CatalogIntegrationUnityUpdateSpec = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1CatalogIntegrationUpdateSpecConfigOneOf as TableflowV1CatalogIntegrationUnityUpdateSpec: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TableflowV1CatalogIntegrationUpdateSpecConfigOneOf) MarshalJSON() ([]byte, error) {
	if src.TableflowV1CatalogIntegrationAwsGlueUpdateSpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.TableflowV1CatalogIntegrationAwsGlueUpdateSpec)
		return buffer.Bytes(), err
	}

	if src.TableflowV1CatalogIntegrationSnowflakeUpdateSpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.TableflowV1CatalogIntegrationSnowflakeUpdateSpec)
		return buffer.Bytes(), err
	}

	if src.TableflowV1CatalogIntegrationUnityUpdateSpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.TableflowV1CatalogIntegrationUnityUpdateSpec)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TableflowV1CatalogIntegrationUpdateSpecConfigOneOf) GetActualInstance() interface{} {
	if obj.TableflowV1CatalogIntegrationAwsGlueUpdateSpec != nil {
		return obj.TableflowV1CatalogIntegrationAwsGlueUpdateSpec
	}

	if obj.TableflowV1CatalogIntegrationSnowflakeUpdateSpec != nil {
		return obj.TableflowV1CatalogIntegrationSnowflakeUpdateSpec
	}

	if obj.TableflowV1CatalogIntegrationUnityUpdateSpec != nil {
		return obj.TableflowV1CatalogIntegrationUnityUpdateSpec
	}

	// all schemas are nil
	return nil
}

type NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf struct {
	value *TableflowV1CatalogIntegrationUpdateSpecConfigOneOf
	isSet bool
}

func (v NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf) Get() *TableflowV1CatalogIntegrationUpdateSpecConfigOneOf {
	return v.value
}

func (v *NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf) Set(val *TableflowV1CatalogIntegrationUpdateSpecConfigOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf(val *TableflowV1CatalogIntegrationUpdateSpecConfigOneOf) *NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf {
	return &NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf{value: val, isSet: true}
}

func (v NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableTableflowV1CatalogIntegrationUpdateSpecConfigOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
