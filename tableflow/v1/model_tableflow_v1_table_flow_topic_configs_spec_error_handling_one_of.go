// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf - struct for TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf
type TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf struct {
	TableflowV1ErrorHandlingLog     *TableflowV1ErrorHandlingLog
	TableflowV1ErrorHandlingSkip    *TableflowV1ErrorHandlingSkip
	TableflowV1ErrorHandlingSuspend *TableflowV1ErrorHandlingSuspend
}

// TableflowV1ErrorHandlingLogAsTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf is a convenience function that returns TableflowV1ErrorHandlingLog wrapped in TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf
func TableflowV1ErrorHandlingLogAsTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf(v *TableflowV1ErrorHandlingLog) TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf {
	return TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf{TableflowV1ErrorHandlingLog: v}
}

// TableflowV1ErrorHandlingSkipAsTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf is a convenience function that returns TableflowV1ErrorHandlingSkip wrapped in TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf
func TableflowV1ErrorHandlingSkipAsTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf(v *TableflowV1ErrorHandlingSkip) TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf {
	return TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf{TableflowV1ErrorHandlingSkip: v}
}

// TableflowV1ErrorHandlingSuspendAsTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf is a convenience function that returns TableflowV1ErrorHandlingSuspend wrapped in TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf
func TableflowV1ErrorHandlingSuspendAsTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf(v *TableflowV1ErrorHandlingSuspend) TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf {
	return TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf{TableflowV1ErrorHandlingSuspend: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'LOG'
	if jsonDict["mode"] == "LOG" {
		// try to unmarshal JSON data into TableflowV1ErrorHandlingLog
		err = json.Unmarshal(data, &dst.TableflowV1ErrorHandlingLog)
		if err == nil {
			return nil // data stored in dst.TableflowV1ErrorHandlingLog, return on the first match
		} else {
			dst.TableflowV1ErrorHandlingLog = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf as TableflowV1ErrorHandlingLog: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SKIP'
	if jsonDict["mode"] == "SKIP" {
		// try to unmarshal JSON data into TableflowV1ErrorHandlingSkip
		err = json.Unmarshal(data, &dst.TableflowV1ErrorHandlingSkip)
		if err == nil {
			return nil // data stored in dst.TableflowV1ErrorHandlingSkip, return on the first match
		} else {
			dst.TableflowV1ErrorHandlingSkip = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf as TableflowV1ErrorHandlingSkip: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SUSPEND'
	if jsonDict["mode"] == "SUSPEND" {
		// try to unmarshal JSON data into TableflowV1ErrorHandlingSuspend
		err = json.Unmarshal(data, &dst.TableflowV1ErrorHandlingSuspend)
		if err == nil {
			return nil // data stored in dst.TableflowV1ErrorHandlingSuspend, return on the first match
		} else {
			dst.TableflowV1ErrorHandlingSuspend = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf as TableflowV1ErrorHandlingSuspend: %s", err.Error())
		}
	}

	// check if the discriminator value is 'tableflow.v1.ErrorHandlingLog'
	if jsonDict["mode"] == "tableflow.v1.ErrorHandlingLog" {
		// try to unmarshal JSON data into TableflowV1ErrorHandlingLog
		err = json.Unmarshal(data, &dst.TableflowV1ErrorHandlingLog)
		if err == nil {
			return nil // data stored in dst.TableflowV1ErrorHandlingLog, return on the first match
		} else {
			dst.TableflowV1ErrorHandlingLog = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf as TableflowV1ErrorHandlingLog: %s", err.Error())
		}
	}

	// check if the discriminator value is 'tableflow.v1.ErrorHandlingSkip'
	if jsonDict["mode"] == "tableflow.v1.ErrorHandlingSkip" {
		// try to unmarshal JSON data into TableflowV1ErrorHandlingSkip
		err = json.Unmarshal(data, &dst.TableflowV1ErrorHandlingSkip)
		if err == nil {
			return nil // data stored in dst.TableflowV1ErrorHandlingSkip, return on the first match
		} else {
			dst.TableflowV1ErrorHandlingSkip = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf as TableflowV1ErrorHandlingSkip: %s", err.Error())
		}
	}

	// check if the discriminator value is 'tableflow.v1.ErrorHandlingSuspend'
	if jsonDict["mode"] == "tableflow.v1.ErrorHandlingSuspend" {
		// try to unmarshal JSON data into TableflowV1ErrorHandlingSuspend
		err = json.Unmarshal(data, &dst.TableflowV1ErrorHandlingSuspend)
		if err == nil {
			return nil // data stored in dst.TableflowV1ErrorHandlingSuspend, return on the first match
		} else {
			dst.TableflowV1ErrorHandlingSuspend = nil
			return fmt.Errorf("Failed to unmarshal TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf as TableflowV1ErrorHandlingSuspend: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) MarshalJSON() ([]byte, error) {
	if src.TableflowV1ErrorHandlingLog != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.TableflowV1ErrorHandlingLog)
		return buffer.Bytes(), err
	}

	if src.TableflowV1ErrorHandlingSkip != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.TableflowV1ErrorHandlingSkip)
		return buffer.Bytes(), err
	}

	if src.TableflowV1ErrorHandlingSuspend != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.TableflowV1ErrorHandlingSuspend)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) GetActualInstance() interface{} {
	if obj.TableflowV1ErrorHandlingLog != nil {
		return obj.TableflowV1ErrorHandlingLog
	}

	if obj.TableflowV1ErrorHandlingSkip != nil {
		return obj.TableflowV1ErrorHandlingSkip
	}

	if obj.TableflowV1ErrorHandlingSuspend != nil {
		return obj.TableflowV1ErrorHandlingSuspend
	}

	// all schemas are nil
	return nil
}

type NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf struct {
	value *TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf
	isSet bool
}

func (v NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) Get() *TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf {
	return v.value
}

func (v *NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) Set(val *TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf(val *TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) *NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf {
	return &NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf{value: val, isSet: true}
}

func (v NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableTableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
