// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// TableflowV1CatalogSyncStatus The synchronization status of an external catalog for a Tableflow topic
type TableflowV1CatalogSyncStatus struct {
	// The ID of the catalog integration
	CatalogIntegrationId *string `json:"catalog_integration_id,omitempty"`
	// The type of the external catalog
	CatalogType *string `json:"catalog_type,omitempty"`
	// The current synchronization status:    PENDING: sync is pending;    SYNCED: successfully synced;    FAILED: sync failed;    DISCONNECTED: catalog integration is disconnected.
	SyncStatus *string `json:"sync_status,omitempty"`
	// Error message if the sync failed. This field is only present when `sync_status` is `FAILED`.
	ErrorMessage NullableString `json:"error_message,omitempty"`
}

// NewTableflowV1CatalogSyncStatus instantiates a new TableflowV1CatalogSyncStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableflowV1CatalogSyncStatus() *TableflowV1CatalogSyncStatus {
	this := TableflowV1CatalogSyncStatus{}
	return &this
}

// NewTableflowV1CatalogSyncStatusWithDefaults instantiates a new TableflowV1CatalogSyncStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableflowV1CatalogSyncStatusWithDefaults() *TableflowV1CatalogSyncStatus {
	this := TableflowV1CatalogSyncStatus{}
	return &this
}

// GetCatalogIntegrationId returns the CatalogIntegrationId field value if set, zero value otherwise.
func (o *TableflowV1CatalogSyncStatus) GetCatalogIntegrationId() string {
	if o == nil || o.CatalogIntegrationId == nil {
		var ret string
		return ret
	}
	return *o.CatalogIntegrationId
}

// GetCatalogIntegrationIdOk returns a tuple with the CatalogIntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogSyncStatus) GetCatalogIntegrationIdOk() (*string, bool) {
	if o == nil || o.CatalogIntegrationId == nil {
		return nil, false
	}
	return o.CatalogIntegrationId, true
}

// HasCatalogIntegrationId returns a boolean if a field has been set.
func (o *TableflowV1CatalogSyncStatus) HasCatalogIntegrationId() bool {
	if o != nil && o.CatalogIntegrationId != nil {
		return true
	}

	return false
}

// SetCatalogIntegrationId gets a reference to the given string and assigns it to the CatalogIntegrationId field.
func (o *TableflowV1CatalogSyncStatus) SetCatalogIntegrationId(v string) {
	o.CatalogIntegrationId = &v
}

// GetCatalogType returns the CatalogType field value if set, zero value otherwise.
func (o *TableflowV1CatalogSyncStatus) GetCatalogType() string {
	if o == nil || o.CatalogType == nil {
		var ret string
		return ret
	}
	return *o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogSyncStatus) GetCatalogTypeOk() (*string, bool) {
	if o == nil || o.CatalogType == nil {
		return nil, false
	}
	return o.CatalogType, true
}

// HasCatalogType returns a boolean if a field has been set.
func (o *TableflowV1CatalogSyncStatus) HasCatalogType() bool {
	if o != nil && o.CatalogType != nil {
		return true
	}

	return false
}

// SetCatalogType gets a reference to the given string and assigns it to the CatalogType field.
func (o *TableflowV1CatalogSyncStatus) SetCatalogType(v string) {
	o.CatalogType = &v
}

// GetSyncStatus returns the SyncStatus field value if set, zero value otherwise.
func (o *TableflowV1CatalogSyncStatus) GetSyncStatus() string {
	if o == nil || o.SyncStatus == nil {
		var ret string
		return ret
	}
	return *o.SyncStatus
}

// GetSyncStatusOk returns a tuple with the SyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogSyncStatus) GetSyncStatusOk() (*string, bool) {
	if o == nil || o.SyncStatus == nil {
		return nil, false
	}
	return o.SyncStatus, true
}

// HasSyncStatus returns a boolean if a field has been set.
func (o *TableflowV1CatalogSyncStatus) HasSyncStatus() bool {
	if o != nil && o.SyncStatus != nil {
		return true
	}

	return false
}

// SetSyncStatus gets a reference to the given string and assigns it to the SyncStatus field.
func (o *TableflowV1CatalogSyncStatus) SetSyncStatus(v string) {
	o.SyncStatus = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TableflowV1CatalogSyncStatus) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TableflowV1CatalogSyncStatus) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *TableflowV1CatalogSyncStatus) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *TableflowV1CatalogSyncStatus) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}

// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *TableflowV1CatalogSyncStatus) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *TableflowV1CatalogSyncStatus) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// Redact resets all sensitive fields to their zero value.
func (o *TableflowV1CatalogSyncStatus) Redact() {
	o.recurseRedact(o.CatalogIntegrationId)
	o.recurseRedact(o.CatalogType)
	o.recurseRedact(o.SyncStatus)
	o.recurseRedact(o.ErrorMessage)
}

func (o *TableflowV1CatalogSyncStatus) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o TableflowV1CatalogSyncStatus) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o TableflowV1CatalogSyncStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CatalogIntegrationId != nil {
		toSerialize["catalog_integration_id"] = o.CatalogIntegrationId
	}
	if o.CatalogType != nil {
		toSerialize["catalog_type"] = o.CatalogType
	}
	if o.SyncStatus != nil {
		toSerialize["sync_status"] = o.SyncStatus
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["error_message"] = o.ErrorMessage.Get()
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableTableflowV1CatalogSyncStatus struct {
	value *TableflowV1CatalogSyncStatus
	isSet bool
}

func (v NullableTableflowV1CatalogSyncStatus) Get() *TableflowV1CatalogSyncStatus {
	return v.value
}

func (v *NullableTableflowV1CatalogSyncStatus) Set(val *TableflowV1CatalogSyncStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTableflowV1CatalogSyncStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTableflowV1CatalogSyncStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableflowV1CatalogSyncStatus(val *TableflowV1CatalogSyncStatus) *NullableTableflowV1CatalogSyncStatus {
	return &NullableTableflowV1CatalogSyncStatus{value: val, isSet: true}
}

func (v NullableTableflowV1CatalogSyncStatus) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableTableflowV1CatalogSyncStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
