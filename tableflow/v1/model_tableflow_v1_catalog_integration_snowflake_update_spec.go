// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// TableflowV1CatalogIntegrationSnowflakeUpdateSpec The catalog integration connection config for Snowflake Open Catalog (update operations).
type TableflowV1CatalogIntegrationSnowflakeUpdateSpec struct {
	// The type of the catalog integration.
	Kind string `json:"kind,omitempty"`
	// The catalog integration connection endpoint for Snowflake Open Catalog.
	Endpoint *string `json:"endpoint,omitempty"`
	// The client ID of the catalog integration.
	ClientId *string `json:"client_id,omitempty"`
	// The client secret of the catalog integration.
	ClientSecret *string `json:"client_secret,omitempty"`
	// Warehouse name of the Snowflake Open Catalog.
	Warehouse *string `json:"warehouse,omitempty"`
	// Allowed scope of the Snowflake Open Catalog.
	AllowedScope *string `json:"allowed_scope,omitempty"`
}

// NewTableflowV1CatalogIntegrationSnowflakeUpdateSpec instantiates a new TableflowV1CatalogIntegrationSnowflakeUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableflowV1CatalogIntegrationSnowflakeUpdateSpec(kind string) *TableflowV1CatalogIntegrationSnowflakeUpdateSpec {
	this := TableflowV1CatalogIntegrationSnowflakeUpdateSpec{}
	this.Kind = kind
	return &this
}

// NewTableflowV1CatalogIntegrationSnowflakeUpdateSpecWithDefaults instantiates a new TableflowV1CatalogIntegrationSnowflakeUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableflowV1CatalogIntegrationSnowflakeUpdateSpecWithDefaults() *TableflowV1CatalogIntegrationSnowflakeUpdateSpec {
	this := TableflowV1CatalogIntegrationSnowflakeUpdateSpec{}
	return &this
}

// GetKind returns the Kind field value
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) SetKind(v string) {
	o.Kind = v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetEndpoint() string {
	if o == nil || o.Endpoint == nil {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetEndpointOk() (*string, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetClientSecret() string {
	if o == nil || o.ClientSecret == nil {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetClientSecretOk() (*string, bool) {
	if o == nil || o.ClientSecret == nil {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) HasClientSecret() bool {
	if o != nil && o.ClientSecret != nil {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetWarehouse() string {
	if o == nil || o.Warehouse == nil {
		var ret string
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetWarehouseOk() (*string, bool) {
	if o == nil || o.Warehouse == nil {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) HasWarehouse() bool {
	if o != nil && o.Warehouse != nil {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given string and assigns it to the Warehouse field.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) SetWarehouse(v string) {
	o.Warehouse = &v
}

// GetAllowedScope returns the AllowedScope field value if set, zero value otherwise.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetAllowedScope() string {
	if o == nil || o.AllowedScope == nil {
		var ret string
		return ret
	}
	return *o.AllowedScope
}

// GetAllowedScopeOk returns a tuple with the AllowedScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) GetAllowedScopeOk() (*string, bool) {
	if o == nil || o.AllowedScope == nil {
		return nil, false
	}
	return o.AllowedScope, true
}

// HasAllowedScope returns a boolean if a field has been set.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) HasAllowedScope() bool {
	if o != nil && o.AllowedScope != nil {
		return true
	}

	return false
}

// SetAllowedScope gets a reference to the given string and assigns it to the AllowedScope field.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) SetAllowedScope(v string) {
	o.AllowedScope = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(o.Endpoint)
	o.recurseRedact(o.ClientId)
	o.recurseRedact(o.ClientSecret)
	o.recurseRedact(o.Warehouse)
	o.recurseRedact(o.AllowedScope)
}

func (o *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o TableflowV1CatalogIntegrationSnowflakeUpdateSpec) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o TableflowV1CatalogIntegrationSnowflakeUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	if o.ClientId != nil {
		toSerialize["client_id"] = o.ClientId
	}
	if o.ClientSecret != nil {
		toSerialize["client_secret"] = o.ClientSecret
	}
	if o.Warehouse != nil {
		toSerialize["warehouse"] = o.Warehouse
	}
	if o.AllowedScope != nil {
		toSerialize["allowed_scope"] = o.AllowedScope
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec struct {
	value *TableflowV1CatalogIntegrationSnowflakeUpdateSpec
	isSet bool
}

func (v NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec) Get() *TableflowV1CatalogIntegrationSnowflakeUpdateSpec {
	return v.value
}

func (v *NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec) Set(val *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec(val *TableflowV1CatalogIntegrationSnowflakeUpdateSpec) *NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec {
	return &NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec{value: val, isSet: true}
}

func (v NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableTableflowV1CatalogIntegrationSnowflakeUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
