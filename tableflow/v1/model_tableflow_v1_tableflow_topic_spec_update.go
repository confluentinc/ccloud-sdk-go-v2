// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// TableflowV1TableflowTopicSpecUpdate The desired state of the Tableflow Topic
type TableflowV1TableflowTopicSpecUpdate struct {
	// Indicates whether the Tableflow should be suspended. The API allows setting it only to `false` i.e., to resume the Tableflow. Pausing the Tableflow on-demand is not currently supported.
	Suspended *bool `json:"suspended,omitempty"`
	// The config for the Tableflow enabled topic
	Config *TableflowV1TableFlowTopicConfigsSpec `json:"config,omitempty"`
	// The supported table formats for the Tableflow-enabled topic. 
	TableFormats *[]string `json:"table_formats,omitempty"`
	// The environment to which the target Kafka cluster belongs.
	Environment *GlobalObjectReference `json:"environment,omitempty"`
	// The kafka cluster of the topic for which Tableflow is enabled
	KafkaCluster *EnvScopedObjectReference `json:"kafka_cluster,omitempty"`
}

// NewTableflowV1TableflowTopicSpecUpdate instantiates a new TableflowV1TableflowTopicSpecUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableflowV1TableflowTopicSpecUpdate() *TableflowV1TableflowTopicSpecUpdate {
	this := TableflowV1TableflowTopicSpecUpdate{}
	return &this
}

// NewTableflowV1TableflowTopicSpecUpdateWithDefaults instantiates a new TableflowV1TableflowTopicSpecUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableflowV1TableflowTopicSpecUpdateWithDefaults() *TableflowV1TableflowTopicSpecUpdate {
	this := TableflowV1TableflowTopicSpecUpdate{}
	return &this
}

// GetSuspended returns the Suspended field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopicSpecUpdate) GetSuspended() bool {
	if o == nil || o.Suspended == nil {
		var ret bool
		return ret
	}
	return *o.Suspended
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) GetSuspendedOk() (*bool, bool) {
	if o == nil || o.Suspended == nil {
		return nil, false
	}
	return o.Suspended, true
}

// HasSuspended returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) HasSuspended() bool {
	if o != nil && o.Suspended != nil {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given bool and assigns it to the Suspended field.
func (o *TableflowV1TableflowTopicSpecUpdate) SetSuspended(v bool) {
	o.Suspended = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopicSpecUpdate) GetConfig() TableflowV1TableFlowTopicConfigsSpec {
	if o == nil || o.Config == nil {
		var ret TableflowV1TableFlowTopicConfigsSpec
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) GetConfigOk() (*TableflowV1TableFlowTopicConfigsSpec, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given TableflowV1TableFlowTopicConfigsSpec and assigns it to the Config field.
func (o *TableflowV1TableflowTopicSpecUpdate) SetConfig(v TableflowV1TableFlowTopicConfigsSpec) {
	o.Config = &v
}

// GetTableFormats returns the TableFormats field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopicSpecUpdate) GetTableFormats() []string {
	if o == nil || o.TableFormats == nil {
		var ret []string
		return ret
	}
	return *o.TableFormats
}

// GetTableFormatsOk returns a tuple with the TableFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) GetTableFormatsOk() (*[]string, bool) {
	if o == nil || o.TableFormats == nil {
		return nil, false
	}
	return o.TableFormats, true
}

// HasTableFormats returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) HasTableFormats() bool {
	if o != nil && o.TableFormats != nil {
		return true
	}

	return false
}

// SetTableFormats gets a reference to the given []string and assigns it to the TableFormats field.
func (o *TableflowV1TableflowTopicSpecUpdate) SetTableFormats(v []string) {
	o.TableFormats = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopicSpecUpdate) GetEnvironment() GlobalObjectReference {
	if o == nil || o.Environment == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) GetEnvironmentOk() (*GlobalObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given GlobalObjectReference and assigns it to the Environment field.
func (o *TableflowV1TableflowTopicSpecUpdate) SetEnvironment(v GlobalObjectReference) {
	o.Environment = &v
}

// GetKafkaCluster returns the KafkaCluster field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopicSpecUpdate) GetKafkaCluster() EnvScopedObjectReference {
	if o == nil || o.KafkaCluster == nil {
		var ret EnvScopedObjectReference
		return ret
	}
	return *o.KafkaCluster
}

// GetKafkaClusterOk returns a tuple with the KafkaCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) GetKafkaClusterOk() (*EnvScopedObjectReference, bool) {
	if o == nil || o.KafkaCluster == nil {
		return nil, false
	}
	return o.KafkaCluster, true
}

// HasKafkaCluster returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopicSpecUpdate) HasKafkaCluster() bool {
	if o != nil && o.KafkaCluster != nil {
		return true
	}

	return false
}

// SetKafkaCluster gets a reference to the given EnvScopedObjectReference and assigns it to the KafkaCluster field.
func (o *TableflowV1TableflowTopicSpecUpdate) SetKafkaCluster(v EnvScopedObjectReference) {
	o.KafkaCluster = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *TableflowV1TableflowTopicSpecUpdate) Redact() {
    o.recurseRedact(o.Suspended)
    o.recurseRedact(o.Config)
    o.recurseRedact(o.TableFormats)
    o.recurseRedact(o.Environment)
    o.recurseRedact(o.KafkaCluster)
}

func (o *TableflowV1TableflowTopicSpecUpdate) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o TableflowV1TableflowTopicSpecUpdate) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o TableflowV1TableflowTopicSpecUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Suspended != nil {
		toSerialize["suspended"] = o.Suspended
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.TableFormats != nil {
		toSerialize["table_formats"] = o.TableFormats
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.KafkaCluster != nil {
		toSerialize["kafka_cluster"] = o.KafkaCluster
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableTableflowV1TableflowTopicSpecUpdate struct {
	value *TableflowV1TableflowTopicSpecUpdate
	isSet bool
}

func (v NullableTableflowV1TableflowTopicSpecUpdate) Get() *TableflowV1TableflowTopicSpecUpdate {
	return v.value
}

func (v *NullableTableflowV1TableflowTopicSpecUpdate) Set(val *TableflowV1TableflowTopicSpecUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTableflowV1TableflowTopicSpecUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTableflowV1TableflowTopicSpecUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableflowV1TableflowTopicSpecUpdate(val *TableflowV1TableflowTopicSpecUpdate) *NullableTableflowV1TableflowTopicSpecUpdate {
	return &NullableTableflowV1TableflowTopicSpecUpdate{value: val, isSet: true}
}

func (v NullableTableflowV1TableflowTopicSpecUpdate) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableTableflowV1TableflowTopicSpecUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


