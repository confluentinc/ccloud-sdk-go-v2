// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type TableflowTopicsTableflowV1Api interface {

	/*
			CreateTableflowV1TableflowTopic Create a Tableflow Topic

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to create a tableflow topic.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiCreateTableflowV1TableflowTopicRequest
	*/
	CreateTableflowV1TableflowTopic(ctx _context.Context) ApiCreateTableflowV1TableflowTopicRequest

	// CreateTableflowV1TableflowTopicExecute executes the request
	//  @return TableflowV1TableflowTopic
	CreateTableflowV1TableflowTopicExecute(r ApiCreateTableflowV1TableflowTopicRequest) (TableflowV1TableflowTopic, *_nethttp.Response, error)

	/*
			DeleteTableflowV1TableflowTopic Delete a Tableflow Topic

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to delete a tableflow topic.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param displayName The name of the Kafka topic for which Tableflow is enabled.
			 @return ApiDeleteTableflowV1TableflowTopicRequest
	*/
	DeleteTableflowV1TableflowTopic(ctx _context.Context, displayName string) ApiDeleteTableflowV1TableflowTopicRequest

	// DeleteTableflowV1TableflowTopicExecute executes the request
	DeleteTableflowV1TableflowTopicExecute(r ApiDeleteTableflowV1TableflowTopicRequest) (*_nethttp.Response, error)

	/*
			GetTableflowV1TableflowTopic Read a Tableflow Topic

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to read a tableflow topic.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param displayName The name of the Kafka topic for which Tableflow is enabled.
			 @return ApiGetTableflowV1TableflowTopicRequest
	*/
	GetTableflowV1TableflowTopic(ctx _context.Context, displayName string) ApiGetTableflowV1TableflowTopicRequest

	// GetTableflowV1TableflowTopicExecute executes the request
	//  @return TableflowV1TableflowTopic
	GetTableflowV1TableflowTopicExecute(r ApiGetTableflowV1TableflowTopicRequest) (TableflowV1TableflowTopic, *_nethttp.Response, error)

	/*
			ListTableflowV1TableflowTopics List of Tableflow Topics

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Retrieve a sorted, filtered, paginated list of all tableflow topics.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiListTableflowV1TableflowTopicsRequest
	*/
	ListTableflowV1TableflowTopics(ctx _context.Context) ApiListTableflowV1TableflowTopicsRequest

	// ListTableflowV1TableflowTopicsExecute executes the request
	//  @return TableflowV1TableflowTopicList
	ListTableflowV1TableflowTopicsExecute(r ApiListTableflowV1TableflowTopicsRequest) (TableflowV1TableflowTopicList, *_nethttp.Response, error)

	/*
			UpdateTableflowV1TableflowTopic Update a Tableflow Topic

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to update a tableflow topic.



			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param displayName The name of the Kafka topic for which Tableflow is enabled.
			 @return ApiUpdateTableflowV1TableflowTopicRequest
	*/
	UpdateTableflowV1TableflowTopic(ctx _context.Context, displayName string) ApiUpdateTableflowV1TableflowTopicRequest

	// UpdateTableflowV1TableflowTopicExecute executes the request
	//  @return TableflowV1TableflowTopic
	UpdateTableflowV1TableflowTopicExecute(r ApiUpdateTableflowV1TableflowTopicRequest) (TableflowV1TableflowTopic, *_nethttp.Response, error)
}

// TableflowTopicsTableflowV1ApiService TableflowTopicsTableflowV1Api service
type TableflowTopicsTableflowV1ApiService service

type ApiCreateTableflowV1TableflowTopicRequest struct {
	ctx                       _context.Context
	ApiService                TableflowTopicsTableflowV1Api
	tableflowV1TableflowTopic *TableflowV1TableflowTopic
}

func (r ApiCreateTableflowV1TableflowTopicRequest) TableflowV1TableflowTopic(tableflowV1TableflowTopic TableflowV1TableflowTopic) ApiCreateTableflowV1TableflowTopicRequest {
	r.tableflowV1TableflowTopic = &tableflowV1TableflowTopic
	return r
}

func (r ApiCreateTableflowV1TableflowTopicRequest) Execute() (TableflowV1TableflowTopic, *_nethttp.Response, error) {
	return r.ApiService.CreateTableflowV1TableflowTopicExecute(r)
}

/*
CreateTableflowV1TableflowTopic Create a Tableflow Topic

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to create a tableflow topic.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTableflowV1TableflowTopicRequest
*/
func (a *TableflowTopicsTableflowV1ApiService) CreateTableflowV1TableflowTopic(ctx _context.Context) ApiCreateTableflowV1TableflowTopicRequest {
	return ApiCreateTableflowV1TableflowTopicRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TableflowV1TableflowTopic
func (a *TableflowTopicsTableflowV1ApiService) CreateTableflowV1TableflowTopicExecute(r ApiCreateTableflowV1TableflowTopicRequest) (TableflowV1TableflowTopic, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TableflowV1TableflowTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TableflowTopicsTableflowV1ApiService.CreateTableflowV1TableflowTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/tableflow-topics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tableflowV1TableflowTopic
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTableflowV1TableflowTopicRequest struct {
	ctx              _context.Context
	ApiService       TableflowTopicsTableflowV1Api
	environment      *string
	specKafkaCluster *string
	displayName      string
}

// Scope the operation to the given environment.
func (r ApiDeleteTableflowV1TableflowTopicRequest) Environment(environment string) ApiDeleteTableflowV1TableflowTopicRequest {
	r.environment = &environment
	return r
}

// Scope the operation to the given spec.kafka_cluster.
func (r ApiDeleteTableflowV1TableflowTopicRequest) SpecKafkaCluster(specKafkaCluster string) ApiDeleteTableflowV1TableflowTopicRequest {
	r.specKafkaCluster = &specKafkaCluster
	return r
}

func (r ApiDeleteTableflowV1TableflowTopicRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteTableflowV1TableflowTopicExecute(r)
}

/*
DeleteTableflowV1TableflowTopic Delete a Tableflow Topic

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to delete a tableflow topic.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param displayName The name of the Kafka topic for which Tableflow is enabled.
	@return ApiDeleteTableflowV1TableflowTopicRequest
*/
func (a *TableflowTopicsTableflowV1ApiService) DeleteTableflowV1TableflowTopic(ctx _context.Context, displayName string) ApiDeleteTableflowV1TableflowTopicRequest {
	return ApiDeleteTableflowV1TableflowTopicRequest{
		ApiService:  a,
		ctx:         ctx,
		displayName: displayName,
	}
}

// Execute executes the request
func (a *TableflowTopicsTableflowV1ApiService) DeleteTableflowV1TableflowTopicExecute(r ApiDeleteTableflowV1TableflowTopicRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TableflowTopicsTableflowV1ApiService.DeleteTableflowV1TableflowTopic")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/tableflow-topics/{display_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"display_name"+"}", _neturl.PathEscape(parameterToString(r.displayName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return nil, reportError("environment is required and must be specified")
	}
	if r.specKafkaCluster == nil {
		return nil, reportError("specKafkaCluster is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	localVarQueryParams.Add("spec.kafka_cluster", parameterToString(*r.specKafkaCluster, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTableflowV1TableflowTopicRequest struct {
	ctx              _context.Context
	ApiService       TableflowTopicsTableflowV1Api
	environment      *string
	specKafkaCluster *string
	displayName      string
}

// Scope the operation to the given environment.
func (r ApiGetTableflowV1TableflowTopicRequest) Environment(environment string) ApiGetTableflowV1TableflowTopicRequest {
	r.environment = &environment
	return r
}

// Scope the operation to the given spec.kafka_cluster.
func (r ApiGetTableflowV1TableflowTopicRequest) SpecKafkaCluster(specKafkaCluster string) ApiGetTableflowV1TableflowTopicRequest {
	r.specKafkaCluster = &specKafkaCluster
	return r
}

func (r ApiGetTableflowV1TableflowTopicRequest) Execute() (TableflowV1TableflowTopic, *_nethttp.Response, error) {
	return r.ApiService.GetTableflowV1TableflowTopicExecute(r)
}

/*
GetTableflowV1TableflowTopic Read a Tableflow Topic

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to read a tableflow topic.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param displayName The name of the Kafka topic for which Tableflow is enabled.
	@return ApiGetTableflowV1TableflowTopicRequest
*/
func (a *TableflowTopicsTableflowV1ApiService) GetTableflowV1TableflowTopic(ctx _context.Context, displayName string) ApiGetTableflowV1TableflowTopicRequest {
	return ApiGetTableflowV1TableflowTopicRequest{
		ApiService:  a,
		ctx:         ctx,
		displayName: displayName,
	}
}

// Execute executes the request
//
//	@return TableflowV1TableflowTopic
func (a *TableflowTopicsTableflowV1ApiService) GetTableflowV1TableflowTopicExecute(r ApiGetTableflowV1TableflowTopicRequest) (TableflowV1TableflowTopic, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TableflowV1TableflowTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TableflowTopicsTableflowV1ApiService.GetTableflowV1TableflowTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/tableflow-topics/{display_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"display_name"+"}", _neturl.PathEscape(parameterToString(r.displayName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}
	if r.specKafkaCluster == nil {
		return localVarReturnValue, nil, reportError("specKafkaCluster is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	localVarQueryParams.Add("spec.kafka_cluster", parameterToString(*r.specKafkaCluster, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTableflowV1TableflowTopicsRequest struct {
	ctx              _context.Context
	ApiService       TableflowTopicsTableflowV1Api
	environment      *string
	specKafkaCluster *string
	specTableFormats *MultipleSearchFilter
	pageSize         *int32
	pageToken        *string
}

// Filter the results by exact match for environment.
func (r ApiListTableflowV1TableflowTopicsRequest) Environment(environment string) ApiListTableflowV1TableflowTopicsRequest {
	r.environment = &environment
	return r
}

// Filter the results by exact match for spec.kafka_cluster.
func (r ApiListTableflowV1TableflowTopicsRequest) SpecKafkaCluster(specKafkaCluster string) ApiListTableflowV1TableflowTopicsRequest {
	r.specKafkaCluster = &specKafkaCluster
	return r
}

// Filter the results by exact match for spec.table_formats. Pass multiple times to see results matching any of the values.
func (r ApiListTableflowV1TableflowTopicsRequest) SpecTableFormats(specTableFormats MultipleSearchFilter) ApiListTableflowV1TableflowTopicsRequest {
	r.specTableFormats = &specTableFormats
	return r
}

// A pagination size for collection requests.
func (r ApiListTableflowV1TableflowTopicsRequest) PageSize(pageSize int32) ApiListTableflowV1TableflowTopicsRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListTableflowV1TableflowTopicsRequest) PageToken(pageToken string) ApiListTableflowV1TableflowTopicsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListTableflowV1TableflowTopicsRequest) Execute() (TableflowV1TableflowTopicList, *_nethttp.Response, error) {
	return r.ApiService.ListTableflowV1TableflowTopicsExecute(r)
}

/*
ListTableflowV1TableflowTopics List of Tableflow Topics

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a sorted, filtered, paginated list of all tableflow topics.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListTableflowV1TableflowTopicsRequest
*/
func (a *TableflowTopicsTableflowV1ApiService) ListTableflowV1TableflowTopics(ctx _context.Context) ApiListTableflowV1TableflowTopicsRequest {
	return ApiListTableflowV1TableflowTopicsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TableflowV1TableflowTopicList
func (a *TableflowTopicsTableflowV1ApiService) ListTableflowV1TableflowTopicsExecute(r ApiListTableflowV1TableflowTopicsRequest) (TableflowV1TableflowTopicList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TableflowV1TableflowTopicList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TableflowTopicsTableflowV1ApiService.ListTableflowV1TableflowTopics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/tableflow-topics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}
	if r.specKafkaCluster == nil {
		return localVarReturnValue, nil, reportError("specKafkaCluster is required and must be specified")
	}

	if r.specTableFormats != nil {
		localVarQueryParams.Add("spec.table_formats", parameterToString(*r.specTableFormats, ""))
	}
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	localVarQueryParams.Add("spec.kafka_cluster", parameterToString(*r.specKafkaCluster, ""))
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTableflowV1TableflowTopicRequest struct {
	ctx                             _context.Context
	ApiService                      TableflowTopicsTableflowV1Api
	displayName                     string
	tableflowV1TableflowTopicUpdate *TableflowV1TableflowTopicUpdate
}

func (r ApiUpdateTableflowV1TableflowTopicRequest) TableflowV1TableflowTopicUpdate(tableflowV1TableflowTopicUpdate TableflowV1TableflowTopicUpdate) ApiUpdateTableflowV1TableflowTopicRequest {
	r.tableflowV1TableflowTopicUpdate = &tableflowV1TableflowTopicUpdate
	return r
}

func (r ApiUpdateTableflowV1TableflowTopicRequest) Execute() (TableflowV1TableflowTopic, *_nethttp.Response, error) {
	return r.ApiService.UpdateTableflowV1TableflowTopicExecute(r)
}

/*
UpdateTableflowV1TableflowTopic Update a Tableflow Topic

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to update a tableflow topic.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param displayName The name of the Kafka topic for which Tableflow is enabled.
	@return ApiUpdateTableflowV1TableflowTopicRequest
*/
func (a *TableflowTopicsTableflowV1ApiService) UpdateTableflowV1TableflowTopic(ctx _context.Context, displayName string) ApiUpdateTableflowV1TableflowTopicRequest {
	return ApiUpdateTableflowV1TableflowTopicRequest{
		ApiService:  a,
		ctx:         ctx,
		displayName: displayName,
	}
}

// Execute executes the request
//
//	@return TableflowV1TableflowTopic
func (a *TableflowTopicsTableflowV1ApiService) UpdateTableflowV1TableflowTopicExecute(r ApiUpdateTableflowV1TableflowTopicRequest) (TableflowV1TableflowTopic, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TableflowV1TableflowTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TableflowTopicsTableflowV1ApiService.UpdateTableflowV1TableflowTopic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/tableflow-topics/{display_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"display_name"+"}", _neturl.PathEscape(parameterToString(r.displayName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tableflowV1TableflowTopicUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
