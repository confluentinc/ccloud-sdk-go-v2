// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// TableflowV1TableflowTopic A Tableflow Topic represents configuration related to a Tableflow enabled kafka topic   ## The Tableflow Topics Model <SchemaDefinition schemaRef=\"#/components/schemas/tableflow.v1.TableflowTopic\" />
type TableflowV1TableflowTopic struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	Spec *TableflowV1TableflowTopicSpec `json:"spec,omitempty"`
	Status *TableflowV1TableflowTopicStatus `json:"status,omitempty"`
}

// NewTableflowV1TableflowTopic instantiates a new TableflowV1TableflowTopic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableflowV1TableflowTopic() *TableflowV1TableflowTopic {
	this := TableflowV1TableflowTopic{}
	return &this
}

// NewTableflowV1TableflowTopicWithDefaults instantiates a new TableflowV1TableflowTopic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableflowV1TableflowTopicWithDefaults() *TableflowV1TableflowTopic {
	this := TableflowV1TableflowTopic{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopic) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopic) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopic) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *TableflowV1TableflowTopic) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopic) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopic) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopic) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *TableflowV1TableflowTopic) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopic) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopic) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopic) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *TableflowV1TableflowTopic) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopic) GetSpec() TableflowV1TableflowTopicSpec {
	if o == nil || o.Spec == nil {
		var ret TableflowV1TableflowTopicSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopic) GetSpecOk() (*TableflowV1TableflowTopicSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopic) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given TableflowV1TableflowTopicSpec and assigns it to the Spec field.
func (o *TableflowV1TableflowTopic) SetSpec(v TableflowV1TableflowTopicSpec) {
	o.Spec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TableflowV1TableflowTopic) GetStatus() TableflowV1TableflowTopicStatus {
	if o == nil || o.Status == nil {
		var ret TableflowV1TableflowTopicStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableflowTopic) GetStatusOk() (*TableflowV1TableflowTopicStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TableflowV1TableflowTopic) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TableflowV1TableflowTopicStatus and assigns it to the Status field.
func (o *TableflowV1TableflowTopic) SetStatus(v TableflowV1TableflowTopicStatus) {
	o.Status = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *TableflowV1TableflowTopic) Redact() {
    o.recurseRedact(o.ApiVersion)
    o.recurseRedact(o.Kind)
    o.recurseRedact(o.Metadata)
    o.recurseRedact(o.Spec)
    o.recurseRedact(o.Status)
}

func (o *TableflowV1TableflowTopic) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o TableflowV1TableflowTopic) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o TableflowV1TableflowTopic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableTableflowV1TableflowTopic struct {
	value *TableflowV1TableflowTopic
	isSet bool
}

func (v NullableTableflowV1TableflowTopic) Get() *TableflowV1TableflowTopic {
	return v.value
}

func (v *NullableTableflowV1TableflowTopic) Set(val *TableflowV1TableflowTopic) {
	v.value = val
	v.isSet = true
}

func (v NullableTableflowV1TableflowTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableTableflowV1TableflowTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableflowV1TableflowTopic(val *TableflowV1TableflowTopic) *NullableTableflowV1TableflowTopic {
	return &NullableTableflowV1TableflowTopic{value: val, isSet: true}
}

func (v NullableTableflowV1TableflowTopic) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableTableflowV1TableflowTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


