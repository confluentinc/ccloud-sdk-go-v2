// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type CatalogIntegrationsTableflowV1Api interface {

	/*
			CreateTableflowV1CatalogIntegration Create a Catalog Integration

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to create a catalog integration.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiCreateTableflowV1CatalogIntegrationRequest
	*/
	CreateTableflowV1CatalogIntegration(ctx _context.Context) ApiCreateTableflowV1CatalogIntegrationRequest

	// CreateTableflowV1CatalogIntegrationExecute executes the request
	//  @return TableflowV1CatalogIntegration
	CreateTableflowV1CatalogIntegrationExecute(r ApiCreateTableflowV1CatalogIntegrationRequest) (TableflowV1CatalogIntegration, *_nethttp.Response, error)

	/*
			DeleteTableflowV1CatalogIntegration Delete a Catalog Integration

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to delete a catalog integration.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param id The unique identifier for the catalog integration.
			 @return ApiDeleteTableflowV1CatalogIntegrationRequest
	*/
	DeleteTableflowV1CatalogIntegration(ctx _context.Context, id string) ApiDeleteTableflowV1CatalogIntegrationRequest

	// DeleteTableflowV1CatalogIntegrationExecute executes the request
	DeleteTableflowV1CatalogIntegrationExecute(r ApiDeleteTableflowV1CatalogIntegrationRequest) (*_nethttp.Response, error)

	/*
			GetTableflowV1CatalogIntegration Read a Catalog Integration

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to read a catalog integration.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param id The unique identifier for the catalog integration.
			 @return ApiGetTableflowV1CatalogIntegrationRequest
	*/
	GetTableflowV1CatalogIntegration(ctx _context.Context, id string) ApiGetTableflowV1CatalogIntegrationRequest

	// GetTableflowV1CatalogIntegrationExecute executes the request
	//  @return TableflowV1CatalogIntegration
	GetTableflowV1CatalogIntegrationExecute(r ApiGetTableflowV1CatalogIntegrationRequest) (TableflowV1CatalogIntegration, *_nethttp.Response, error)

	/*
			ListTableflowV1CatalogIntegrations List of Catalog Integrations

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Retrieve a sorted, filtered, paginated list of all catalog integrations.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiListTableflowV1CatalogIntegrationsRequest
	*/
	ListTableflowV1CatalogIntegrations(ctx _context.Context) ApiListTableflowV1CatalogIntegrationsRequest

	// ListTableflowV1CatalogIntegrationsExecute executes the request
	//  @return TableflowV1CatalogIntegrationList
	ListTableflowV1CatalogIntegrationsExecute(r ApiListTableflowV1CatalogIntegrationsRequest) (TableflowV1CatalogIntegrationList, *_nethttp.Response, error)

	/*
			UpdateTableflowV1CatalogIntegration Update a Catalog Integration

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to update a catalog integration.



			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param id The unique identifier for the catalog integration.
			 @return ApiUpdateTableflowV1CatalogIntegrationRequest
	*/
	UpdateTableflowV1CatalogIntegration(ctx _context.Context, id string) ApiUpdateTableflowV1CatalogIntegrationRequest

	// UpdateTableflowV1CatalogIntegrationExecute executes the request
	//  @return TableflowV1CatalogIntegration
	UpdateTableflowV1CatalogIntegrationExecute(r ApiUpdateTableflowV1CatalogIntegrationRequest) (TableflowV1CatalogIntegration, *_nethttp.Response, error)
}

// CatalogIntegrationsTableflowV1ApiService CatalogIntegrationsTableflowV1Api service
type CatalogIntegrationsTableflowV1ApiService service

type ApiCreateTableflowV1CatalogIntegrationRequest struct {
	ctx                           _context.Context
	ApiService                    CatalogIntegrationsTableflowV1Api
	tableflowV1CatalogIntegration *TableflowV1CatalogIntegration
}

func (r ApiCreateTableflowV1CatalogIntegrationRequest) TableflowV1CatalogIntegration(tableflowV1CatalogIntegration TableflowV1CatalogIntegration) ApiCreateTableflowV1CatalogIntegrationRequest {
	r.tableflowV1CatalogIntegration = &tableflowV1CatalogIntegration
	return r
}

func (r ApiCreateTableflowV1CatalogIntegrationRequest) Execute() (TableflowV1CatalogIntegration, *_nethttp.Response, error) {
	return r.ApiService.CreateTableflowV1CatalogIntegrationExecute(r)
}

/*
CreateTableflowV1CatalogIntegration Create a Catalog Integration

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to create a catalog integration.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTableflowV1CatalogIntegrationRequest
*/
func (a *CatalogIntegrationsTableflowV1ApiService) CreateTableflowV1CatalogIntegration(ctx _context.Context) ApiCreateTableflowV1CatalogIntegrationRequest {
	return ApiCreateTableflowV1CatalogIntegrationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TableflowV1CatalogIntegration
func (a *CatalogIntegrationsTableflowV1ApiService) CreateTableflowV1CatalogIntegrationExecute(r ApiCreateTableflowV1CatalogIntegrationRequest) (TableflowV1CatalogIntegration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TableflowV1CatalogIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogIntegrationsTableflowV1ApiService.CreateTableflowV1CatalogIntegration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/catalog-integrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tableflowV1CatalogIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTableflowV1CatalogIntegrationRequest struct {
	ctx              _context.Context
	ApiService       CatalogIntegrationsTableflowV1Api
	environment      *string
	specKafkaCluster *string
	id               string
}

// Scope the operation to the given environment.
func (r ApiDeleteTableflowV1CatalogIntegrationRequest) Environment(environment string) ApiDeleteTableflowV1CatalogIntegrationRequest {
	r.environment = &environment
	return r
}

// Scope the operation to the given spec.kafka_cluster.
func (r ApiDeleteTableflowV1CatalogIntegrationRequest) SpecKafkaCluster(specKafkaCluster string) ApiDeleteTableflowV1CatalogIntegrationRequest {
	r.specKafkaCluster = &specKafkaCluster
	return r
}

func (r ApiDeleteTableflowV1CatalogIntegrationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteTableflowV1CatalogIntegrationExecute(r)
}

/*
DeleteTableflowV1CatalogIntegration Delete a Catalog Integration

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to delete a catalog integration.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The unique identifier for the catalog integration.
	@return ApiDeleteTableflowV1CatalogIntegrationRequest
*/
func (a *CatalogIntegrationsTableflowV1ApiService) DeleteTableflowV1CatalogIntegration(ctx _context.Context, id string) ApiDeleteTableflowV1CatalogIntegrationRequest {
	return ApiDeleteTableflowV1CatalogIntegrationRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CatalogIntegrationsTableflowV1ApiService) DeleteTableflowV1CatalogIntegrationExecute(r ApiDeleteTableflowV1CatalogIntegrationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogIntegrationsTableflowV1ApiService.DeleteTableflowV1CatalogIntegration")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/catalog-integrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return nil, reportError("environment is required and must be specified")
	}
	if r.specKafkaCluster == nil {
		return nil, reportError("specKafkaCluster is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	localVarQueryParams.Add("spec.kafka_cluster", parameterToString(*r.specKafkaCluster, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTableflowV1CatalogIntegrationRequest struct {
	ctx              _context.Context
	ApiService       CatalogIntegrationsTableflowV1Api
	environment      *string
	specKafkaCluster *string
	id               string
}

// Scope the operation to the given environment.
func (r ApiGetTableflowV1CatalogIntegrationRequest) Environment(environment string) ApiGetTableflowV1CatalogIntegrationRequest {
	r.environment = &environment
	return r
}

// Scope the operation to the given spec.kafka_cluster.
func (r ApiGetTableflowV1CatalogIntegrationRequest) SpecKafkaCluster(specKafkaCluster string) ApiGetTableflowV1CatalogIntegrationRequest {
	r.specKafkaCluster = &specKafkaCluster
	return r
}

func (r ApiGetTableflowV1CatalogIntegrationRequest) Execute() (TableflowV1CatalogIntegration, *_nethttp.Response, error) {
	return r.ApiService.GetTableflowV1CatalogIntegrationExecute(r)
}

/*
GetTableflowV1CatalogIntegration Read a Catalog Integration

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to read a catalog integration.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The unique identifier for the catalog integration.
	@return ApiGetTableflowV1CatalogIntegrationRequest
*/
func (a *CatalogIntegrationsTableflowV1ApiService) GetTableflowV1CatalogIntegration(ctx _context.Context, id string) ApiGetTableflowV1CatalogIntegrationRequest {
	return ApiGetTableflowV1CatalogIntegrationRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TableflowV1CatalogIntegration
func (a *CatalogIntegrationsTableflowV1ApiService) GetTableflowV1CatalogIntegrationExecute(r ApiGetTableflowV1CatalogIntegrationRequest) (TableflowV1CatalogIntegration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TableflowV1CatalogIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogIntegrationsTableflowV1ApiService.GetTableflowV1CatalogIntegration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/catalog-integrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}
	if r.specKafkaCluster == nil {
		return localVarReturnValue, nil, reportError("specKafkaCluster is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	localVarQueryParams.Add("spec.kafka_cluster", parameterToString(*r.specKafkaCluster, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTableflowV1CatalogIntegrationsRequest struct {
	ctx              _context.Context
	ApiService       CatalogIntegrationsTableflowV1Api
	environment      *string
	specKafkaCluster *string
	pageSize         *int32
	pageToken        *string
}

// Filter the results by exact match for environment.
func (r ApiListTableflowV1CatalogIntegrationsRequest) Environment(environment string) ApiListTableflowV1CatalogIntegrationsRequest {
	r.environment = &environment
	return r
}

// Filter the results by exact match for spec.kafka_cluster.
func (r ApiListTableflowV1CatalogIntegrationsRequest) SpecKafkaCluster(specKafkaCluster string) ApiListTableflowV1CatalogIntegrationsRequest {
	r.specKafkaCluster = &specKafkaCluster
	return r
}

// A pagination size for collection requests.
func (r ApiListTableflowV1CatalogIntegrationsRequest) PageSize(pageSize int32) ApiListTableflowV1CatalogIntegrationsRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListTableflowV1CatalogIntegrationsRequest) PageToken(pageToken string) ApiListTableflowV1CatalogIntegrationsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListTableflowV1CatalogIntegrationsRequest) Execute() (TableflowV1CatalogIntegrationList, *_nethttp.Response, error) {
	return r.ApiService.ListTableflowV1CatalogIntegrationsExecute(r)
}

/*
ListTableflowV1CatalogIntegrations List of Catalog Integrations

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a sorted, filtered, paginated list of all catalog integrations.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListTableflowV1CatalogIntegrationsRequest
*/
func (a *CatalogIntegrationsTableflowV1ApiService) ListTableflowV1CatalogIntegrations(ctx _context.Context) ApiListTableflowV1CatalogIntegrationsRequest {
	return ApiListTableflowV1CatalogIntegrationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TableflowV1CatalogIntegrationList
func (a *CatalogIntegrationsTableflowV1ApiService) ListTableflowV1CatalogIntegrationsExecute(r ApiListTableflowV1CatalogIntegrationsRequest) (TableflowV1CatalogIntegrationList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TableflowV1CatalogIntegrationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogIntegrationsTableflowV1ApiService.ListTableflowV1CatalogIntegrations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/catalog-integrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}
	if r.specKafkaCluster == nil {
		return localVarReturnValue, nil, reportError("specKafkaCluster is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	localVarQueryParams.Add("spec.kafka_cluster", parameterToString(*r.specKafkaCluster, ""))
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTableflowV1CatalogIntegrationRequest struct {
	ctx                                        _context.Context
	ApiService                                 CatalogIntegrationsTableflowV1Api
	id                                         string
	tableflowV1CatalogIntegrationUpdateRequest *TableflowV1CatalogIntegrationUpdateRequest
}

func (r ApiUpdateTableflowV1CatalogIntegrationRequest) TableflowV1CatalogIntegrationUpdateRequest(tableflowV1CatalogIntegrationUpdateRequest TableflowV1CatalogIntegrationUpdateRequest) ApiUpdateTableflowV1CatalogIntegrationRequest {
	r.tableflowV1CatalogIntegrationUpdateRequest = &tableflowV1CatalogIntegrationUpdateRequest
	return r
}

func (r ApiUpdateTableflowV1CatalogIntegrationRequest) Execute() (TableflowV1CatalogIntegration, *_nethttp.Response, error) {
	return r.ApiService.UpdateTableflowV1CatalogIntegrationExecute(r)
}

/*
UpdateTableflowV1CatalogIntegration Update a Catalog Integration

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to update a catalog integration.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The unique identifier for the catalog integration.
	@return ApiUpdateTableflowV1CatalogIntegrationRequest
*/
func (a *CatalogIntegrationsTableflowV1ApiService) UpdateTableflowV1CatalogIntegration(ctx _context.Context, id string) ApiUpdateTableflowV1CatalogIntegrationRequest {
	return ApiUpdateTableflowV1CatalogIntegrationRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TableflowV1CatalogIntegration
func (a *CatalogIntegrationsTableflowV1ApiService) UpdateTableflowV1CatalogIntegrationExecute(r ApiUpdateTableflowV1CatalogIntegrationRequest) (TableflowV1CatalogIntegration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TableflowV1CatalogIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogIntegrationsTableflowV1ApiService.UpdateTableflowV1CatalogIntegration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tableflow/v1/catalog-integrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tableflowV1CatalogIntegrationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
