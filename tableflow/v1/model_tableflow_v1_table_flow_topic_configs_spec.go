// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Tableflow Management API

Tableflow Management API

API version: 0.0.1
Contact: cts-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// TableflowV1TableFlowTopicConfigsSpec The configs for the Tableflow enabled topic
type TableflowV1TableFlowTopicConfigsSpec struct {
	// This flag determines whether to enable compaction for the Tableflow enabled topic.
	EnableCompaction *bool `json:"enable_compaction,omitempty"`
	// This flag determines whether to enable partitioning for the Tableflow enabled topic.
	EnablePartitioning *bool `json:"enable_partitioning,omitempty"`
	// The maximum age, in milliseconds, of snapshots (for Iceberg) or versions (for Delta) to retain in the table for the Tableflow-enabled topic (snapshot/version expiration).  The default value is \"604800000\" milliseconds (equivalent to 7 days).  The minimum allowed value is \"86400000\" milliseconds (equivalent to 24 hours).
	RetentionMs *string `json:"retention_ms,omitempty"`
	// The strategy to handle record failures in the Tableflow enabled topic during materialization.  For `SKIP`, we skip the bad records and move to the next record,  and for `SUSPEND`, we suspend the materialization of the topic.
	// Deprecated
	RecordFailureStrategy *string `json:"record_failure_strategy,omitempty"`
	// The error mode to handle record failures in the Tableflow enabled topic during materialization.  for `SKIP`, we skip the bad records and move to the next record,  for `SUSPEND`, we suspend the materialization of the topic,  and for `LOG`, we log the bad records to the DLQ and continue processing the rest of the records.
	ErrorHandling *TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf `json:"error_handling,omitempty"`
}

// NewTableflowV1TableFlowTopicConfigsSpec instantiates a new TableflowV1TableFlowTopicConfigsSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableflowV1TableFlowTopicConfigsSpec() *TableflowV1TableFlowTopicConfigsSpec {
	this := TableflowV1TableFlowTopicConfigsSpec{}
	var recordFailureStrategy string = "SUSPEND"
	this.RecordFailureStrategy = &recordFailureStrategy
	return &this
}

// NewTableflowV1TableFlowTopicConfigsSpecWithDefaults instantiates a new TableflowV1TableFlowTopicConfigsSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableflowV1TableFlowTopicConfigsSpecWithDefaults() *TableflowV1TableFlowTopicConfigsSpec {
	this := TableflowV1TableFlowTopicConfigsSpec{}
	var recordFailureStrategy string = "SUSPEND"
	this.RecordFailureStrategy = &recordFailureStrategy
	return &this
}

// GetEnableCompaction returns the EnableCompaction field value if set, zero value otherwise.
func (o *TableflowV1TableFlowTopicConfigsSpec) GetEnableCompaction() bool {
	if o == nil || o.EnableCompaction == nil {
		var ret bool
		return ret
	}
	return *o.EnableCompaction
}

// GetEnableCompactionOk returns a tuple with the EnableCompaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) GetEnableCompactionOk() (*bool, bool) {
	if o == nil || o.EnableCompaction == nil {
		return nil, false
	}
	return o.EnableCompaction, true
}

// HasEnableCompaction returns a boolean if a field has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) HasEnableCompaction() bool {
	if o != nil && o.EnableCompaction != nil {
		return true
	}

	return false
}

// SetEnableCompaction gets a reference to the given bool and assigns it to the EnableCompaction field.
func (o *TableflowV1TableFlowTopicConfigsSpec) SetEnableCompaction(v bool) {
	o.EnableCompaction = &v
}

// GetEnablePartitioning returns the EnablePartitioning field value if set, zero value otherwise.
func (o *TableflowV1TableFlowTopicConfigsSpec) GetEnablePartitioning() bool {
	if o == nil || o.EnablePartitioning == nil {
		var ret bool
		return ret
	}
	return *o.EnablePartitioning
}

// GetEnablePartitioningOk returns a tuple with the EnablePartitioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) GetEnablePartitioningOk() (*bool, bool) {
	if o == nil || o.EnablePartitioning == nil {
		return nil, false
	}
	return o.EnablePartitioning, true
}

// HasEnablePartitioning returns a boolean if a field has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) HasEnablePartitioning() bool {
	if o != nil && o.EnablePartitioning != nil {
		return true
	}

	return false
}

// SetEnablePartitioning gets a reference to the given bool and assigns it to the EnablePartitioning field.
func (o *TableflowV1TableFlowTopicConfigsSpec) SetEnablePartitioning(v bool) {
	o.EnablePartitioning = &v
}

// GetRetentionMs returns the RetentionMs field value if set, zero value otherwise.
func (o *TableflowV1TableFlowTopicConfigsSpec) GetRetentionMs() string {
	if o == nil || o.RetentionMs == nil {
		var ret string
		return ret
	}
	return *o.RetentionMs
}

// GetRetentionMsOk returns a tuple with the RetentionMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) GetRetentionMsOk() (*string, bool) {
	if o == nil || o.RetentionMs == nil {
		return nil, false
	}
	return o.RetentionMs, true
}

// HasRetentionMs returns a boolean if a field has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) HasRetentionMs() bool {
	if o != nil && o.RetentionMs != nil {
		return true
	}

	return false
}

// SetRetentionMs gets a reference to the given string and assigns it to the RetentionMs field.
func (o *TableflowV1TableFlowTopicConfigsSpec) SetRetentionMs(v string) {
	o.RetentionMs = &v
}

// GetRecordFailureStrategy returns the RecordFailureStrategy field value if set, zero value otherwise.
// Deprecated
func (o *TableflowV1TableFlowTopicConfigsSpec) GetRecordFailureStrategy() string {
	if o == nil || o.RecordFailureStrategy == nil {
		var ret string
		return ret
	}
	return *o.RecordFailureStrategy
}

// GetRecordFailureStrategyOk returns a tuple with the RecordFailureStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TableflowV1TableFlowTopicConfigsSpec) GetRecordFailureStrategyOk() (*string, bool) {
	if o == nil || o.RecordFailureStrategy == nil {
		return nil, false
	}
	return o.RecordFailureStrategy, true
}

// HasRecordFailureStrategy returns a boolean if a field has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) HasRecordFailureStrategy() bool {
	if o != nil && o.RecordFailureStrategy != nil {
		return true
	}

	return false
}

// SetRecordFailureStrategy gets a reference to the given string and assigns it to the RecordFailureStrategy field.
// Deprecated
func (o *TableflowV1TableFlowTopicConfigsSpec) SetRecordFailureStrategy(v string) {
	o.RecordFailureStrategy = &v
}

// GetErrorHandling returns the ErrorHandling field value if set, zero value otherwise.
func (o *TableflowV1TableFlowTopicConfigsSpec) GetErrorHandling() TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf {
	if o == nil || o.ErrorHandling == nil {
		var ret TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf
		return ret
	}
	return *o.ErrorHandling
}

// GetErrorHandlingOk returns a tuple with the ErrorHandling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) GetErrorHandlingOk() (*TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf, bool) {
	if o == nil || o.ErrorHandling == nil {
		return nil, false
	}
	return o.ErrorHandling, true
}

// HasErrorHandling returns a boolean if a field has been set.
func (o *TableflowV1TableFlowTopicConfigsSpec) HasErrorHandling() bool {
	if o != nil && o.ErrorHandling != nil {
		return true
	}

	return false
}

// SetErrorHandling gets a reference to the given TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf and assigns it to the ErrorHandling field.
func (o *TableflowV1TableFlowTopicConfigsSpec) SetErrorHandling(v TableflowV1TableFlowTopicConfigsSpecErrorHandlingOneOf) {
	o.ErrorHandling = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *TableflowV1TableFlowTopicConfigsSpec) Redact() {
	o.recurseRedact(o.EnableCompaction)
	o.recurseRedact(o.EnablePartitioning)
	o.recurseRedact(o.RetentionMs)
	o.recurseRedact(o.RecordFailureStrategy)
	o.recurseRedact(o.ErrorHandling)
}

func (o *TableflowV1TableFlowTopicConfigsSpec) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o TableflowV1TableFlowTopicConfigsSpec) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o TableflowV1TableFlowTopicConfigsSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableCompaction != nil {
		toSerialize["enable_compaction"] = o.EnableCompaction
	}
	if o.EnablePartitioning != nil {
		toSerialize["enable_partitioning"] = o.EnablePartitioning
	}
	if o.RetentionMs != nil {
		toSerialize["retention_ms"] = o.RetentionMs
	}
	if o.RecordFailureStrategy != nil {
		toSerialize["record_failure_strategy"] = o.RecordFailureStrategy
	}
	if o.ErrorHandling != nil {
		toSerialize["error_handling"] = o.ErrorHandling
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableTableflowV1TableFlowTopicConfigsSpec struct {
	value *TableflowV1TableFlowTopicConfigsSpec
	isSet bool
}

func (v NullableTableflowV1TableFlowTopicConfigsSpec) Get() *TableflowV1TableFlowTopicConfigsSpec {
	return v.value
}

func (v *NullableTableflowV1TableFlowTopicConfigsSpec) Set(val *TableflowV1TableFlowTopicConfigsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTableflowV1TableFlowTopicConfigsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTableflowV1TableFlowTopicConfigsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableflowV1TableFlowTopicConfigsSpec(val *TableflowV1TableFlowTopicConfigsSpec) *NullableTableflowV1TableFlowTopicConfigsSpec {
	return &NullableTableflowV1TableFlowTopicConfigsSpec{value: val, isSet: true}
}

func (v NullableTableflowV1TableFlowTopicConfigsSpec) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableTableflowV1TableFlowTopicConfigsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
