// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Networking Internal API

Networking APIs for Confluent's internal use

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// NetworkCidrs CIDRs that belong to a Network
type NetworkCidrs struct {
	InternalVpcCidr *InternalVpcCidr
	ReservedCidr *ReservedCidr
	VpcCidr *VpcCidr
	ZonalCidr *ZonalCidr
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *NetworkCidrs) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into InternalVpcCidr
	err = json.Unmarshal(data, &dst.InternalVpcCidr);
	if err == nil {
		jsonInternalVpcCidr, _ := json.Marshal(dst.InternalVpcCidr)
		if string(jsonInternalVpcCidr) == "{}" { // empty struct
			dst.InternalVpcCidr = nil
		} else {
			return nil // data stored in dst.InternalVpcCidr, return on the first match
		}
	} else {
		dst.InternalVpcCidr = nil
	}

	// try to unmarshal JSON data into ReservedCidr
	err = json.Unmarshal(data, &dst.ReservedCidr);
	if err == nil {
		jsonReservedCidr, _ := json.Marshal(dst.ReservedCidr)
		if string(jsonReservedCidr) == "{}" { // empty struct
			dst.ReservedCidr = nil
		} else {
			return nil // data stored in dst.ReservedCidr, return on the first match
		}
	} else {
		dst.ReservedCidr = nil
	}

	// try to unmarshal JSON data into VpcCidr
	err = json.Unmarshal(data, &dst.VpcCidr);
	if err == nil {
		jsonVpcCidr, _ := json.Marshal(dst.VpcCidr)
		if string(jsonVpcCidr) == "{}" { // empty struct
			dst.VpcCidr = nil
		} else {
			return nil // data stored in dst.VpcCidr, return on the first match
		}
	} else {
		dst.VpcCidr = nil
	}

	// try to unmarshal JSON data into ZonalCidr
	err = json.Unmarshal(data, &dst.ZonalCidr);
	if err == nil {
		jsonZonalCidr, _ := json.Marshal(dst.ZonalCidr)
		if string(jsonZonalCidr) == "{}" { // empty struct
			dst.ZonalCidr = nil
		} else {
			return nil // data stored in dst.ZonalCidr, return on the first match
		}
	} else {
		dst.ZonalCidr = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(NetworkCidrs)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *NetworkCidrs) MarshalJSON() ([]byte, error) {
	if src.InternalVpcCidr != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.InternalVpcCidr)
		return buffer.Bytes(), err
	}

	if src.ReservedCidr != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.ReservedCidr)
		return buffer.Bytes(), err
	}

	if src.VpcCidr != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.VpcCidr)
		return buffer.Bytes(), err
	}

	if src.ZonalCidr != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.ZonalCidr)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in anyOf schemas
}

type NullableNetworkCidrs struct {
	value *NetworkCidrs
	isSet bool
}

func (v NullableNetworkCidrs) Get() *NetworkCidrs {
	return v.value
}

func (v *NullableNetworkCidrs) Set(val *NetworkCidrs) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkCidrs) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkCidrs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkCidrs(val *NetworkCidrs) *NullableNetworkCidrs {
	return &NullableNetworkCidrs{value: val, isSet: true}
}

func (v NullableNetworkCidrs) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableNetworkCidrs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


