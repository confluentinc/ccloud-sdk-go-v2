// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_clusters_srcm_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2 "github.com/confluentinc/ccloud-sdk-go-v2/srcm/v2"
)

// ClustersSrcmV2Api is a mock of ClustersSrcmV2Api interface
type ClustersSrcmV2Api struct {
	lockCreateSrcmV2Cluster sync.Mutex
	CreateSrcmV2ClusterFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiCreateSrcmV2ClusterRequest

	lockCreateSrcmV2ClusterExecute sync.Mutex
	CreateSrcmV2ClusterExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiCreateSrcmV2ClusterRequest) (github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.SrcmV2Cluster, *net_http.Response, error)

	lockDeleteSrcmV2Cluster sync.Mutex
	DeleteSrcmV2ClusterFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiDeleteSrcmV2ClusterRequest

	lockDeleteSrcmV2ClusterExecute sync.Mutex
	DeleteSrcmV2ClusterExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiDeleteSrcmV2ClusterRequest) (*net_http.Response, error)

	lockGetSrcmV2Cluster sync.Mutex
	GetSrcmV2ClusterFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiGetSrcmV2ClusterRequest

	lockGetSrcmV2ClusterExecute sync.Mutex
	GetSrcmV2ClusterExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiGetSrcmV2ClusterRequest) (github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.SrcmV2Cluster, *net_http.Response, error)

	lockListSrcmV2Clusters sync.Mutex
	ListSrcmV2ClustersFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiListSrcmV2ClustersRequest

	lockListSrcmV2ClustersExecute sync.Mutex
	ListSrcmV2ClustersExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiListSrcmV2ClustersRequest) (github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.SrcmV2ClusterList, *net_http.Response, error)

	lockUpdateSrcmV2Cluster sync.Mutex
	UpdateSrcmV2ClusterFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiUpdateSrcmV2ClusterRequest

	lockUpdateSrcmV2ClusterExecute sync.Mutex
	UpdateSrcmV2ClusterExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiUpdateSrcmV2ClusterRequest) (github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.SrcmV2Cluster, *net_http.Response, error)

	calls struct {
		CreateSrcmV2Cluster []struct {
			Ctx context.Context
		}
		CreateSrcmV2ClusterExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiCreateSrcmV2ClusterRequest
		}
		DeleteSrcmV2Cluster []struct {
			Ctx context.Context
			Id  string
		}
		DeleteSrcmV2ClusterExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiDeleteSrcmV2ClusterRequest
		}
		GetSrcmV2Cluster []struct {
			Ctx context.Context
			Id  string
		}
		GetSrcmV2ClusterExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiGetSrcmV2ClusterRequest
		}
		ListSrcmV2Clusters []struct {
			Ctx context.Context
		}
		ListSrcmV2ClustersExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiListSrcmV2ClustersRequest
		}
		UpdateSrcmV2Cluster []struct {
			Ctx context.Context
			Id  string
		}
		UpdateSrcmV2ClusterExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiUpdateSrcmV2ClusterRequest
		}
	}
}

// CreateSrcmV2Cluster mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) CreateSrcmV2Cluster(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiCreateSrcmV2ClusterRequest {
	m.lockCreateSrcmV2Cluster.Lock()
	defer m.lockCreateSrcmV2Cluster.Unlock()

	if m.CreateSrcmV2ClusterFunc == nil {
		panic("mocker: ClustersSrcmV2Api.CreateSrcmV2ClusterFunc is nil but ClustersSrcmV2Api.CreateSrcmV2Cluster was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.CreateSrcmV2Cluster = append(m.calls.CreateSrcmV2Cluster, call)

	return m.CreateSrcmV2ClusterFunc(ctx)
}

// CreateSrcmV2ClusterCalled returns true if CreateSrcmV2Cluster was called at least once.
func (m *ClustersSrcmV2Api) CreateSrcmV2ClusterCalled() bool {
	m.lockCreateSrcmV2Cluster.Lock()
	defer m.lockCreateSrcmV2Cluster.Unlock()

	return len(m.calls.CreateSrcmV2Cluster) > 0
}

// CreateSrcmV2ClusterCalls returns the calls made to CreateSrcmV2Cluster.
func (m *ClustersSrcmV2Api) CreateSrcmV2ClusterCalls() []struct {
	Ctx context.Context
} {
	m.lockCreateSrcmV2Cluster.Lock()
	defer m.lockCreateSrcmV2Cluster.Unlock()

	return m.calls.CreateSrcmV2Cluster
}

// CreateSrcmV2ClusterExecute mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) CreateSrcmV2ClusterExecute(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiCreateSrcmV2ClusterRequest) (github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.SrcmV2Cluster, *net_http.Response, error) {
	m.lockCreateSrcmV2ClusterExecute.Lock()
	defer m.lockCreateSrcmV2ClusterExecute.Unlock()

	if m.CreateSrcmV2ClusterExecuteFunc == nil {
		panic("mocker: ClustersSrcmV2Api.CreateSrcmV2ClusterExecuteFunc is nil but ClustersSrcmV2Api.CreateSrcmV2ClusterExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiCreateSrcmV2ClusterRequest
	}{
		R: r,
	}

	m.calls.CreateSrcmV2ClusterExecute = append(m.calls.CreateSrcmV2ClusterExecute, call)

	return m.CreateSrcmV2ClusterExecuteFunc(r)
}

// CreateSrcmV2ClusterExecuteCalled returns true if CreateSrcmV2ClusterExecute was called at least once.
func (m *ClustersSrcmV2Api) CreateSrcmV2ClusterExecuteCalled() bool {
	m.lockCreateSrcmV2ClusterExecute.Lock()
	defer m.lockCreateSrcmV2ClusterExecute.Unlock()

	return len(m.calls.CreateSrcmV2ClusterExecute) > 0
}

// CreateSrcmV2ClusterExecuteCalls returns the calls made to CreateSrcmV2ClusterExecute.
func (m *ClustersSrcmV2Api) CreateSrcmV2ClusterExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiCreateSrcmV2ClusterRequest
} {
	m.lockCreateSrcmV2ClusterExecute.Lock()
	defer m.lockCreateSrcmV2ClusterExecute.Unlock()

	return m.calls.CreateSrcmV2ClusterExecute
}

// DeleteSrcmV2Cluster mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) DeleteSrcmV2Cluster(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiDeleteSrcmV2ClusterRequest {
	m.lockDeleteSrcmV2Cluster.Lock()
	defer m.lockDeleteSrcmV2Cluster.Unlock()

	if m.DeleteSrcmV2ClusterFunc == nil {
		panic("mocker: ClustersSrcmV2Api.DeleteSrcmV2ClusterFunc is nil but ClustersSrcmV2Api.DeleteSrcmV2Cluster was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.DeleteSrcmV2Cluster = append(m.calls.DeleteSrcmV2Cluster, call)

	return m.DeleteSrcmV2ClusterFunc(ctx, id)
}

// DeleteSrcmV2ClusterCalled returns true if DeleteSrcmV2Cluster was called at least once.
func (m *ClustersSrcmV2Api) DeleteSrcmV2ClusterCalled() bool {
	m.lockDeleteSrcmV2Cluster.Lock()
	defer m.lockDeleteSrcmV2Cluster.Unlock()

	return len(m.calls.DeleteSrcmV2Cluster) > 0
}

// DeleteSrcmV2ClusterCalls returns the calls made to DeleteSrcmV2Cluster.
func (m *ClustersSrcmV2Api) DeleteSrcmV2ClusterCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockDeleteSrcmV2Cluster.Lock()
	defer m.lockDeleteSrcmV2Cluster.Unlock()

	return m.calls.DeleteSrcmV2Cluster
}

// DeleteSrcmV2ClusterExecute mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) DeleteSrcmV2ClusterExecute(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiDeleteSrcmV2ClusterRequest) (*net_http.Response, error) {
	m.lockDeleteSrcmV2ClusterExecute.Lock()
	defer m.lockDeleteSrcmV2ClusterExecute.Unlock()

	if m.DeleteSrcmV2ClusterExecuteFunc == nil {
		panic("mocker: ClustersSrcmV2Api.DeleteSrcmV2ClusterExecuteFunc is nil but ClustersSrcmV2Api.DeleteSrcmV2ClusterExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiDeleteSrcmV2ClusterRequest
	}{
		R: r,
	}

	m.calls.DeleteSrcmV2ClusterExecute = append(m.calls.DeleteSrcmV2ClusterExecute, call)

	return m.DeleteSrcmV2ClusterExecuteFunc(r)
}

// DeleteSrcmV2ClusterExecuteCalled returns true if DeleteSrcmV2ClusterExecute was called at least once.
func (m *ClustersSrcmV2Api) DeleteSrcmV2ClusterExecuteCalled() bool {
	m.lockDeleteSrcmV2ClusterExecute.Lock()
	defer m.lockDeleteSrcmV2ClusterExecute.Unlock()

	return len(m.calls.DeleteSrcmV2ClusterExecute) > 0
}

// DeleteSrcmV2ClusterExecuteCalls returns the calls made to DeleteSrcmV2ClusterExecute.
func (m *ClustersSrcmV2Api) DeleteSrcmV2ClusterExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiDeleteSrcmV2ClusterRequest
} {
	m.lockDeleteSrcmV2ClusterExecute.Lock()
	defer m.lockDeleteSrcmV2ClusterExecute.Unlock()

	return m.calls.DeleteSrcmV2ClusterExecute
}

// GetSrcmV2Cluster mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) GetSrcmV2Cluster(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiGetSrcmV2ClusterRequest {
	m.lockGetSrcmV2Cluster.Lock()
	defer m.lockGetSrcmV2Cluster.Unlock()

	if m.GetSrcmV2ClusterFunc == nil {
		panic("mocker: ClustersSrcmV2Api.GetSrcmV2ClusterFunc is nil but ClustersSrcmV2Api.GetSrcmV2Cluster was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetSrcmV2Cluster = append(m.calls.GetSrcmV2Cluster, call)

	return m.GetSrcmV2ClusterFunc(ctx, id)
}

// GetSrcmV2ClusterCalled returns true if GetSrcmV2Cluster was called at least once.
func (m *ClustersSrcmV2Api) GetSrcmV2ClusterCalled() bool {
	m.lockGetSrcmV2Cluster.Lock()
	defer m.lockGetSrcmV2Cluster.Unlock()

	return len(m.calls.GetSrcmV2Cluster) > 0
}

// GetSrcmV2ClusterCalls returns the calls made to GetSrcmV2Cluster.
func (m *ClustersSrcmV2Api) GetSrcmV2ClusterCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetSrcmV2Cluster.Lock()
	defer m.lockGetSrcmV2Cluster.Unlock()

	return m.calls.GetSrcmV2Cluster
}

// GetSrcmV2ClusterExecute mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) GetSrcmV2ClusterExecute(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiGetSrcmV2ClusterRequest) (github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.SrcmV2Cluster, *net_http.Response, error) {
	m.lockGetSrcmV2ClusterExecute.Lock()
	defer m.lockGetSrcmV2ClusterExecute.Unlock()

	if m.GetSrcmV2ClusterExecuteFunc == nil {
		panic("mocker: ClustersSrcmV2Api.GetSrcmV2ClusterExecuteFunc is nil but ClustersSrcmV2Api.GetSrcmV2ClusterExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiGetSrcmV2ClusterRequest
	}{
		R: r,
	}

	m.calls.GetSrcmV2ClusterExecute = append(m.calls.GetSrcmV2ClusterExecute, call)

	return m.GetSrcmV2ClusterExecuteFunc(r)
}

// GetSrcmV2ClusterExecuteCalled returns true if GetSrcmV2ClusterExecute was called at least once.
func (m *ClustersSrcmV2Api) GetSrcmV2ClusterExecuteCalled() bool {
	m.lockGetSrcmV2ClusterExecute.Lock()
	defer m.lockGetSrcmV2ClusterExecute.Unlock()

	return len(m.calls.GetSrcmV2ClusterExecute) > 0
}

// GetSrcmV2ClusterExecuteCalls returns the calls made to GetSrcmV2ClusterExecute.
func (m *ClustersSrcmV2Api) GetSrcmV2ClusterExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiGetSrcmV2ClusterRequest
} {
	m.lockGetSrcmV2ClusterExecute.Lock()
	defer m.lockGetSrcmV2ClusterExecute.Unlock()

	return m.calls.GetSrcmV2ClusterExecute
}

// ListSrcmV2Clusters mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) ListSrcmV2Clusters(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiListSrcmV2ClustersRequest {
	m.lockListSrcmV2Clusters.Lock()
	defer m.lockListSrcmV2Clusters.Unlock()

	if m.ListSrcmV2ClustersFunc == nil {
		panic("mocker: ClustersSrcmV2Api.ListSrcmV2ClustersFunc is nil but ClustersSrcmV2Api.ListSrcmV2Clusters was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListSrcmV2Clusters = append(m.calls.ListSrcmV2Clusters, call)

	return m.ListSrcmV2ClustersFunc(ctx)
}

// ListSrcmV2ClustersCalled returns true if ListSrcmV2Clusters was called at least once.
func (m *ClustersSrcmV2Api) ListSrcmV2ClustersCalled() bool {
	m.lockListSrcmV2Clusters.Lock()
	defer m.lockListSrcmV2Clusters.Unlock()

	return len(m.calls.ListSrcmV2Clusters) > 0
}

// ListSrcmV2ClustersCalls returns the calls made to ListSrcmV2Clusters.
func (m *ClustersSrcmV2Api) ListSrcmV2ClustersCalls() []struct {
	Ctx context.Context
} {
	m.lockListSrcmV2Clusters.Lock()
	defer m.lockListSrcmV2Clusters.Unlock()

	return m.calls.ListSrcmV2Clusters
}

// ListSrcmV2ClustersExecute mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) ListSrcmV2ClustersExecute(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiListSrcmV2ClustersRequest) (github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.SrcmV2ClusterList, *net_http.Response, error) {
	m.lockListSrcmV2ClustersExecute.Lock()
	defer m.lockListSrcmV2ClustersExecute.Unlock()

	if m.ListSrcmV2ClustersExecuteFunc == nil {
		panic("mocker: ClustersSrcmV2Api.ListSrcmV2ClustersExecuteFunc is nil but ClustersSrcmV2Api.ListSrcmV2ClustersExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiListSrcmV2ClustersRequest
	}{
		R: r,
	}

	m.calls.ListSrcmV2ClustersExecute = append(m.calls.ListSrcmV2ClustersExecute, call)

	return m.ListSrcmV2ClustersExecuteFunc(r)
}

// ListSrcmV2ClustersExecuteCalled returns true if ListSrcmV2ClustersExecute was called at least once.
func (m *ClustersSrcmV2Api) ListSrcmV2ClustersExecuteCalled() bool {
	m.lockListSrcmV2ClustersExecute.Lock()
	defer m.lockListSrcmV2ClustersExecute.Unlock()

	return len(m.calls.ListSrcmV2ClustersExecute) > 0
}

// ListSrcmV2ClustersExecuteCalls returns the calls made to ListSrcmV2ClustersExecute.
func (m *ClustersSrcmV2Api) ListSrcmV2ClustersExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiListSrcmV2ClustersRequest
} {
	m.lockListSrcmV2ClustersExecute.Lock()
	defer m.lockListSrcmV2ClustersExecute.Unlock()

	return m.calls.ListSrcmV2ClustersExecute
}

// UpdateSrcmV2Cluster mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) UpdateSrcmV2Cluster(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiUpdateSrcmV2ClusterRequest {
	m.lockUpdateSrcmV2Cluster.Lock()
	defer m.lockUpdateSrcmV2Cluster.Unlock()

	if m.UpdateSrcmV2ClusterFunc == nil {
		panic("mocker: ClustersSrcmV2Api.UpdateSrcmV2ClusterFunc is nil but ClustersSrcmV2Api.UpdateSrcmV2Cluster was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.UpdateSrcmV2Cluster = append(m.calls.UpdateSrcmV2Cluster, call)

	return m.UpdateSrcmV2ClusterFunc(ctx, id)
}

// UpdateSrcmV2ClusterCalled returns true if UpdateSrcmV2Cluster was called at least once.
func (m *ClustersSrcmV2Api) UpdateSrcmV2ClusterCalled() bool {
	m.lockUpdateSrcmV2Cluster.Lock()
	defer m.lockUpdateSrcmV2Cluster.Unlock()

	return len(m.calls.UpdateSrcmV2Cluster) > 0
}

// UpdateSrcmV2ClusterCalls returns the calls made to UpdateSrcmV2Cluster.
func (m *ClustersSrcmV2Api) UpdateSrcmV2ClusterCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockUpdateSrcmV2Cluster.Lock()
	defer m.lockUpdateSrcmV2Cluster.Unlock()

	return m.calls.UpdateSrcmV2Cluster
}

// UpdateSrcmV2ClusterExecute mocks base method by wrapping the associated func.
func (m *ClustersSrcmV2Api) UpdateSrcmV2ClusterExecute(r github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiUpdateSrcmV2ClusterRequest) (github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.SrcmV2Cluster, *net_http.Response, error) {
	m.lockUpdateSrcmV2ClusterExecute.Lock()
	defer m.lockUpdateSrcmV2ClusterExecute.Unlock()

	if m.UpdateSrcmV2ClusterExecuteFunc == nil {
		panic("mocker: ClustersSrcmV2Api.UpdateSrcmV2ClusterExecuteFunc is nil but ClustersSrcmV2Api.UpdateSrcmV2ClusterExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiUpdateSrcmV2ClusterRequest
	}{
		R: r,
	}

	m.calls.UpdateSrcmV2ClusterExecute = append(m.calls.UpdateSrcmV2ClusterExecute, call)

	return m.UpdateSrcmV2ClusterExecuteFunc(r)
}

// UpdateSrcmV2ClusterExecuteCalled returns true if UpdateSrcmV2ClusterExecute was called at least once.
func (m *ClustersSrcmV2Api) UpdateSrcmV2ClusterExecuteCalled() bool {
	m.lockUpdateSrcmV2ClusterExecute.Lock()
	defer m.lockUpdateSrcmV2ClusterExecute.Unlock()

	return len(m.calls.UpdateSrcmV2ClusterExecute) > 0
}

// UpdateSrcmV2ClusterExecuteCalls returns the calls made to UpdateSrcmV2ClusterExecute.
func (m *ClustersSrcmV2Api) UpdateSrcmV2ClusterExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_srcm_v2.ApiUpdateSrcmV2ClusterRequest
} {
	m.lockUpdateSrcmV2ClusterExecute.Lock()
	defer m.lockUpdateSrcmV2ClusterExecute.Unlock()

	return m.calls.UpdateSrcmV2ClusterExecute
}

// Reset resets the calls made to the mocked methods.
func (m *ClustersSrcmV2Api) Reset() {
	m.lockCreateSrcmV2Cluster.Lock()
	m.calls.CreateSrcmV2Cluster = nil
	m.lockCreateSrcmV2Cluster.Unlock()
	m.lockCreateSrcmV2ClusterExecute.Lock()
	m.calls.CreateSrcmV2ClusterExecute = nil
	m.lockCreateSrcmV2ClusterExecute.Unlock()
	m.lockDeleteSrcmV2Cluster.Lock()
	m.calls.DeleteSrcmV2Cluster = nil
	m.lockDeleteSrcmV2Cluster.Unlock()
	m.lockDeleteSrcmV2ClusterExecute.Lock()
	m.calls.DeleteSrcmV2ClusterExecute = nil
	m.lockDeleteSrcmV2ClusterExecute.Unlock()
	m.lockGetSrcmV2Cluster.Lock()
	m.calls.GetSrcmV2Cluster = nil
	m.lockGetSrcmV2Cluster.Unlock()
	m.lockGetSrcmV2ClusterExecute.Lock()
	m.calls.GetSrcmV2ClusterExecute = nil
	m.lockGetSrcmV2ClusterExecute.Unlock()
	m.lockListSrcmV2Clusters.Lock()
	m.calls.ListSrcmV2Clusters = nil
	m.lockListSrcmV2Clusters.Unlock()
	m.lockListSrcmV2ClustersExecute.Lock()
	m.calls.ListSrcmV2ClustersExecute = nil
	m.lockListSrcmV2ClustersExecute.Unlock()
	m.lockUpdateSrcmV2Cluster.Lock()
	m.calls.UpdateSrcmV2Cluster = nil
	m.lockUpdateSrcmV2Cluster.Unlock()
	m.lockUpdateSrcmV2ClusterExecute.Lock()
	m.calls.UpdateSrcmV2ClusterExecute = nil
	m.lockUpdateSrcmV2ClusterExecute.Unlock()
}
