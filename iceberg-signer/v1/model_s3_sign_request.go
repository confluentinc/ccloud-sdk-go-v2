/*
Apache Iceberg S3 Signer API

Defines the specification for the S3 Signer API.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the S3SignRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3SignRequest{}

// S3SignRequest struct for S3SignRequest
type S3SignRequest struct {
	Region     string             `json:"region"`
	Uri        string             `json:"uri"`
	Method     string             `json:"method"`
	Headers    S3Headers          `json:"headers"`
	Properties *map[string]string `json:"properties,omitempty"`
	// Optional body of the S3 request to send to the signing API. This should only be populated for S3 requests which do not have the relevant data in the URI itself (e.g. DeleteObjects requests)
	Body *string `json:"body,omitempty"`
}

type _S3SignRequest S3SignRequest

// NewS3SignRequest instantiates a new S3SignRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3SignRequest(region string, uri string, method string, headers S3Headers) *S3SignRequest {
	this := S3SignRequest{}
	this.Region = region
	this.Uri = uri
	this.Method = method
	this.Headers = headers
	return &this
}

// NewS3SignRequestWithDefaults instantiates a new S3SignRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3SignRequestWithDefaults() *S3SignRequest {
	this := S3SignRequest{}
	return &this
}

// GetRegion returns the Region field value
func (o *S3SignRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *S3SignRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *S3SignRequest) SetRegion(v string) {
	o.Region = v
}

// GetUri returns the Uri field value
func (o *S3SignRequest) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *S3SignRequest) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *S3SignRequest) SetUri(v string) {
	o.Uri = v
}

// GetMethod returns the Method field value
func (o *S3SignRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *S3SignRequest) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *S3SignRequest) SetMethod(v string) {
	o.Method = v
}

// GetHeaders returns the Headers field value
func (o *S3SignRequest) GetHeaders() S3Headers {
	if o == nil {
		var ret S3Headers
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *S3SignRequest) GetHeadersOk() (*S3Headers, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *S3SignRequest) SetHeaders(v S3Headers) {
	o.Headers = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *S3SignRequest) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SignRequest) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *S3SignRequest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *S3SignRequest) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *S3SignRequest) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SignRequest) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *S3SignRequest) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *S3SignRequest) SetBody(v string) {
	o.Body = &v
}

func (o S3SignRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3SignRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["uri"] = o.Uri
	toSerialize["method"] = o.Method
	toSerialize["headers"] = o.Headers
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	return toSerialize, nil
}

func (o *S3SignRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"uri",
		"method",
		"headers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3SignRequest := _S3SignRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3SignRequest)

	if err != nil {
		return err
	}

	*o = S3SignRequest(varS3SignRequest)

	return err
}

type NullableS3SignRequest struct {
	value *S3SignRequest
	isSet bool
}

func (v NullableS3SignRequest) Get() *S3SignRequest {
	return v.value
}

func (v *NullableS3SignRequest) Set(val *S3SignRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableS3SignRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableS3SignRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3SignRequest(val *S3SignRequest) *NullableS3SignRequest {
	return &NullableS3SignRequest{value: val, isSet: true}
}

func (v NullableS3SignRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3SignRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
