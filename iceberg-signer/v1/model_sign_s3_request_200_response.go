/*
Apache Iceberg S3 Signer API

Defines the specification for the S3 Signer API.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SignS3Request200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignS3Request200Response{}

// SignS3Request200Response struct for SignS3Request200Response
type SignS3Request200Response struct {
	Uri     string    `json:"uri"`
	Headers S3Headers `json:"headers"`
}

type _SignS3Request200Response SignS3Request200Response

// NewSignS3Request200Response instantiates a new SignS3Request200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignS3Request200Response(uri string, headers S3Headers) *SignS3Request200Response {
	this := SignS3Request200Response{}
	this.Uri = uri
	this.Headers = headers
	return &this
}

// NewSignS3Request200ResponseWithDefaults instantiates a new SignS3Request200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignS3Request200ResponseWithDefaults() *SignS3Request200Response {
	this := SignS3Request200Response{}
	return &this
}

// GetUri returns the Uri field value
func (o *SignS3Request200Response) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *SignS3Request200Response) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *SignS3Request200Response) SetUri(v string) {
	o.Uri = v
}

// GetHeaders returns the Headers field value
func (o *SignS3Request200Response) GetHeaders() S3Headers {
	if o == nil {
		var ret S3Headers
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *SignS3Request200Response) GetHeadersOk() (*S3Headers, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *SignS3Request200Response) SetHeaders(v S3Headers) {
	o.Headers = v
}

func (o SignS3Request200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignS3Request200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uri"] = o.Uri
	toSerialize["headers"] = o.Headers
	return toSerialize, nil
}

func (o *SignS3Request200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uri",
		"headers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignS3Request200Response := _SignS3Request200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignS3Request200Response)

	if err != nil {
		return err
	}

	*o = SignS3Request200Response(varSignS3Request200Response)

	return err
}

type NullableSignS3Request200Response struct {
	value *SignS3Request200Response
	isSet bool
}

func (v NullableSignS3Request200Response) Get() *SignS3Request200Response {
	return v.value
}

func (v *NullableSignS3Request200Response) Set(val *SignS3Request200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSignS3Request200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSignS3Request200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignS3Request200Response(val *SignS3Request200Response) *NullableSignS3Request200Response {
	return &NullableSignS3Request200Response{value: val, isSet: true}
}

func (v NullableSignS3Request200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignS3Request200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
