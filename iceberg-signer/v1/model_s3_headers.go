/*
Apache Iceberg S3 Signer API

Defines the specification for the S3 Signer API.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the S3Headers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3Headers{}

// S3Headers struct for S3Headers
type S3Headers struct {
	AdditionalProperties map[string]interface{}
}

type _S3Headers S3Headers

// NewS3Headers instantiates a new S3Headers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Headers() *S3Headers {
	this := S3Headers{}
	return &this
}

// NewS3HeadersWithDefaults instantiates a new S3Headers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3HeadersWithDefaults() *S3Headers {
	this := S3Headers{}
	return &this
}

func (o S3Headers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3Headers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *S3Headers) UnmarshalJSON(data []byte) (err error) {
	varS3Headers := _S3Headers{}

	err = json.Unmarshal(data, &varS3Headers)

	if err != nil {
		return err
	}

	*o = S3Headers(varS3Headers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableS3Headers struct {
	value *S3Headers
	isSet bool
}

func (v NullableS3Headers) Get() *S3Headers {
	return v.value
}

func (v *NullableS3Headers) Set(val *S3Headers) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Headers) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Headers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Headers(val *S3Headers) *NullableS3Headers {
	return &NullableS3Headers{value: val, isSet: true}
}

func (v NullableS3Headers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Headers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
