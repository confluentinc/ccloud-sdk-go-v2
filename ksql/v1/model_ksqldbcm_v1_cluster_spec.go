// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
ksqlDB Cluster Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// KsqldbcmV1ClusterSpec The desired state of the Cluster
type KsqldbcmV1ClusterSpec struct {
	// The name of the ksqlDB cluster.
	DisplayName *string `json:"display_name,omitempty"`
	// The number of CSUs (Confluent Streaming Units) in a ksqlDB cluster.
	Csu *int32 `json:"csu,omitempty"`
	// The dataplane endpoint of the ksqlDB cluster.
	HttpEndpoint *string `json:"http_endpoint,omitempty"`
	// The kafka_cluster to which this belongs. The kafka_cluster can be one of cmk.v2.Cluster.
	KafkaCluster *ObjectReference `json:"kafka_cluster,omitempty"`
	// The environment to which this belongs.
	Environment *ObjectReference `json:"environment,omitempty"`
}

// NewKsqldbcmV1ClusterSpec instantiates a new KsqldbcmV1ClusterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKsqldbcmV1ClusterSpec() *KsqldbcmV1ClusterSpec {
	this := KsqldbcmV1ClusterSpec{}
	return &this
}

// NewKsqldbcmV1ClusterSpecWithDefaults instantiates a new KsqldbcmV1ClusterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKsqldbcmV1ClusterSpecWithDefaults() *KsqldbcmV1ClusterSpec {
	this := KsqldbcmV1ClusterSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *KsqldbcmV1ClusterSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV1ClusterSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *KsqldbcmV1ClusterSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *KsqldbcmV1ClusterSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCsu returns the Csu field value if set, zero value otherwise.
func (o *KsqldbcmV1ClusterSpec) GetCsu() int32 {
	if o == nil || o.Csu == nil {
		var ret int32
		return ret
	}
	return *o.Csu
}

// GetCsuOk returns a tuple with the Csu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV1ClusterSpec) GetCsuOk() (*int32, bool) {
	if o == nil || o.Csu == nil {
		return nil, false
	}
	return o.Csu, true
}

// HasCsu returns a boolean if a field has been set.
func (o *KsqldbcmV1ClusterSpec) HasCsu() bool {
	if o != nil && o.Csu != nil {
		return true
	}

	return false
}

// SetCsu gets a reference to the given int32 and assigns it to the Csu field.
func (o *KsqldbcmV1ClusterSpec) SetCsu(v int32) {
	o.Csu = &v
}

// GetHttpEndpoint returns the HttpEndpoint field value if set, zero value otherwise.
func (o *KsqldbcmV1ClusterSpec) GetHttpEndpoint() string {
	if o == nil || o.HttpEndpoint == nil {
		var ret string
		return ret
	}
	return *o.HttpEndpoint
}

// GetHttpEndpointOk returns a tuple with the HttpEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV1ClusterSpec) GetHttpEndpointOk() (*string, bool) {
	if o == nil || o.HttpEndpoint == nil {
		return nil, false
	}
	return o.HttpEndpoint, true
}

// HasHttpEndpoint returns a boolean if a field has been set.
func (o *KsqldbcmV1ClusterSpec) HasHttpEndpoint() bool {
	if o != nil && o.HttpEndpoint != nil {
		return true
	}

	return false
}

// SetHttpEndpoint gets a reference to the given string and assigns it to the HttpEndpoint field.
func (o *KsqldbcmV1ClusterSpec) SetHttpEndpoint(v string) {
	o.HttpEndpoint = &v
}

// GetKafkaCluster returns the KafkaCluster field value if set, zero value otherwise.
func (o *KsqldbcmV1ClusterSpec) GetKafkaCluster() ObjectReference {
	if o == nil || o.KafkaCluster == nil {
		var ret ObjectReference
		return ret
	}
	return *o.KafkaCluster
}

// GetKafkaClusterOk returns a tuple with the KafkaCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV1ClusterSpec) GetKafkaClusterOk() (*ObjectReference, bool) {
	if o == nil || o.KafkaCluster == nil {
		return nil, false
	}
	return o.KafkaCluster, true
}

// HasKafkaCluster returns a boolean if a field has been set.
func (o *KsqldbcmV1ClusterSpec) HasKafkaCluster() bool {
	if o != nil && o.KafkaCluster != nil {
		return true
	}

	return false
}

// SetKafkaCluster gets a reference to the given ObjectReference and assigns it to the KafkaCluster field.
func (o *KsqldbcmV1ClusterSpec) SetKafkaCluster(v ObjectReference) {
	o.KafkaCluster = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *KsqldbcmV1ClusterSpec) GetEnvironment() ObjectReference {
	if o == nil || o.Environment == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV1ClusterSpec) GetEnvironmentOk() (*ObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *KsqldbcmV1ClusterSpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectReference and assigns it to the Environment field.
func (o *KsqldbcmV1ClusterSpec) SetEnvironment(v ObjectReference) {
	o.Environment = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *KsqldbcmV1ClusterSpec) Redact() {
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.Csu)
    o.recurseRedact(o.HttpEndpoint)
    o.recurseRedact(o.KafkaCluster)
    o.recurseRedact(o.Environment)
}

func (o *KsqldbcmV1ClusterSpec) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o KsqldbcmV1ClusterSpec) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o KsqldbcmV1ClusterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Csu != nil {
		toSerialize["csu"] = o.Csu
	}
	if o.HttpEndpoint != nil {
		toSerialize["http_endpoint"] = o.HttpEndpoint
	}
	if o.KafkaCluster != nil {
		toSerialize["kafka_cluster"] = o.KafkaCluster
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	return json.Marshal(toSerialize)
}

type NullableKsqldbcmV1ClusterSpec struct {
	value *KsqldbcmV1ClusterSpec
	isSet bool
}

func (v NullableKsqldbcmV1ClusterSpec) Get() *KsqldbcmV1ClusterSpec {
	return v.value
}

func (v *NullableKsqldbcmV1ClusterSpec) Set(val *KsqldbcmV1ClusterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableKsqldbcmV1ClusterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableKsqldbcmV1ClusterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKsqldbcmV1ClusterSpec(val *KsqldbcmV1ClusterSpec) *NullableKsqldbcmV1ClusterSpec {
	return &NullableKsqldbcmV1ClusterSpec{value: val, isSet: true}
}

func (v NullableKsqldbcmV1ClusterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKsqldbcmV1ClusterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


