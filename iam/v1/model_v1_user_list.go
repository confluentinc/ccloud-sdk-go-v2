// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
IAM API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// V1UserList `User` objects represent individuals who may access your Confluent resources.  The API allows you to retrieve, update, and delete individual users, as well as list of all your users. This API cannot be used to create new user accounts.   ## The Users Model <SchemaDefinition schemaRef=\"#/components/schemas/v1.User\" />
type V1UserList struct {
	// A data property that contains an array of resource items. Each entry in the array is a separate resource.
	Users []V1User `json:"users"`
}

// NewV1UserList instantiates a new V1UserList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1UserList(users []V1User) *V1UserList {
	this := V1UserList{}
	this.Users = users
	return &this
}

// NewV1UserListWithDefaults instantiates a new V1UserList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UserListWithDefaults() *V1UserList {
	this := V1UserList{}
	return &this
}

// GetUsers returns the Users field value
func (o *V1UserList) GetUsers() []V1User {
	if o == nil {
		var ret []V1User
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *V1UserList) GetUsersOk() (*[]V1User, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Users, true
}

// SetUsers sets field value
func (o *V1UserList) SetUsers(v []V1User) {
	o.Users = v
}

// Redact resets all sensitive fields to their zero value.
func (o *V1UserList) Redact() {
    o.recurseRedact(&o.Users)
}

func (o *V1UserList) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o V1UserList) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o V1UserList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableV1UserList struct {
	value *V1UserList
	isSet bool
}

func (v NullableV1UserList) Get() *V1UserList {
	return v.value
}

func (v *NullableV1UserList) Set(val *V1UserList) {
	v.value = val
	v.isSet = true
}

func (v NullableV1UserList) IsSet() bool {
	return v.isSet
}

func (v *NullableV1UserList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1UserList(val *V1UserList) *NullableV1UserList {
	return &NullableV1UserList{value: val, isSet: true}
}

func (v NullableV1UserList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1UserList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


