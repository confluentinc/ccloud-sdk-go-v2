// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
IAM API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// V1ServiceAccount `ServiceAccount` objects are typically used to represent applications and other non-human principals that may access your Confluent resources.  The API allows you to list all your service accounts.   ## The Service Accounts Model <SchemaDefinition schemaRef=\"#/components/schemas/v1.ServiceAccount\" />
type V1ServiceAccount struct {
	Id *int32 `json:"id,omitempty"`
	ResourceId *string `json:"resource_id,omitempty"`
}

// NewV1ServiceAccount instantiates a new V1ServiceAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ServiceAccount() *V1ServiceAccount {
	this := V1ServiceAccount{}
	return &this
}

// NewV1ServiceAccountWithDefaults instantiates a new V1ServiceAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ServiceAccountWithDefaults() *V1ServiceAccount {
	this := V1ServiceAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1ServiceAccount) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceAccount) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1ServiceAccount) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *V1ServiceAccount) SetId(v int32) {
	o.Id = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *V1ServiceAccount) GetResourceId() string {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceAccount) GetResourceIdOk() (*string, bool) {
	if o == nil || o.ResourceId == nil {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *V1ServiceAccount) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *V1ServiceAccount) SetResourceId(v string) {
	o.ResourceId = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *V1ServiceAccount) Redact() {
    o.recurseRedact(o.Id)
    o.recurseRedact(o.ResourceId)
}

func (o *V1ServiceAccount) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o V1ServiceAccount) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o V1ServiceAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ResourceId != nil {
		toSerialize["resource_id"] = o.ResourceId
	}
	return json.Marshal(toSerialize)
}

type NullableV1ServiceAccount struct {
	value *V1ServiceAccount
	isSet bool
}

func (v NullableV1ServiceAccount) Get() *V1ServiceAccount {
	return v.value
}

func (v *NullableV1ServiceAccount) Set(val *V1ServiceAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ServiceAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ServiceAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ServiceAccount(val *V1ServiceAccount) *NullableV1ServiceAccount {
	return &NullableV1ServiceAccount{value: val, isSet: true}
}

func (v NullableV1ServiceAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ServiceAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


