// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
IAM API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// V1ServiceAccountList `ServiceAccount` objects are typically used to represent applications and other non-human principals that may access your Confluent resources.  The API allows you to list all your service accounts.   ## The Service Accounts Model <SchemaDefinition schemaRef=\"#/components/schemas/v1.ServiceAccount\" />
type V1ServiceAccountList struct {
	// A data property that contains an array of resource items. Each entry in the array is a separate resource.
	Users []V1ServiceAccount `json:"users"`
}

// NewV1ServiceAccountList instantiates a new V1ServiceAccountList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ServiceAccountList(users []V1ServiceAccount) *V1ServiceAccountList {
	this := V1ServiceAccountList{}
	this.Users = users
	return &this
}

// NewV1ServiceAccountListWithDefaults instantiates a new V1ServiceAccountList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ServiceAccountListWithDefaults() *V1ServiceAccountList {
	this := V1ServiceAccountList{}
	return &this
}

// GetUsers returns the Users field value
func (o *V1ServiceAccountList) GetUsers() []V1ServiceAccount {
	if o == nil {
		var ret []V1ServiceAccount
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *V1ServiceAccountList) GetUsersOk() (*[]V1ServiceAccount, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Users, true
}

// SetUsers sets field value
func (o *V1ServiceAccountList) SetUsers(v []V1ServiceAccount) {
	o.Users = v
}

// Redact resets all sensitive fields to their zero value.
func (o *V1ServiceAccountList) Redact() {
    o.recurseRedact(&o.Users)
}

func (o *V1ServiceAccountList) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o V1ServiceAccountList) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o V1ServiceAccountList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableV1ServiceAccountList struct {
	value *V1ServiceAccountList
	isSet bool
}

func (v NullableV1ServiceAccountList) Get() *V1ServiceAccountList {
	return v.value
}

func (v *NullableV1ServiceAccountList) Set(val *V1ServiceAccountList) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ServiceAccountList) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ServiceAccountList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ServiceAccountList(val *V1ServiceAccountList) *NullableV1ServiceAccountList {
	return &NullableV1ServiceAccountList{value: val, isSet: true}
}

func (v NullableV1ServiceAccountList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ServiceAccountList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


