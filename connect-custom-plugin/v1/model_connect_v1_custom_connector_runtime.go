// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Connector Plugin Management API

This is Custom Connector Plugin Management API.

API version: 1.0.0
Contact: compute-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// ConnectV1CustomConnectorRuntime List of supported runtime languages for Custom Connector Plugin. The list defines the supported entries for confluent.custom.connect.plugin.runtime attribute in CustomConnectorPlugin object. Each entry also defines the set of supported java versions for that runtime which can be specified during connector provisioning via the confluent.custom.connect.plugin.java.version attribute.   ## The Custom Connector Runtimes Model <SchemaDefinition schemaRef=\"#/components/schemas/connect.v1.CustomConnectorRuntime\" />
type ConnectV1CustomConnectorRuntime struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id *string `json:"id,omitempty"`
	// Name of the runtime that is being used while provisioning a custom connector. This corresponds to the property custom.connect.plugin.runtime in the connector configuration.
	CustomConnectPluginRuntimeName *string `json:"custom_connect_plugin_runtime_name,omitempty"`
	// The underlying version of Apache Kafka which bundles the connect runtime
	RuntimeAkVersion *string `json:"runtime_ak_version,omitempty"`
	// List of supported Java versions
	SupportedJavaVersions *[]string `json:"supported_java_versions,omitempty"`
	// The product maturity phase for the plugin runtime. EA (Early Access), GA (Generally Available), or Preview.
	ProductMaturity *string `json:"product_maturity,omitempty"`
	// End of Life date for the runtime
	EndOfLifeAt *time.Time `json:"end_of_life_at,omitempty"`
	// Description of the runtime
	Description *string `json:"description,omitempty"`
}

// NewConnectV1CustomConnectorRuntime instantiates a new ConnectV1CustomConnectorRuntime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1CustomConnectorRuntime() *ConnectV1CustomConnectorRuntime {
	this := ConnectV1CustomConnectorRuntime{}
	return &this
}

// NewConnectV1CustomConnectorRuntimeWithDefaults instantiates a new ConnectV1CustomConnectorRuntime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1CustomConnectorRuntimeWithDefaults() *ConnectV1CustomConnectorRuntime {
	this := ConnectV1CustomConnectorRuntime{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *ConnectV1CustomConnectorRuntime) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ConnectV1CustomConnectorRuntime) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectV1CustomConnectorRuntime) SetId(v string) {
	o.Id = &v
}

// GetCustomConnectPluginRuntimeName returns the CustomConnectPluginRuntimeName field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetCustomConnectPluginRuntimeName() string {
	if o == nil || o.CustomConnectPluginRuntimeName == nil {
		var ret string
		return ret
	}
	return *o.CustomConnectPluginRuntimeName
}

// GetCustomConnectPluginRuntimeNameOk returns a tuple with the CustomConnectPluginRuntimeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetCustomConnectPluginRuntimeNameOk() (*string, bool) {
	if o == nil || o.CustomConnectPluginRuntimeName == nil {
		return nil, false
	}
	return o.CustomConnectPluginRuntimeName, true
}

// HasCustomConnectPluginRuntimeName returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasCustomConnectPluginRuntimeName() bool {
	if o != nil && o.CustomConnectPluginRuntimeName != nil {
		return true
	}

	return false
}

// SetCustomConnectPluginRuntimeName gets a reference to the given string and assigns it to the CustomConnectPluginRuntimeName field.
func (o *ConnectV1CustomConnectorRuntime) SetCustomConnectPluginRuntimeName(v string) {
	o.CustomConnectPluginRuntimeName = &v
}

// GetRuntimeAkVersion returns the RuntimeAkVersion field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetRuntimeAkVersion() string {
	if o == nil || o.RuntimeAkVersion == nil {
		var ret string
		return ret
	}
	return *o.RuntimeAkVersion
}

// GetRuntimeAkVersionOk returns a tuple with the RuntimeAkVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetRuntimeAkVersionOk() (*string, bool) {
	if o == nil || o.RuntimeAkVersion == nil {
		return nil, false
	}
	return o.RuntimeAkVersion, true
}

// HasRuntimeAkVersion returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasRuntimeAkVersion() bool {
	if o != nil && o.RuntimeAkVersion != nil {
		return true
	}

	return false
}

// SetRuntimeAkVersion gets a reference to the given string and assigns it to the RuntimeAkVersion field.
func (o *ConnectV1CustomConnectorRuntime) SetRuntimeAkVersion(v string) {
	o.RuntimeAkVersion = &v
}

// GetSupportedJavaVersions returns the SupportedJavaVersions field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetSupportedJavaVersions() []string {
	if o == nil || o.SupportedJavaVersions == nil {
		var ret []string
		return ret
	}
	return *o.SupportedJavaVersions
}

// GetSupportedJavaVersionsOk returns a tuple with the SupportedJavaVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetSupportedJavaVersionsOk() (*[]string, bool) {
	if o == nil || o.SupportedJavaVersions == nil {
		return nil, false
	}
	return o.SupportedJavaVersions, true
}

// HasSupportedJavaVersions returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasSupportedJavaVersions() bool {
	if o != nil && o.SupportedJavaVersions != nil {
		return true
	}

	return false
}

// SetSupportedJavaVersions gets a reference to the given []string and assigns it to the SupportedJavaVersions field.
func (o *ConnectV1CustomConnectorRuntime) SetSupportedJavaVersions(v []string) {
	o.SupportedJavaVersions = &v
}

// GetProductMaturity returns the ProductMaturity field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetProductMaturity() string {
	if o == nil || o.ProductMaturity == nil {
		var ret string
		return ret
	}
	return *o.ProductMaturity
}

// GetProductMaturityOk returns a tuple with the ProductMaturity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetProductMaturityOk() (*string, bool) {
	if o == nil || o.ProductMaturity == nil {
		return nil, false
	}
	return o.ProductMaturity, true
}

// HasProductMaturity returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasProductMaturity() bool {
	if o != nil && o.ProductMaturity != nil {
		return true
	}

	return false
}

// SetProductMaturity gets a reference to the given string and assigns it to the ProductMaturity field.
func (o *ConnectV1CustomConnectorRuntime) SetProductMaturity(v string) {
	o.ProductMaturity = &v
}

// GetEndOfLifeAt returns the EndOfLifeAt field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetEndOfLifeAt() time.Time {
	if o == nil || o.EndOfLifeAt == nil {
		var ret time.Time
		return ret
	}
	return *o.EndOfLifeAt
}

// GetEndOfLifeAtOk returns a tuple with the EndOfLifeAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetEndOfLifeAtOk() (*time.Time, bool) {
	if o == nil || o.EndOfLifeAt == nil {
		return nil, false
	}
	return o.EndOfLifeAt, true
}

// HasEndOfLifeAt returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasEndOfLifeAt() bool {
	if o != nil && o.EndOfLifeAt != nil {
		return true
	}

	return false
}

// SetEndOfLifeAt gets a reference to the given time.Time and assigns it to the EndOfLifeAt field.
func (o *ConnectV1CustomConnectorRuntime) SetEndOfLifeAt(v time.Time) {
	o.EndOfLifeAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectV1CustomConnectorRuntime) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1CustomConnectorRuntime) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectV1CustomConnectorRuntime) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectV1CustomConnectorRuntime) SetDescription(v string) {
	o.Description = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1CustomConnectorRuntime) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.CustomConnectPluginRuntimeName)
	o.recurseRedact(o.RuntimeAkVersion)
	o.recurseRedact(o.SupportedJavaVersions)
	o.recurseRedact(o.ProductMaturity)
	o.recurseRedact(o.EndOfLifeAt)
	o.recurseRedact(o.Description)
}

func (o *ConnectV1CustomConnectorRuntime) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ConnectV1CustomConnectorRuntime) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1CustomConnectorRuntime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CustomConnectPluginRuntimeName != nil {
		toSerialize["custom_connect_plugin_runtime_name"] = o.CustomConnectPluginRuntimeName
	}
	if o.RuntimeAkVersion != nil {
		toSerialize["runtime_ak_version"] = o.RuntimeAkVersion
	}
	if o.SupportedJavaVersions != nil {
		toSerialize["supported_java_versions"] = o.SupportedJavaVersions
	}
	if o.ProductMaturity != nil {
		toSerialize["product_maturity"] = o.ProductMaturity
	}
	if o.EndOfLifeAt != nil {
		toSerialize["end_of_life_at"] = o.EndOfLifeAt
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableConnectV1CustomConnectorRuntime struct {
	value *ConnectV1CustomConnectorRuntime
	isSet bool
}

func (v NullableConnectV1CustomConnectorRuntime) Get() *ConnectV1CustomConnectorRuntime {
	return v.value
}

func (v *NullableConnectV1CustomConnectorRuntime) Set(val *ConnectV1CustomConnectorRuntime) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1CustomConnectorRuntime) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1CustomConnectorRuntime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1CustomConnectorRuntime(val *ConnectV1CustomConnectorRuntime) *NullableConnectV1CustomConnectorRuntime {
	return &NullableConnectV1CustomConnectorRuntime{value: val, isSet: true}
}

func (v NullableConnectV1CustomConnectorRuntime) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableConnectV1CustomConnectorRuntime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
