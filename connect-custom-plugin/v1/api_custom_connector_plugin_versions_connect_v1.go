// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Connector Plugin Management API

This is Custom Connector Plugin Management API.

API version: 1.0.0
Contact: compute-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type CustomConnectorPluginVersionsConnectV1Api interface {

	/*
		CreateConnectV1CustomConnectorPluginVersion Create a Custom Connector Plugin Version

		[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

	Make a request to create a custom connector plugin version.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param pluginId The Plugin
		 @return ApiCreateConnectV1CustomConnectorPluginVersionRequest
	*/
	CreateConnectV1CustomConnectorPluginVersion(ctx _context.Context, pluginId string) ApiCreateConnectV1CustomConnectorPluginVersionRequest

	// CreateConnectV1CustomConnectorPluginVersionExecute executes the request
	//  @return ConnectV1CustomConnectorPluginVersion
	CreateConnectV1CustomConnectorPluginVersionExecute(r ApiCreateConnectV1CustomConnectorPluginVersionRequest) (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error)

	/*
		DeleteConnectV1CustomConnectorPluginVersion Delete a Custom Connector Plugin Version

		[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

	Make a request to delete a custom connector plugin version.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param pluginId The Plugin
		 @param id The unique identifier for the custom connector plugin version.
		 @return ApiDeleteConnectV1CustomConnectorPluginVersionRequest
	*/
	DeleteConnectV1CustomConnectorPluginVersion(ctx _context.Context, pluginId string, id string) ApiDeleteConnectV1CustomConnectorPluginVersionRequest

	// DeleteConnectV1CustomConnectorPluginVersionExecute executes the request
	DeleteConnectV1CustomConnectorPluginVersionExecute(r ApiDeleteConnectV1CustomConnectorPluginVersionRequest) (*_nethttp.Response, error)

	/*
		GetConnectV1CustomConnectorPluginVersion Read a Custom Connector Plugin Version

		[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

	Make a request to read a custom connector plugin version.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param pluginId The Plugin
		 @param id The unique identifier for the custom connector plugin version.
		 @return ApiGetConnectV1CustomConnectorPluginVersionRequest
	*/
	GetConnectV1CustomConnectorPluginVersion(ctx _context.Context, pluginId string, id string) ApiGetConnectV1CustomConnectorPluginVersionRequest

	// GetConnectV1CustomConnectorPluginVersionExecute executes the request
	//  @return ConnectV1CustomConnectorPluginVersion
	GetConnectV1CustomConnectorPluginVersionExecute(r ApiGetConnectV1CustomConnectorPluginVersionRequest) (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error)

	/*
		ListConnectV1CustomConnectorPluginVersions List of Custom Connector Plugin Versions

		[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

	Retrieve a sorted, filtered, paginated list of all custom connector plugin versions.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param pluginId The Plugin
		 @return ApiListConnectV1CustomConnectorPluginVersionsRequest
	*/
	ListConnectV1CustomConnectorPluginVersions(ctx _context.Context, pluginId string) ApiListConnectV1CustomConnectorPluginVersionsRequest

	// ListConnectV1CustomConnectorPluginVersionsExecute executes the request
	//  @return ConnectV1CustomConnectorPluginVersionList
	ListConnectV1CustomConnectorPluginVersionsExecute(r ApiListConnectV1CustomConnectorPluginVersionsRequest) (ConnectV1CustomConnectorPluginVersionList, *_nethttp.Response, error)

	/*
		UpdateConnectV1CustomConnectorPluginVersion Update a Custom Connector Plugin Version

		[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

	Make a request to update a custom connector plugin version.



		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param pluginId The Plugin
		 @param id The unique identifier for the custom connector plugin version.
		 @return ApiUpdateConnectV1CustomConnectorPluginVersionRequest
	*/
	UpdateConnectV1CustomConnectorPluginVersion(ctx _context.Context, pluginId string, id string) ApiUpdateConnectV1CustomConnectorPluginVersionRequest

	// UpdateConnectV1CustomConnectorPluginVersionExecute executes the request
	//  @return ConnectV1CustomConnectorPluginVersion
	UpdateConnectV1CustomConnectorPluginVersionExecute(r ApiUpdateConnectV1CustomConnectorPluginVersionRequest) (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error)
}

// CustomConnectorPluginVersionsConnectV1ApiService CustomConnectorPluginVersionsConnectV1Api service
type CustomConnectorPluginVersionsConnectV1ApiService service

type ApiCreateConnectV1CustomConnectorPluginVersionRequest struct {
	ctx                                   _context.Context
	ApiService                            CustomConnectorPluginVersionsConnectV1Api
	pluginId                              string
	connectV1CustomConnectorPluginVersion *ConnectV1CustomConnectorPluginVersion
}

func (r ApiCreateConnectV1CustomConnectorPluginVersionRequest) ConnectV1CustomConnectorPluginVersion(connectV1CustomConnectorPluginVersion ConnectV1CustomConnectorPluginVersion) ApiCreateConnectV1CustomConnectorPluginVersionRequest {
	r.connectV1CustomConnectorPluginVersion = &connectV1CustomConnectorPluginVersion
	return r
}

func (r ApiCreateConnectV1CustomConnectorPluginVersionRequest) Execute() (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error) {
	return r.ApiService.CreateConnectV1CustomConnectorPluginVersionExecute(r)
}

/*
CreateConnectV1CustomConnectorPluginVersion Create a Custom Connector Plugin Version

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Make a request to create a custom connector plugin version.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pluginId The Plugin
	@return ApiCreateConnectV1CustomConnectorPluginVersionRequest
*/
func (a *CustomConnectorPluginVersionsConnectV1ApiService) CreateConnectV1CustomConnectorPluginVersion(ctx _context.Context, pluginId string) ApiCreateConnectV1CustomConnectorPluginVersionRequest {
	return ApiCreateConnectV1CustomConnectorPluginVersionRequest{
		ApiService: a,
		ctx:        ctx,
		pluginId:   pluginId,
	}
}

// Execute executes the request
//
//	@return ConnectV1CustomConnectorPluginVersion
func (a *CustomConnectorPluginVersionsConnectV1ApiService) CreateConnectV1CustomConnectorPluginVersionExecute(r ApiCreateConnectV1CustomConnectorPluginVersionRequest) (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectV1CustomConnectorPluginVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomConnectorPluginVersionsConnectV1ApiService.CreateConnectV1CustomConnectorPluginVersion")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/custom-connector-plugins/{plugin_id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"plugin_id"+"}", _neturl.PathEscape(parameterToString(r.pluginId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectV1CustomConnectorPluginVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteConnectV1CustomConnectorPluginVersionRequest struct {
	ctx        _context.Context
	ApiService CustomConnectorPluginVersionsConnectV1Api
	pluginId   string
	id         string
}

func (r ApiDeleteConnectV1CustomConnectorPluginVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteConnectV1CustomConnectorPluginVersionExecute(r)
}

/*
DeleteConnectV1CustomConnectorPluginVersion Delete a Custom Connector Plugin Version

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Make a request to delete a custom connector plugin version.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pluginId The Plugin
	@param id The unique identifier for the custom connector plugin version.
	@return ApiDeleteConnectV1CustomConnectorPluginVersionRequest
*/
func (a *CustomConnectorPluginVersionsConnectV1ApiService) DeleteConnectV1CustomConnectorPluginVersion(ctx _context.Context, pluginId string, id string) ApiDeleteConnectV1CustomConnectorPluginVersionRequest {
	return ApiDeleteConnectV1CustomConnectorPluginVersionRequest{
		ApiService: a,
		ctx:        ctx,
		pluginId:   pluginId,
		id:         id,
	}
}

// Execute executes the request
func (a *CustomConnectorPluginVersionsConnectV1ApiService) DeleteConnectV1CustomConnectorPluginVersionExecute(r ApiDeleteConnectV1CustomConnectorPluginVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomConnectorPluginVersionsConnectV1ApiService.DeleteConnectV1CustomConnectorPluginVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/custom-connector-plugins/{plugin_id}/versions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"plugin_id"+"}", _neturl.PathEscape(parameterToString(r.pluginId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetConnectV1CustomConnectorPluginVersionRequest struct {
	ctx        _context.Context
	ApiService CustomConnectorPluginVersionsConnectV1Api
	pluginId   string
	id         string
}

func (r ApiGetConnectV1CustomConnectorPluginVersionRequest) Execute() (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error) {
	return r.ApiService.GetConnectV1CustomConnectorPluginVersionExecute(r)
}

/*
GetConnectV1CustomConnectorPluginVersion Read a Custom Connector Plugin Version

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Make a request to read a custom connector plugin version.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pluginId The Plugin
	@param id The unique identifier for the custom connector plugin version.
	@return ApiGetConnectV1CustomConnectorPluginVersionRequest
*/
func (a *CustomConnectorPluginVersionsConnectV1ApiService) GetConnectV1CustomConnectorPluginVersion(ctx _context.Context, pluginId string, id string) ApiGetConnectV1CustomConnectorPluginVersionRequest {
	return ApiGetConnectV1CustomConnectorPluginVersionRequest{
		ApiService: a,
		ctx:        ctx,
		pluginId:   pluginId,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConnectV1CustomConnectorPluginVersion
func (a *CustomConnectorPluginVersionsConnectV1ApiService) GetConnectV1CustomConnectorPluginVersionExecute(r ApiGetConnectV1CustomConnectorPluginVersionRequest) (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectV1CustomConnectorPluginVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomConnectorPluginVersionsConnectV1ApiService.GetConnectV1CustomConnectorPluginVersion")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/custom-connector-plugins/{plugin_id}/versions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"plugin_id"+"}", _neturl.PathEscape(parameterToString(r.pluginId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListConnectV1CustomConnectorPluginVersionsRequest struct {
	ctx        _context.Context
	ApiService CustomConnectorPluginVersionsConnectV1Api
	pluginId   string
	pageSize   *int32
	pageToken  *string
}

// A pagination size for collection requests.
func (r ApiListConnectV1CustomConnectorPluginVersionsRequest) PageSize(pageSize int32) ApiListConnectV1CustomConnectorPluginVersionsRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListConnectV1CustomConnectorPluginVersionsRequest) PageToken(pageToken string) ApiListConnectV1CustomConnectorPluginVersionsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListConnectV1CustomConnectorPluginVersionsRequest) Execute() (ConnectV1CustomConnectorPluginVersionList, *_nethttp.Response, error) {
	return r.ApiService.ListConnectV1CustomConnectorPluginVersionsExecute(r)
}

/*
ListConnectV1CustomConnectorPluginVersions List of Custom Connector Plugin Versions

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Retrieve a sorted, filtered, paginated list of all custom connector plugin versions.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pluginId The Plugin
	@return ApiListConnectV1CustomConnectorPluginVersionsRequest
*/
func (a *CustomConnectorPluginVersionsConnectV1ApiService) ListConnectV1CustomConnectorPluginVersions(ctx _context.Context, pluginId string) ApiListConnectV1CustomConnectorPluginVersionsRequest {
	return ApiListConnectV1CustomConnectorPluginVersionsRequest{
		ApiService: a,
		ctx:        ctx,
		pluginId:   pluginId,
	}
}

// Execute executes the request
//
//	@return ConnectV1CustomConnectorPluginVersionList
func (a *CustomConnectorPluginVersionsConnectV1ApiService) ListConnectV1CustomConnectorPluginVersionsExecute(r ApiListConnectV1CustomConnectorPluginVersionsRequest) (ConnectV1CustomConnectorPluginVersionList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectV1CustomConnectorPluginVersionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomConnectorPluginVersionsConnectV1ApiService.ListConnectV1CustomConnectorPluginVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/custom-connector-plugins/{plugin_id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"plugin_id"+"}", _neturl.PathEscape(parameterToString(r.pluginId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateConnectV1CustomConnectorPluginVersionRequest struct {
	ctx                                   _context.Context
	ApiService                            CustomConnectorPluginVersionsConnectV1Api
	pluginId                              string
	id                                    string
	connectV1CustomConnectorPluginVersion *ConnectV1CustomConnectorPluginVersion
}

func (r ApiUpdateConnectV1CustomConnectorPluginVersionRequest) ConnectV1CustomConnectorPluginVersion(connectV1CustomConnectorPluginVersion ConnectV1CustomConnectorPluginVersion) ApiUpdateConnectV1CustomConnectorPluginVersionRequest {
	r.connectV1CustomConnectorPluginVersion = &connectV1CustomConnectorPluginVersion
	return r
}

func (r ApiUpdateConnectV1CustomConnectorPluginVersionRequest) Execute() (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error) {
	return r.ApiService.UpdateConnectV1CustomConnectorPluginVersionExecute(r)
}

/*
UpdateConnectV1CustomConnectorPluginVersion Update a Custom Connector Plugin Version

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Plugin Versioning APIs EA](https://img.shields.io/badge/-Request%20Access%20To%20Plugin%20Versioning%20APIs%20EA-%23bc8540)](mailto:ccloud-api-access+connect-v1-early-access@confluent.io?subject=Request%20to%20join%20connect/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20connect/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Make a request to update a custom connector plugin version.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pluginId The Plugin
	@param id The unique identifier for the custom connector plugin version.
	@return ApiUpdateConnectV1CustomConnectorPluginVersionRequest
*/
func (a *CustomConnectorPluginVersionsConnectV1ApiService) UpdateConnectV1CustomConnectorPluginVersion(ctx _context.Context, pluginId string, id string) ApiUpdateConnectV1CustomConnectorPluginVersionRequest {
	return ApiUpdateConnectV1CustomConnectorPluginVersionRequest{
		ApiService: a,
		ctx:        ctx,
		pluginId:   pluginId,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConnectV1CustomConnectorPluginVersion
func (a *CustomConnectorPluginVersionsConnectV1ApiService) UpdateConnectV1CustomConnectorPluginVersionExecute(r ApiUpdateConnectV1CustomConnectorPluginVersionRequest) (ConnectV1CustomConnectorPluginVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectV1CustomConnectorPluginVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomConnectorPluginVersionsConnectV1ApiService.UpdateConnectV1CustomConnectorPluginVersion")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/custom-connector-plugins/{plugin_id}/versions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"plugin_id"+"}", _neturl.PathEscape(parameterToString(r.pluginId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectV1CustomConnectorPluginVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
