// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Security Token Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha0
Contact: paas-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// StsV1TokenExchangeReply token exchange response
type StsV1TokenExchangeReply struct {
	// An JWT access token, issued by Confluent, in response to the token exchange request. Client application could use the access token to access confluent public api 
	AccessToken string `json:"access_token,omitempty"`
	// The token type. Always matches the value of requested_token_type from the request.
	IssuedTokenType string `json:"issued_token_type,omitempty"`
	// Indicates the token type value. The only type that Confluent supports is Bearer
	TokenType string `json:"token_type,omitempty"`
	// The length of time, in seconds, that the access token is valid.
	ExpiresIn int32 `json:"expires_in,omitempty"`
}

// NewStsV1TokenExchangeReply instantiates a new StsV1TokenExchangeReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStsV1TokenExchangeReply(accessToken string, issuedTokenType string, tokenType string, expiresIn int32) *StsV1TokenExchangeReply {
	this := StsV1TokenExchangeReply{}
	this.AccessToken = accessToken
	this.IssuedTokenType = issuedTokenType
	this.TokenType = tokenType
	this.ExpiresIn = expiresIn
	return &this
}

// NewStsV1TokenExchangeReplyWithDefaults instantiates a new StsV1TokenExchangeReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStsV1TokenExchangeReplyWithDefaults() *StsV1TokenExchangeReply {
	this := StsV1TokenExchangeReply{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *StsV1TokenExchangeReply) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *StsV1TokenExchangeReply) GetAccessTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *StsV1TokenExchangeReply) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetIssuedTokenType returns the IssuedTokenType field value
func (o *StsV1TokenExchangeReply) GetIssuedTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuedTokenType
}

// GetIssuedTokenTypeOk returns a tuple with the IssuedTokenType field value
// and a boolean to check if the value has been set.
func (o *StsV1TokenExchangeReply) GetIssuedTokenTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IssuedTokenType, true
}

// SetIssuedTokenType sets field value
func (o *StsV1TokenExchangeReply) SetIssuedTokenType(v string) {
	o.IssuedTokenType = v
}

// GetTokenType returns the TokenType field value
func (o *StsV1TokenExchangeReply) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *StsV1TokenExchangeReply) GetTokenTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *StsV1TokenExchangeReply) SetTokenType(v string) {
	o.TokenType = v
}

// GetExpiresIn returns the ExpiresIn field value
func (o *StsV1TokenExchangeReply) GetExpiresIn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value
// and a boolean to check if the value has been set.
func (o *StsV1TokenExchangeReply) GetExpiresInOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExpiresIn, true
}

// SetExpiresIn sets field value
func (o *StsV1TokenExchangeReply) SetExpiresIn(v int32) {
	o.ExpiresIn = v
}

// Redact resets all sensitive fields to their zero value.
func (o *StsV1TokenExchangeReply) Redact() {
    o.recurseRedact(&o.AccessToken)
    o.recurseRedact(&o.IssuedTokenType)
    o.recurseRedact(&o.TokenType)
    o.recurseRedact(&o.ExpiresIn)
}

func (o *StsV1TokenExchangeReply) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o StsV1TokenExchangeReply) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o StsV1TokenExchangeReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["access_token"] = o.AccessToken
	}
	if true {
		toSerialize["issued_token_type"] = o.IssuedTokenType
	}
	if true {
		toSerialize["token_type"] = o.TokenType
	}
	if true {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableStsV1TokenExchangeReply struct {
	value *StsV1TokenExchangeReply
	isSet bool
}

func (v NullableStsV1TokenExchangeReply) Get() *StsV1TokenExchangeReply {
	return v.value
}

func (v *NullableStsV1TokenExchangeReply) Set(val *StsV1TokenExchangeReply) {
	v.value = val
	v.isSet = true
}

func (v NullableStsV1TokenExchangeReply) IsSet() bool {
	return v.isSet
}

func (v *NullableStsV1TokenExchangeReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStsV1TokenExchangeReply(val *StsV1TokenExchangeReply) *NullableStsV1TokenExchangeReply {
	return &NullableStsV1TokenExchangeReply{value: val, isSet: true}
}

func (v NullableStsV1TokenExchangeReply) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableStsV1TokenExchangeReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


