// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Data Catalog

REST API for the Data Catalog

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// PartialUpdateParams struct for PartialUpdateParams
type PartialUpdateParams struct {
	// The type name
	TypeName *string `json:"typeName,omitempty"`
	// The attributes
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	// The internal guid
	Guid *string `json:"guid,omitempty"`
	// The status
	Status *string `json:"status,omitempty"`
	// The classification (tag) names
	ClassificationNames *[]string `json:"classificationNames,omitempty"`
	// The classifications (tags)
	Classifications *[]ClassificationHeader `json:"classifications,omitempty"`
	// Whether is incomplete
	IsIncomplete *bool `json:"isIncomplete,omitempty"`
}

// NewPartialUpdateParams instantiates a new PartialUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialUpdateParams() *PartialUpdateParams {
	this := PartialUpdateParams{}
	return &this
}

// NewPartialUpdateParamsWithDefaults instantiates a new PartialUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialUpdateParamsWithDefaults() *PartialUpdateParams {
	this := PartialUpdateParams{}
	return &this
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *PartialUpdateParams) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateParams) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *PartialUpdateParams) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *PartialUpdateParams) SetTypeName(v string) {
	o.TypeName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *PartialUpdateParams) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateParams) GetAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *PartialUpdateParams) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *PartialUpdateParams) SetAttributes(v map[string]interface{}) {
	o.Attributes = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *PartialUpdateParams) GetGuid() string {
	if o == nil || o.Guid == nil {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateParams) GetGuidOk() (*string, bool) {
	if o == nil || o.Guid == nil {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *PartialUpdateParams) HasGuid() bool {
	if o != nil && o.Guid != nil {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *PartialUpdateParams) SetGuid(v string) {
	o.Guid = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PartialUpdateParams) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateParams) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PartialUpdateParams) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PartialUpdateParams) SetStatus(v string) {
	o.Status = &v
}

// GetClassificationNames returns the ClassificationNames field value if set, zero value otherwise.
func (o *PartialUpdateParams) GetClassificationNames() []string {
	if o == nil || o.ClassificationNames == nil {
		var ret []string
		return ret
	}
	return *o.ClassificationNames
}

// GetClassificationNamesOk returns a tuple with the ClassificationNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateParams) GetClassificationNamesOk() (*[]string, bool) {
	if o == nil || o.ClassificationNames == nil {
		return nil, false
	}
	return o.ClassificationNames, true
}

// HasClassificationNames returns a boolean if a field has been set.
func (o *PartialUpdateParams) HasClassificationNames() bool {
	if o != nil && o.ClassificationNames != nil {
		return true
	}

	return false
}

// SetClassificationNames gets a reference to the given []string and assigns it to the ClassificationNames field.
func (o *PartialUpdateParams) SetClassificationNames(v []string) {
	o.ClassificationNames = &v
}

// GetClassifications returns the Classifications field value if set, zero value otherwise.
func (o *PartialUpdateParams) GetClassifications() []ClassificationHeader {
	if o == nil || o.Classifications == nil {
		var ret []ClassificationHeader
		return ret
	}
	return *o.Classifications
}

// GetClassificationsOk returns a tuple with the Classifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateParams) GetClassificationsOk() (*[]ClassificationHeader, bool) {
	if o == nil || o.Classifications == nil {
		return nil, false
	}
	return o.Classifications, true
}

// HasClassifications returns a boolean if a field has been set.
func (o *PartialUpdateParams) HasClassifications() bool {
	if o != nil && o.Classifications != nil {
		return true
	}

	return false
}

// SetClassifications gets a reference to the given []ClassificationHeader and assigns it to the Classifications field.
func (o *PartialUpdateParams) SetClassifications(v []ClassificationHeader) {
	o.Classifications = &v
}

// GetIsIncomplete returns the IsIncomplete field value if set, zero value otherwise.
func (o *PartialUpdateParams) GetIsIncomplete() bool {
	if o == nil || o.IsIncomplete == nil {
		var ret bool
		return ret
	}
	return *o.IsIncomplete
}

// GetIsIncompleteOk returns a tuple with the IsIncomplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateParams) GetIsIncompleteOk() (*bool, bool) {
	if o == nil || o.IsIncomplete == nil {
		return nil, false
	}
	return o.IsIncomplete, true
}

// HasIsIncomplete returns a boolean if a field has been set.
func (o *PartialUpdateParams) HasIsIncomplete() bool {
	if o != nil && o.IsIncomplete != nil {
		return true
	}

	return false
}

// SetIsIncomplete gets a reference to the given bool and assigns it to the IsIncomplete field.
func (o *PartialUpdateParams) SetIsIncomplete(v bool) {
	o.IsIncomplete = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *PartialUpdateParams) Redact() {
	o.recurseRedact(o.TypeName)
	o.recurseRedact(o.Attributes)
	o.recurseRedact(o.Guid)
	o.recurseRedact(o.Status)
	o.recurseRedact(o.ClassificationNames)
	o.recurseRedact(o.Classifications)
	o.recurseRedact(o.IsIncomplete)
}

func (o *PartialUpdateParams) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o PartialUpdateParams) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o PartialUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Guid != nil {
		toSerialize["guid"] = o.Guid
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ClassificationNames != nil {
		toSerialize["classificationNames"] = o.ClassificationNames
	}
	if o.Classifications != nil {
		toSerialize["classifications"] = o.Classifications
	}
	if o.IsIncomplete != nil {
		toSerialize["isIncomplete"] = o.IsIncomplete
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullablePartialUpdateParams struct {
	value *PartialUpdateParams
	isSet bool
}

func (v NullablePartialUpdateParams) Get() *PartialUpdateParams {
	return v.value
}

func (v *NullablePartialUpdateParams) Set(val *PartialUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialUpdateParams(val *PartialUpdateParams) *NullablePartialUpdateParams {
	return &NullablePartialUpdateParams{value: val, isSet: true}
}

func (v NullablePartialUpdateParams) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullablePartialUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
