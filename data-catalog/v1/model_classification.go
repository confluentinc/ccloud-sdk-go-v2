// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Data Catalog

REST API for the Data Catalog

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// Classification struct for Classification
type Classification struct {
	// The tag name
	TypeName *string `json:"typeName,omitempty"`
	// The tag attributes
	Attributes *map[string]map[string]interface{} `json:"attributes,omitempty"`
	// The internal entity guid
	EntityGuid *string `json:"entityGuid,omitempty"`
	// The entity status
	EntityStatus *string `json:"entityStatus,omitempty"`
	// Whether to propagate the tag
	Propagate *bool `json:"propagate,omitempty"`
	// The validity periods
	ValidityPeriods *[]TimeBoundary `json:"validityPeriods,omitempty"`
	// Whether to remove propagations on entity delete
	RemovePropagationsOnEntityDelete *bool `json:"removePropagationsOnEntityDelete,omitempty"`
}

// NewClassification instantiates a new Classification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClassification() *Classification {
	this := Classification{}
	return &this
}

// NewClassificationWithDefaults instantiates a new Classification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClassificationWithDefaults() *Classification {
	this := Classification{}
	return &this
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *Classification) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *Classification) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *Classification) SetTypeName(v string) {
	o.TypeName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Classification) GetAttributes() map[string]map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetAttributesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Classification) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *Classification) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = &v
}

// GetEntityGuid returns the EntityGuid field value if set, zero value otherwise.
func (o *Classification) GetEntityGuid() string {
	if o == nil || o.EntityGuid == nil {
		var ret string
		return ret
	}
	return *o.EntityGuid
}

// GetEntityGuidOk returns a tuple with the EntityGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetEntityGuidOk() (*string, bool) {
	if o == nil || o.EntityGuid == nil {
		return nil, false
	}
	return o.EntityGuid, true
}

// HasEntityGuid returns a boolean if a field has been set.
func (o *Classification) HasEntityGuid() bool {
	if o != nil && o.EntityGuid != nil {
		return true
	}

	return false
}

// SetEntityGuid gets a reference to the given string and assigns it to the EntityGuid field.
func (o *Classification) SetEntityGuid(v string) {
	o.EntityGuid = &v
}

// GetEntityStatus returns the EntityStatus field value if set, zero value otherwise.
func (o *Classification) GetEntityStatus() string {
	if o == nil || o.EntityStatus == nil {
		var ret string
		return ret
	}
	return *o.EntityStatus
}

// GetEntityStatusOk returns a tuple with the EntityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetEntityStatusOk() (*string, bool) {
	if o == nil || o.EntityStatus == nil {
		return nil, false
	}
	return o.EntityStatus, true
}

// HasEntityStatus returns a boolean if a field has been set.
func (o *Classification) HasEntityStatus() bool {
	if o != nil && o.EntityStatus != nil {
		return true
	}

	return false
}

// SetEntityStatus gets a reference to the given string and assigns it to the EntityStatus field.
func (o *Classification) SetEntityStatus(v string) {
	o.EntityStatus = &v
}

// GetPropagate returns the Propagate field value if set, zero value otherwise.
func (o *Classification) GetPropagate() bool {
	if o == nil || o.Propagate == nil {
		var ret bool
		return ret
	}
	return *o.Propagate
}

// GetPropagateOk returns a tuple with the Propagate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetPropagateOk() (*bool, bool) {
	if o == nil || o.Propagate == nil {
		return nil, false
	}
	return o.Propagate, true
}

// HasPropagate returns a boolean if a field has been set.
func (o *Classification) HasPropagate() bool {
	if o != nil && o.Propagate != nil {
		return true
	}

	return false
}

// SetPropagate gets a reference to the given bool and assigns it to the Propagate field.
func (o *Classification) SetPropagate(v bool) {
	o.Propagate = &v
}

// GetValidityPeriods returns the ValidityPeriods field value if set, zero value otherwise.
func (o *Classification) GetValidityPeriods() []TimeBoundary {
	if o == nil || o.ValidityPeriods == nil {
		var ret []TimeBoundary
		return ret
	}
	return *o.ValidityPeriods
}

// GetValidityPeriodsOk returns a tuple with the ValidityPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetValidityPeriodsOk() (*[]TimeBoundary, bool) {
	if o == nil || o.ValidityPeriods == nil {
		return nil, false
	}
	return o.ValidityPeriods, true
}

// HasValidityPeriods returns a boolean if a field has been set.
func (o *Classification) HasValidityPeriods() bool {
	if o != nil && o.ValidityPeriods != nil {
		return true
	}

	return false
}

// SetValidityPeriods gets a reference to the given []TimeBoundary and assigns it to the ValidityPeriods field.
func (o *Classification) SetValidityPeriods(v []TimeBoundary) {
	o.ValidityPeriods = &v
}

// GetRemovePropagationsOnEntityDelete returns the RemovePropagationsOnEntityDelete field value if set, zero value otherwise.
func (o *Classification) GetRemovePropagationsOnEntityDelete() bool {
	if o == nil || o.RemovePropagationsOnEntityDelete == nil {
		var ret bool
		return ret
	}
	return *o.RemovePropagationsOnEntityDelete
}

// GetRemovePropagationsOnEntityDeleteOk returns a tuple with the RemovePropagationsOnEntityDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetRemovePropagationsOnEntityDeleteOk() (*bool, bool) {
	if o == nil || o.RemovePropagationsOnEntityDelete == nil {
		return nil, false
	}
	return o.RemovePropagationsOnEntityDelete, true
}

// HasRemovePropagationsOnEntityDelete returns a boolean if a field has been set.
func (o *Classification) HasRemovePropagationsOnEntityDelete() bool {
	if o != nil && o.RemovePropagationsOnEntityDelete != nil {
		return true
	}

	return false
}

// SetRemovePropagationsOnEntityDelete gets a reference to the given bool and assigns it to the RemovePropagationsOnEntityDelete field.
func (o *Classification) SetRemovePropagationsOnEntityDelete(v bool) {
	o.RemovePropagationsOnEntityDelete = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *Classification) Redact() {
	o.recurseRedact(o.TypeName)
	o.recurseRedact(o.Attributes)
	o.recurseRedact(o.EntityGuid)
	o.recurseRedact(o.EntityStatus)
	o.recurseRedact(o.Propagate)
	o.recurseRedact(o.ValidityPeriods)
	o.recurseRedact(o.RemovePropagationsOnEntityDelete)
}

func (o *Classification) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o Classification) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o Classification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.EntityGuid != nil {
		toSerialize["entityGuid"] = o.EntityGuid
	}
	if o.EntityStatus != nil {
		toSerialize["entityStatus"] = o.EntityStatus
	}
	if o.Propagate != nil {
		toSerialize["propagate"] = o.Propagate
	}
	if o.ValidityPeriods != nil {
		toSerialize["validityPeriods"] = o.ValidityPeriods
	}
	if o.RemovePropagationsOnEntityDelete != nil {
		toSerialize["removePropagationsOnEntityDelete"] = o.RemovePropagationsOnEntityDelete
	}
	return json.Marshal(toSerialize)
}

type NullableClassification struct {
	value *Classification
	isSet bool
}

func (v NullableClassification) Get() *Classification {
	return v.value
}

func (v *NullableClassification) Set(val *Classification) {
	v.value = val
	v.isSet = true
}

func (v NullableClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassification(val *Classification) *NullableClassification {
	return &NullableClassification{value: val, isSet: true}
}

func (v NullableClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
