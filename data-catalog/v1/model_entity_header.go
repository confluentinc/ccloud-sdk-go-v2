// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Data Catalog

REST API for the Data Catalog

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// EntityHeader struct for EntityHeader
type EntityHeader struct {
	// The type name
	TypeName *string `json:"typeName,omitempty"`
	// The attributes
	Attributes *map[string]map[string]interface{} `json:"attributes,omitempty"`
	// The internal guid
	Guid *string `json:"guid,omitempty"`
	// The status
	Status *string `json:"status,omitempty"`
	// The display text
	DisplayText *string `json:"displayText,omitempty"`
	// The classification (tag) names
	ClassificationNames *[]string `json:"classificationNames,omitempty"`
	// The classifications (tags)
	Classifications *[]Classification `json:"classifications,omitempty"`
	// The meaning names
	MeaningNames *[]string `json:"meaningNames,omitempty"`
	// The meanings
	Meanings *[]TermAssignmentHeader `json:"meanings,omitempty"`
	// Whether is incomplete
	IsIncomplete *bool `json:"isIncomplete,omitempty"`
	// The labels
	Labels *[]string `json:"labels,omitempty"`
}

// NewEntityHeader instantiates a new EntityHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityHeader() *EntityHeader {
	this := EntityHeader{}
	return &this
}

// NewEntityHeaderWithDefaults instantiates a new EntityHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityHeaderWithDefaults() *EntityHeader {
	this := EntityHeader{}
	return &this
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *EntityHeader) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *EntityHeader) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *EntityHeader) SetTypeName(v string) {
	o.TypeName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *EntityHeader) GetAttributes() map[string]map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetAttributesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *EntityHeader) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *EntityHeader) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *EntityHeader) GetGuid() string {
	if o == nil || o.Guid == nil {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetGuidOk() (*string, bool) {
	if o == nil || o.Guid == nil {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *EntityHeader) HasGuid() bool {
	if o != nil && o.Guid != nil {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *EntityHeader) SetGuid(v string) {
	o.Guid = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EntityHeader) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EntityHeader) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EntityHeader) SetStatus(v string) {
	o.Status = &v
}

// GetDisplayText returns the DisplayText field value if set, zero value otherwise.
func (o *EntityHeader) GetDisplayText() string {
	if o == nil || o.DisplayText == nil {
		var ret string
		return ret
	}
	return *o.DisplayText
}

// GetDisplayTextOk returns a tuple with the DisplayText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetDisplayTextOk() (*string, bool) {
	if o == nil || o.DisplayText == nil {
		return nil, false
	}
	return o.DisplayText, true
}

// HasDisplayText returns a boolean if a field has been set.
func (o *EntityHeader) HasDisplayText() bool {
	if o != nil && o.DisplayText != nil {
		return true
	}

	return false
}

// SetDisplayText gets a reference to the given string and assigns it to the DisplayText field.
func (o *EntityHeader) SetDisplayText(v string) {
	o.DisplayText = &v
}

// GetClassificationNames returns the ClassificationNames field value if set, zero value otherwise.
func (o *EntityHeader) GetClassificationNames() []string {
	if o == nil || o.ClassificationNames == nil {
		var ret []string
		return ret
	}
	return *o.ClassificationNames
}

// GetClassificationNamesOk returns a tuple with the ClassificationNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetClassificationNamesOk() (*[]string, bool) {
	if o == nil || o.ClassificationNames == nil {
		return nil, false
	}
	return o.ClassificationNames, true
}

// HasClassificationNames returns a boolean if a field has been set.
func (o *EntityHeader) HasClassificationNames() bool {
	if o != nil && o.ClassificationNames != nil {
		return true
	}

	return false
}

// SetClassificationNames gets a reference to the given []string and assigns it to the ClassificationNames field.
func (o *EntityHeader) SetClassificationNames(v []string) {
	o.ClassificationNames = &v
}

// GetClassifications returns the Classifications field value if set, zero value otherwise.
func (o *EntityHeader) GetClassifications() []Classification {
	if o == nil || o.Classifications == nil {
		var ret []Classification
		return ret
	}
	return *o.Classifications
}

// GetClassificationsOk returns a tuple with the Classifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetClassificationsOk() (*[]Classification, bool) {
	if o == nil || o.Classifications == nil {
		return nil, false
	}
	return o.Classifications, true
}

// HasClassifications returns a boolean if a field has been set.
func (o *EntityHeader) HasClassifications() bool {
	if o != nil && o.Classifications != nil {
		return true
	}

	return false
}

// SetClassifications gets a reference to the given []Classification and assigns it to the Classifications field.
func (o *EntityHeader) SetClassifications(v []Classification) {
	o.Classifications = &v
}

// GetMeaningNames returns the MeaningNames field value if set, zero value otherwise.
func (o *EntityHeader) GetMeaningNames() []string {
	if o == nil || o.MeaningNames == nil {
		var ret []string
		return ret
	}
	return *o.MeaningNames
}

// GetMeaningNamesOk returns a tuple with the MeaningNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetMeaningNamesOk() (*[]string, bool) {
	if o == nil || o.MeaningNames == nil {
		return nil, false
	}
	return o.MeaningNames, true
}

// HasMeaningNames returns a boolean if a field has been set.
func (o *EntityHeader) HasMeaningNames() bool {
	if o != nil && o.MeaningNames != nil {
		return true
	}

	return false
}

// SetMeaningNames gets a reference to the given []string and assigns it to the MeaningNames field.
func (o *EntityHeader) SetMeaningNames(v []string) {
	o.MeaningNames = &v
}

// GetMeanings returns the Meanings field value if set, zero value otherwise.
func (o *EntityHeader) GetMeanings() []TermAssignmentHeader {
	if o == nil || o.Meanings == nil {
		var ret []TermAssignmentHeader
		return ret
	}
	return *o.Meanings
}

// GetMeaningsOk returns a tuple with the Meanings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetMeaningsOk() (*[]TermAssignmentHeader, bool) {
	if o == nil || o.Meanings == nil {
		return nil, false
	}
	return o.Meanings, true
}

// HasMeanings returns a boolean if a field has been set.
func (o *EntityHeader) HasMeanings() bool {
	if o != nil && o.Meanings != nil {
		return true
	}

	return false
}

// SetMeanings gets a reference to the given []TermAssignmentHeader and assigns it to the Meanings field.
func (o *EntityHeader) SetMeanings(v []TermAssignmentHeader) {
	o.Meanings = &v
}

// GetIsIncomplete returns the IsIncomplete field value if set, zero value otherwise.
func (o *EntityHeader) GetIsIncomplete() bool {
	if o == nil || o.IsIncomplete == nil {
		var ret bool
		return ret
	}
	return *o.IsIncomplete
}

// GetIsIncompleteOk returns a tuple with the IsIncomplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetIsIncompleteOk() (*bool, bool) {
	if o == nil || o.IsIncomplete == nil {
		return nil, false
	}
	return o.IsIncomplete, true
}

// HasIsIncomplete returns a boolean if a field has been set.
func (o *EntityHeader) HasIsIncomplete() bool {
	if o != nil && o.IsIncomplete != nil {
		return true
	}

	return false
}

// SetIsIncomplete gets a reference to the given bool and assigns it to the IsIncomplete field.
func (o *EntityHeader) SetIsIncomplete(v bool) {
	o.IsIncomplete = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *EntityHeader) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHeader) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *EntityHeader) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *EntityHeader) SetLabels(v []string) {
	o.Labels = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *EntityHeader) Redact() {
	o.recurseRedact(o.TypeName)
	o.recurseRedact(o.Attributes)
	o.recurseRedact(o.Guid)
	o.recurseRedact(o.Status)
	o.recurseRedact(o.DisplayText)
	o.recurseRedact(o.ClassificationNames)
	o.recurseRedact(o.Classifications)
	o.recurseRedact(o.MeaningNames)
	o.recurseRedact(o.Meanings)
	o.recurseRedact(o.IsIncomplete)
	o.recurseRedact(o.Labels)
}

func (o *EntityHeader) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o EntityHeader) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o EntityHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Guid != nil {
		toSerialize["guid"] = o.Guid
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.DisplayText != nil {
		toSerialize["displayText"] = o.DisplayText
	}
	if o.ClassificationNames != nil {
		toSerialize["classificationNames"] = o.ClassificationNames
	}
	if o.Classifications != nil {
		toSerialize["classifications"] = o.Classifications
	}
	if o.MeaningNames != nil {
		toSerialize["meaningNames"] = o.MeaningNames
	}
	if o.Meanings != nil {
		toSerialize["meanings"] = o.Meanings
	}
	if o.IsIncomplete != nil {
		toSerialize["isIncomplete"] = o.IsIncomplete
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableEntityHeader struct {
	value *EntityHeader
	isSet bool
}

func (v NullableEntityHeader) Get() *EntityHeader {
	return v.value
}

func (v *NullableEntityHeader) Set(val *EntityHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityHeader(val *EntityHeader) *NullableEntityHeader {
	return &NullableEntityHeader{value: val, isSet: true}
}

func (v NullableEntityHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
