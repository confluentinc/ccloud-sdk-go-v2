// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Data Catalog

REST API for the Data Catalog

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// TermAssignmentHeader struct for TermAssignmentHeader
type TermAssignmentHeader struct {
	// The term guid
	TermGuid *string `json:"termGuid,omitempty"`
	// The relation guid
	RelationGuid *string `json:"relationGuid,omitempty"`
	// The description
	Description *string `json:"description,omitempty"`
	// The display text
	DisplayText *string `json:"displayText,omitempty"`
	// The expression
	Expression *string `json:"expression,omitempty"`
	// The creator
	CreatedBy *string `json:"createdBy,omitempty"`
	// The steward
	Steward *string `json:"steward,omitempty"`
	// The source
	Source *string `json:"source,omitempty"`
	// The confidence
	Confidence *int32 `json:"confidence,omitempty"`
	// The status
	Status *string `json:"status,omitempty"`
}

// NewTermAssignmentHeader instantiates a new TermAssignmentHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTermAssignmentHeader() *TermAssignmentHeader {
	this := TermAssignmentHeader{}
	return &this
}

// NewTermAssignmentHeaderWithDefaults instantiates a new TermAssignmentHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermAssignmentHeaderWithDefaults() *TermAssignmentHeader {
	this := TermAssignmentHeader{}
	return &this
}

// GetTermGuid returns the TermGuid field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetTermGuid() string {
	if o == nil || o.TermGuid == nil {
		var ret string
		return ret
	}
	return *o.TermGuid
}

// GetTermGuidOk returns a tuple with the TermGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetTermGuidOk() (*string, bool) {
	if o == nil || o.TermGuid == nil {
		return nil, false
	}
	return o.TermGuid, true
}

// HasTermGuid returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasTermGuid() bool {
	if o != nil && o.TermGuid != nil {
		return true
	}

	return false
}

// SetTermGuid gets a reference to the given string and assigns it to the TermGuid field.
func (o *TermAssignmentHeader) SetTermGuid(v string) {
	o.TermGuid = &v
}

// GetRelationGuid returns the RelationGuid field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetRelationGuid() string {
	if o == nil || o.RelationGuid == nil {
		var ret string
		return ret
	}
	return *o.RelationGuid
}

// GetRelationGuidOk returns a tuple with the RelationGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetRelationGuidOk() (*string, bool) {
	if o == nil || o.RelationGuid == nil {
		return nil, false
	}
	return o.RelationGuid, true
}

// HasRelationGuid returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasRelationGuid() bool {
	if o != nil && o.RelationGuid != nil {
		return true
	}

	return false
}

// SetRelationGuid gets a reference to the given string and assigns it to the RelationGuid field.
func (o *TermAssignmentHeader) SetRelationGuid(v string) {
	o.RelationGuid = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TermAssignmentHeader) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayText returns the DisplayText field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetDisplayText() string {
	if o == nil || o.DisplayText == nil {
		var ret string
		return ret
	}
	return *o.DisplayText
}

// GetDisplayTextOk returns a tuple with the DisplayText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetDisplayTextOk() (*string, bool) {
	if o == nil || o.DisplayText == nil {
		return nil, false
	}
	return o.DisplayText, true
}

// HasDisplayText returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasDisplayText() bool {
	if o != nil && o.DisplayText != nil {
		return true
	}

	return false
}

// SetDisplayText gets a reference to the given string and assigns it to the DisplayText field.
func (o *TermAssignmentHeader) SetDisplayText(v string) {
	o.DisplayText = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetExpression() string {
	if o == nil || o.Expression == nil {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetExpressionOk() (*string, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *TermAssignmentHeader) SetExpression(v string) {
	o.Expression = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *TermAssignmentHeader) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetSteward returns the Steward field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetSteward() string {
	if o == nil || o.Steward == nil {
		var ret string
		return ret
	}
	return *o.Steward
}

// GetStewardOk returns a tuple with the Steward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetStewardOk() (*string, bool) {
	if o == nil || o.Steward == nil {
		return nil, false
	}
	return o.Steward, true
}

// HasSteward returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasSteward() bool {
	if o != nil && o.Steward != nil {
		return true
	}

	return false
}

// SetSteward gets a reference to the given string and assigns it to the Steward field.
func (o *TermAssignmentHeader) SetSteward(v string) {
	o.Steward = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *TermAssignmentHeader) SetSource(v string) {
	o.Source = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetConfidence() int32 {
	if o == nil || o.Confidence == nil {
		var ret int32
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetConfidenceOk() (*int32, bool) {
	if o == nil || o.Confidence == nil {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasConfidence() bool {
	if o != nil && o.Confidence != nil {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given int32 and assigns it to the Confidence field.
func (o *TermAssignmentHeader) SetConfidence(v int32) {
	o.Confidence = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TermAssignmentHeader) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAssignmentHeader) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TermAssignmentHeader) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TermAssignmentHeader) SetStatus(v string) {
	o.Status = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *TermAssignmentHeader) Redact() {
	o.recurseRedact(o.TermGuid)
	o.recurseRedact(o.RelationGuid)
	o.recurseRedact(o.Description)
	o.recurseRedact(o.DisplayText)
	o.recurseRedact(o.Expression)
	o.recurseRedact(o.CreatedBy)
	o.recurseRedact(o.Steward)
	o.recurseRedact(o.Source)
	o.recurseRedact(o.Confidence)
	o.recurseRedact(o.Status)
}

func (o *TermAssignmentHeader) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o TermAssignmentHeader) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o TermAssignmentHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TermGuid != nil {
		toSerialize["termGuid"] = o.TermGuid
	}
	if o.RelationGuid != nil {
		toSerialize["relationGuid"] = o.RelationGuid
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayText != nil {
		toSerialize["displayText"] = o.DisplayText
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.Steward != nil {
		toSerialize["steward"] = o.Steward
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Confidence != nil {
		toSerialize["confidence"] = o.Confidence
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableTermAssignmentHeader struct {
	value *TermAssignmentHeader
	isSet bool
}

func (v NullableTermAssignmentHeader) Get() *TermAssignmentHeader {
	return v.value
}

func (v *NullableTermAssignmentHeader) Set(val *TermAssignmentHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableTermAssignmentHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableTermAssignmentHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermAssignmentHeader(val *TermAssignmentHeader) *NullableTermAssignmentHeader {
	return &NullableTermAssignmentHeader{value: val, isSet: true}
}

func (v NullableTermAssignmentHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermAssignmentHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
