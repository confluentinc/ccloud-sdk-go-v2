// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Data Catalog

REST API for the Data Catalog

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// EntityWithExtInfo struct for EntityWithExtInfo
type EntityWithExtInfo struct {
	// The referred entities
	ReferredEntities *map[string]Entity `json:"referredEntities,omitempty"`
	Entity           *Entity            `json:"entity,omitempty"`
}

// NewEntityWithExtInfo instantiates a new EntityWithExtInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityWithExtInfo() *EntityWithExtInfo {
	this := EntityWithExtInfo{}
	return &this
}

// NewEntityWithExtInfoWithDefaults instantiates a new EntityWithExtInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityWithExtInfoWithDefaults() *EntityWithExtInfo {
	this := EntityWithExtInfo{}
	return &this
}

// GetReferredEntities returns the ReferredEntities field value if set, zero value otherwise.
func (o *EntityWithExtInfo) GetReferredEntities() map[string]Entity {
	if o == nil || o.ReferredEntities == nil {
		var ret map[string]Entity
		return ret
	}
	return *o.ReferredEntities
}

// GetReferredEntitiesOk returns a tuple with the ReferredEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityWithExtInfo) GetReferredEntitiesOk() (*map[string]Entity, bool) {
	if o == nil || o.ReferredEntities == nil {
		return nil, false
	}
	return o.ReferredEntities, true
}

// HasReferredEntities returns a boolean if a field has been set.
func (o *EntityWithExtInfo) HasReferredEntities() bool {
	if o != nil && o.ReferredEntities != nil {
		return true
	}

	return false
}

// SetReferredEntities gets a reference to the given map[string]Entity and assigns it to the ReferredEntities field.
func (o *EntityWithExtInfo) SetReferredEntities(v map[string]Entity) {
	o.ReferredEntities = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *EntityWithExtInfo) GetEntity() Entity {
	if o == nil || o.Entity == nil {
		var ret Entity
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityWithExtInfo) GetEntityOk() (*Entity, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *EntityWithExtInfo) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given Entity and assigns it to the Entity field.
func (o *EntityWithExtInfo) SetEntity(v Entity) {
	o.Entity = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *EntityWithExtInfo) Redact() {
	o.recurseRedact(o.ReferredEntities)
	o.recurseRedact(o.Entity)
}

func (o *EntityWithExtInfo) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o EntityWithExtInfo) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o EntityWithExtInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReferredEntities != nil {
		toSerialize["referredEntities"] = o.ReferredEntities
	}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	return json.Marshal(toSerialize)
}

type NullableEntityWithExtInfo struct {
	value *EntityWithExtInfo
	isSet bool
}

func (v NullableEntityWithExtInfo) Get() *EntityWithExtInfo {
	return v.value
}

func (v *NullableEntityWithExtInfo) Set(val *EntityWithExtInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityWithExtInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityWithExtInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityWithExtInfo(val *EntityWithExtInfo) *NullableEntityWithExtInfo {
	return &NullableEntityWithExtInfo{value: val, isSet: true}
}

func (v NullableEntityWithExtInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityWithExtInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
