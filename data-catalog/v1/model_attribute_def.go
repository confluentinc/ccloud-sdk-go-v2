// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Data Catalog

REST API for the Data Catalog

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// AttributeDef struct for AttributeDef
type AttributeDef struct {
	// The name
	Name *string `json:"name,omitempty"`
	// The type name
	TypeName *string `json:"typeName,omitempty"`
	// Whether is optional
	IsOptional *bool `json:"isOptional,omitempty"`
	// The cardinality
	Cardinality *string `json:"cardinality,omitempty"`
	// The values min count
	ValuesMinCount *int32 `json:"valuesMinCount,omitempty"`
	// The values max count
	ValuesMaxCount *int32 `json:"valuesMaxCount,omitempty"`
	// Whether is unique
	IsUnique *bool `json:"isUnique,omitempty"`
	// Whether is indexable
	IsIndexable *bool `json:"isIndexable,omitempty"`
	// Whether to include in notifications
	IncludeInNotification *bool `json:"includeInNotification,omitempty"`
	// The default value
	DefaultValue *string `json:"defaultValue,omitempty"`
	// The description
	Description *string `json:"description,omitempty"`
	// The search weight
	SearchWeight *int32 `json:"searchWeight,omitempty"`
	// The index type
	IndexType *string `json:"indexType,omitempty"`
	// The constraints
	Constraints *[]ConstraintDef `json:"constraints,omitempty"`
	// The options
	Options *map[string]string `json:"options,omitempty"`
	// The display name
	DisplayName *string `json:"displayName,omitempty"`
}

// NewAttributeDef instantiates a new AttributeDef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeDef() *AttributeDef {
	this := AttributeDef{}
	return &this
}

// NewAttributeDefWithDefaults instantiates a new AttributeDef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeDefWithDefaults() *AttributeDef {
	this := AttributeDef{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AttributeDef) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AttributeDef) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AttributeDef) SetName(v string) {
	o.Name = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *AttributeDef) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *AttributeDef) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *AttributeDef) SetTypeName(v string) {
	o.TypeName = &v
}

// GetIsOptional returns the IsOptional field value if set, zero value otherwise.
func (o *AttributeDef) GetIsOptional() bool {
	if o == nil || o.IsOptional == nil {
		var ret bool
		return ret
	}
	return *o.IsOptional
}

// GetIsOptionalOk returns a tuple with the IsOptional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetIsOptionalOk() (*bool, bool) {
	if o == nil || o.IsOptional == nil {
		return nil, false
	}
	return o.IsOptional, true
}

// HasIsOptional returns a boolean if a field has been set.
func (o *AttributeDef) HasIsOptional() bool {
	if o != nil && o.IsOptional != nil {
		return true
	}

	return false
}

// SetIsOptional gets a reference to the given bool and assigns it to the IsOptional field.
func (o *AttributeDef) SetIsOptional(v bool) {
	o.IsOptional = &v
}

// GetCardinality returns the Cardinality field value if set, zero value otherwise.
func (o *AttributeDef) GetCardinality() string {
	if o == nil || o.Cardinality == nil {
		var ret string
		return ret
	}
	return *o.Cardinality
}

// GetCardinalityOk returns a tuple with the Cardinality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetCardinalityOk() (*string, bool) {
	if o == nil || o.Cardinality == nil {
		return nil, false
	}
	return o.Cardinality, true
}

// HasCardinality returns a boolean if a field has been set.
func (o *AttributeDef) HasCardinality() bool {
	if o != nil && o.Cardinality != nil {
		return true
	}

	return false
}

// SetCardinality gets a reference to the given string and assigns it to the Cardinality field.
func (o *AttributeDef) SetCardinality(v string) {
	o.Cardinality = &v
}

// GetValuesMinCount returns the ValuesMinCount field value if set, zero value otherwise.
func (o *AttributeDef) GetValuesMinCount() int32 {
	if o == nil || o.ValuesMinCount == nil {
		var ret int32
		return ret
	}
	return *o.ValuesMinCount
}

// GetValuesMinCountOk returns a tuple with the ValuesMinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetValuesMinCountOk() (*int32, bool) {
	if o == nil || o.ValuesMinCount == nil {
		return nil, false
	}
	return o.ValuesMinCount, true
}

// HasValuesMinCount returns a boolean if a field has been set.
func (o *AttributeDef) HasValuesMinCount() bool {
	if o != nil && o.ValuesMinCount != nil {
		return true
	}

	return false
}

// SetValuesMinCount gets a reference to the given int32 and assigns it to the ValuesMinCount field.
func (o *AttributeDef) SetValuesMinCount(v int32) {
	o.ValuesMinCount = &v
}

// GetValuesMaxCount returns the ValuesMaxCount field value if set, zero value otherwise.
func (o *AttributeDef) GetValuesMaxCount() int32 {
	if o == nil || o.ValuesMaxCount == nil {
		var ret int32
		return ret
	}
	return *o.ValuesMaxCount
}

// GetValuesMaxCountOk returns a tuple with the ValuesMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetValuesMaxCountOk() (*int32, bool) {
	if o == nil || o.ValuesMaxCount == nil {
		return nil, false
	}
	return o.ValuesMaxCount, true
}

// HasValuesMaxCount returns a boolean if a field has been set.
func (o *AttributeDef) HasValuesMaxCount() bool {
	if o != nil && o.ValuesMaxCount != nil {
		return true
	}

	return false
}

// SetValuesMaxCount gets a reference to the given int32 and assigns it to the ValuesMaxCount field.
func (o *AttributeDef) SetValuesMaxCount(v int32) {
	o.ValuesMaxCount = &v
}

// GetIsUnique returns the IsUnique field value if set, zero value otherwise.
func (o *AttributeDef) GetIsUnique() bool {
	if o == nil || o.IsUnique == nil {
		var ret bool
		return ret
	}
	return *o.IsUnique
}

// GetIsUniqueOk returns a tuple with the IsUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetIsUniqueOk() (*bool, bool) {
	if o == nil || o.IsUnique == nil {
		return nil, false
	}
	return o.IsUnique, true
}

// HasIsUnique returns a boolean if a field has been set.
func (o *AttributeDef) HasIsUnique() bool {
	if o != nil && o.IsUnique != nil {
		return true
	}

	return false
}

// SetIsUnique gets a reference to the given bool and assigns it to the IsUnique field.
func (o *AttributeDef) SetIsUnique(v bool) {
	o.IsUnique = &v
}

// GetIsIndexable returns the IsIndexable field value if set, zero value otherwise.
func (o *AttributeDef) GetIsIndexable() bool {
	if o == nil || o.IsIndexable == nil {
		var ret bool
		return ret
	}
	return *o.IsIndexable
}

// GetIsIndexableOk returns a tuple with the IsIndexable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetIsIndexableOk() (*bool, bool) {
	if o == nil || o.IsIndexable == nil {
		return nil, false
	}
	return o.IsIndexable, true
}

// HasIsIndexable returns a boolean if a field has been set.
func (o *AttributeDef) HasIsIndexable() bool {
	if o != nil && o.IsIndexable != nil {
		return true
	}

	return false
}

// SetIsIndexable gets a reference to the given bool and assigns it to the IsIndexable field.
func (o *AttributeDef) SetIsIndexable(v bool) {
	o.IsIndexable = &v
}

// GetIncludeInNotification returns the IncludeInNotification field value if set, zero value otherwise.
func (o *AttributeDef) GetIncludeInNotification() bool {
	if o == nil || o.IncludeInNotification == nil {
		var ret bool
		return ret
	}
	return *o.IncludeInNotification
}

// GetIncludeInNotificationOk returns a tuple with the IncludeInNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetIncludeInNotificationOk() (*bool, bool) {
	if o == nil || o.IncludeInNotification == nil {
		return nil, false
	}
	return o.IncludeInNotification, true
}

// HasIncludeInNotification returns a boolean if a field has been set.
func (o *AttributeDef) HasIncludeInNotification() bool {
	if o != nil && o.IncludeInNotification != nil {
		return true
	}

	return false
}

// SetIncludeInNotification gets a reference to the given bool and assigns it to the IncludeInNotification field.
func (o *AttributeDef) SetIncludeInNotification(v bool) {
	o.IncludeInNotification = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *AttributeDef) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *AttributeDef) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *AttributeDef) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AttributeDef) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AttributeDef) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AttributeDef) SetDescription(v string) {
	o.Description = &v
}

// GetSearchWeight returns the SearchWeight field value if set, zero value otherwise.
func (o *AttributeDef) GetSearchWeight() int32 {
	if o == nil || o.SearchWeight == nil {
		var ret int32
		return ret
	}
	return *o.SearchWeight
}

// GetSearchWeightOk returns a tuple with the SearchWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetSearchWeightOk() (*int32, bool) {
	if o == nil || o.SearchWeight == nil {
		return nil, false
	}
	return o.SearchWeight, true
}

// HasSearchWeight returns a boolean if a field has been set.
func (o *AttributeDef) HasSearchWeight() bool {
	if o != nil && o.SearchWeight != nil {
		return true
	}

	return false
}

// SetSearchWeight gets a reference to the given int32 and assigns it to the SearchWeight field.
func (o *AttributeDef) SetSearchWeight(v int32) {
	o.SearchWeight = &v
}

// GetIndexType returns the IndexType field value if set, zero value otherwise.
func (o *AttributeDef) GetIndexType() string {
	if o == nil || o.IndexType == nil {
		var ret string
		return ret
	}
	return *o.IndexType
}

// GetIndexTypeOk returns a tuple with the IndexType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetIndexTypeOk() (*string, bool) {
	if o == nil || o.IndexType == nil {
		return nil, false
	}
	return o.IndexType, true
}

// HasIndexType returns a boolean if a field has been set.
func (o *AttributeDef) HasIndexType() bool {
	if o != nil && o.IndexType != nil {
		return true
	}

	return false
}

// SetIndexType gets a reference to the given string and assigns it to the IndexType field.
func (o *AttributeDef) SetIndexType(v string) {
	o.IndexType = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *AttributeDef) GetConstraints() []ConstraintDef {
	if o == nil || o.Constraints == nil {
		var ret []ConstraintDef
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetConstraintsOk() (*[]ConstraintDef, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *AttributeDef) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []ConstraintDef and assigns it to the Constraints field.
func (o *AttributeDef) SetConstraints(v []ConstraintDef) {
	o.Constraints = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *AttributeDef) GetOptions() map[string]string {
	if o == nil || o.Options == nil {
		var ret map[string]string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetOptionsOk() (*map[string]string, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *AttributeDef) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *AttributeDef) SetOptions(v map[string]string) {
	o.Options = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AttributeDef) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeDef) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AttributeDef) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AttributeDef) SetDisplayName(v string) {
	o.DisplayName = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *AttributeDef) Redact() {
	o.recurseRedact(o.Name)
	o.recurseRedact(o.TypeName)
	o.recurseRedact(o.IsOptional)
	o.recurseRedact(o.Cardinality)
	o.recurseRedact(o.ValuesMinCount)
	o.recurseRedact(o.ValuesMaxCount)
	o.recurseRedact(o.IsUnique)
	o.recurseRedact(o.IsIndexable)
	o.recurseRedact(o.IncludeInNotification)
	o.recurseRedact(o.DefaultValue)
	o.recurseRedact(o.Description)
	o.recurseRedact(o.SearchWeight)
	o.recurseRedact(o.IndexType)
	o.recurseRedact(o.Constraints)
	o.recurseRedact(o.Options)
	o.recurseRedact(o.DisplayName)
}

func (o *AttributeDef) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o AttributeDef) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o AttributeDef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.IsOptional != nil {
		toSerialize["isOptional"] = o.IsOptional
	}
	if o.Cardinality != nil {
		toSerialize["cardinality"] = o.Cardinality
	}
	if o.ValuesMinCount != nil {
		toSerialize["valuesMinCount"] = o.ValuesMinCount
	}
	if o.ValuesMaxCount != nil {
		toSerialize["valuesMaxCount"] = o.ValuesMaxCount
	}
	if o.IsUnique != nil {
		toSerialize["isUnique"] = o.IsUnique
	}
	if o.IsIndexable != nil {
		toSerialize["isIndexable"] = o.IsIndexable
	}
	if o.IncludeInNotification != nil {
		toSerialize["includeInNotification"] = o.IncludeInNotification
	}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.SearchWeight != nil {
		toSerialize["searchWeight"] = o.SearchWeight
	}
	if o.IndexType != nil {
		toSerialize["indexType"] = o.IndexType
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableAttributeDef struct {
	value *AttributeDef
	isSet bool
}

func (v NullableAttributeDef) Get() *AttributeDef {
	return v.value
}

func (v *NullableAttributeDef) Set(val *AttributeDef) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeDef) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeDef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeDef(val *AttributeDef) *NullableAttributeDef {
	return &NullableAttributeDef{value: val, isSet: true}
}

func (v NullableAttributeDef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeDef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
