// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Data Catalog

REST API for the Data Catalog

API version: 1.0.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

type SearchV1Api interface {

	/*
		SearchUsingAttribute Search by Attribute

		[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

	Retrieve data for the specified attribute search query.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiSearchUsingAttributeRequest
	*/
	SearchUsingAttribute(ctx _context.Context) ApiSearchUsingAttributeRequest

	// SearchUsingAttributeExecute executes the request
	//  @return SearchResult
	SearchUsingAttributeExecute(r ApiSearchUsingAttributeRequest) (SearchResult, *_nethttp.Response, error)

	/*
		SearchUsingBasic Search by Fulltext Query

		[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

	Retrieve data for the specified fulltext query.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiSearchUsingBasicRequest
	*/
	SearchUsingBasic(ctx _context.Context) ApiSearchUsingBasicRequest

	// SearchUsingBasicExecute executes the request
	//  @return SearchResult
	SearchUsingBasicExecute(r ApiSearchUsingBasicRequest) (SearchResult, *_nethttp.Response, error)
}

// SearchV1ApiService SearchV1Api service
type SearchV1ApiService service

type ApiSearchUsingAttributeRequest struct {
	ctx             _context.Context
	ApiService      SearchV1Api
	type_           *[]string
	attr            *[]string
	attrName        *[]string
	attrValuePrefix *[]string
	tag             *string
	sortBy          *string
	sortOrder       *string
	deleted         *bool
	limit           *int32
	offset          *int32
}

// Limit the result to only entities of specified types
func (r ApiSearchUsingAttributeRequest) Type_(type_ []string) ApiSearchUsingAttributeRequest {
	r.type_ = &type_
	return r
}

// One of more additional attributes to return in the response
func (r ApiSearchUsingAttributeRequest) Attr(attr []string) ApiSearchUsingAttributeRequest {
	r.attr = &attr
	return r
}

// The attribute to search
func (r ApiSearchUsingAttributeRequest) AttrName(attrName []string) ApiSearchUsingAttributeRequest {
	r.attrName = &attrName
	return r
}

// The prefix for the attribute value to search
func (r ApiSearchUsingAttributeRequest) AttrValuePrefix(attrValuePrefix []string) ApiSearchUsingAttributeRequest {
	r.attrValuePrefix = &attrValuePrefix
	return r
}

// Limit the result to only entities tagged with the given tag
func (r ApiSearchUsingAttributeRequest) Tag(tag string) ApiSearchUsingAttributeRequest {
	r.tag = &tag
	return r
}

// An attribute to sort by
func (r ApiSearchUsingAttributeRequest) SortBy(sortBy string) ApiSearchUsingAttributeRequest {
	r.sortBy = &sortBy
	return r
}

// Sort order, either ASCENDING (default) or DESCENDING
func (r ApiSearchUsingAttributeRequest) SortOrder(sortOrder string) ApiSearchUsingAttributeRequest {
	r.sortOrder = &sortOrder
	return r
}

// Whether to include deleted entities
func (r ApiSearchUsingAttributeRequest) Deleted(deleted bool) ApiSearchUsingAttributeRequest {
	r.deleted = &deleted
	return r
}

// Limit the result set to only include the specified number of entries
func (r ApiSearchUsingAttributeRequest) Limit(limit int32) ApiSearchUsingAttributeRequest {
	r.limit = &limit
	return r
}

// Start offset of the result set (useful for pagination)
func (r ApiSearchUsingAttributeRequest) Offset(offset int32) ApiSearchUsingAttributeRequest {
	r.offset = &offset
	return r
}

func (r ApiSearchUsingAttributeRequest) Execute() (SearchResult, *_nethttp.Response, error) {
	return r.ApiService.SearchUsingAttributeExecute(r)
}

/*
SearchUsingAttribute Search by Attribute

[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve data for the specified attribute search query.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchUsingAttributeRequest
*/
func (a *SearchV1ApiService) SearchUsingAttribute(ctx _context.Context) ApiSearchUsingAttributeRequest {
	return ApiSearchUsingAttributeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return SearchResult
func (a *SearchV1ApiService) SearchUsingAttributeExecute(r ApiSearchUsingAttributeRequest) (SearchResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchV1ApiService.SearchUsingAttribute")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/catalog/v1/search/attribute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.attr != nil {
		t := *r.attr
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("attr", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("attr", parameterToString(t, "multi"))
		}
	}
	if r.attrName != nil {
		t := *r.attrName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("attrName", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("attrName", parameterToString(t, "multi"))
		}
	}
	if r.attrValuePrefix != nil {
		t := *r.attrValuePrefix
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("attrValuePrefix", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("attrValuePrefix", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		localVarQueryParams.Add("tag", parameterToString(*r.tag, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.deleted != nil {
		localVarQueryParams.Add("deleted", parameterToString(*r.deleted, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchUsingBasicRequest struct {
	ctx        _context.Context
	ApiService SearchV1Api
	query      *string
	type_      *[]string
	attr       *[]string
	tag        *string
	sortBy     *string
	sortOrder  *string
	deleted    *bool
	limit      *int32
	offset     *int32
}

// The full-text query
func (r ApiSearchUsingBasicRequest) Query(query string) ApiSearchUsingBasicRequest {
	r.query = &query
	return r
}

// Limit the result to only entities of specified types
func (r ApiSearchUsingBasicRequest) Type_(type_ []string) ApiSearchUsingBasicRequest {
	r.type_ = &type_
	return r
}

// One of more additional attributes to return in the response
func (r ApiSearchUsingBasicRequest) Attr(attr []string) ApiSearchUsingBasicRequest {
	r.attr = &attr
	return r
}

// Limit the result to only entities tagged with the given tag
func (r ApiSearchUsingBasicRequest) Tag(tag string) ApiSearchUsingBasicRequest {
	r.tag = &tag
	return r
}

// An attribute to sort by
func (r ApiSearchUsingBasicRequest) SortBy(sortBy string) ApiSearchUsingBasicRequest {
	r.sortBy = &sortBy
	return r
}

// Sort order, either ASCENDING (default) or DESCENDING
func (r ApiSearchUsingBasicRequest) SortOrder(sortOrder string) ApiSearchUsingBasicRequest {
	r.sortOrder = &sortOrder
	return r
}

// Whether to include deleted entities
func (r ApiSearchUsingBasicRequest) Deleted(deleted bool) ApiSearchUsingBasicRequest {
	r.deleted = &deleted
	return r
}

// Limit the result set to only include the specified number of entries
func (r ApiSearchUsingBasicRequest) Limit(limit int32) ApiSearchUsingBasicRequest {
	r.limit = &limit
	return r
}

// Start offset of the result set (useful for pagination)
func (r ApiSearchUsingBasicRequest) Offset(offset int32) ApiSearchUsingBasicRequest {
	r.offset = &offset
	return r
}

func (r ApiSearchUsingBasicRequest) Execute() (SearchResult, *_nethttp.Response, error) {
	return r.ApiService.SearchUsingBasicExecute(r)
}

/*
SearchUsingBasic Search by Fulltext Query

[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve data for the specified fulltext query.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchUsingBasicRequest
*/
func (a *SearchV1ApiService) SearchUsingBasic(ctx _context.Context) ApiSearchUsingBasicRequest {
	return ApiSearchUsingBasicRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return SearchResult
func (a *SearchV1ApiService) SearchUsingBasicExecute(r ApiSearchUsingBasicRequest) (SearchResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchV1ApiService.SearchUsingBasic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/catalog/v1/search/basic"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.attr != nil {
		t := *r.attr
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("attr", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("attr", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		localVarQueryParams.Add("tag", parameterToString(*r.tag, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.deleted != nil {
		localVarQueryParams.Add("deleted", parameterToString(*r.deleted, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
