// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Billing API

Confluent Cloud Billing API 

API version: 0.0.1-alpha0
Contact: monetization-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

import (
	"reflect"
)

// BillingV1alphaTax Billing tax info.
type BillingV1alphaTax struct {
	// Address line 1 (e.g., street, PO Box, or company name).
	Line1 string `json:"line_1"`
	// Address line 2 (e.g., apartment, suite, unit, or building).
	Line2 *string `json:"line_2,omitempty"`
	// City, district, suburb, town, or village..
	City string `json:"city"`
	// State, county, province, or region.
	State string `json:"state"`
	// Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	Country string `json:"country"`
	// ZIP or postal code.
	PostalCode string `json:"postal_code"`
	// The list of tax ID objects.
	TaxIds *[]BillingV1alphaTaxId `json:"tax_ids,omitempty"`
}

// NewBillingV1alphaTax instantiates a new BillingV1alphaTax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingV1alphaTax(line1 string, city string, state string, country string, postalCode string) *BillingV1alphaTax {
	this := BillingV1alphaTax{}
	this.Line1 = line1
	this.City = city
	this.State = state
	this.Country = country
	this.PostalCode = postalCode
	return &this
}

// NewBillingV1alphaTaxWithDefaults instantiates a new BillingV1alphaTax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingV1alphaTaxWithDefaults() *BillingV1alphaTax {
	this := BillingV1alphaTax{}
	return &this
}

// GetLine1 returns the Line1 field value
func (o *BillingV1alphaTax) GetLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTax) GetLine1Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Line1, true
}

// SetLine1 sets field value
func (o *BillingV1alphaTax) SetLine1(v string) {
	o.Line1 = v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *BillingV1alphaTax) GetLine2() string {
	if o == nil || o.Line2 == nil {
		var ret string
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTax) GetLine2Ok() (*string, bool) {
	if o == nil || o.Line2 == nil {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *BillingV1alphaTax) HasLine2() bool {
	if o != nil && o.Line2 != nil {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given string and assigns it to the Line2 field.
func (o *BillingV1alphaTax) SetLine2(v string) {
	o.Line2 = &v
}

// GetCity returns the City field value
func (o *BillingV1alphaTax) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTax) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *BillingV1alphaTax) SetCity(v string) {
	o.City = v
}

// GetState returns the State field value
func (o *BillingV1alphaTax) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTax) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *BillingV1alphaTax) SetState(v string) {
	o.State = v
}

// GetCountry returns the Country field value
func (o *BillingV1alphaTax) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTax) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *BillingV1alphaTax) SetCountry(v string) {
	o.Country = v
}

// GetPostalCode returns the PostalCode field value
func (o *BillingV1alphaTax) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTax) GetPostalCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *BillingV1alphaTax) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetTaxIds returns the TaxIds field value if set, zero value otherwise.
func (o *BillingV1alphaTax) GetTaxIds() []BillingV1alphaTaxId {
	if o == nil || o.TaxIds == nil {
		var ret []BillingV1alphaTaxId
		return ret
	}
	return *o.TaxIds
}

// GetTaxIdsOk returns a tuple with the TaxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTax) GetTaxIdsOk() (*[]BillingV1alphaTaxId, bool) {
	if o == nil || o.TaxIds == nil {
		return nil, false
	}
	return o.TaxIds, true
}

// HasTaxIds returns a boolean if a field has been set.
func (o *BillingV1alphaTax) HasTaxIds() bool {
	if o != nil && o.TaxIds != nil {
		return true
	}

	return false
}

// SetTaxIds gets a reference to the given []BillingV1alphaTaxId and assigns it to the TaxIds field.
func (o *BillingV1alphaTax) SetTaxIds(v []BillingV1alphaTaxId) {
	o.TaxIds = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *BillingV1alphaTax) Redact() {
    o.recurseRedact(&o.Line1)
    o.recurseRedact(o.Line2)
    o.recurseRedact(&o.City)
    o.recurseRedact(&o.State)
    o.recurseRedact(&o.Country)
    o.recurseRedact(&o.PostalCode)
    o.recurseRedact(o.TaxIds)
}

func (o *BillingV1alphaTax) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BillingV1alphaTax) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BillingV1alphaTax) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["line_1"] = o.Line1
	}
	if o.Line2 != nil {
		toSerialize["line_2"] = o.Line2
	}
	if true {
		toSerialize["city"] = o.City
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["postal_code"] = o.PostalCode
	}
	if o.TaxIds != nil {
		toSerialize["tax_ids"] = o.TaxIds
	}
	return json.Marshal(toSerialize)
}

type NullableBillingV1alphaTax struct {
	value *BillingV1alphaTax
	isSet bool
}

func (v NullableBillingV1alphaTax) Get() *BillingV1alphaTax {
	return v.value
}

func (v *NullableBillingV1alphaTax) Set(val *BillingV1alphaTax) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingV1alphaTax) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingV1alphaTax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingV1alphaTax(val *BillingV1alphaTax) *NullableBillingV1alphaTax {
	return &NullableBillingV1alphaTax{value: val, isSet: true}
}

func (v NullableBillingV1alphaTax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingV1alphaTax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


