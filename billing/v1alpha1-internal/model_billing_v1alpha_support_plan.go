// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Billing API

Confluent Cloud Billing API 

API version: 0.0.1-alpha0
Contact: monetization-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// BillingV1alphaSupportPlan `SupportPlan` objects represent an organization's support plan and any relevant support info. 
type BillingV1alphaSupportPlan struct {
	// Support plan subscription type.
	SubscriptionType *string `json:"subscription_type,omitempty"`
	// Effective date of support plan.
	EffectiveAt *time.Time `json:"effective_at,omitempty"`
}

// NewBillingV1alphaSupportPlan instantiates a new BillingV1alphaSupportPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingV1alphaSupportPlan() *BillingV1alphaSupportPlan {
	this := BillingV1alphaSupportPlan{}
	return &this
}

// NewBillingV1alphaSupportPlanWithDefaults instantiates a new BillingV1alphaSupportPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingV1alphaSupportPlanWithDefaults() *BillingV1alphaSupportPlan {
	this := BillingV1alphaSupportPlan{}
	return &this
}

// GetSubscriptionType returns the SubscriptionType field value if set, zero value otherwise.
func (o *BillingV1alphaSupportPlan) GetSubscriptionType() string {
	if o == nil || o.SubscriptionType == nil {
		var ret string
		return ret
	}
	return *o.SubscriptionType
}

// GetSubscriptionTypeOk returns a tuple with the SubscriptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaSupportPlan) GetSubscriptionTypeOk() (*string, bool) {
	if o == nil || o.SubscriptionType == nil {
		return nil, false
	}
	return o.SubscriptionType, true
}

// HasSubscriptionType returns a boolean if a field has been set.
func (o *BillingV1alphaSupportPlan) HasSubscriptionType() bool {
	if o != nil && o.SubscriptionType != nil {
		return true
	}

	return false
}

// SetSubscriptionType gets a reference to the given string and assigns it to the SubscriptionType field.
func (o *BillingV1alphaSupportPlan) SetSubscriptionType(v string) {
	o.SubscriptionType = &v
}

// GetEffectiveAt returns the EffectiveAt field value if set, zero value otherwise.
func (o *BillingV1alphaSupportPlan) GetEffectiveAt() time.Time {
	if o == nil || o.EffectiveAt == nil {
		var ret time.Time
		return ret
	}
	return *o.EffectiveAt
}

// GetEffectiveAtOk returns a tuple with the EffectiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaSupportPlan) GetEffectiveAtOk() (*time.Time, bool) {
	if o == nil || o.EffectiveAt == nil {
		return nil, false
	}
	return o.EffectiveAt, true
}

// HasEffectiveAt returns a boolean if a field has been set.
func (o *BillingV1alphaSupportPlan) HasEffectiveAt() bool {
	if o != nil && o.EffectiveAt != nil {
		return true
	}

	return false
}

// SetEffectiveAt gets a reference to the given time.Time and assigns it to the EffectiveAt field.
func (o *BillingV1alphaSupportPlan) SetEffectiveAt(v time.Time) {
	o.EffectiveAt = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *BillingV1alphaSupportPlan) Redact() {
    o.recurseRedact(o.SubscriptionType)
    o.recurseRedact(o.EffectiveAt)
}

func (o *BillingV1alphaSupportPlan) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BillingV1alphaSupportPlan) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BillingV1alphaSupportPlan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubscriptionType != nil {
		toSerialize["subscription_type"] = o.SubscriptionType
	}
	if o.EffectiveAt != nil {
		toSerialize["effective_at"] = o.EffectiveAt
	}
	return json.Marshal(toSerialize)
}

type NullableBillingV1alphaSupportPlan struct {
	value *BillingV1alphaSupportPlan
	isSet bool
}

func (v NullableBillingV1alphaSupportPlan) Get() *BillingV1alphaSupportPlan {
	return v.value
}

func (v *NullableBillingV1alphaSupportPlan) Set(val *BillingV1alphaSupportPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingV1alphaSupportPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingV1alphaSupportPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingV1alphaSupportPlan(val *BillingV1alphaSupportPlan) *NullableBillingV1alphaSupportPlan {
	return &NullableBillingV1alphaSupportPlan{value: val, isSet: true}
}

func (v NullableBillingV1alphaSupportPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingV1alphaSupportPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


