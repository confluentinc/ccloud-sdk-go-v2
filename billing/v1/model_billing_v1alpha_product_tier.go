// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Billing API

Confluent Cloud Billing API 

API version: 0.0.1-alpha0
Contact: monetization-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// BillingV1alphaProductTier `ProductTier` objects represent the billing tier selected for a product 
type BillingV1alphaProductTier struct {
	// Billable product details.
	Product *BillingV1alphaProduct `json:"product,omitempty"`
	// Billable tier details.
	Tier *BillingV1alphaTier `json:"tier,omitempty"`
	// effective date for billing the selected product tier.
	EffectiveAt *time.Time `json:"effective_at,omitempty"`
}

// NewBillingV1alphaProductTier instantiates a new BillingV1alphaProductTier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingV1alphaProductTier() *BillingV1alphaProductTier {
	this := BillingV1alphaProductTier{}
	return &this
}

// NewBillingV1alphaProductTierWithDefaults instantiates a new BillingV1alphaProductTier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingV1alphaProductTierWithDefaults() *BillingV1alphaProductTier {
	this := BillingV1alphaProductTier{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *BillingV1alphaProductTier) GetProduct() BillingV1alphaProduct {
	if o == nil || o.Product == nil {
		var ret BillingV1alphaProduct
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaProductTier) GetProductOk() (*BillingV1alphaProduct, bool) {
	if o == nil || o.Product == nil {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *BillingV1alphaProductTier) HasProduct() bool {
	if o != nil && o.Product != nil {
		return true
	}

	return false
}

// SetProduct gets a reference to the given BillingV1alphaProduct and assigns it to the Product field.
func (o *BillingV1alphaProductTier) SetProduct(v BillingV1alphaProduct) {
	o.Product = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *BillingV1alphaProductTier) GetTier() BillingV1alphaTier {
	if o == nil || o.Tier == nil {
		var ret BillingV1alphaTier
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaProductTier) GetTierOk() (*BillingV1alphaTier, bool) {
	if o == nil || o.Tier == nil {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *BillingV1alphaProductTier) HasTier() bool {
	if o != nil && o.Tier != nil {
		return true
	}

	return false
}

// SetTier gets a reference to the given BillingV1alphaTier and assigns it to the Tier field.
func (o *BillingV1alphaProductTier) SetTier(v BillingV1alphaTier) {
	o.Tier = &v
}

// GetEffectiveAt returns the EffectiveAt field value if set, zero value otherwise.
func (o *BillingV1alphaProductTier) GetEffectiveAt() time.Time {
	if o == nil || o.EffectiveAt == nil {
		var ret time.Time
		return ret
	}
	return *o.EffectiveAt
}

// GetEffectiveAtOk returns a tuple with the EffectiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaProductTier) GetEffectiveAtOk() (*time.Time, bool) {
	if o == nil || o.EffectiveAt == nil {
		return nil, false
	}
	return o.EffectiveAt, true
}

// HasEffectiveAt returns a boolean if a field has been set.
func (o *BillingV1alphaProductTier) HasEffectiveAt() bool {
	if o != nil && o.EffectiveAt != nil {
		return true
	}

	return false
}

// SetEffectiveAt gets a reference to the given time.Time and assigns it to the EffectiveAt field.
func (o *BillingV1alphaProductTier) SetEffectiveAt(v time.Time) {
	o.EffectiveAt = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *BillingV1alphaProductTier) Redact() {
    o.recurseRedact(o.Product)
    o.recurseRedact(o.Tier)
    o.recurseRedact(o.EffectiveAt)
}

func (o *BillingV1alphaProductTier) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BillingV1alphaProductTier) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BillingV1alphaProductTier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Product != nil {
		toSerialize["product"] = o.Product
	}
	if o.Tier != nil {
		toSerialize["tier"] = o.Tier
	}
	if o.EffectiveAt != nil {
		toSerialize["effective_at"] = o.EffectiveAt
	}
	return json.Marshal(toSerialize)
}

type NullableBillingV1alphaProductTier struct {
	value *BillingV1alphaProductTier
	isSet bool
}

func (v NullableBillingV1alphaProductTier) Get() *BillingV1alphaProductTier {
	return v.value
}

func (v *NullableBillingV1alphaProductTier) Set(val *BillingV1alphaProductTier) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingV1alphaProductTier) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingV1alphaProductTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingV1alphaProductTier(val *BillingV1alphaProductTier) *NullableBillingV1alphaProductTier {
	return &NullableBillingV1alphaProductTier{value: val, isSet: true}
}

func (v NullableBillingV1alphaProductTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingV1alphaProductTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


