// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Billing API

Confluent Cloud Billing API 

API version: 0.0.1-alpha0
Contact: monetization-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

import (
	"reflect"
)

// BillingV1alphaTaxId Tax ID object. 
type BillingV1alphaTaxId struct {
	// Tax type based on region (https://stripe.com/docs/billing/customer/tax-ids).
	Type string `json:"type"`
	// Tax identifier based on the region.
	Identifier string `json:"identifier"`
}

// NewBillingV1alphaTaxId instantiates a new BillingV1alphaTaxId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingV1alphaTaxId(type_ string, identifier string) *BillingV1alphaTaxId {
	this := BillingV1alphaTaxId{}
	this.Type = type_
	this.Identifier = identifier
	return &this
}

// NewBillingV1alphaTaxIdWithDefaults instantiates a new BillingV1alphaTaxId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingV1alphaTaxIdWithDefaults() *BillingV1alphaTaxId {
	this := BillingV1alphaTaxId{}
	return &this
}

// GetType returns the Type field value
func (o *BillingV1alphaTaxId) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTaxId) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BillingV1alphaTaxId) SetType(v string) {
	o.Type = v
}

// GetIdentifier returns the Identifier field value
func (o *BillingV1alphaTaxId) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTaxId) GetIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *BillingV1alphaTaxId) SetIdentifier(v string) {
	o.Identifier = v
}

// Redact resets all sensitive fields to their zero value.
func (o *BillingV1alphaTaxId) Redact() {
    o.recurseRedact(&o.Type)
    o.recurseRedact(&o.Identifier)
}

func (o *BillingV1alphaTaxId) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BillingV1alphaTaxId) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BillingV1alphaTaxId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	return json.Marshal(toSerialize)
}

type NullableBillingV1alphaTaxId struct {
	value *BillingV1alphaTaxId
	isSet bool
}

func (v NullableBillingV1alphaTaxId) Get() *BillingV1alphaTaxId {
	return v.value
}

func (v *NullableBillingV1alphaTaxId) Set(val *BillingV1alphaTaxId) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingV1alphaTaxId) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingV1alphaTaxId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingV1alphaTaxId(val *BillingV1alphaTaxId) *NullableBillingV1alphaTaxId {
	return &NullableBillingV1alphaTaxId{value: val, isSet: true}
}

func (v NullableBillingV1alphaTaxId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingV1alphaTaxId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


