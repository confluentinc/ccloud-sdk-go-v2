// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Billing API

Confluent Cloud Billing API 

API version: 0.0.1-alpha0
Contact: monetization-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// BillingV1alphaPromoCodeClaim Promo code claim. 
type BillingV1alphaPromoCodeClaim struct {
	// Remaining amount of promo code in dollars.
	Balance *float64 `json:"balance,omitempty"`
	// Claim date of promo code.
	ClaimedAt *time.Time `json:"claimed_at,omitempty"`
	// Expiration date of promo code.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
}

// NewBillingV1alphaPromoCodeClaim instantiates a new BillingV1alphaPromoCodeClaim object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingV1alphaPromoCodeClaim() *BillingV1alphaPromoCodeClaim {
	this := BillingV1alphaPromoCodeClaim{}
	return &this
}

// NewBillingV1alphaPromoCodeClaimWithDefaults instantiates a new BillingV1alphaPromoCodeClaim object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingV1alphaPromoCodeClaimWithDefaults() *BillingV1alphaPromoCodeClaim {
	this := BillingV1alphaPromoCodeClaim{}
	return &this
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *BillingV1alphaPromoCodeClaim) GetBalance() float64 {
	if o == nil || o.Balance == nil {
		var ret float64
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaPromoCodeClaim) GetBalanceOk() (*float64, bool) {
	if o == nil || o.Balance == nil {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *BillingV1alphaPromoCodeClaim) HasBalance() bool {
	if o != nil && o.Balance != nil {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float64 and assigns it to the Balance field.
func (o *BillingV1alphaPromoCodeClaim) SetBalance(v float64) {
	o.Balance = &v
}

// GetClaimedAt returns the ClaimedAt field value if set, zero value otherwise.
func (o *BillingV1alphaPromoCodeClaim) GetClaimedAt() time.Time {
	if o == nil || o.ClaimedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ClaimedAt
}

// GetClaimedAtOk returns a tuple with the ClaimedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaPromoCodeClaim) GetClaimedAtOk() (*time.Time, bool) {
	if o == nil || o.ClaimedAt == nil {
		return nil, false
	}
	return o.ClaimedAt, true
}

// HasClaimedAt returns a boolean if a field has been set.
func (o *BillingV1alphaPromoCodeClaim) HasClaimedAt() bool {
	if o != nil && o.ClaimedAt != nil {
		return true
	}

	return false
}

// SetClaimedAt gets a reference to the given time.Time and assigns it to the ClaimedAt field.
func (o *BillingV1alphaPromoCodeClaim) SetClaimedAt(v time.Time) {
	o.ClaimedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *BillingV1alphaPromoCodeClaim) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaPromoCodeClaim) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *BillingV1alphaPromoCodeClaim) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *BillingV1alphaPromoCodeClaim) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *BillingV1alphaPromoCodeClaim) Redact() {
    o.recurseRedact(o.Balance)
    o.recurseRedact(o.ClaimedAt)
    o.recurseRedact(o.ExpiresAt)
}

func (o *BillingV1alphaPromoCodeClaim) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BillingV1alphaPromoCodeClaim) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BillingV1alphaPromoCodeClaim) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Balance != nil {
		toSerialize["balance"] = o.Balance
	}
	if o.ClaimedAt != nil {
		toSerialize["claimed_at"] = o.ClaimedAt
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	return json.Marshal(toSerialize)
}

type NullableBillingV1alphaPromoCodeClaim struct {
	value *BillingV1alphaPromoCodeClaim
	isSet bool
}

func (v NullableBillingV1alphaPromoCodeClaim) Get() *BillingV1alphaPromoCodeClaim {
	return v.value
}

func (v *NullableBillingV1alphaPromoCodeClaim) Set(val *BillingV1alphaPromoCodeClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingV1alphaPromoCodeClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingV1alphaPromoCodeClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingV1alphaPromoCodeClaim(val *BillingV1alphaPromoCodeClaim) *NullableBillingV1alphaPromoCodeClaim {
	return &NullableBillingV1alphaPromoCodeClaim{value: val, isSet: true}
}

func (v NullableBillingV1alphaPromoCodeClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingV1alphaPromoCodeClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


