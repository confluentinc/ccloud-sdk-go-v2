// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Billing API

Confluent Cloud Billing API 

API version: 0.0.1-alpha0
Contact: monetization-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

import (
	"reflect"
)

// BillingV1alphaTier Billing details for a Tier. 
type BillingV1alphaTier struct {
	// Billing sku of the tier.
	Sku *string `json:"sku,omitempty"`
	// Billing display name of the tier.
	DisplayName *string `json:"display_name,omitempty"`
}

// NewBillingV1alphaTier instantiates a new BillingV1alphaTier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingV1alphaTier() *BillingV1alphaTier {
	this := BillingV1alphaTier{}
	return &this
}

// NewBillingV1alphaTierWithDefaults instantiates a new BillingV1alphaTier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingV1alphaTierWithDefaults() *BillingV1alphaTier {
	this := BillingV1alphaTier{}
	return &this
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *BillingV1alphaTier) GetSku() string {
	if o == nil || o.Sku == nil {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTier) GetSkuOk() (*string, bool) {
	if o == nil || o.Sku == nil {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *BillingV1alphaTier) HasSku() bool {
	if o != nil && o.Sku != nil {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *BillingV1alphaTier) SetSku(v string) {
	o.Sku = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *BillingV1alphaTier) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1alphaTier) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *BillingV1alphaTier) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *BillingV1alphaTier) SetDisplayName(v string) {
	o.DisplayName = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *BillingV1alphaTier) Redact() {
    o.recurseRedact(o.Sku)
    o.recurseRedact(o.DisplayName)
}

func (o *BillingV1alphaTier) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BillingV1alphaTier) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BillingV1alphaTier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sku != nil {
		toSerialize["sku"] = o.Sku
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableBillingV1alphaTier struct {
	value *BillingV1alphaTier
	isSet bool
}

func (v NullableBillingV1alphaTier) Get() *BillingV1alphaTier {
	return v.value
}

func (v *NullableBillingV1alphaTier) Set(val *BillingV1alphaTier) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingV1alphaTier) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingV1alphaTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingV1alphaTier(val *BillingV1alphaTier) *NullableBillingV1alphaTier {
	return &NullableBillingV1alphaTier{value: val, isSet: true}
}

func (v NullableBillingV1alphaTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingV1alphaTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


