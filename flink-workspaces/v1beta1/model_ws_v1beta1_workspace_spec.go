// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Workspaces API v1beta1

The Workspace API for Flink

API version: 0.0.1
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1beta1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// WsV1beta1WorkspaceSpec The specification for the Workspace
type WsV1beta1WorkspaceSpec struct {
	// A human-readable display name for the workspace.
	DisplayName    *string                   `json:"display_name,omitempty"`
	ComputePool    *EnvScopedObjectReference `json:"compute_pool,omitempty"`
	ServiceAccount *GlobalObjectReference    `json:"service_account,omitempty"`
	// The ordered blocks for the new workspace
	Blocks *[]WsV1beta1Block `json:"blocks,omitempty"`
}

// NewWsV1beta1WorkspaceSpec instantiates a new WsV1beta1WorkspaceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWsV1beta1WorkspaceSpec() *WsV1beta1WorkspaceSpec {
	this := WsV1beta1WorkspaceSpec{}
	return &this
}

// NewWsV1beta1WorkspaceSpecWithDefaults instantiates a new WsV1beta1WorkspaceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWsV1beta1WorkspaceSpecWithDefaults() *WsV1beta1WorkspaceSpec {
	this := WsV1beta1WorkspaceSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *WsV1beta1WorkspaceSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1WorkspaceSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *WsV1beta1WorkspaceSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *WsV1beta1WorkspaceSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetComputePool returns the ComputePool field value if set, zero value otherwise.
func (o *WsV1beta1WorkspaceSpec) GetComputePool() EnvScopedObjectReference {
	if o == nil || o.ComputePool == nil {
		var ret EnvScopedObjectReference
		return ret
	}
	return *o.ComputePool
}

// GetComputePoolOk returns a tuple with the ComputePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1WorkspaceSpec) GetComputePoolOk() (*EnvScopedObjectReference, bool) {
	if o == nil || o.ComputePool == nil {
		return nil, false
	}
	return o.ComputePool, true
}

// HasComputePool returns a boolean if a field has been set.
func (o *WsV1beta1WorkspaceSpec) HasComputePool() bool {
	if o != nil && o.ComputePool != nil {
		return true
	}

	return false
}

// SetComputePool gets a reference to the given EnvScopedObjectReference and assigns it to the ComputePool field.
func (o *WsV1beta1WorkspaceSpec) SetComputePool(v EnvScopedObjectReference) {
	o.ComputePool = &v
}

// GetServiceAccount returns the ServiceAccount field value if set, zero value otherwise.
func (o *WsV1beta1WorkspaceSpec) GetServiceAccount() GlobalObjectReference {
	if o == nil || o.ServiceAccount == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.ServiceAccount
}

// GetServiceAccountOk returns a tuple with the ServiceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1WorkspaceSpec) GetServiceAccountOk() (*GlobalObjectReference, bool) {
	if o == nil || o.ServiceAccount == nil {
		return nil, false
	}
	return o.ServiceAccount, true
}

// HasServiceAccount returns a boolean if a field has been set.
func (o *WsV1beta1WorkspaceSpec) HasServiceAccount() bool {
	if o != nil && o.ServiceAccount != nil {
		return true
	}

	return false
}

// SetServiceAccount gets a reference to the given GlobalObjectReference and assigns it to the ServiceAccount field.
func (o *WsV1beta1WorkspaceSpec) SetServiceAccount(v GlobalObjectReference) {
	o.ServiceAccount = &v
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *WsV1beta1WorkspaceSpec) GetBlocks() []WsV1beta1Block {
	if o == nil || o.Blocks == nil {
		var ret []WsV1beta1Block
		return ret
	}
	return *o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1WorkspaceSpec) GetBlocksOk() (*[]WsV1beta1Block, bool) {
	if o == nil || o.Blocks == nil {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *WsV1beta1WorkspaceSpec) HasBlocks() bool {
	if o != nil && o.Blocks != nil {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []WsV1beta1Block and assigns it to the Blocks field.
func (o *WsV1beta1WorkspaceSpec) SetBlocks(v []WsV1beta1Block) {
	o.Blocks = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *WsV1beta1WorkspaceSpec) Redact() {
	o.recurseRedact(o.DisplayName)
	o.recurseRedact(o.ComputePool)
	o.recurseRedact(o.ServiceAccount)
	o.recurseRedact(o.Blocks)
}

func (o *WsV1beta1WorkspaceSpec) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o WsV1beta1WorkspaceSpec) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o WsV1beta1WorkspaceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.ComputePool != nil {
		toSerialize["compute_pool"] = o.ComputePool
	}
	if o.ServiceAccount != nil {
		toSerialize["service_account"] = o.ServiceAccount
	}
	if o.Blocks != nil {
		toSerialize["blocks"] = o.Blocks
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableWsV1beta1WorkspaceSpec struct {
	value *WsV1beta1WorkspaceSpec
	isSet bool
}

func (v NullableWsV1beta1WorkspaceSpec) Get() *WsV1beta1WorkspaceSpec {
	return v.value
}

func (v *NullableWsV1beta1WorkspaceSpec) Set(val *WsV1beta1WorkspaceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableWsV1beta1WorkspaceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableWsV1beta1WorkspaceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWsV1beta1WorkspaceSpec(val *WsV1beta1WorkspaceSpec) *NullableWsV1beta1WorkspaceSpec {
	return &NullableWsV1beta1WorkspaceSpec{value: val, isSet: true}
}

func (v NullableWsV1beta1WorkspaceSpec) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableWsV1beta1WorkspaceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
