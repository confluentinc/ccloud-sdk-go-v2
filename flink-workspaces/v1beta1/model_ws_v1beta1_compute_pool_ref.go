// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Workspaces API v1beta1

The Workspace API for Flink

API version: 0.0.1
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1beta1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// WsV1beta1ComputePoolRef A reference to a logical compute pool
type WsV1beta1ComputePoolRef struct {
	// The ID associated with the compute pool in context.
	Id *string `json:"id,omitempty"`
	// Environment of the referred resource, if env-scoped
	Environment *string `json:"environment,omitempty"`
	// API URL for accessing or modifying the referred object
	Related *string `json:"related,omitempty"`
	// CRN reference to the referred resource
	ResourceName *string `json:"resource_name,omitempty"`
	// API group and version of the referred resource
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind of the referred resource
	Kind *string `json:"kind,omitempty"`
}

// NewWsV1beta1ComputePoolRef instantiates a new WsV1beta1ComputePoolRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWsV1beta1ComputePoolRef() *WsV1beta1ComputePoolRef {
	this := WsV1beta1ComputePoolRef{}
	return &this
}

// NewWsV1beta1ComputePoolRefWithDefaults instantiates a new WsV1beta1ComputePoolRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWsV1beta1ComputePoolRefWithDefaults() *WsV1beta1ComputePoolRef {
	this := WsV1beta1ComputePoolRef{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WsV1beta1ComputePoolRef) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1ComputePoolRef) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WsV1beta1ComputePoolRef) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WsV1beta1ComputePoolRef) SetId(v string) {
	o.Id = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *WsV1beta1ComputePoolRef) GetEnvironment() string {
	if o == nil || o.Environment == nil {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1ComputePoolRef) GetEnvironmentOk() (*string, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *WsV1beta1ComputePoolRef) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *WsV1beta1ComputePoolRef) SetEnvironment(v string) {
	o.Environment = &v
}

// GetRelated returns the Related field value if set, zero value otherwise.
func (o *WsV1beta1ComputePoolRef) GetRelated() string {
	if o == nil || o.Related == nil {
		var ret string
		return ret
	}
	return *o.Related
}

// GetRelatedOk returns a tuple with the Related field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1ComputePoolRef) GetRelatedOk() (*string, bool) {
	if o == nil || o.Related == nil {
		return nil, false
	}
	return o.Related, true
}

// HasRelated returns a boolean if a field has been set.
func (o *WsV1beta1ComputePoolRef) HasRelated() bool {
	if o != nil && o.Related != nil {
		return true
	}

	return false
}

// SetRelated gets a reference to the given string and assigns it to the Related field.
func (o *WsV1beta1ComputePoolRef) SetRelated(v string) {
	o.Related = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *WsV1beta1ComputePoolRef) GetResourceName() string {
	if o == nil || o.ResourceName == nil {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1ComputePoolRef) GetResourceNameOk() (*string, bool) {
	if o == nil || o.ResourceName == nil {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *WsV1beta1ComputePoolRef) HasResourceName() bool {
	if o != nil && o.ResourceName != nil {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *WsV1beta1ComputePoolRef) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *WsV1beta1ComputePoolRef) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1ComputePoolRef) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *WsV1beta1ComputePoolRef) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *WsV1beta1ComputePoolRef) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *WsV1beta1ComputePoolRef) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1beta1ComputePoolRef) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *WsV1beta1ComputePoolRef) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *WsV1beta1ComputePoolRef) SetKind(v string) {
	o.Kind = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *WsV1beta1ComputePoolRef) Redact() {
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Environment)
	o.recurseRedact(o.Related)
	o.recurseRedact(o.ResourceName)
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
}

func (o *WsV1beta1ComputePoolRef) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o WsV1beta1ComputePoolRef) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o WsV1beta1ComputePoolRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Related != nil {
		toSerialize["related"] = o.Related
	}
	if o.ResourceName != nil {
		toSerialize["resource_name"] = o.ResourceName
	}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableWsV1beta1ComputePoolRef struct {
	value *WsV1beta1ComputePoolRef
	isSet bool
}

func (v NullableWsV1beta1ComputePoolRef) Get() *WsV1beta1ComputePoolRef {
	return v.value
}

func (v *NullableWsV1beta1ComputePoolRef) Set(val *WsV1beta1ComputePoolRef) {
	v.value = val
	v.isSet = true
}

func (v NullableWsV1beta1ComputePoolRef) IsSet() bool {
	return v.isSet
}

func (v *NullableWsV1beta1ComputePoolRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWsV1beta1ComputePoolRef(val *WsV1beta1ComputePoolRef) *NullableWsV1beta1ComputePoolRef {
	return &NullableWsV1beta1ComputePoolRef{value: val, isSet: true}
}

func (v NullableWsV1beta1ComputePoolRef) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableWsV1beta1ComputePoolRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
