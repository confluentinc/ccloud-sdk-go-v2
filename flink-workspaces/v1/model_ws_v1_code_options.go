// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Workspaces API v1

The Workspace API for Flink

API version: 0.0.1
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// WsV1CodeOptions The options for a code block
type WsV1CodeOptions struct {
	// The lines of source code for this code block.
	Source []string `json:"source,omitempty"`
}

// NewWsV1CodeOptions instantiates a new WsV1CodeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWsV1CodeOptions(source []string) *WsV1CodeOptions {
	this := WsV1CodeOptions{}
	this.Source = source
	return &this
}

// NewWsV1CodeOptionsWithDefaults instantiates a new WsV1CodeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWsV1CodeOptionsWithDefaults() *WsV1CodeOptions {
	this := WsV1CodeOptions{}
	return &this
}

// GetSource returns the Source field value
func (o *WsV1CodeOptions) GetSource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *WsV1CodeOptions) GetSourceOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *WsV1CodeOptions) SetSource(v []string) {
	o.Source = v
}

// Redact resets all sensitive fields to their zero value.
func (o *WsV1CodeOptions) Redact() {
	o.recurseRedact(&o.Source)
}

func (o *WsV1CodeOptions) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o WsV1CodeOptions) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o WsV1CodeOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableWsV1CodeOptions struct {
	value *WsV1CodeOptions
	isSet bool
}

func (v NullableWsV1CodeOptions) Get() *WsV1CodeOptions {
	return v.value
}

func (v *NullableWsV1CodeOptions) Set(val *WsV1CodeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableWsV1CodeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableWsV1CodeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWsV1CodeOptions(val *WsV1CodeOptions) *NullableWsV1CodeOptions {
	return &NullableWsV1CodeOptions{value: val, isSet: true}
}

func (v NullableWsV1CodeOptions) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableWsV1CodeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
