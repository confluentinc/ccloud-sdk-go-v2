// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Workspaces API v1

The Workspace API for Flink

API version: 0.0.1
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// JSONPatchRequestAddReplace This option is used to add or replace a value for a field
type JSONPatchRequestAddReplace struct {
	// A JSON Pointer path.
	Path string `json:"path,omitempty"`
	// The value to add, replace or test.
	Value interface{} `json:"value,omitempty"`
	// The operation to perform.
	Op string `json:"op,omitempty"`
}

// NewJSONPatchRequestAddReplace instantiates a new JSONPatchRequestAddReplace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONPatchRequestAddReplace(path string, value interface{}, op string) *JSONPatchRequestAddReplace {
	this := JSONPatchRequestAddReplace{}
	this.Path = path
	this.Value = value
	this.Op = op
	return &this
}

// NewJSONPatchRequestAddReplaceWithDefaults instantiates a new JSONPatchRequestAddReplace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONPatchRequestAddReplaceWithDefaults() *JSONPatchRequestAddReplace {
	this := JSONPatchRequestAddReplace{}
	return &this
}

// GetPath returns the Path field value
func (o *JSONPatchRequestAddReplace) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *JSONPatchRequestAddReplace) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *JSONPatchRequestAddReplace) SetPath(v string) {
	o.Path = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *JSONPatchRequestAddReplace) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JSONPatchRequestAddReplace) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *JSONPatchRequestAddReplace) SetValue(v interface{}) {
	o.Value = v
}

// GetOp returns the Op field value
func (o *JSONPatchRequestAddReplace) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *JSONPatchRequestAddReplace) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *JSONPatchRequestAddReplace) SetOp(v string) {
	o.Op = v
}

// Redact resets all sensitive fields to their zero value.
func (o *JSONPatchRequestAddReplace) Redact() {
	o.recurseRedact(&o.Path)
	o.recurseRedact(&o.Value)
	o.recurseRedact(&o.Op)
}

func (o *JSONPatchRequestAddReplace) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o JSONPatchRequestAddReplace) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o JSONPatchRequestAddReplace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["path"] = o.Path
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["op"] = o.Op
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableJSONPatchRequestAddReplace struct {
	value *JSONPatchRequestAddReplace
	isSet bool
}

func (v NullableJSONPatchRequestAddReplace) Get() *JSONPatchRequestAddReplace {
	return v.value
}

func (v *NullableJSONPatchRequestAddReplace) Set(val *JSONPatchRequestAddReplace) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONPatchRequestAddReplace) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONPatchRequestAddReplace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONPatchRequestAddReplace(val *JSONPatchRequestAddReplace) *NullableJSONPatchRequestAddReplace {
	return &NullableJSONPatchRequestAddReplace{value: val, isSet: true}
}

func (v NullableJSONPatchRequestAddReplace) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableJSONPatchRequestAddReplace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
