// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Workspaces API v1

The Workspace API for Flink

API version: 0.0.1
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PatchRequestOneOf - struct for PatchRequestOneOf
type PatchRequestOneOf struct {
	JSONPatchRequestAddReplace *JSONPatchRequestAddReplace
	JSONPatchRequestMoveCopy   *JSONPatchRequestMoveCopy
	JSONPatchRequestRemove     *JSONPatchRequestRemove
}

// JSONPatchRequestAddReplaceAsPatchRequestOneOf is a convenience function that returns JSONPatchRequestAddReplace wrapped in PatchRequestOneOf
func JSONPatchRequestAddReplaceAsPatchRequestOneOf(v *JSONPatchRequestAddReplace) PatchRequestOneOf {
	return PatchRequestOneOf{JSONPatchRequestAddReplace: v}
}

// JSONPatchRequestMoveCopyAsPatchRequestOneOf is a convenience function that returns JSONPatchRequestMoveCopy wrapped in PatchRequestOneOf
func JSONPatchRequestMoveCopyAsPatchRequestOneOf(v *JSONPatchRequestMoveCopy) PatchRequestOneOf {
	return PatchRequestOneOf{JSONPatchRequestMoveCopy: v}
}

// JSONPatchRequestRemoveAsPatchRequestOneOf is a convenience function that returns JSONPatchRequestRemove wrapped in PatchRequestOneOf
func JSONPatchRequestRemoveAsPatchRequestOneOf(v *JSONPatchRequestRemove) PatchRequestOneOf {
	return PatchRequestOneOf{JSONPatchRequestRemove: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchRequestOneOf) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into JSONPatchRequestAddReplace
	err = json.Unmarshal(data, &dst.JSONPatchRequestAddReplace)
	if err == nil {
		jsonJSONPatchRequestAddReplace, _ := json.Marshal(dst.JSONPatchRequestAddReplace)
		if string(jsonJSONPatchRequestAddReplace) == "{}" { // empty struct
			dst.JSONPatchRequestAddReplace = nil
		} else {
			match++
		}
	} else {
		dst.JSONPatchRequestAddReplace = nil
	}

	// try to unmarshal data into JSONPatchRequestMoveCopy
	err = json.Unmarshal(data, &dst.JSONPatchRequestMoveCopy)
	if err == nil {
		jsonJSONPatchRequestMoveCopy, _ := json.Marshal(dst.JSONPatchRequestMoveCopy)
		if string(jsonJSONPatchRequestMoveCopy) == "{}" { // empty struct
			dst.JSONPatchRequestMoveCopy = nil
		} else {
			match++
		}
	} else {
		dst.JSONPatchRequestMoveCopy = nil
	}

	// try to unmarshal data into JSONPatchRequestRemove
	err = json.Unmarshal(data, &dst.JSONPatchRequestRemove)
	if err == nil {
		jsonJSONPatchRequestRemove, _ := json.Marshal(dst.JSONPatchRequestRemove)
		if string(jsonJSONPatchRequestRemove) == "{}" { // empty struct
			dst.JSONPatchRequestRemove = nil
		} else {
			match++
		}
	} else {
		dst.JSONPatchRequestRemove = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.JSONPatchRequestAddReplace = nil
		dst.JSONPatchRequestMoveCopy = nil
		dst.JSONPatchRequestRemove = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PatchRequestOneOf)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PatchRequestOneOf)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchRequestOneOf) MarshalJSON() ([]byte, error) {
	if src.JSONPatchRequestAddReplace != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.JSONPatchRequestAddReplace)
		return buffer.Bytes(), err
	}

	if src.JSONPatchRequestMoveCopy != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.JSONPatchRequestMoveCopy)
		return buffer.Bytes(), err
	}

	if src.JSONPatchRequestRemove != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.JSONPatchRequestRemove)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchRequestOneOf) GetActualInstance() interface{} {
	if obj.JSONPatchRequestAddReplace != nil {
		return obj.JSONPatchRequestAddReplace
	}

	if obj.JSONPatchRequestMoveCopy != nil {
		return obj.JSONPatchRequestMoveCopy
	}

	if obj.JSONPatchRequestRemove != nil {
		return obj.JSONPatchRequestRemove
	}

	// all schemas are nil
	return nil
}

type NullablePatchRequestOneOf struct {
	value *PatchRequestOneOf
	isSet bool
}

func (v NullablePatchRequestOneOf) Get() *PatchRequestOneOf {
	return v.value
}

func (v *NullablePatchRequestOneOf) Set(val *PatchRequestOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchRequestOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchRequestOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchRequestOneOf(val *PatchRequestOneOf) *NullablePatchRequestOneOf {
	return &NullablePatchRequestOneOf{value: val, isSet: true}
}

func (v NullablePatchRequestOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullablePatchRequestOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
