// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Workspaces API v1

The Workspace API for Flink

API version: 0.0.1
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// WsV1Workspace A Workspace represents a named and ordered collection of Flink SQL code blocks. The API allows you to list, create, read, update and delete your workspaces.   Related guide: [Confluent Flink Workspace API](https://docs.confluent.io/cloud/current/flink/workspaces.html).  ## The Workspaces Model <SchemaDefinition schemaRef=\"#/components/schemas/ws.v1.Workspace\" />  ## Quotas and Limits This resource is subject to the following quotas:  | Quota | Description | | --- | --- | | `ws.max_workspaces.per_env` | Maximum number of workspaces in a region of a Confluent Cloud environment. |
type WsV1Workspace struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind     *string     `json:"kind,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The organization in which the workspace exists.
	Org *string `json:"org,omitempty"`
	// The environment in which the workspace exists.
	Environment *string `json:"environment,omitempty"`
	// The workspace name that is unique across the environment and region.
	Name *string            `json:"name,omitempty"`
	Spec *WsV1WorkspaceSpec `json:"spec,omitempty"`
}

// NewWsV1Workspace instantiates a new WsV1Workspace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWsV1Workspace() *WsV1Workspace {
	this := WsV1Workspace{}
	return &this
}

// NewWsV1WorkspaceWithDefaults instantiates a new WsV1Workspace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWsV1WorkspaceWithDefaults() *WsV1Workspace {
	this := WsV1Workspace{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *WsV1Workspace) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1Workspace) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *WsV1Workspace) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *WsV1Workspace) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *WsV1Workspace) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1Workspace) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *WsV1Workspace) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *WsV1Workspace) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *WsV1Workspace) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1Workspace) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *WsV1Workspace) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *WsV1Workspace) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *WsV1Workspace) GetOrg() string {
	if o == nil || o.Org == nil {
		var ret string
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1Workspace) GetOrgOk() (*string, bool) {
	if o == nil || o.Org == nil {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *WsV1Workspace) HasOrg() bool {
	if o != nil && o.Org != nil {
		return true
	}

	return false
}

// SetOrg gets a reference to the given string and assigns it to the Org field.
func (o *WsV1Workspace) SetOrg(v string) {
	o.Org = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *WsV1Workspace) GetEnvironment() string {
	if o == nil || o.Environment == nil {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1Workspace) GetEnvironmentOk() (*string, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *WsV1Workspace) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *WsV1Workspace) SetEnvironment(v string) {
	o.Environment = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WsV1Workspace) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1Workspace) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WsV1Workspace) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WsV1Workspace) SetName(v string) {
	o.Name = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *WsV1Workspace) GetSpec() WsV1WorkspaceSpec {
	if o == nil || o.Spec == nil {
		var ret WsV1WorkspaceSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WsV1Workspace) GetSpecOk() (*WsV1WorkspaceSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *WsV1Workspace) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given WsV1WorkspaceSpec and assigns it to the Spec field.
func (o *WsV1Workspace) SetSpec(v WsV1WorkspaceSpec) {
	o.Spec = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *WsV1Workspace) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.Org)
	o.recurseRedact(o.Environment)
	o.recurseRedact(o.Name)
	o.recurseRedact(o.Spec)
}

func (o *WsV1Workspace) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o WsV1Workspace) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o WsV1Workspace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Org != nil {
		toSerialize["org"] = o.Org
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableWsV1Workspace struct {
	value *WsV1Workspace
	isSet bool
}

func (v NullableWsV1Workspace) Get() *WsV1Workspace {
	return v.value
}

func (v *NullableWsV1Workspace) Set(val *WsV1Workspace) {
	v.value = val
	v.isSet = true
}

func (v NullableWsV1Workspace) IsSet() bool {
	return v.isSet
}

func (v *NullableWsV1Workspace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWsV1Workspace(val *WsV1Workspace) *NullableWsV1Workspace {
	return &NullableWsV1Workspace{value: val, isSet: true}
}

func (v NullableWsV1Workspace) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableWsV1Workspace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
