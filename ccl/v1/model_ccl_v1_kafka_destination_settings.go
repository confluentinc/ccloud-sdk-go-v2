// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Code Logging API

This is Custom Code Logging API.

API version: 1.0.0
Contact: compute-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CclV1KafkaDestinationSettings Kafka Destination Settings of the Custom Code Logging.
type CclV1KafkaDestinationSettings struct {
	// The destination where Custom Code Logging is sent.
	Kind string `json:"kind,omitempty"`
	// The kafka cluster id where Custom Code Logging is sent.
	ClusterId string `json:"cluster_id,omitempty"`
	// The kafka topic where Custom Code Logging is sent.
	Topic string `json:"topic,omitempty"`
	// Minimum log level for Custom Code Logging.
	LogLevel *string `json:"log_level,omitempty"`
}

// NewCclV1KafkaDestinationSettings instantiates a new CclV1KafkaDestinationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCclV1KafkaDestinationSettings(kind string, clusterId string, topic string) *CclV1KafkaDestinationSettings {
	this := CclV1KafkaDestinationSettings{}
	this.Kind = kind
	this.ClusterId = clusterId
	this.Topic = topic
	var logLevel string = "INFO"
	this.LogLevel = &logLevel
	return &this
}

// NewCclV1KafkaDestinationSettingsWithDefaults instantiates a new CclV1KafkaDestinationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCclV1KafkaDestinationSettingsWithDefaults() *CclV1KafkaDestinationSettings {
	this := CclV1KafkaDestinationSettings{}
	var logLevel string = "INFO"
	this.LogLevel = &logLevel
	return &this
}

// GetKind returns the Kind field value
func (o *CclV1KafkaDestinationSettings) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CclV1KafkaDestinationSettings) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CclV1KafkaDestinationSettings) SetKind(v string) {
	o.Kind = v
}

// GetClusterId returns the ClusterId field value
func (o *CclV1KafkaDestinationSettings) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *CclV1KafkaDestinationSettings) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *CclV1KafkaDestinationSettings) SetClusterId(v string) {
	o.ClusterId = v
}

// GetTopic returns the Topic field value
func (o *CclV1KafkaDestinationSettings) GetTopic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *CclV1KafkaDestinationSettings) GetTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *CclV1KafkaDestinationSettings) SetTopic(v string) {
	o.Topic = v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *CclV1KafkaDestinationSettings) GetLogLevel() string {
	if o == nil || o.LogLevel == nil {
		var ret string
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CclV1KafkaDestinationSettings) GetLogLevelOk() (*string, bool) {
	if o == nil || o.LogLevel == nil {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *CclV1KafkaDestinationSettings) HasLogLevel() bool {
	if o != nil && o.LogLevel != nil {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given string and assigns it to the LogLevel field.
func (o *CclV1KafkaDestinationSettings) SetLogLevel(v string) {
	o.LogLevel = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CclV1KafkaDestinationSettings) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(&o.ClusterId)
	o.recurseRedact(&o.Topic)
	o.recurseRedact(o.LogLevel)
}

func (o *CclV1KafkaDestinationSettings) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CclV1KafkaDestinationSettings) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CclV1KafkaDestinationSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if true {
		toSerialize["topic"] = o.Topic
	}
	if o.LogLevel != nil {
		toSerialize["log_level"] = o.LogLevel
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCclV1KafkaDestinationSettings struct {
	value *CclV1KafkaDestinationSettings
	isSet bool
}

func (v NullableCclV1KafkaDestinationSettings) Get() *CclV1KafkaDestinationSettings {
	return v.value
}

func (v *NullableCclV1KafkaDestinationSettings) Set(val *CclV1KafkaDestinationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCclV1KafkaDestinationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCclV1KafkaDestinationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCclV1KafkaDestinationSettings(val *CclV1KafkaDestinationSettings) *NullableCclV1KafkaDestinationSettings {
	return &NullableCclV1KafkaDestinationSettings{value: val, isSet: true}
}

func (v NullableCclV1KafkaDestinationSettings) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCclV1KafkaDestinationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
