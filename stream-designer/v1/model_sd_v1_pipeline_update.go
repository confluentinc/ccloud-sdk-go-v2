// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Designer API

# Introduction  Stream Designer API provides resources/API for defining stream processing pipelines. Each pipeline describes a set of stream processing components, including connectors, topics, streams, tables, queries and schemas. The components in a pipeline need not exist as CCloud resources until the pipeline is activated, or launched.  This API defines operations to create, list, modify, manage and delete pipelines. 

API version: 0.0.1-alpha0
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SdV1PipelineUpdate `Pipeline` objects represent information about a user-defined pipeline of Confluent Cloud components. The pipeline's content is available separately.  The API allows you to create, retrieve, update, and delete individual pipeline graphs, as well as list all of your pipelines for the particular environment and cluster.   Related guide: [Pipelines in Confluent Cloud](https://docs.confluent.io/cloud/current/pipelines).  ## The Pipelines Model <SchemaDefinition schemaRef=\"#/components/schemas/sd.v1.Pipeline\" />  ## Quotas and Limits This resource is subject to the following quotas:  | Quota | Description | | --- | --- | | `pipelines_per_org` | Pipelines in one Confluent Cloud organization | | `pipelines_per_cluster` | Pipelines in one Confluent Cloud cluster |
type SdV1PipelineUpdate struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id *string `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The name of this pipeline.
	Name *string `json:"name,omitempty"`
	// The description of this pipeline.
	Description *string `json:"description,omitempty"`
	// The unique identifier of the ksqlDB application this pipeline uses.
	KsqlId *string `json:"ksqlId,omitempty"`
	// The unique identifier of the Schema Registry this pipeline uses.
	SchemaRegistryId *string `json:"schemaRegistryId,omitempty"`
	// The endpoint URL of the kafka cluster this pipeline uses.
	KafkaClusterEndpoint *string `json:"kafkaClusterEndpoint,omitempty"`
	// The endpoint URL of the ksqlDB application this pipeline uses.
	KsqlEndpoint *string `json:"ksqlEndpoint,omitempty"`
	// The endpoint URL of the CCloud Connect service this pipeline uses.
	ConnectEndpoint *string `json:"connectEndpoint,omitempty"`
	// The endpoint URL of the Schema Registry this pipeline uses.
	SchemaRegistryEndpoint *string `json:"schemaRegistryEndpoint,omitempty"`
}

// NewSdV1PipelineUpdate instantiates a new SdV1PipelineUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdV1PipelineUpdate() *SdV1PipelineUpdate {
	this := SdV1PipelineUpdate{}
	return &this
}

// NewSdV1PipelineUpdateWithDefaults instantiates a new SdV1PipelineUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdV1PipelineUpdateWithDefaults() *SdV1PipelineUpdate {
	this := SdV1PipelineUpdate{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *SdV1PipelineUpdate) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *SdV1PipelineUpdate) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SdV1PipelineUpdate) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *SdV1PipelineUpdate) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SdV1PipelineUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SdV1PipelineUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetKsqlId returns the KsqlId field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetKsqlId() string {
	if o == nil || o.KsqlId == nil {
		var ret string
		return ret
	}
	return *o.KsqlId
}

// GetKsqlIdOk returns a tuple with the KsqlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetKsqlIdOk() (*string, bool) {
	if o == nil || o.KsqlId == nil {
		return nil, false
	}
	return o.KsqlId, true
}

// HasKsqlId returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasKsqlId() bool {
	if o != nil && o.KsqlId != nil {
		return true
	}

	return false
}

// SetKsqlId gets a reference to the given string and assigns it to the KsqlId field.
func (o *SdV1PipelineUpdate) SetKsqlId(v string) {
	o.KsqlId = &v
}

// GetSchemaRegistryId returns the SchemaRegistryId field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetSchemaRegistryId() string {
	if o == nil || o.SchemaRegistryId == nil {
		var ret string
		return ret
	}
	return *o.SchemaRegistryId
}

// GetSchemaRegistryIdOk returns a tuple with the SchemaRegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetSchemaRegistryIdOk() (*string, bool) {
	if o == nil || o.SchemaRegistryId == nil {
		return nil, false
	}
	return o.SchemaRegistryId, true
}

// HasSchemaRegistryId returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasSchemaRegistryId() bool {
	if o != nil && o.SchemaRegistryId != nil {
		return true
	}

	return false
}

// SetSchemaRegistryId gets a reference to the given string and assigns it to the SchemaRegistryId field.
func (o *SdV1PipelineUpdate) SetSchemaRegistryId(v string) {
	o.SchemaRegistryId = &v
}

// GetKafkaClusterEndpoint returns the KafkaClusterEndpoint field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetKafkaClusterEndpoint() string {
	if o == nil || o.KafkaClusterEndpoint == nil {
		var ret string
		return ret
	}
	return *o.KafkaClusterEndpoint
}

// GetKafkaClusterEndpointOk returns a tuple with the KafkaClusterEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetKafkaClusterEndpointOk() (*string, bool) {
	if o == nil || o.KafkaClusterEndpoint == nil {
		return nil, false
	}
	return o.KafkaClusterEndpoint, true
}

// HasKafkaClusterEndpoint returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasKafkaClusterEndpoint() bool {
	if o != nil && o.KafkaClusterEndpoint != nil {
		return true
	}

	return false
}

// SetKafkaClusterEndpoint gets a reference to the given string and assigns it to the KafkaClusterEndpoint field.
func (o *SdV1PipelineUpdate) SetKafkaClusterEndpoint(v string) {
	o.KafkaClusterEndpoint = &v
}

// GetKsqlEndpoint returns the KsqlEndpoint field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetKsqlEndpoint() string {
	if o == nil || o.KsqlEndpoint == nil {
		var ret string
		return ret
	}
	return *o.KsqlEndpoint
}

// GetKsqlEndpointOk returns a tuple with the KsqlEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetKsqlEndpointOk() (*string, bool) {
	if o == nil || o.KsqlEndpoint == nil {
		return nil, false
	}
	return o.KsqlEndpoint, true
}

// HasKsqlEndpoint returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasKsqlEndpoint() bool {
	if o != nil && o.KsqlEndpoint != nil {
		return true
	}

	return false
}

// SetKsqlEndpoint gets a reference to the given string and assigns it to the KsqlEndpoint field.
func (o *SdV1PipelineUpdate) SetKsqlEndpoint(v string) {
	o.KsqlEndpoint = &v
}

// GetConnectEndpoint returns the ConnectEndpoint field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetConnectEndpoint() string {
	if o == nil || o.ConnectEndpoint == nil {
		var ret string
		return ret
	}
	return *o.ConnectEndpoint
}

// GetConnectEndpointOk returns a tuple with the ConnectEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetConnectEndpointOk() (*string, bool) {
	if o == nil || o.ConnectEndpoint == nil {
		return nil, false
	}
	return o.ConnectEndpoint, true
}

// HasConnectEndpoint returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasConnectEndpoint() bool {
	if o != nil && o.ConnectEndpoint != nil {
		return true
	}

	return false
}

// SetConnectEndpoint gets a reference to the given string and assigns it to the ConnectEndpoint field.
func (o *SdV1PipelineUpdate) SetConnectEndpoint(v string) {
	o.ConnectEndpoint = &v
}

// GetSchemaRegistryEndpoint returns the SchemaRegistryEndpoint field value if set, zero value otherwise.
func (o *SdV1PipelineUpdate) GetSchemaRegistryEndpoint() string {
	if o == nil || o.SchemaRegistryEndpoint == nil {
		var ret string
		return ret
	}
	return *o.SchemaRegistryEndpoint
}

// GetSchemaRegistryEndpointOk returns a tuple with the SchemaRegistryEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineUpdate) GetSchemaRegistryEndpointOk() (*string, bool) {
	if o == nil || o.SchemaRegistryEndpoint == nil {
		return nil, false
	}
	return o.SchemaRegistryEndpoint, true
}

// HasSchemaRegistryEndpoint returns a boolean if a field has been set.
func (o *SdV1PipelineUpdate) HasSchemaRegistryEndpoint() bool {
	if o != nil && o.SchemaRegistryEndpoint != nil {
		return true
	}

	return false
}

// SetSchemaRegistryEndpoint gets a reference to the given string and assigns it to the SchemaRegistryEndpoint field.
func (o *SdV1PipelineUpdate) SetSchemaRegistryEndpoint(v string) {
	o.SchemaRegistryEndpoint = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SdV1PipelineUpdate) Redact() {
    o.recurseRedact(o.ApiVersion)
    o.recurseRedact(o.Kind)
    o.recurseRedact(o.Id)
    o.recurseRedact(o.Metadata)
    o.recurseRedact(o.Name)
    o.recurseRedact(o.Description)
    o.recurseRedact(o.KsqlId)
    o.recurseRedact(o.SchemaRegistryId)
    o.recurseRedact(o.KafkaClusterEndpoint)
    o.recurseRedact(o.KsqlEndpoint)
    o.recurseRedact(o.ConnectEndpoint)
    o.recurseRedact(o.SchemaRegistryEndpoint)
}

func (o *SdV1PipelineUpdate) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o SdV1PipelineUpdate) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o SdV1PipelineUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.KsqlId != nil {
		toSerialize["ksqlId"] = o.KsqlId
	}
	if o.SchemaRegistryId != nil {
		toSerialize["schemaRegistryId"] = o.SchemaRegistryId
	}
	if o.KafkaClusterEndpoint != nil {
		toSerialize["kafkaClusterEndpoint"] = o.KafkaClusterEndpoint
	}
	if o.KsqlEndpoint != nil {
		toSerialize["ksqlEndpoint"] = o.KsqlEndpoint
	}
	if o.ConnectEndpoint != nil {
		toSerialize["connectEndpoint"] = o.ConnectEndpoint
	}
	if o.SchemaRegistryEndpoint != nil {
		toSerialize["schemaRegistryEndpoint"] = o.SchemaRegistryEndpoint
	}
	return json.Marshal(toSerialize)
}

type NullableSdV1PipelineUpdate struct {
	value *SdV1PipelineUpdate
	isSet bool
}

func (v NullableSdV1PipelineUpdate) Get() *SdV1PipelineUpdate {
	return v.value
}

func (v *NullableSdV1PipelineUpdate) Set(val *SdV1PipelineUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSdV1PipelineUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSdV1PipelineUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdV1PipelineUpdate(val *SdV1PipelineUpdate) *NullableSdV1PipelineUpdate {
	return &NullableSdV1PipelineUpdate{value: val, isSet: true}
}

func (v NullableSdV1PipelineUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdV1PipelineUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


