// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Designer API

# Introduction  Stream Designer API provides resources/API for defining stream processing pipelines. Each pipeline describes a set of stream processing components, including connectors, topics, streams, tables, queries and schemas. The components in a pipeline need not exist as CCloud resources until the pipeline is activated, or launched.  This API defines operations to create, list, modify, manage and delete pipelines.

API version: 0.0.1-alpha0
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// KsqldbcmV2Cluster `Cluster` represents a ksqlDB runtime that you can issue queries to using its API endpoint. It executes SQL statements and queries which under the hood get built into corresponding Kafka Streams topologies. The API allows you to list, create, read, and delete your ksqlDB clusters.   Related guide: [ksqlDB in Confluent Cloud](https://docs.confluent.io/cloud/current/ksqldb/ksqldb-cluster-api.html).  ## The Clusters Model <SchemaDefinition schemaRef=\"#/components/schemas/ksqldbcm.v2.Cluster\" />  ## Quotas and Limits This resource is subject to the following quotas:  | Quota | Description | | --- | --- | | `ksql.limits.max_apps_per_cluster` | Clusters in one Confluent Cloud Kafka Cluster. |
type KsqldbcmV2Cluster struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id       *string     `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The name of the ksqlDB cluster.
	DisplayName *string `json:"display_name,omitempty"`
	// This flag controls whether you want to include the row data in the processing log topic. Turn it off if you don't want to emit sensitive information to the processing log
	UseDetailedProcessingLog *bool `json:"use_detailed_processing_log,omitempty"`
	// The number of CSUs (Confluent Streaming Units) in a ksqlDB cluster.
	Csu *int32 `json:"csu,omitempty"`
	// The kafka_cluster to which this belongs.
	KafkaCluster *ObjectReference `json:"kafka_cluster,omitempty"`
	// The credential_identity to which this belongs. The credential_identity can be one of iam.v2.User, iam.v2.ServiceAccount.
	CredentialIdentity *ObjectReference `json:"credential_identity,omitempty"`
	// The environment to which this belongs.
	Environment *ObjectReference         `json:"environment,omitempty"`
	Status      *KsqldbcmV2ClusterStatus `json:"status,omitempty"`
}

// NewKsqldbcmV2Cluster instantiates a new KsqldbcmV2Cluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKsqldbcmV2Cluster() *KsqldbcmV2Cluster {
	this := KsqldbcmV2Cluster{}
	var useDetailedProcessingLog bool = true
	this.UseDetailedProcessingLog = &useDetailedProcessingLog
	return &this
}

// NewKsqldbcmV2ClusterWithDefaults instantiates a new KsqldbcmV2Cluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKsqldbcmV2ClusterWithDefaults() *KsqldbcmV2Cluster {
	this := KsqldbcmV2Cluster{}
	var useDetailedProcessingLog bool = true
	this.UseDetailedProcessingLog = &useDetailedProcessingLog
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *KsqldbcmV2Cluster) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *KsqldbcmV2Cluster) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KsqldbcmV2Cluster) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *KsqldbcmV2Cluster) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *KsqldbcmV2Cluster) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetUseDetailedProcessingLog returns the UseDetailedProcessingLog field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetUseDetailedProcessingLog() bool {
	if o == nil || o.UseDetailedProcessingLog == nil {
		var ret bool
		return ret
	}
	return *o.UseDetailedProcessingLog
}

// GetUseDetailedProcessingLogOk returns a tuple with the UseDetailedProcessingLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetUseDetailedProcessingLogOk() (*bool, bool) {
	if o == nil || o.UseDetailedProcessingLog == nil {
		return nil, false
	}
	return o.UseDetailedProcessingLog, true
}

// HasUseDetailedProcessingLog returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasUseDetailedProcessingLog() bool {
	if o != nil && o.UseDetailedProcessingLog != nil {
		return true
	}

	return false
}

// SetUseDetailedProcessingLog gets a reference to the given bool and assigns it to the UseDetailedProcessingLog field.
func (o *KsqldbcmV2Cluster) SetUseDetailedProcessingLog(v bool) {
	o.UseDetailedProcessingLog = &v
}

// GetCsu returns the Csu field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetCsu() int32 {
	if o == nil || o.Csu == nil {
		var ret int32
		return ret
	}
	return *o.Csu
}

// GetCsuOk returns a tuple with the Csu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetCsuOk() (*int32, bool) {
	if o == nil || o.Csu == nil {
		return nil, false
	}
	return o.Csu, true
}

// HasCsu returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasCsu() bool {
	if o != nil && o.Csu != nil {
		return true
	}

	return false
}

// SetCsu gets a reference to the given int32 and assigns it to the Csu field.
func (o *KsqldbcmV2Cluster) SetCsu(v int32) {
	o.Csu = &v
}

// GetKafkaCluster returns the KafkaCluster field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetKafkaCluster() ObjectReference {
	if o == nil || o.KafkaCluster == nil {
		var ret ObjectReference
		return ret
	}
	return *o.KafkaCluster
}

// GetKafkaClusterOk returns a tuple with the KafkaCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetKafkaClusterOk() (*ObjectReference, bool) {
	if o == nil || o.KafkaCluster == nil {
		return nil, false
	}
	return o.KafkaCluster, true
}

// HasKafkaCluster returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasKafkaCluster() bool {
	if o != nil && o.KafkaCluster != nil {
		return true
	}

	return false
}

// SetKafkaCluster gets a reference to the given ObjectReference and assigns it to the KafkaCluster field.
func (o *KsqldbcmV2Cluster) SetKafkaCluster(v ObjectReference) {
	o.KafkaCluster = &v
}

// GetCredentialIdentity returns the CredentialIdentity field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetCredentialIdentity() ObjectReference {
	if o == nil || o.CredentialIdentity == nil {
		var ret ObjectReference
		return ret
	}
	return *o.CredentialIdentity
}

// GetCredentialIdentityOk returns a tuple with the CredentialIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetCredentialIdentityOk() (*ObjectReference, bool) {
	if o == nil || o.CredentialIdentity == nil {
		return nil, false
	}
	return o.CredentialIdentity, true
}

// HasCredentialIdentity returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasCredentialIdentity() bool {
	if o != nil && o.CredentialIdentity != nil {
		return true
	}

	return false
}

// SetCredentialIdentity gets a reference to the given ObjectReference and assigns it to the CredentialIdentity field.
func (o *KsqldbcmV2Cluster) SetCredentialIdentity(v ObjectReference) {
	o.CredentialIdentity = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetEnvironment() ObjectReference {
	if o == nil || o.Environment == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetEnvironmentOk() (*ObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectReference and assigns it to the Environment field.
func (o *KsqldbcmV2Cluster) SetEnvironment(v ObjectReference) {
	o.Environment = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KsqldbcmV2Cluster) GetStatus() KsqldbcmV2ClusterStatus {
	if o == nil || o.Status == nil {
		var ret KsqldbcmV2ClusterStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KsqldbcmV2Cluster) GetStatusOk() (*KsqldbcmV2ClusterStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KsqldbcmV2Cluster) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given KsqldbcmV2ClusterStatus and assigns it to the Status field.
func (o *KsqldbcmV2Cluster) SetStatus(v KsqldbcmV2ClusterStatus) {
	o.Status = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *KsqldbcmV2Cluster) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.DisplayName)
	o.recurseRedact(o.UseDetailedProcessingLog)
	o.recurseRedact(o.Csu)
	o.recurseRedact(o.KafkaCluster)
	o.recurseRedact(o.CredentialIdentity)
	o.recurseRedact(o.Environment)
	o.recurseRedact(o.Status)
}

func (o *KsqldbcmV2Cluster) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o KsqldbcmV2Cluster) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o KsqldbcmV2Cluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.UseDetailedProcessingLog != nil {
		toSerialize["use_detailed_processing_log"] = o.UseDetailedProcessingLog
	}
	if o.Csu != nil {
		toSerialize["csu"] = o.Csu
	}
	if o.KafkaCluster != nil {
		toSerialize["kafka_cluster"] = o.KafkaCluster
	}
	if o.CredentialIdentity != nil {
		toSerialize["credential_identity"] = o.CredentialIdentity
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableKsqldbcmV2Cluster struct {
	value *KsqldbcmV2Cluster
	isSet bool
}

func (v NullableKsqldbcmV2Cluster) Get() *KsqldbcmV2Cluster {
	return v.value
}

func (v *NullableKsqldbcmV2Cluster) Set(val *KsqldbcmV2Cluster) {
	v.value = val
	v.isSet = true
}

func (v NullableKsqldbcmV2Cluster) IsSet() bool {
	return v.isSet
}

func (v *NullableKsqldbcmV2Cluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKsqldbcmV2Cluster(val *KsqldbcmV2Cluster) *NullableKsqldbcmV2Cluster {
	return &NullableKsqldbcmV2Cluster{value: val, isSet: true}
}

func (v NullableKsqldbcmV2Cluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKsqldbcmV2Cluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
