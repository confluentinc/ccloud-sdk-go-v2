// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Designer API

# Introduction  Stream Designer API provides resources/API for defining stream processing pipelines. Each pipeline describes a set of stream processing components, including connectors, topics, streams, tables, queries and schemas. The components in a pipeline need not exist as Confluent Cloud resources until the pipeline is activated.  This API defines operations to create, list, modify, manage and delete pipelines. 

API version: 0.0.1-alpha0
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SdV1PipelineSpecUpdate The desired state of the Pipeline
type SdV1PipelineSpecUpdate struct {
	// The name of the pipeline.
	DisplayName *string `json:"display_name,omitempty"`
	// The description of the pipeline.
	Description *string `json:"description,omitempty"`
	// A list of KSQL statements that define this pipeline.
	SourceCode *string `json:"source_code,omitempty"`
	// A list of Kafka topic names from the activated pipeline to be retained when this pipeline is deactivated.
	RetainedTopicNames *[]string `json:"retained_topic_names,omitempty"`
	// The desired state of the pipeline.
	Activated *bool `json:"activated,omitempty"`
	// Whether the pipeline has privileges to be activated.
	ActivationPrivilege *bool `json:"activation_privilege,omitempty"`
}

// NewSdV1PipelineSpecUpdate instantiates a new SdV1PipelineSpecUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdV1PipelineSpecUpdate() *SdV1PipelineSpecUpdate {
	this := SdV1PipelineSpecUpdate{}
	var activated bool = false
	this.Activated = &activated
	var activationPrivilege bool = false
	this.ActivationPrivilege = &activationPrivilege
	return &this
}

// NewSdV1PipelineSpecUpdateWithDefaults instantiates a new SdV1PipelineSpecUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdV1PipelineSpecUpdateWithDefaults() *SdV1PipelineSpecUpdate {
	this := SdV1PipelineSpecUpdate{}
	var activated bool = false
	this.Activated = &activated
	var activationPrivilege bool = false
	this.ActivationPrivilege = &activationPrivilege
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SdV1PipelineSpecUpdate) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpecUpdate) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SdV1PipelineSpecUpdate) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SdV1PipelineSpecUpdate) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SdV1PipelineSpecUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpecUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SdV1PipelineSpecUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SdV1PipelineSpecUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetSourceCode returns the SourceCode field value if set, zero value otherwise.
func (o *SdV1PipelineSpecUpdate) GetSourceCode() string {
	if o == nil || o.SourceCode == nil {
		var ret string
		return ret
	}
	return *o.SourceCode
}

// GetSourceCodeOk returns a tuple with the SourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpecUpdate) GetSourceCodeOk() (*string, bool) {
	if o == nil || o.SourceCode == nil {
		return nil, false
	}
	return o.SourceCode, true
}

// HasSourceCode returns a boolean if a field has been set.
func (o *SdV1PipelineSpecUpdate) HasSourceCode() bool {
	if o != nil && o.SourceCode != nil {
		return true
	}

	return false
}

// SetSourceCode gets a reference to the given string and assigns it to the SourceCode field.
func (o *SdV1PipelineSpecUpdate) SetSourceCode(v string) {
	o.SourceCode = &v
}

// GetRetainedTopicNames returns the RetainedTopicNames field value if set, zero value otherwise.
func (o *SdV1PipelineSpecUpdate) GetRetainedTopicNames() []string {
	if o == nil || o.RetainedTopicNames == nil {
		var ret []string
		return ret
	}
	return *o.RetainedTopicNames
}

// GetRetainedTopicNamesOk returns a tuple with the RetainedTopicNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpecUpdate) GetRetainedTopicNamesOk() (*[]string, bool) {
	if o == nil || o.RetainedTopicNames == nil {
		return nil, false
	}
	return o.RetainedTopicNames, true
}

// HasRetainedTopicNames returns a boolean if a field has been set.
func (o *SdV1PipelineSpecUpdate) HasRetainedTopicNames() bool {
	if o != nil && o.RetainedTopicNames != nil {
		return true
	}

	return false
}

// SetRetainedTopicNames gets a reference to the given []string and assigns it to the RetainedTopicNames field.
func (o *SdV1PipelineSpecUpdate) SetRetainedTopicNames(v []string) {
	o.RetainedTopicNames = &v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *SdV1PipelineSpecUpdate) GetActivated() bool {
	if o == nil || o.Activated == nil {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpecUpdate) GetActivatedOk() (*bool, bool) {
	if o == nil || o.Activated == nil {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *SdV1PipelineSpecUpdate) HasActivated() bool {
	if o != nil && o.Activated != nil {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *SdV1PipelineSpecUpdate) SetActivated(v bool) {
	o.Activated = &v
}

// GetActivationPrivilege returns the ActivationPrivilege field value if set, zero value otherwise.
func (o *SdV1PipelineSpecUpdate) GetActivationPrivilege() bool {
	if o == nil || o.ActivationPrivilege == nil {
		var ret bool
		return ret
	}
	return *o.ActivationPrivilege
}

// GetActivationPrivilegeOk returns a tuple with the ActivationPrivilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpecUpdate) GetActivationPrivilegeOk() (*bool, bool) {
	if o == nil || o.ActivationPrivilege == nil {
		return nil, false
	}
	return o.ActivationPrivilege, true
}

// HasActivationPrivilege returns a boolean if a field has been set.
func (o *SdV1PipelineSpecUpdate) HasActivationPrivilege() bool {
	if o != nil && o.ActivationPrivilege != nil {
		return true
	}

	return false
}

// SetActivationPrivilege gets a reference to the given bool and assigns it to the ActivationPrivilege field.
func (o *SdV1PipelineSpecUpdate) SetActivationPrivilege(v bool) {
	o.ActivationPrivilege = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SdV1PipelineSpecUpdate) Redact() {
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.Description)
    o.recurseRedact(o.SourceCode)
    o.recurseRedact(o.RetainedTopicNames)
    o.recurseRedact(o.Activated)
    o.recurseRedact(o.ActivationPrivilege)
}

func (o *SdV1PipelineSpecUpdate) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o SdV1PipelineSpecUpdate) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o SdV1PipelineSpecUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.SourceCode != nil {
		toSerialize["source_code"] = o.SourceCode
	}
	if o.RetainedTopicNames != nil {
		toSerialize["retained_topic_names"] = o.RetainedTopicNames
	}
	if o.Activated != nil {
		toSerialize["activated"] = o.Activated
	}
	if o.ActivationPrivilege != nil {
		toSerialize["activation_privilege"] = o.ActivationPrivilege
	}
	return json.Marshal(toSerialize)
}

type NullableSdV1PipelineSpecUpdate struct {
	value *SdV1PipelineSpecUpdate
	isSet bool
}

func (v NullableSdV1PipelineSpecUpdate) Get() *SdV1PipelineSpecUpdate {
	return v.value
}

func (v *NullableSdV1PipelineSpecUpdate) Set(val *SdV1PipelineSpecUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSdV1PipelineSpecUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSdV1PipelineSpecUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdV1PipelineSpecUpdate(val *SdV1PipelineSpecUpdate) *NullableSdV1PipelineSpecUpdate {
	return &NullableSdV1PipelineSpecUpdate{value: val, isSet: true}
}

func (v NullableSdV1PipelineSpecUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdV1PipelineSpecUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


