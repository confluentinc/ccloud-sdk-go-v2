// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_identity_providers_iam_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2 "github.com/confluentinc/ccloud-sdk-go-v2/identity-provider/v2"
)

// IdentityProvidersIamV2Api is a mock of IdentityProvidersIamV2Api interface
type IdentityProvidersIamV2Api struct {
	lockCreateIamV2IdentityProvider sync.Mutex
	CreateIamV2IdentityProviderFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityProviderRequest

	lockCreateIamV2IdentityProviderExecute sync.Mutex
	CreateIamV2IdentityProviderExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityProviderRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityProvider, *net_http.Response, error)

	lockDeleteIamV2IdentityProvider sync.Mutex
	DeleteIamV2IdentityProviderFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityProviderRequest

	lockDeleteIamV2IdentityProviderExecute sync.Mutex
	DeleteIamV2IdentityProviderExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityProviderRequest) (*net_http.Response, error)

	lockGetIamV2IdentityProvider sync.Mutex
	GetIamV2IdentityProviderFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityProviderRequest

	lockGetIamV2IdentityProviderExecute sync.Mutex
	GetIamV2IdentityProviderExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityProviderRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityProvider, *net_http.Response, error)

	lockListIamV2IdentityProviders sync.Mutex
	ListIamV2IdentityProvidersFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityProvidersRequest

	lockListIamV2IdentityProvidersExecute sync.Mutex
	ListIamV2IdentityProvidersExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityProvidersRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityProviderList, *net_http.Response, error)

	lockUpdateIamV2IdentityProvider sync.Mutex
	UpdateIamV2IdentityProviderFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityProviderRequest

	lockUpdateIamV2IdentityProviderExecute sync.Mutex
	UpdateIamV2IdentityProviderExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityProviderRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityProvider, *net_http.Response, error)

	calls struct {
		CreateIamV2IdentityProvider []struct {
			Ctx context.Context
		}
		CreateIamV2IdentityProviderExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityProviderRequest
		}
		DeleteIamV2IdentityProvider []struct {
			Ctx context.Context
			Id  string
		}
		DeleteIamV2IdentityProviderExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityProviderRequest
		}
		GetIamV2IdentityProvider []struct {
			Ctx context.Context
			Id  string
		}
		GetIamV2IdentityProviderExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityProviderRequest
		}
		ListIamV2IdentityProviders []struct {
			Ctx context.Context
		}
		ListIamV2IdentityProvidersExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityProvidersRequest
		}
		UpdateIamV2IdentityProvider []struct {
			Ctx context.Context
			Id  string
		}
		UpdateIamV2IdentityProviderExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityProviderRequest
		}
	}
}

// CreateIamV2IdentityProvider mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) CreateIamV2IdentityProvider(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityProviderRequest {
	m.lockCreateIamV2IdentityProvider.Lock()
	defer m.lockCreateIamV2IdentityProvider.Unlock()

	if m.CreateIamV2IdentityProviderFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.CreateIamV2IdentityProviderFunc is nil but IdentityProvidersIamV2Api.CreateIamV2IdentityProvider was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.CreateIamV2IdentityProvider = append(m.calls.CreateIamV2IdentityProvider, call)

	return m.CreateIamV2IdentityProviderFunc(ctx)
}

// CreateIamV2IdentityProviderCalled returns true if CreateIamV2IdentityProvider was called at least once.
func (m *IdentityProvidersIamV2Api) CreateIamV2IdentityProviderCalled() bool {
	m.lockCreateIamV2IdentityProvider.Lock()
	defer m.lockCreateIamV2IdentityProvider.Unlock()

	return len(m.calls.CreateIamV2IdentityProvider) > 0
}

// CreateIamV2IdentityProviderCalls returns the calls made to CreateIamV2IdentityProvider.
func (m *IdentityProvidersIamV2Api) CreateIamV2IdentityProviderCalls() []struct {
	Ctx context.Context
} {
	m.lockCreateIamV2IdentityProvider.Lock()
	defer m.lockCreateIamV2IdentityProvider.Unlock()

	return m.calls.CreateIamV2IdentityProvider
}

// CreateIamV2IdentityProviderExecute mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) CreateIamV2IdentityProviderExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityProviderRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityProvider, *net_http.Response, error) {
	m.lockCreateIamV2IdentityProviderExecute.Lock()
	defer m.lockCreateIamV2IdentityProviderExecute.Unlock()

	if m.CreateIamV2IdentityProviderExecuteFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.CreateIamV2IdentityProviderExecuteFunc is nil but IdentityProvidersIamV2Api.CreateIamV2IdentityProviderExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityProviderRequest
	}{
		R: r,
	}

	m.calls.CreateIamV2IdentityProviderExecute = append(m.calls.CreateIamV2IdentityProviderExecute, call)

	return m.CreateIamV2IdentityProviderExecuteFunc(r)
}

// CreateIamV2IdentityProviderExecuteCalled returns true if CreateIamV2IdentityProviderExecute was called at least once.
func (m *IdentityProvidersIamV2Api) CreateIamV2IdentityProviderExecuteCalled() bool {
	m.lockCreateIamV2IdentityProviderExecute.Lock()
	defer m.lockCreateIamV2IdentityProviderExecute.Unlock()

	return len(m.calls.CreateIamV2IdentityProviderExecute) > 0
}

// CreateIamV2IdentityProviderExecuteCalls returns the calls made to CreateIamV2IdentityProviderExecute.
func (m *IdentityProvidersIamV2Api) CreateIamV2IdentityProviderExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityProviderRequest
} {
	m.lockCreateIamV2IdentityProviderExecute.Lock()
	defer m.lockCreateIamV2IdentityProviderExecute.Unlock()

	return m.calls.CreateIamV2IdentityProviderExecute
}

// DeleteIamV2IdentityProvider mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) DeleteIamV2IdentityProvider(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityProviderRequest {
	m.lockDeleteIamV2IdentityProvider.Lock()
	defer m.lockDeleteIamV2IdentityProvider.Unlock()

	if m.DeleteIamV2IdentityProviderFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.DeleteIamV2IdentityProviderFunc is nil but IdentityProvidersIamV2Api.DeleteIamV2IdentityProvider was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.DeleteIamV2IdentityProvider = append(m.calls.DeleteIamV2IdentityProvider, call)

	return m.DeleteIamV2IdentityProviderFunc(ctx, id)
}

// DeleteIamV2IdentityProviderCalled returns true if DeleteIamV2IdentityProvider was called at least once.
func (m *IdentityProvidersIamV2Api) DeleteIamV2IdentityProviderCalled() bool {
	m.lockDeleteIamV2IdentityProvider.Lock()
	defer m.lockDeleteIamV2IdentityProvider.Unlock()

	return len(m.calls.DeleteIamV2IdentityProvider) > 0
}

// DeleteIamV2IdentityProviderCalls returns the calls made to DeleteIamV2IdentityProvider.
func (m *IdentityProvidersIamV2Api) DeleteIamV2IdentityProviderCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockDeleteIamV2IdentityProvider.Lock()
	defer m.lockDeleteIamV2IdentityProvider.Unlock()

	return m.calls.DeleteIamV2IdentityProvider
}

// DeleteIamV2IdentityProviderExecute mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) DeleteIamV2IdentityProviderExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityProviderRequest) (*net_http.Response, error) {
	m.lockDeleteIamV2IdentityProviderExecute.Lock()
	defer m.lockDeleteIamV2IdentityProviderExecute.Unlock()

	if m.DeleteIamV2IdentityProviderExecuteFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.DeleteIamV2IdentityProviderExecuteFunc is nil but IdentityProvidersIamV2Api.DeleteIamV2IdentityProviderExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityProviderRequest
	}{
		R: r,
	}

	m.calls.DeleteIamV2IdentityProviderExecute = append(m.calls.DeleteIamV2IdentityProviderExecute, call)

	return m.DeleteIamV2IdentityProviderExecuteFunc(r)
}

// DeleteIamV2IdentityProviderExecuteCalled returns true if DeleteIamV2IdentityProviderExecute was called at least once.
func (m *IdentityProvidersIamV2Api) DeleteIamV2IdentityProviderExecuteCalled() bool {
	m.lockDeleteIamV2IdentityProviderExecute.Lock()
	defer m.lockDeleteIamV2IdentityProviderExecute.Unlock()

	return len(m.calls.DeleteIamV2IdentityProviderExecute) > 0
}

// DeleteIamV2IdentityProviderExecuteCalls returns the calls made to DeleteIamV2IdentityProviderExecute.
func (m *IdentityProvidersIamV2Api) DeleteIamV2IdentityProviderExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityProviderRequest
} {
	m.lockDeleteIamV2IdentityProviderExecute.Lock()
	defer m.lockDeleteIamV2IdentityProviderExecute.Unlock()

	return m.calls.DeleteIamV2IdentityProviderExecute
}

// GetIamV2IdentityProvider mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) GetIamV2IdentityProvider(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityProviderRequest {
	m.lockGetIamV2IdentityProvider.Lock()
	defer m.lockGetIamV2IdentityProvider.Unlock()

	if m.GetIamV2IdentityProviderFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.GetIamV2IdentityProviderFunc is nil but IdentityProvidersIamV2Api.GetIamV2IdentityProvider was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetIamV2IdentityProvider = append(m.calls.GetIamV2IdentityProvider, call)

	return m.GetIamV2IdentityProviderFunc(ctx, id)
}

// GetIamV2IdentityProviderCalled returns true if GetIamV2IdentityProvider was called at least once.
func (m *IdentityProvidersIamV2Api) GetIamV2IdentityProviderCalled() bool {
	m.lockGetIamV2IdentityProvider.Lock()
	defer m.lockGetIamV2IdentityProvider.Unlock()

	return len(m.calls.GetIamV2IdentityProvider) > 0
}

// GetIamV2IdentityProviderCalls returns the calls made to GetIamV2IdentityProvider.
func (m *IdentityProvidersIamV2Api) GetIamV2IdentityProviderCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetIamV2IdentityProvider.Lock()
	defer m.lockGetIamV2IdentityProvider.Unlock()

	return m.calls.GetIamV2IdentityProvider
}

// GetIamV2IdentityProviderExecute mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) GetIamV2IdentityProviderExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityProviderRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityProvider, *net_http.Response, error) {
	m.lockGetIamV2IdentityProviderExecute.Lock()
	defer m.lockGetIamV2IdentityProviderExecute.Unlock()

	if m.GetIamV2IdentityProviderExecuteFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.GetIamV2IdentityProviderExecuteFunc is nil but IdentityProvidersIamV2Api.GetIamV2IdentityProviderExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityProviderRequest
	}{
		R: r,
	}

	m.calls.GetIamV2IdentityProviderExecute = append(m.calls.GetIamV2IdentityProviderExecute, call)

	return m.GetIamV2IdentityProviderExecuteFunc(r)
}

// GetIamV2IdentityProviderExecuteCalled returns true if GetIamV2IdentityProviderExecute was called at least once.
func (m *IdentityProvidersIamV2Api) GetIamV2IdentityProviderExecuteCalled() bool {
	m.lockGetIamV2IdentityProviderExecute.Lock()
	defer m.lockGetIamV2IdentityProviderExecute.Unlock()

	return len(m.calls.GetIamV2IdentityProviderExecute) > 0
}

// GetIamV2IdentityProviderExecuteCalls returns the calls made to GetIamV2IdentityProviderExecute.
func (m *IdentityProvidersIamV2Api) GetIamV2IdentityProviderExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityProviderRequest
} {
	m.lockGetIamV2IdentityProviderExecute.Lock()
	defer m.lockGetIamV2IdentityProviderExecute.Unlock()

	return m.calls.GetIamV2IdentityProviderExecute
}

// ListIamV2IdentityProviders mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) ListIamV2IdentityProviders(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityProvidersRequest {
	m.lockListIamV2IdentityProviders.Lock()
	defer m.lockListIamV2IdentityProviders.Unlock()

	if m.ListIamV2IdentityProvidersFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.ListIamV2IdentityProvidersFunc is nil but IdentityProvidersIamV2Api.ListIamV2IdentityProviders was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListIamV2IdentityProviders = append(m.calls.ListIamV2IdentityProviders, call)

	return m.ListIamV2IdentityProvidersFunc(ctx)
}

// ListIamV2IdentityProvidersCalled returns true if ListIamV2IdentityProviders was called at least once.
func (m *IdentityProvidersIamV2Api) ListIamV2IdentityProvidersCalled() bool {
	m.lockListIamV2IdentityProviders.Lock()
	defer m.lockListIamV2IdentityProviders.Unlock()

	return len(m.calls.ListIamV2IdentityProviders) > 0
}

// ListIamV2IdentityProvidersCalls returns the calls made to ListIamV2IdentityProviders.
func (m *IdentityProvidersIamV2Api) ListIamV2IdentityProvidersCalls() []struct {
	Ctx context.Context
} {
	m.lockListIamV2IdentityProviders.Lock()
	defer m.lockListIamV2IdentityProviders.Unlock()

	return m.calls.ListIamV2IdentityProviders
}

// ListIamV2IdentityProvidersExecute mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) ListIamV2IdentityProvidersExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityProvidersRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityProviderList, *net_http.Response, error) {
	m.lockListIamV2IdentityProvidersExecute.Lock()
	defer m.lockListIamV2IdentityProvidersExecute.Unlock()

	if m.ListIamV2IdentityProvidersExecuteFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.ListIamV2IdentityProvidersExecuteFunc is nil but IdentityProvidersIamV2Api.ListIamV2IdentityProvidersExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityProvidersRequest
	}{
		R: r,
	}

	m.calls.ListIamV2IdentityProvidersExecute = append(m.calls.ListIamV2IdentityProvidersExecute, call)

	return m.ListIamV2IdentityProvidersExecuteFunc(r)
}

// ListIamV2IdentityProvidersExecuteCalled returns true if ListIamV2IdentityProvidersExecute was called at least once.
func (m *IdentityProvidersIamV2Api) ListIamV2IdentityProvidersExecuteCalled() bool {
	m.lockListIamV2IdentityProvidersExecute.Lock()
	defer m.lockListIamV2IdentityProvidersExecute.Unlock()

	return len(m.calls.ListIamV2IdentityProvidersExecute) > 0
}

// ListIamV2IdentityProvidersExecuteCalls returns the calls made to ListIamV2IdentityProvidersExecute.
func (m *IdentityProvidersIamV2Api) ListIamV2IdentityProvidersExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityProvidersRequest
} {
	m.lockListIamV2IdentityProvidersExecute.Lock()
	defer m.lockListIamV2IdentityProvidersExecute.Unlock()

	return m.calls.ListIamV2IdentityProvidersExecute
}

// UpdateIamV2IdentityProvider mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) UpdateIamV2IdentityProvider(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityProviderRequest {
	m.lockUpdateIamV2IdentityProvider.Lock()
	defer m.lockUpdateIamV2IdentityProvider.Unlock()

	if m.UpdateIamV2IdentityProviderFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.UpdateIamV2IdentityProviderFunc is nil but IdentityProvidersIamV2Api.UpdateIamV2IdentityProvider was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.UpdateIamV2IdentityProvider = append(m.calls.UpdateIamV2IdentityProvider, call)

	return m.UpdateIamV2IdentityProviderFunc(ctx, id)
}

// UpdateIamV2IdentityProviderCalled returns true if UpdateIamV2IdentityProvider was called at least once.
func (m *IdentityProvidersIamV2Api) UpdateIamV2IdentityProviderCalled() bool {
	m.lockUpdateIamV2IdentityProvider.Lock()
	defer m.lockUpdateIamV2IdentityProvider.Unlock()

	return len(m.calls.UpdateIamV2IdentityProvider) > 0
}

// UpdateIamV2IdentityProviderCalls returns the calls made to UpdateIamV2IdentityProvider.
func (m *IdentityProvidersIamV2Api) UpdateIamV2IdentityProviderCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockUpdateIamV2IdentityProvider.Lock()
	defer m.lockUpdateIamV2IdentityProvider.Unlock()

	return m.calls.UpdateIamV2IdentityProvider
}

// UpdateIamV2IdentityProviderExecute mocks base method by wrapping the associated func.
func (m *IdentityProvidersIamV2Api) UpdateIamV2IdentityProviderExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityProviderRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityProvider, *net_http.Response, error) {
	m.lockUpdateIamV2IdentityProviderExecute.Lock()
	defer m.lockUpdateIamV2IdentityProviderExecute.Unlock()

	if m.UpdateIamV2IdentityProviderExecuteFunc == nil {
		panic("mocker: IdentityProvidersIamV2Api.UpdateIamV2IdentityProviderExecuteFunc is nil but IdentityProvidersIamV2Api.UpdateIamV2IdentityProviderExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityProviderRequest
	}{
		R: r,
	}

	m.calls.UpdateIamV2IdentityProviderExecute = append(m.calls.UpdateIamV2IdentityProviderExecute, call)

	return m.UpdateIamV2IdentityProviderExecuteFunc(r)
}

// UpdateIamV2IdentityProviderExecuteCalled returns true if UpdateIamV2IdentityProviderExecute was called at least once.
func (m *IdentityProvidersIamV2Api) UpdateIamV2IdentityProviderExecuteCalled() bool {
	m.lockUpdateIamV2IdentityProviderExecute.Lock()
	defer m.lockUpdateIamV2IdentityProviderExecute.Unlock()

	return len(m.calls.UpdateIamV2IdentityProviderExecute) > 0
}

// UpdateIamV2IdentityProviderExecuteCalls returns the calls made to UpdateIamV2IdentityProviderExecute.
func (m *IdentityProvidersIamV2Api) UpdateIamV2IdentityProviderExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityProviderRequest
} {
	m.lockUpdateIamV2IdentityProviderExecute.Lock()
	defer m.lockUpdateIamV2IdentityProviderExecute.Unlock()

	return m.calls.UpdateIamV2IdentityProviderExecute
}

// Reset resets the calls made to the mocked methods.
func (m *IdentityProvidersIamV2Api) Reset() {
	m.lockCreateIamV2IdentityProvider.Lock()
	m.calls.CreateIamV2IdentityProvider = nil
	m.lockCreateIamV2IdentityProvider.Unlock()
	m.lockCreateIamV2IdentityProviderExecute.Lock()
	m.calls.CreateIamV2IdentityProviderExecute = nil
	m.lockCreateIamV2IdentityProviderExecute.Unlock()
	m.lockDeleteIamV2IdentityProvider.Lock()
	m.calls.DeleteIamV2IdentityProvider = nil
	m.lockDeleteIamV2IdentityProvider.Unlock()
	m.lockDeleteIamV2IdentityProviderExecute.Lock()
	m.calls.DeleteIamV2IdentityProviderExecute = nil
	m.lockDeleteIamV2IdentityProviderExecute.Unlock()
	m.lockGetIamV2IdentityProvider.Lock()
	m.calls.GetIamV2IdentityProvider = nil
	m.lockGetIamV2IdentityProvider.Unlock()
	m.lockGetIamV2IdentityProviderExecute.Lock()
	m.calls.GetIamV2IdentityProviderExecute = nil
	m.lockGetIamV2IdentityProviderExecute.Unlock()
	m.lockListIamV2IdentityProviders.Lock()
	m.calls.ListIamV2IdentityProviders = nil
	m.lockListIamV2IdentityProviders.Unlock()
	m.lockListIamV2IdentityProvidersExecute.Lock()
	m.calls.ListIamV2IdentityProvidersExecute = nil
	m.lockListIamV2IdentityProvidersExecute.Unlock()
	m.lockUpdateIamV2IdentityProvider.Lock()
	m.calls.UpdateIamV2IdentityProvider = nil
	m.lockUpdateIamV2IdentityProvider.Unlock()
	m.lockUpdateIamV2IdentityProviderExecute.Lock()
	m.calls.UpdateIamV2IdentityProviderExecute = nil
	m.lockUpdateIamV2IdentityProviderExecute.Unlock()
}
