// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_identity_pools_iam_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2 "github.com/confluentinc/ccloud-sdk-go-v2/identity-provider/v2"
)

// IdentityPoolsIamV2Api is a mock of IdentityPoolsIamV2Api interface
type IdentityPoolsIamV2Api struct {
	lockCreateIamV2IdentityPool sync.Mutex
	CreateIamV2IdentityPoolFunc func(ctx context.Context, providerId string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityPoolRequest

	lockCreateIamV2IdentityPoolExecute sync.Mutex
	CreateIamV2IdentityPoolExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityPoolRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityPool, *net_http.Response, error)

	lockDeleteIamV2IdentityPool sync.Mutex
	DeleteIamV2IdentityPoolFunc func(ctx context.Context, providerId, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityPoolRequest

	lockDeleteIamV2IdentityPoolExecute sync.Mutex
	DeleteIamV2IdentityPoolExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityPoolRequest) (*net_http.Response, error)

	lockGetIamV2IdentityPool sync.Mutex
	GetIamV2IdentityPoolFunc func(ctx context.Context, providerId, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityPoolRequest

	lockGetIamV2IdentityPoolExecute sync.Mutex
	GetIamV2IdentityPoolExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityPoolRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityPool, *net_http.Response, error)

	lockListIamV2IdentityPools sync.Mutex
	ListIamV2IdentityPoolsFunc func(ctx context.Context, providerId string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityPoolsRequest

	lockListIamV2IdentityPoolsExecute sync.Mutex
	ListIamV2IdentityPoolsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityPoolsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityPoolList, *net_http.Response, error)

	lockUpdateIamV2IdentityPool sync.Mutex
	UpdateIamV2IdentityPoolFunc func(ctx context.Context, providerId, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityPoolRequest

	lockUpdateIamV2IdentityPoolExecute sync.Mutex
	UpdateIamV2IdentityPoolExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityPoolRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityPool, *net_http.Response, error)

	calls struct {
		CreateIamV2IdentityPool []struct {
			Ctx        context.Context
			ProviderId string
		}
		CreateIamV2IdentityPoolExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityPoolRequest
		}
		DeleteIamV2IdentityPool []struct {
			Ctx        context.Context
			ProviderId string
			Id         string
		}
		DeleteIamV2IdentityPoolExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityPoolRequest
		}
		GetIamV2IdentityPool []struct {
			Ctx        context.Context
			ProviderId string
			Id         string
		}
		GetIamV2IdentityPoolExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityPoolRequest
		}
		ListIamV2IdentityPools []struct {
			Ctx        context.Context
			ProviderId string
		}
		ListIamV2IdentityPoolsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityPoolsRequest
		}
		UpdateIamV2IdentityPool []struct {
			Ctx        context.Context
			ProviderId string
			Id         string
		}
		UpdateIamV2IdentityPoolExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityPoolRequest
		}
	}
}

// CreateIamV2IdentityPool mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) CreateIamV2IdentityPool(ctx context.Context, providerId string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityPoolRequest {
	m.lockCreateIamV2IdentityPool.Lock()
	defer m.lockCreateIamV2IdentityPool.Unlock()

	if m.CreateIamV2IdentityPoolFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.CreateIamV2IdentityPoolFunc is nil but IdentityPoolsIamV2Api.CreateIamV2IdentityPool was called.")
	}

	call := struct {
		Ctx        context.Context
		ProviderId string
	}{
		Ctx:        ctx,
		ProviderId: providerId,
	}

	m.calls.CreateIamV2IdentityPool = append(m.calls.CreateIamV2IdentityPool, call)

	return m.CreateIamV2IdentityPoolFunc(ctx, providerId)
}

// CreateIamV2IdentityPoolCalled returns true if CreateIamV2IdentityPool was called at least once.
func (m *IdentityPoolsIamV2Api) CreateIamV2IdentityPoolCalled() bool {
	m.lockCreateIamV2IdentityPool.Lock()
	defer m.lockCreateIamV2IdentityPool.Unlock()

	return len(m.calls.CreateIamV2IdentityPool) > 0
}

// CreateIamV2IdentityPoolCalls returns the calls made to CreateIamV2IdentityPool.
func (m *IdentityPoolsIamV2Api) CreateIamV2IdentityPoolCalls() []struct {
	Ctx        context.Context
	ProviderId string
} {
	m.lockCreateIamV2IdentityPool.Lock()
	defer m.lockCreateIamV2IdentityPool.Unlock()

	return m.calls.CreateIamV2IdentityPool
}

// CreateIamV2IdentityPoolExecute mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) CreateIamV2IdentityPoolExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityPoolRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityPool, *net_http.Response, error) {
	m.lockCreateIamV2IdentityPoolExecute.Lock()
	defer m.lockCreateIamV2IdentityPoolExecute.Unlock()

	if m.CreateIamV2IdentityPoolExecuteFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.CreateIamV2IdentityPoolExecuteFunc is nil but IdentityPoolsIamV2Api.CreateIamV2IdentityPoolExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityPoolRequest
	}{
		R: r,
	}

	m.calls.CreateIamV2IdentityPoolExecute = append(m.calls.CreateIamV2IdentityPoolExecute, call)

	return m.CreateIamV2IdentityPoolExecuteFunc(r)
}

// CreateIamV2IdentityPoolExecuteCalled returns true if CreateIamV2IdentityPoolExecute was called at least once.
func (m *IdentityPoolsIamV2Api) CreateIamV2IdentityPoolExecuteCalled() bool {
	m.lockCreateIamV2IdentityPoolExecute.Lock()
	defer m.lockCreateIamV2IdentityPoolExecute.Unlock()

	return len(m.calls.CreateIamV2IdentityPoolExecute) > 0
}

// CreateIamV2IdentityPoolExecuteCalls returns the calls made to CreateIamV2IdentityPoolExecute.
func (m *IdentityPoolsIamV2Api) CreateIamV2IdentityPoolExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiCreateIamV2IdentityPoolRequest
} {
	m.lockCreateIamV2IdentityPoolExecute.Lock()
	defer m.lockCreateIamV2IdentityPoolExecute.Unlock()

	return m.calls.CreateIamV2IdentityPoolExecute
}

// DeleteIamV2IdentityPool mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) DeleteIamV2IdentityPool(ctx context.Context, providerId, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityPoolRequest {
	m.lockDeleteIamV2IdentityPool.Lock()
	defer m.lockDeleteIamV2IdentityPool.Unlock()

	if m.DeleteIamV2IdentityPoolFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.DeleteIamV2IdentityPoolFunc is nil but IdentityPoolsIamV2Api.DeleteIamV2IdentityPool was called.")
	}

	call := struct {
		Ctx        context.Context
		ProviderId string
		Id         string
	}{
		Ctx:        ctx,
		ProviderId: providerId,
		Id:         id,
	}

	m.calls.DeleteIamV2IdentityPool = append(m.calls.DeleteIamV2IdentityPool, call)

	return m.DeleteIamV2IdentityPoolFunc(ctx, providerId, id)
}

// DeleteIamV2IdentityPoolCalled returns true if DeleteIamV2IdentityPool was called at least once.
func (m *IdentityPoolsIamV2Api) DeleteIamV2IdentityPoolCalled() bool {
	m.lockDeleteIamV2IdentityPool.Lock()
	defer m.lockDeleteIamV2IdentityPool.Unlock()

	return len(m.calls.DeleteIamV2IdentityPool) > 0
}

// DeleteIamV2IdentityPoolCalls returns the calls made to DeleteIamV2IdentityPool.
func (m *IdentityPoolsIamV2Api) DeleteIamV2IdentityPoolCalls() []struct {
	Ctx        context.Context
	ProviderId string
	Id         string
} {
	m.lockDeleteIamV2IdentityPool.Lock()
	defer m.lockDeleteIamV2IdentityPool.Unlock()

	return m.calls.DeleteIamV2IdentityPool
}

// DeleteIamV2IdentityPoolExecute mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) DeleteIamV2IdentityPoolExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityPoolRequest) (*net_http.Response, error) {
	m.lockDeleteIamV2IdentityPoolExecute.Lock()
	defer m.lockDeleteIamV2IdentityPoolExecute.Unlock()

	if m.DeleteIamV2IdentityPoolExecuteFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.DeleteIamV2IdentityPoolExecuteFunc is nil but IdentityPoolsIamV2Api.DeleteIamV2IdentityPoolExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityPoolRequest
	}{
		R: r,
	}

	m.calls.DeleteIamV2IdentityPoolExecute = append(m.calls.DeleteIamV2IdentityPoolExecute, call)

	return m.DeleteIamV2IdentityPoolExecuteFunc(r)
}

// DeleteIamV2IdentityPoolExecuteCalled returns true if DeleteIamV2IdentityPoolExecute was called at least once.
func (m *IdentityPoolsIamV2Api) DeleteIamV2IdentityPoolExecuteCalled() bool {
	m.lockDeleteIamV2IdentityPoolExecute.Lock()
	defer m.lockDeleteIamV2IdentityPoolExecute.Unlock()

	return len(m.calls.DeleteIamV2IdentityPoolExecute) > 0
}

// DeleteIamV2IdentityPoolExecuteCalls returns the calls made to DeleteIamV2IdentityPoolExecute.
func (m *IdentityPoolsIamV2Api) DeleteIamV2IdentityPoolExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiDeleteIamV2IdentityPoolRequest
} {
	m.lockDeleteIamV2IdentityPoolExecute.Lock()
	defer m.lockDeleteIamV2IdentityPoolExecute.Unlock()

	return m.calls.DeleteIamV2IdentityPoolExecute
}

// GetIamV2IdentityPool mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) GetIamV2IdentityPool(ctx context.Context, providerId, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityPoolRequest {
	m.lockGetIamV2IdentityPool.Lock()
	defer m.lockGetIamV2IdentityPool.Unlock()

	if m.GetIamV2IdentityPoolFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.GetIamV2IdentityPoolFunc is nil but IdentityPoolsIamV2Api.GetIamV2IdentityPool was called.")
	}

	call := struct {
		Ctx        context.Context
		ProviderId string
		Id         string
	}{
		Ctx:        ctx,
		ProviderId: providerId,
		Id:         id,
	}

	m.calls.GetIamV2IdentityPool = append(m.calls.GetIamV2IdentityPool, call)

	return m.GetIamV2IdentityPoolFunc(ctx, providerId, id)
}

// GetIamV2IdentityPoolCalled returns true if GetIamV2IdentityPool was called at least once.
func (m *IdentityPoolsIamV2Api) GetIamV2IdentityPoolCalled() bool {
	m.lockGetIamV2IdentityPool.Lock()
	defer m.lockGetIamV2IdentityPool.Unlock()

	return len(m.calls.GetIamV2IdentityPool) > 0
}

// GetIamV2IdentityPoolCalls returns the calls made to GetIamV2IdentityPool.
func (m *IdentityPoolsIamV2Api) GetIamV2IdentityPoolCalls() []struct {
	Ctx        context.Context
	ProviderId string
	Id         string
} {
	m.lockGetIamV2IdentityPool.Lock()
	defer m.lockGetIamV2IdentityPool.Unlock()

	return m.calls.GetIamV2IdentityPool
}

// GetIamV2IdentityPoolExecute mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) GetIamV2IdentityPoolExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityPoolRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityPool, *net_http.Response, error) {
	m.lockGetIamV2IdentityPoolExecute.Lock()
	defer m.lockGetIamV2IdentityPoolExecute.Unlock()

	if m.GetIamV2IdentityPoolExecuteFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.GetIamV2IdentityPoolExecuteFunc is nil but IdentityPoolsIamV2Api.GetIamV2IdentityPoolExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityPoolRequest
	}{
		R: r,
	}

	m.calls.GetIamV2IdentityPoolExecute = append(m.calls.GetIamV2IdentityPoolExecute, call)

	return m.GetIamV2IdentityPoolExecuteFunc(r)
}

// GetIamV2IdentityPoolExecuteCalled returns true if GetIamV2IdentityPoolExecute was called at least once.
func (m *IdentityPoolsIamV2Api) GetIamV2IdentityPoolExecuteCalled() bool {
	m.lockGetIamV2IdentityPoolExecute.Lock()
	defer m.lockGetIamV2IdentityPoolExecute.Unlock()

	return len(m.calls.GetIamV2IdentityPoolExecute) > 0
}

// GetIamV2IdentityPoolExecuteCalls returns the calls made to GetIamV2IdentityPoolExecute.
func (m *IdentityPoolsIamV2Api) GetIamV2IdentityPoolExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiGetIamV2IdentityPoolRequest
} {
	m.lockGetIamV2IdentityPoolExecute.Lock()
	defer m.lockGetIamV2IdentityPoolExecute.Unlock()

	return m.calls.GetIamV2IdentityPoolExecute
}

// ListIamV2IdentityPools mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) ListIamV2IdentityPools(ctx context.Context, providerId string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityPoolsRequest {
	m.lockListIamV2IdentityPools.Lock()
	defer m.lockListIamV2IdentityPools.Unlock()

	if m.ListIamV2IdentityPoolsFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.ListIamV2IdentityPoolsFunc is nil but IdentityPoolsIamV2Api.ListIamV2IdentityPools was called.")
	}

	call := struct {
		Ctx        context.Context
		ProviderId string
	}{
		Ctx:        ctx,
		ProviderId: providerId,
	}

	m.calls.ListIamV2IdentityPools = append(m.calls.ListIamV2IdentityPools, call)

	return m.ListIamV2IdentityPoolsFunc(ctx, providerId)
}

// ListIamV2IdentityPoolsCalled returns true if ListIamV2IdentityPools was called at least once.
func (m *IdentityPoolsIamV2Api) ListIamV2IdentityPoolsCalled() bool {
	m.lockListIamV2IdentityPools.Lock()
	defer m.lockListIamV2IdentityPools.Unlock()

	return len(m.calls.ListIamV2IdentityPools) > 0
}

// ListIamV2IdentityPoolsCalls returns the calls made to ListIamV2IdentityPools.
func (m *IdentityPoolsIamV2Api) ListIamV2IdentityPoolsCalls() []struct {
	Ctx        context.Context
	ProviderId string
} {
	m.lockListIamV2IdentityPools.Lock()
	defer m.lockListIamV2IdentityPools.Unlock()

	return m.calls.ListIamV2IdentityPools
}

// ListIamV2IdentityPoolsExecute mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) ListIamV2IdentityPoolsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityPoolsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityPoolList, *net_http.Response, error) {
	m.lockListIamV2IdentityPoolsExecute.Lock()
	defer m.lockListIamV2IdentityPoolsExecute.Unlock()

	if m.ListIamV2IdentityPoolsExecuteFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.ListIamV2IdentityPoolsExecuteFunc is nil but IdentityPoolsIamV2Api.ListIamV2IdentityPoolsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityPoolsRequest
	}{
		R: r,
	}

	m.calls.ListIamV2IdentityPoolsExecute = append(m.calls.ListIamV2IdentityPoolsExecute, call)

	return m.ListIamV2IdentityPoolsExecuteFunc(r)
}

// ListIamV2IdentityPoolsExecuteCalled returns true if ListIamV2IdentityPoolsExecute was called at least once.
func (m *IdentityPoolsIamV2Api) ListIamV2IdentityPoolsExecuteCalled() bool {
	m.lockListIamV2IdentityPoolsExecute.Lock()
	defer m.lockListIamV2IdentityPoolsExecute.Unlock()

	return len(m.calls.ListIamV2IdentityPoolsExecute) > 0
}

// ListIamV2IdentityPoolsExecuteCalls returns the calls made to ListIamV2IdentityPoolsExecute.
func (m *IdentityPoolsIamV2Api) ListIamV2IdentityPoolsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiListIamV2IdentityPoolsRequest
} {
	m.lockListIamV2IdentityPoolsExecute.Lock()
	defer m.lockListIamV2IdentityPoolsExecute.Unlock()

	return m.calls.ListIamV2IdentityPoolsExecute
}

// UpdateIamV2IdentityPool mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) UpdateIamV2IdentityPool(ctx context.Context, providerId, id string) github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityPoolRequest {
	m.lockUpdateIamV2IdentityPool.Lock()
	defer m.lockUpdateIamV2IdentityPool.Unlock()

	if m.UpdateIamV2IdentityPoolFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.UpdateIamV2IdentityPoolFunc is nil but IdentityPoolsIamV2Api.UpdateIamV2IdentityPool was called.")
	}

	call := struct {
		Ctx        context.Context
		ProviderId string
		Id         string
	}{
		Ctx:        ctx,
		ProviderId: providerId,
		Id:         id,
	}

	m.calls.UpdateIamV2IdentityPool = append(m.calls.UpdateIamV2IdentityPool, call)

	return m.UpdateIamV2IdentityPoolFunc(ctx, providerId, id)
}

// UpdateIamV2IdentityPoolCalled returns true if UpdateIamV2IdentityPool was called at least once.
func (m *IdentityPoolsIamV2Api) UpdateIamV2IdentityPoolCalled() bool {
	m.lockUpdateIamV2IdentityPool.Lock()
	defer m.lockUpdateIamV2IdentityPool.Unlock()

	return len(m.calls.UpdateIamV2IdentityPool) > 0
}

// UpdateIamV2IdentityPoolCalls returns the calls made to UpdateIamV2IdentityPool.
func (m *IdentityPoolsIamV2Api) UpdateIamV2IdentityPoolCalls() []struct {
	Ctx        context.Context
	ProviderId string
	Id         string
} {
	m.lockUpdateIamV2IdentityPool.Lock()
	defer m.lockUpdateIamV2IdentityPool.Unlock()

	return m.calls.UpdateIamV2IdentityPool
}

// UpdateIamV2IdentityPoolExecute mocks base method by wrapping the associated func.
func (m *IdentityPoolsIamV2Api) UpdateIamV2IdentityPoolExecute(r github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityPoolRequest) (github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.IamV2IdentityPool, *net_http.Response, error) {
	m.lockUpdateIamV2IdentityPoolExecute.Lock()
	defer m.lockUpdateIamV2IdentityPoolExecute.Unlock()

	if m.UpdateIamV2IdentityPoolExecuteFunc == nil {
		panic("mocker: IdentityPoolsIamV2Api.UpdateIamV2IdentityPoolExecuteFunc is nil but IdentityPoolsIamV2Api.UpdateIamV2IdentityPoolExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityPoolRequest
	}{
		R: r,
	}

	m.calls.UpdateIamV2IdentityPoolExecute = append(m.calls.UpdateIamV2IdentityPoolExecute, call)

	return m.UpdateIamV2IdentityPoolExecuteFunc(r)
}

// UpdateIamV2IdentityPoolExecuteCalled returns true if UpdateIamV2IdentityPoolExecute was called at least once.
func (m *IdentityPoolsIamV2Api) UpdateIamV2IdentityPoolExecuteCalled() bool {
	m.lockUpdateIamV2IdentityPoolExecute.Lock()
	defer m.lockUpdateIamV2IdentityPoolExecute.Unlock()

	return len(m.calls.UpdateIamV2IdentityPoolExecute) > 0
}

// UpdateIamV2IdentityPoolExecuteCalls returns the calls made to UpdateIamV2IdentityPoolExecute.
func (m *IdentityPoolsIamV2Api) UpdateIamV2IdentityPoolExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_identity_provider_v2.ApiUpdateIamV2IdentityPoolRequest
} {
	m.lockUpdateIamV2IdentityPoolExecute.Lock()
	defer m.lockUpdateIamV2IdentityPoolExecute.Unlock()

	return m.calls.UpdateIamV2IdentityPoolExecute
}

// Reset resets the calls made to the mocked methods.
func (m *IdentityPoolsIamV2Api) Reset() {
	m.lockCreateIamV2IdentityPool.Lock()
	m.calls.CreateIamV2IdentityPool = nil
	m.lockCreateIamV2IdentityPool.Unlock()
	m.lockCreateIamV2IdentityPoolExecute.Lock()
	m.calls.CreateIamV2IdentityPoolExecute = nil
	m.lockCreateIamV2IdentityPoolExecute.Unlock()
	m.lockDeleteIamV2IdentityPool.Lock()
	m.calls.DeleteIamV2IdentityPool = nil
	m.lockDeleteIamV2IdentityPool.Unlock()
	m.lockDeleteIamV2IdentityPoolExecute.Lock()
	m.calls.DeleteIamV2IdentityPoolExecute = nil
	m.lockDeleteIamV2IdentityPoolExecute.Unlock()
	m.lockGetIamV2IdentityPool.Lock()
	m.calls.GetIamV2IdentityPool = nil
	m.lockGetIamV2IdentityPool.Unlock()
	m.lockGetIamV2IdentityPoolExecute.Lock()
	m.calls.GetIamV2IdentityPoolExecute = nil
	m.lockGetIamV2IdentityPoolExecute.Unlock()
	m.lockListIamV2IdentityPools.Lock()
	m.calls.ListIamV2IdentityPools = nil
	m.lockListIamV2IdentityPools.Unlock()
	m.lockListIamV2IdentityPoolsExecute.Lock()
	m.calls.ListIamV2IdentityPoolsExecute = nil
	m.lockListIamV2IdentityPoolsExecute.Unlock()
	m.lockUpdateIamV2IdentityPool.Lock()
	m.calls.UpdateIamV2IdentityPool = nil
	m.lockUpdateIamV2IdentityPool.Unlock()
	m.lockUpdateIamV2IdentityPoolExecute.Lock()
	m.calls.UpdateIamV2IdentityPoolExecute = nil
	m.lockUpdateIamV2IdentityPoolExecute.Unlock()
}
