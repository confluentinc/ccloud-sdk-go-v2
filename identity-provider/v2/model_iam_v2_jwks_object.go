// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
OAuth Identity Management API

OAuth Public API

API version: 0.0.1-alpha1
Contact: oauth-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// IamV2JwksObject `JWKS` contains the published keys for the given OpenIDProvider
type IamV2JwksObject struct {
	// Specifies the cryptographic algorithm family used with the key
	Kty string `json:"kty,omitempty"`
	// Specifies the key-id issued by the OpenIDProvider for the particular tenant
	Kid string `json:"kid,omitempty"`
	// Specifies the algorithm to be used to generate the public key
	Alg string `json:"alg,omitempty"`
	// Specifies the intended usage of the key
	Use *string `json:"use,omitempty"`
	// Specifies the modulus of the RSA public key. Represented as a Base64urlUInt-encoded value
	N *string `json:"n,omitempty"`
	// Specifies the exponent of the RSA public key.
	E *string `json:"e,omitempty"`
}

// NewIamV2JwksObject instantiates a new IamV2JwksObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamV2JwksObject(kty string, kid string, alg string) *IamV2JwksObject {
	this := IamV2JwksObject{}
	this.Kty = kty
	this.Kid = kid
	this.Alg = alg
	return &this
}

// NewIamV2JwksObjectWithDefaults instantiates a new IamV2JwksObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamV2JwksObjectWithDefaults() *IamV2JwksObject {
	this := IamV2JwksObject{}
	return &this
}

// GetKty returns the Kty field value
func (o *IamV2JwksObject) GetKty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kty
}

// GetKtyOk returns a tuple with the Kty field value
// and a boolean to check if the value has been set.
func (o *IamV2JwksObject) GetKtyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kty, true
}

// SetKty sets field value
func (o *IamV2JwksObject) SetKty(v string) {
	o.Kty = v
}

// GetKid returns the Kid field value
func (o *IamV2JwksObject) GetKid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kid
}

// GetKidOk returns a tuple with the Kid field value
// and a boolean to check if the value has been set.
func (o *IamV2JwksObject) GetKidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kid, true
}

// SetKid sets field value
func (o *IamV2JwksObject) SetKid(v string) {
	o.Kid = v
}

// GetAlg returns the Alg field value
func (o *IamV2JwksObject) GetAlg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alg
}

// GetAlgOk returns a tuple with the Alg field value
// and a boolean to check if the value has been set.
func (o *IamV2JwksObject) GetAlgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alg, true
}

// SetAlg sets field value
func (o *IamV2JwksObject) SetAlg(v string) {
	o.Alg = v
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *IamV2JwksObject) GetUse() string {
	if o == nil || o.Use == nil {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2JwksObject) GetUseOk() (*string, bool) {
	if o == nil || o.Use == nil {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *IamV2JwksObject) HasUse() bool {
	if o != nil && o.Use != nil {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *IamV2JwksObject) SetUse(v string) {
	o.Use = &v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *IamV2JwksObject) GetN() string {
	if o == nil || o.N == nil {
		var ret string
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2JwksObject) GetNOk() (*string, bool) {
	if o == nil || o.N == nil {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *IamV2JwksObject) HasN() bool {
	if o != nil && o.N != nil {
		return true
	}

	return false
}

// SetN gets a reference to the given string and assigns it to the N field.
func (o *IamV2JwksObject) SetN(v string) {
	o.N = &v
}

// GetE returns the E field value if set, zero value otherwise.
func (o *IamV2JwksObject) GetE() string {
	if o == nil || o.E == nil {
		var ret string
		return ret
	}
	return *o.E
}

// GetEOk returns a tuple with the E field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2JwksObject) GetEOk() (*string, bool) {
	if o == nil || o.E == nil {
		return nil, false
	}
	return o.E, true
}

// HasE returns a boolean if a field has been set.
func (o *IamV2JwksObject) HasE() bool {
	if o != nil && o.E != nil {
		return true
	}

	return false
}

// SetE gets a reference to the given string and assigns it to the E field.
func (o *IamV2JwksObject) SetE(v string) {
	o.E = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *IamV2JwksObject) Redact() {
	o.recurseRedact(&o.Kty)
	o.recurseRedact(&o.Kid)
	o.recurseRedact(&o.Alg)
	o.recurseRedact(o.Use)
	o.recurseRedact(o.N)
	o.recurseRedact(o.E)
}

func (o *IamV2JwksObject) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o IamV2JwksObject) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o IamV2JwksObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kty"] = o.Kty
	}
	if true {
		toSerialize["kid"] = o.Kid
	}
	if true {
		toSerialize["alg"] = o.Alg
	}
	if o.Use != nil {
		toSerialize["use"] = o.Use
	}
	if o.N != nil {
		toSerialize["n"] = o.N
	}
	if o.E != nil {
		toSerialize["e"] = o.E
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableIamV2JwksObject struct {
	value *IamV2JwksObject
	isSet bool
}

func (v NullableIamV2JwksObject) Get() *IamV2JwksObject {
	return v.value
}

func (v *NullableIamV2JwksObject) Set(val *IamV2JwksObject) {
	v.value = val
	v.isSet = true
}

func (v NullableIamV2JwksObject) IsSet() bool {
	return v.isSet
}

func (v *NullableIamV2JwksObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamV2JwksObject(val *IamV2JwksObject) *NullableIamV2JwksObject {
	return &NullableIamV2JwksObject{value: val, isSet: true}
}

func (v NullableIamV2JwksObject) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableIamV2JwksObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
