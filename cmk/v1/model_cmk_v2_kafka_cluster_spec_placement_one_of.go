/*
 * Cluster Management for Apache Kafka API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1-alpha1
 * Contact: orchestrator-team@confluent.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmk

import (
	"encoding/json"
	"fmt"
)

// CmkV2KafkaClusterSpecPlacementOneOf - struct for CmkV2KafkaClusterSpecPlacementOneOf
type CmkV2KafkaClusterSpecPlacementOneOf struct {
	CmkV2Location *CmkV2Location
}

// CmkV2LocationAsCmkV2KafkaClusterSpecPlacementOneOf is a convenience function that returns CmkV2Location wrapped in CmkV2KafkaClusterSpecPlacementOneOf
func CmkV2LocationAsCmkV2KafkaClusterSpecPlacementOneOf(v *CmkV2Location) CmkV2KafkaClusterSpecPlacementOneOf {
	return CmkV2KafkaClusterSpecPlacementOneOf{ CmkV2Location: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CmkV2KafkaClusterSpecPlacementOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'Location'
	if jsonDict["kind"] == "Location" {
		// try to unmarshal JSON data into CmkV2Location
		err = json.Unmarshal(data, &dst.CmkV2Location)
		if err == nil {
			return nil // data stored in dst.CmkV2Location, return on the first match
		} else {
			dst.CmkV2Location = nil
			return fmt.Errorf("Failed to unmarshal CmkV2KafkaClusterSpecPlacementOneOf as CmkV2Location: %s", err.Error())
		}
	}

	// check if the discriminator value is 'cmk.v2.Location'
	if jsonDict["kind"] == "cmk.v2.Location" {
		// try to unmarshal JSON data into CmkV2Location
		err = json.Unmarshal(data, &dst.CmkV2Location)
		if err == nil {
			return nil // data stored in dst.CmkV2Location, return on the first match
		} else {
			dst.CmkV2Location = nil
			return fmt.Errorf("Failed to unmarshal CmkV2KafkaClusterSpecPlacementOneOf as CmkV2Location: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CmkV2KafkaClusterSpecPlacementOneOf) MarshalJSON() ([]byte, error) {
	if src.CmkV2Location != nil {
		return json.Marshal(&src.CmkV2Location)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CmkV2KafkaClusterSpecPlacementOneOf) GetActualInstance() (interface{}) {
	if obj.CmkV2Location != nil {
		return obj.CmkV2Location
	}

	// all schemas are nil
	return nil
}

type NullableCmkV2KafkaClusterSpecPlacementOneOf struct {
	value *CmkV2KafkaClusterSpecPlacementOneOf
	isSet bool
}

func (v NullableCmkV2KafkaClusterSpecPlacementOneOf) Get() *CmkV2KafkaClusterSpecPlacementOneOf {
	return v.value
}

func (v *NullableCmkV2KafkaClusterSpecPlacementOneOf) Set(val *CmkV2KafkaClusterSpecPlacementOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCmkV2KafkaClusterSpecPlacementOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCmkV2KafkaClusterSpecPlacementOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmkV2KafkaClusterSpecPlacementOneOf(val *CmkV2KafkaClusterSpecPlacementOneOf) *NullableCmkV2KafkaClusterSpecPlacementOneOf {
	return &NullableCmkV2KafkaClusterSpecPlacementOneOf{value: val, isSet: true}
}

func (v NullableCmkV2KafkaClusterSpecPlacementOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCmkV2KafkaClusterSpecPlacementOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


