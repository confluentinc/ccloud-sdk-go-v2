/*
 * Cluster Management for Apache Kafka API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1-alpha1
 * Contact: orchestrator-team@confluent.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmk

import (
	"encoding/json"
)

// CmkV2KafkaClusterSpec The desired state of the Kafka Cluster
type CmkV2KafkaClusterSpec struct {
	// The name of the cluster.
	DisplayName *string `json:"display_name,omitempty"`
	// The availability zone configuration of the cluster.
	Availability *string `json:"availability,omitempty"`
	// The geographical location where to place the Kafka cluster.
	Placement *CmkV2KafkaClusterSpecPlacementOneOf `json:"placement,omitempty"`
	// The type of cluster.  Note: Clusters can only be upgraded from BASIC to STANDARD but cannot be downgraded from STANDARD to BASIC. 
	ClusterType *string `json:"cluster_type,omitempty"`
	// The bootstrap endpoint used by Kafka clients to connect to the cluster.
	KafkaBootstrapEndpoint *string `json:"kafka_bootstrap_endpoint,omitempty"`
	// The cluster HTTP request URL.
	HttpEndpoint *string `json:"http_endpoint,omitempty"`
	// The environment to which this belongs.
	Environment *ObjectReference `json:"environment,omitempty"`
}

// NewCmkV2KafkaClusterSpec instantiates a new CmkV2KafkaClusterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmkV2KafkaClusterSpec() *CmkV2KafkaClusterSpec {
	this := CmkV2KafkaClusterSpec{}
	var availability string = "SINGLE_ZONE"
	this.Availability = &availability
	var clusterType string = "BASIC"
	this.ClusterType = &clusterType
	return &this
}

// NewCmkV2KafkaClusterSpecWithDefaults instantiates a new CmkV2KafkaClusterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmkV2KafkaClusterSpecWithDefaults() *CmkV2KafkaClusterSpec {
	this := CmkV2KafkaClusterSpec{}
	var availability string = "SINGLE_ZONE"
	this.Availability = &availability
	var clusterType string = "BASIC"
	this.ClusterType = &clusterType
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CmkV2KafkaClusterSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaClusterSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CmkV2KafkaClusterSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CmkV2KafkaClusterSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *CmkV2KafkaClusterSpec) GetAvailability() string {
	if o == nil || o.Availability == nil {
		var ret string
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaClusterSpec) GetAvailabilityOk() (*string, bool) {
	if o == nil || o.Availability == nil {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *CmkV2KafkaClusterSpec) HasAvailability() bool {
	if o != nil && o.Availability != nil {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given string and assigns it to the Availability field.
func (o *CmkV2KafkaClusterSpec) SetAvailability(v string) {
	o.Availability = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *CmkV2KafkaClusterSpec) GetPlacement() CmkV2KafkaClusterSpecPlacementOneOf {
	if o == nil || o.Placement == nil {
		var ret CmkV2KafkaClusterSpecPlacementOneOf
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaClusterSpec) GetPlacementOk() (*CmkV2KafkaClusterSpecPlacementOneOf, bool) {
	if o == nil || o.Placement == nil {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *CmkV2KafkaClusterSpec) HasPlacement() bool {
	if o != nil && o.Placement != nil {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given CmkV2KafkaClusterSpecPlacementOneOf and assigns it to the Placement field.
func (o *CmkV2KafkaClusterSpec) SetPlacement(v CmkV2KafkaClusterSpecPlacementOneOf) {
	o.Placement = &v
}

// GetClusterType returns the ClusterType field value if set, zero value otherwise.
func (o *CmkV2KafkaClusterSpec) GetClusterType() string {
	if o == nil || o.ClusterType == nil {
		var ret string
		return ret
	}
	return *o.ClusterType
}

// GetClusterTypeOk returns a tuple with the ClusterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaClusterSpec) GetClusterTypeOk() (*string, bool) {
	if o == nil || o.ClusterType == nil {
		return nil, false
	}
	return o.ClusterType, true
}

// HasClusterType returns a boolean if a field has been set.
func (o *CmkV2KafkaClusterSpec) HasClusterType() bool {
	if o != nil && o.ClusterType != nil {
		return true
	}

	return false
}

// SetClusterType gets a reference to the given string and assigns it to the ClusterType field.
func (o *CmkV2KafkaClusterSpec) SetClusterType(v string) {
	o.ClusterType = &v
}

// GetKafkaBootstrapEndpoint returns the KafkaBootstrapEndpoint field value if set, zero value otherwise.
func (o *CmkV2KafkaClusterSpec) GetKafkaBootstrapEndpoint() string {
	if o == nil || o.KafkaBootstrapEndpoint == nil {
		var ret string
		return ret
	}
	return *o.KafkaBootstrapEndpoint
}

// GetKafkaBootstrapEndpointOk returns a tuple with the KafkaBootstrapEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaClusterSpec) GetKafkaBootstrapEndpointOk() (*string, bool) {
	if o == nil || o.KafkaBootstrapEndpoint == nil {
		return nil, false
	}
	return o.KafkaBootstrapEndpoint, true
}

// HasKafkaBootstrapEndpoint returns a boolean if a field has been set.
func (o *CmkV2KafkaClusterSpec) HasKafkaBootstrapEndpoint() bool {
	if o != nil && o.KafkaBootstrapEndpoint != nil {
		return true
	}

	return false
}

// SetKafkaBootstrapEndpoint gets a reference to the given string and assigns it to the KafkaBootstrapEndpoint field.
func (o *CmkV2KafkaClusterSpec) SetKafkaBootstrapEndpoint(v string) {
	o.KafkaBootstrapEndpoint = &v
}

// GetHttpEndpoint returns the HttpEndpoint field value if set, zero value otherwise.
func (o *CmkV2KafkaClusterSpec) GetHttpEndpoint() string {
	if o == nil || o.HttpEndpoint == nil {
		var ret string
		return ret
	}
	return *o.HttpEndpoint
}

// GetHttpEndpointOk returns a tuple with the HttpEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaClusterSpec) GetHttpEndpointOk() (*string, bool) {
	if o == nil || o.HttpEndpoint == nil {
		return nil, false
	}
	return o.HttpEndpoint, true
}

// HasHttpEndpoint returns a boolean if a field has been set.
func (o *CmkV2KafkaClusterSpec) HasHttpEndpoint() bool {
	if o != nil && o.HttpEndpoint != nil {
		return true
	}

	return false
}

// SetHttpEndpoint gets a reference to the given string and assigns it to the HttpEndpoint field.
func (o *CmkV2KafkaClusterSpec) SetHttpEndpoint(v string) {
	o.HttpEndpoint = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *CmkV2KafkaClusterSpec) GetEnvironment() ObjectReference {
	if o == nil || o.Environment == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaClusterSpec) GetEnvironmentOk() (*ObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *CmkV2KafkaClusterSpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectReference and assigns it to the Environment field.
func (o *CmkV2KafkaClusterSpec) SetEnvironment(v ObjectReference) {
	o.Environment = &v
}

func (o CmkV2KafkaClusterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Availability != nil {
		toSerialize["availability"] = o.Availability
	}
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	if o.ClusterType != nil {
		toSerialize["cluster_type"] = o.ClusterType
	}
	if o.KafkaBootstrapEndpoint != nil {
		toSerialize["kafka_bootstrap_endpoint"] = o.KafkaBootstrapEndpoint
	}
	if o.HttpEndpoint != nil {
		toSerialize["http_endpoint"] = o.HttpEndpoint
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	return json.Marshal(toSerialize)
}

type NullableCmkV2KafkaClusterSpec struct {
	value *CmkV2KafkaClusterSpec
	isSet bool
}

func (v NullableCmkV2KafkaClusterSpec) Get() *CmkV2KafkaClusterSpec {
	return v.value
}

func (v *NullableCmkV2KafkaClusterSpec) Set(val *CmkV2KafkaClusterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCmkV2KafkaClusterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCmkV2KafkaClusterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmkV2KafkaClusterSpec(val *CmkV2KafkaClusterSpec) *NullableCmkV2KafkaClusterSpec {
	return &NullableCmkV2KafkaClusterSpec{value: val, isSet: true}
}

func (v NullableCmkV2KafkaClusterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCmkV2KafkaClusterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


