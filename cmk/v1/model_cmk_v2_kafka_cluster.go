/*
 * Cluster Management for Apache Kafka API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1-alpha1
 * Contact: orchestrator-team@confluent.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cmk

import (
	"encoding/json"
)

// CmkV2KafkaCluster `KafkaCluster` objects represent Apache Kafka Clusters on Confluent Cloud.
type CmkV2KafkaCluster struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id *string `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	Spec *CmkV2KafkaClusterSpec `json:"spec,omitempty"`
	Status *CmkV2KafkaClusterStatus `json:"status,omitempty"`
}

// NewCmkV2KafkaCluster instantiates a new CmkV2KafkaCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmkV2KafkaCluster() *CmkV2KafkaCluster {
	this := CmkV2KafkaCluster{}
	return &this
}

// NewCmkV2KafkaClusterWithDefaults instantiates a new CmkV2KafkaCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmkV2KafkaClusterWithDefaults() *CmkV2KafkaCluster {
	this := CmkV2KafkaCluster{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *CmkV2KafkaCluster) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaCluster) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *CmkV2KafkaCluster) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *CmkV2KafkaCluster) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CmkV2KafkaCluster) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaCluster) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CmkV2KafkaCluster) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *CmkV2KafkaCluster) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CmkV2KafkaCluster) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaCluster) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CmkV2KafkaCluster) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CmkV2KafkaCluster) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CmkV2KafkaCluster) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaCluster) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CmkV2KafkaCluster) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *CmkV2KafkaCluster) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *CmkV2KafkaCluster) GetSpec() CmkV2KafkaClusterSpec {
	if o == nil || o.Spec == nil {
		var ret CmkV2KafkaClusterSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaCluster) GetSpecOk() (*CmkV2KafkaClusterSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *CmkV2KafkaCluster) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given CmkV2KafkaClusterSpec and assigns it to the Spec field.
func (o *CmkV2KafkaCluster) SetSpec(v CmkV2KafkaClusterSpec) {
	o.Spec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CmkV2KafkaCluster) GetStatus() CmkV2KafkaClusterStatus {
	if o == nil || o.Status == nil {
		var ret CmkV2KafkaClusterStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2KafkaCluster) GetStatusOk() (*CmkV2KafkaClusterStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CmkV2KafkaCluster) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CmkV2KafkaClusterStatus and assigns it to the Status field.
func (o *CmkV2KafkaCluster) SetStatus(v CmkV2KafkaClusterStatus) {
	o.Status = &v
}

func (o CmkV2KafkaCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCmkV2KafkaCluster struct {
	value *CmkV2KafkaCluster
	isSet bool
}

func (v NullableCmkV2KafkaCluster) Get() *CmkV2KafkaCluster {
	return v.value
}

func (v *NullableCmkV2KafkaCluster) Set(val *CmkV2KafkaCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCmkV2KafkaCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCmkV2KafkaCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmkV2KafkaCluster(val *CmkV2KafkaCluster) *NullableCmkV2KafkaCluster {
	return &NullableCmkV2KafkaCluster{value: val, isSet: true}
}

func (v NullableCmkV2KafkaCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCmkV2KafkaCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


