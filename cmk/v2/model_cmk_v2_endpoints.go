// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Cluster Management for Apache Kafka API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha1
Contact: cpk@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CmkV2Endpoints Given a gateway type, endpoints to connect to the Kafka cluster.
type CmkV2Endpoints struct {
	// The bootstrap endpoint used by Kafka clients to connect to the cluster.
	KafkaBootstrapEndpoint string `json:"kafka_bootstrap_endpoint,omitempty"`
	// The REST endpoint for the Kafka cluster.
	HttpEndpoint string `json:"http_endpoint,omitempty"`
	// The type of connection used for the endpoint.
	ConnectionType string `json:"connection_type,omitempty"`
}

// NewCmkV2Endpoints instantiates a new CmkV2Endpoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmkV2Endpoints(kafkaBootstrapEndpoint string, httpEndpoint string, connectionType string) *CmkV2Endpoints {
	this := CmkV2Endpoints{}
	this.KafkaBootstrapEndpoint = kafkaBootstrapEndpoint
	this.HttpEndpoint = httpEndpoint
	this.ConnectionType = connectionType
	return &this
}

// NewCmkV2EndpointsWithDefaults instantiates a new CmkV2Endpoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmkV2EndpointsWithDefaults() *CmkV2Endpoints {
	this := CmkV2Endpoints{}
	return &this
}

// GetKafkaBootstrapEndpoint returns the KafkaBootstrapEndpoint field value
func (o *CmkV2Endpoints) GetKafkaBootstrapEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KafkaBootstrapEndpoint
}

// GetKafkaBootstrapEndpointOk returns a tuple with the KafkaBootstrapEndpoint field value
// and a boolean to check if the value has been set.
func (o *CmkV2Endpoints) GetKafkaBootstrapEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KafkaBootstrapEndpoint, true
}

// SetKafkaBootstrapEndpoint sets field value
func (o *CmkV2Endpoints) SetKafkaBootstrapEndpoint(v string) {
	o.KafkaBootstrapEndpoint = v
}

// GetHttpEndpoint returns the HttpEndpoint field value
func (o *CmkV2Endpoints) GetHttpEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HttpEndpoint
}

// GetHttpEndpointOk returns a tuple with the HttpEndpoint field value
// and a boolean to check if the value has been set.
func (o *CmkV2Endpoints) GetHttpEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpEndpoint, true
}

// SetHttpEndpoint sets field value
func (o *CmkV2Endpoints) SetHttpEndpoint(v string) {
	o.HttpEndpoint = v
}

// GetConnectionType returns the ConnectionType field value
func (o *CmkV2Endpoints) GetConnectionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value
// and a boolean to check if the value has been set.
func (o *CmkV2Endpoints) GetConnectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionType, true
}

// SetConnectionType sets field value
func (o *CmkV2Endpoints) SetConnectionType(v string) {
	o.ConnectionType = v
}

// Redact resets all sensitive fields to their zero value.
func (o *CmkV2Endpoints) Redact() {
	o.recurseRedact(&o.KafkaBootstrapEndpoint)
	o.recurseRedact(&o.HttpEndpoint)
	o.recurseRedact(&o.ConnectionType)
}

func (o *CmkV2Endpoints) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CmkV2Endpoints) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CmkV2Endpoints) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kafka_bootstrap_endpoint"] = o.KafkaBootstrapEndpoint
	}
	if true {
		toSerialize["http_endpoint"] = o.HttpEndpoint
	}
	if true {
		toSerialize["connection_type"] = o.ConnectionType
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCmkV2Endpoints struct {
	value *CmkV2Endpoints
	isSet bool
}

func (v NullableCmkV2Endpoints) Get() *CmkV2Endpoints {
	return v.value
}

func (v *NullableCmkV2Endpoints) Set(val *CmkV2Endpoints) {
	v.value = val
	v.isSet = true
}

func (v NullableCmkV2Endpoints) IsSet() bool {
	return v.isSet
}

func (v *NullableCmkV2Endpoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmkV2Endpoints(val *CmkV2Endpoints) *NullableCmkV2Endpoints {
	return &NullableCmkV2Endpoints{value: val, isSet: true}
}

func (v NullableCmkV2Endpoints) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCmkV2Endpoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
