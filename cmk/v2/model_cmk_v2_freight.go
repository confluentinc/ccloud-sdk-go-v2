// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Cluster Management for Apache Kafka API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha1
Contact: cpk@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CmkV2Freight A freight cluster with its parameters.
type CmkV2Freight struct {
	// Freight cluster type.
	Kind string `json:"kind,omitempty"`
	// The maximum number of Elastic Confluent Kafka Units (eCKUs) that Kafka clusters should auto-scale to. Kafka clusters with `HIGH` availability must have at least two eCKUs.
	MaxEcku *int32 `json:"max_ecku,omitempty"`
	// The list of zones the cluster is in.  On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html)  (e.g. use1-az3)  On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones)  (e.g. us-central1-c).
	Zones *[]string `json:"zones,omitempty"`
}

// NewCmkV2Freight instantiates a new CmkV2Freight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCmkV2Freight(kind string) *CmkV2Freight {
	this := CmkV2Freight{}
	this.Kind = kind
	return &this
}

// NewCmkV2FreightWithDefaults instantiates a new CmkV2Freight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCmkV2FreightWithDefaults() *CmkV2Freight {
	this := CmkV2Freight{}
	return &this
}

// GetKind returns the Kind field value
func (o *CmkV2Freight) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CmkV2Freight) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CmkV2Freight) SetKind(v string) {
	o.Kind = v
}

// GetMaxEcku returns the MaxEcku field value if set, zero value otherwise.
func (o *CmkV2Freight) GetMaxEcku() int32 {
	if o == nil || o.MaxEcku == nil {
		var ret int32
		return ret
	}
	return *o.MaxEcku
}

// GetMaxEckuOk returns a tuple with the MaxEcku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2Freight) GetMaxEckuOk() (*int32, bool) {
	if o == nil || o.MaxEcku == nil {
		return nil, false
	}
	return o.MaxEcku, true
}

// HasMaxEcku returns a boolean if a field has been set.
func (o *CmkV2Freight) HasMaxEcku() bool {
	if o != nil && o.MaxEcku != nil {
		return true
	}

	return false
}

// SetMaxEcku gets a reference to the given int32 and assigns it to the MaxEcku field.
func (o *CmkV2Freight) SetMaxEcku(v int32) {
	o.MaxEcku = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *CmkV2Freight) GetZones() []string {
	if o == nil || o.Zones == nil {
		var ret []string
		return ret
	}
	return *o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CmkV2Freight) GetZonesOk() (*[]string, bool) {
	if o == nil || o.Zones == nil {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *CmkV2Freight) HasZones() bool {
	if o != nil && o.Zones != nil {
		return true
	}

	return false
}

// SetZones gets a reference to the given []string and assigns it to the Zones field.
func (o *CmkV2Freight) SetZones(v []string) {
	o.Zones = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CmkV2Freight) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(o.MaxEcku)
	o.recurseRedact(o.Zones)
}

func (o *CmkV2Freight) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CmkV2Freight) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CmkV2Freight) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if o.MaxEcku != nil {
		toSerialize["max_ecku"] = o.MaxEcku
	}
	if o.Zones != nil {
		toSerialize["zones"] = o.Zones
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCmkV2Freight struct {
	value *CmkV2Freight
	isSet bool
}

func (v NullableCmkV2Freight) Get() *CmkV2Freight {
	return v.value
}

func (v *NullableCmkV2Freight) Set(val *CmkV2Freight) {
	v.value = val
	v.isSet = true
}

func (v NullableCmkV2Freight) IsSet() bool {
	return v.isSet
}

func (v *NullableCmkV2Freight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCmkV2Freight(val *CmkV2Freight) *NullableCmkV2Freight {
	return &NullableCmkV2Freight{value: val, isSet: true}
}

func (v NullableCmkV2Freight) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCmkV2Freight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
