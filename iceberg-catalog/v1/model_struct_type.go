/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StructType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StructType{}

// StructType struct for StructType
type StructType struct {
	Type   string        `json:"type"`
	Fields []StructField `json:"fields"`
}

type _StructType StructType

// NewStructType instantiates a new StructType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructType(type_ string, fields []StructField) *StructType {
	this := StructType{}
	this.Type = type_
	this.Fields = fields
	return &this
}

// NewStructTypeWithDefaults instantiates a new StructType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructTypeWithDefaults() *StructType {
	this := StructType{}
	return &this
}

// GetType returns the Type field value
func (o *StructType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *StructType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *StructType) SetType(v string) {
	o.Type = v
}

// GetFields returns the Fields field value
func (o *StructType) GetFields() []StructField {
	if o == nil {
		var ret []StructField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *StructType) GetFieldsOk() ([]StructField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *StructType) SetFields(v []StructField) {
	o.Fields = v
}

func (o StructType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StructType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["fields"] = o.Fields
	return toSerialize, nil
}

func (o *StructType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStructType := _StructType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStructType)

	if err != nil {
		return err
	}

	*o = StructType(varStructType)

	return err
}

type NullableStructType struct {
	value *StructType
	isSet bool
}

func (v NullableStructType) Get() *StructType {
	return v.value
}

func (v *NullableStructType) Set(val *StructType) {
	v.value = val
	v.isSet = true
}

func (v NullableStructType) IsSet() bool {
	return v.isSet
}

func (v *NullableStructType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructType(val *StructType) *NullableStructType {
	return &NullableStructType{value: val, isSet: true}
}

func (v NullableStructType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
