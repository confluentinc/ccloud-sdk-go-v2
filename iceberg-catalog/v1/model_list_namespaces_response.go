/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ListNamespacesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListNamespacesResponse{}

// ListNamespacesResponse struct for ListNamespacesResponse
type ListNamespacesResponse struct {
	Namespaces []Namespace `json:"namespaces,omitempty"`
}

// NewListNamespacesResponse instantiates a new ListNamespacesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListNamespacesResponse() *ListNamespacesResponse {
	this := ListNamespacesResponse{}
	return &this
}

// NewListNamespacesResponseWithDefaults instantiates a new ListNamespacesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListNamespacesResponseWithDefaults() *ListNamespacesResponse {
	this := ListNamespacesResponse{}
	return &this
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *ListNamespacesResponse) GetNamespaces() []Namespace {
	if o == nil || IsNil(o.Namespaces) {
		var ret []Namespace
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNamespacesResponse) GetNamespacesOk() ([]Namespace, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *ListNamespacesResponse) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []Namespace and assigns it to the Namespaces field.
func (o *ListNamespacesResponse) SetNamespaces(v []Namespace) {
	o.Namespaces = v
}

func (o ListNamespacesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListNamespacesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	return toSerialize, nil
}

type NullableListNamespacesResponse struct {
	value *ListNamespacesResponse
	isSet bool
}

func (v NullableListNamespacesResponse) Get() *ListNamespacesResponse {
	return v.value
}

func (v *NullableListNamespacesResponse) Set(val *ListNamespacesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNamespacesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNamespacesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNamespacesResponse(val *ListNamespacesResponse) *NullableListNamespacesResponse {
	return &NullableListNamespacesResponse{value: val, isSet: true}
}

func (v NullableListNamespacesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNamespacesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
