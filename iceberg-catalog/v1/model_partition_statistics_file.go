/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PartitionStatisticsFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionStatisticsFile{}

// PartitionStatisticsFile struct for PartitionStatisticsFile
type PartitionStatisticsFile struct {
	SnapshotId      int64  `json:"snapshot-id"`
	StatisticsPath  string `json:"statistics-path"`
	FileSizeInBytes int64  `json:"file-size-in-bytes"`
}

type _PartitionStatisticsFile PartitionStatisticsFile

// NewPartitionStatisticsFile instantiates a new PartitionStatisticsFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionStatisticsFile(snapshotId int64, statisticsPath string, fileSizeInBytes int64) *PartitionStatisticsFile {
	this := PartitionStatisticsFile{}
	this.SnapshotId = snapshotId
	this.StatisticsPath = statisticsPath
	this.FileSizeInBytes = fileSizeInBytes
	return &this
}

// NewPartitionStatisticsFileWithDefaults instantiates a new PartitionStatisticsFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionStatisticsFileWithDefaults() *PartitionStatisticsFile {
	this := PartitionStatisticsFile{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value
func (o *PartitionStatisticsFile) GetSnapshotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *PartitionStatisticsFile) GetSnapshotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *PartitionStatisticsFile) SetSnapshotId(v int64) {
	o.SnapshotId = v
}

// GetStatisticsPath returns the StatisticsPath field value
func (o *PartitionStatisticsFile) GetStatisticsPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatisticsPath
}

// GetStatisticsPathOk returns a tuple with the StatisticsPath field value
// and a boolean to check if the value has been set.
func (o *PartitionStatisticsFile) GetStatisticsPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatisticsPath, true
}

// SetStatisticsPath sets field value
func (o *PartitionStatisticsFile) SetStatisticsPath(v string) {
	o.StatisticsPath = v
}

// GetFileSizeInBytes returns the FileSizeInBytes field value
func (o *PartitionStatisticsFile) GetFileSizeInBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileSizeInBytes
}

// GetFileSizeInBytesOk returns a tuple with the FileSizeInBytes field value
// and a boolean to check if the value has been set.
func (o *PartitionStatisticsFile) GetFileSizeInBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSizeInBytes, true
}

// SetFileSizeInBytes sets field value
func (o *PartitionStatisticsFile) SetFileSizeInBytes(v int64) {
	o.FileSizeInBytes = v
}

func (o PartitionStatisticsFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionStatisticsFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snapshot-id"] = o.SnapshotId
	toSerialize["statistics-path"] = o.StatisticsPath
	toSerialize["file-size-in-bytes"] = o.FileSizeInBytes
	return toSerialize, nil
}

func (o *PartitionStatisticsFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshot-id",
		"statistics-path",
		"file-size-in-bytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPartitionStatisticsFile := _PartitionStatisticsFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPartitionStatisticsFile)

	if err != nil {
		return err
	}

	*o = PartitionStatisticsFile(varPartitionStatisticsFile)

	return err
}

type NullablePartitionStatisticsFile struct {
	value *PartitionStatisticsFile
	isSet bool
}

func (v NullablePartitionStatisticsFile) Get() *PartitionStatisticsFile {
	return v.value
}

func (v *NullablePartitionStatisticsFile) Set(val *PartitionStatisticsFile) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionStatisticsFile) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionStatisticsFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionStatisticsFile(val *PartitionStatisticsFile) *NullablePartitionStatisticsFile {
	return &NullablePartitionStatisticsFile{value: val, isSet: true}
}

func (v NullablePartitionStatisticsFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionStatisticsFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
