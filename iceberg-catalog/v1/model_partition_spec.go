/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PartitionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionSpec{}

// PartitionSpec struct for PartitionSpec
type PartitionSpec struct {
	SpecId *int32           `json:"spec-id,omitempty"`
	Fields []PartitionField `json:"fields"`
}

type _PartitionSpec PartitionSpec

// NewPartitionSpec instantiates a new PartitionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionSpec(fields []PartitionField) *PartitionSpec {
	this := PartitionSpec{}
	this.Fields = fields
	return &this
}

// NewPartitionSpecWithDefaults instantiates a new PartitionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionSpecWithDefaults() *PartitionSpec {
	this := PartitionSpec{}
	return &this
}

// GetSpecId returns the SpecId field value if set, zero value otherwise.
func (o *PartitionSpec) GetSpecId() int32 {
	if o == nil || IsNil(o.SpecId) {
		var ret int32
		return ret
	}
	return *o.SpecId
}

// GetSpecIdOk returns a tuple with the SpecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionSpec) GetSpecIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SpecId) {
		return nil, false
	}
	return o.SpecId, true
}

// HasSpecId returns a boolean if a field has been set.
func (o *PartitionSpec) HasSpecId() bool {
	if o != nil && !IsNil(o.SpecId) {
		return true
	}

	return false
}

// SetSpecId gets a reference to the given int32 and assigns it to the SpecId field.
func (o *PartitionSpec) SetSpecId(v int32) {
	o.SpecId = &v
}

// GetFields returns the Fields field value
func (o *PartitionSpec) GetFields() []PartitionField {
	if o == nil {
		var ret []PartitionField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *PartitionSpec) GetFieldsOk() ([]PartitionField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *PartitionSpec) SetFields(v []PartitionField) {
	o.Fields = v
}

func (o PartitionSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpecId) {
		toSerialize["spec-id"] = o.SpecId
	}
	toSerialize["fields"] = o.Fields
	return toSerialize, nil
}

func (o *PartitionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPartitionSpec := _PartitionSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varPartitionSpec)

	if err != nil {
		return err
	}

	*o = PartitionSpec(varPartitionSpec)

	return err
}

type NullablePartitionSpec struct {
	value *PartitionSpec
	isSet bool
}

func (v NullablePartitionSpec) Get() *PartitionSpec {
	return v.value
}

func (v *NullablePartitionSpec) Set(val *PartitionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionSpec(val *PartitionSpec) *NullablePartitionSpec {
	return &NullablePartitionSpec{value: val, isSet: true}
}

func (v NullablePartitionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
