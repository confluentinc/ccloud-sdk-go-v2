/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SnapshotLogInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotLogInner{}

// SnapshotLogInner struct for SnapshotLogInner
type SnapshotLogInner struct {
	SnapshotId  int64 `json:"snapshot-id"`
	TimestampMs int64 `json:"timestamp-ms"`
}

type _SnapshotLogInner SnapshotLogInner

// NewSnapshotLogInner instantiates a new SnapshotLogInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotLogInner(snapshotId int64, timestampMs int64) *SnapshotLogInner {
	this := SnapshotLogInner{}
	this.SnapshotId = snapshotId
	this.TimestampMs = timestampMs
	return &this
}

// NewSnapshotLogInnerWithDefaults instantiates a new SnapshotLogInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotLogInnerWithDefaults() *SnapshotLogInner {
	this := SnapshotLogInner{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value
func (o *SnapshotLogInner) GetSnapshotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *SnapshotLogInner) GetSnapshotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *SnapshotLogInner) SetSnapshotId(v int64) {
	o.SnapshotId = v
}

// GetTimestampMs returns the TimestampMs field value
func (o *SnapshotLogInner) GetTimestampMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TimestampMs
}

// GetTimestampMsOk returns a tuple with the TimestampMs field value
// and a boolean to check if the value has been set.
func (o *SnapshotLogInner) GetTimestampMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimestampMs, true
}

// SetTimestampMs sets field value
func (o *SnapshotLogInner) SetTimestampMs(v int64) {
	o.TimestampMs = v
}

func (o SnapshotLogInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotLogInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snapshot-id"] = o.SnapshotId
	toSerialize["timestamp-ms"] = o.TimestampMs
	return toSerialize, nil
}

func (o *SnapshotLogInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshot-id",
		"timestamp-ms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotLogInner := _SnapshotLogInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotLogInner)

	if err != nil {
		return err
	}

	*o = SnapshotLogInner(varSnapshotLogInner)

	return err
}

type NullableSnapshotLogInner struct {
	value *SnapshotLogInner
	isSet bool
}

func (v NullableSnapshotLogInner) Get() *SnapshotLogInner {
	return v.value
}

func (v *NullableSnapshotLogInner) Set(val *SnapshotLogInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotLogInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotLogInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotLogInner(val *SnapshotLogInner) *NullableSnapshotLogInner {
	return &NullableSnapshotLogInner{value: val, isSet: true}
}

func (v NullableSnapshotLogInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotLogInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
