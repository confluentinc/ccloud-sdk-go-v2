/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// NullOrder the model 'NullOrder'
type NullOrder string

// List of NullOrder
const (
	FIRST NullOrder = "nulls-first"
	LAST  NullOrder = "nulls-last"
)

// All allowed values of NullOrder enum
var AllowedNullOrderEnumValues = []NullOrder{
	"nulls-first",
	"nulls-last",
}

func (v *NullOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NullOrder(value)
	for _, existing := range AllowedNullOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NullOrder", value)
}

// NewNullOrderFromValue returns a pointer to a valid NullOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNullOrderFromValue(v string) (*NullOrder, error) {
	ev := NullOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NullOrder: valid values are %v", v, AllowedNullOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NullOrder) IsValid() bool {
	for _, existing := range AllowedNullOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NullOrder value
func (v NullOrder) Ptr() *NullOrder {
	return &v
}

type NullableNullOrder struct {
	value *NullOrder
	isSet bool
}

func (v NullableNullOrder) Get() *NullOrder {
	return v.value
}

func (v *NullableNullOrder) Set(val *NullOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableNullOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableNullOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullOrder(val *NullOrder) *NullableNullOrder {
	return &NullableNullOrder{value: val, isSet: true}
}

func (v NullableNullOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
