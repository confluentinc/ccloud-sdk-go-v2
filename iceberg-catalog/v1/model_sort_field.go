/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SortField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SortField{}

// SortField struct for SortField
type SortField struct {
	SourceId  int32         `json:"source-id"`
	Transform string        `json:"transform"`
	Direction SortDirection `json:"direction"`
	NullOrder NullOrder     `json:"null-order"`
}

type _SortField SortField

// NewSortField instantiates a new SortField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSortField(sourceId int32, transform string, direction SortDirection, nullOrder NullOrder) *SortField {
	this := SortField{}
	this.SourceId = sourceId
	this.Transform = transform
	this.Direction = direction
	this.NullOrder = nullOrder
	return &this
}

// NewSortFieldWithDefaults instantiates a new SortField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortFieldWithDefaults() *SortField {
	this := SortField{}
	return &this
}

// GetSourceId returns the SourceId field value
func (o *SortField) GetSourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *SortField) GetSourceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *SortField) SetSourceId(v int32) {
	o.SourceId = v
}

// GetTransform returns the Transform field value
func (o *SortField) GetTransform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Transform
}

// GetTransformOk returns a tuple with the Transform field value
// and a boolean to check if the value has been set.
func (o *SortField) GetTransformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transform, true
}

// SetTransform sets field value
func (o *SortField) SetTransform(v string) {
	o.Transform = v
}

// GetDirection returns the Direction field value
func (o *SortField) GetDirection() SortDirection {
	if o == nil {
		var ret SortDirection
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *SortField) GetDirectionOk() (*SortDirection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *SortField) SetDirection(v SortDirection) {
	o.Direction = v
}

// GetNullOrder returns the NullOrder field value
func (o *SortField) GetNullOrder() NullOrder {
	if o == nil {
		var ret NullOrder
		return ret
	}

	return o.NullOrder
}

// GetNullOrderOk returns a tuple with the NullOrder field value
// and a boolean to check if the value has been set.
func (o *SortField) GetNullOrderOk() (*NullOrder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NullOrder, true
}

// SetNullOrder sets field value
func (o *SortField) SetNullOrder(v NullOrder) {
	o.NullOrder = v
}

func (o SortField) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SortField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source-id"] = o.SourceId
	toSerialize["transform"] = o.Transform
	toSerialize["direction"] = o.Direction
	toSerialize["null-order"] = o.NullOrder
	return toSerialize, nil
}

func (o *SortField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source-id",
		"transform",
		"direction",
		"null-order",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSortField := _SortField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSortField)

	if err != nil {
		return err
	}

	*o = SortField(varSortField)

	return err
}

type NullableSortField struct {
	value *SortField
	isSet bool
}

func (v NullableSortField) Get() *SortField {
	return v.value
}

func (v *NullableSortField) Set(val *SortField) {
	v.value = val
	v.isSet = true
}

func (v NullableSortField) IsSet() bool {
	return v.isSet
}

func (v *NullableSortField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortField(val *SortField) *NullableSortField {
	return &NullableSortField{value: val, isSet: true}
}

func (v NullableSortField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
