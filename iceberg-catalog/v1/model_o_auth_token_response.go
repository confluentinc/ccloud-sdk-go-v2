/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OAuthTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthTokenResponse{}

// OAuthTokenResponse struct for OAuthTokenResponse
type OAuthTokenResponse struct {
	// The access token, for client credentials or token exchange
	AccessToken string `json:"access_token"`
	// Access token type for client credentials or token exchange  See https://datatracker.ietf.org/doc/html/rfc6749#section-7.1
	TokenType string `json:"token_type"`
	// Lifetime of the access token in seconds for client credentials or token exchange
	ExpiresIn       *int32     `json:"expires_in,omitempty"`
	IssuedTokenType *TokenType `json:"issued_token_type,omitempty"`
	// Refresh token for client credentials or token exchange
	RefreshToken *string `json:"refresh_token,omitempty"`
	// Authorization scope for client credentials or token exchange
	Scope *string `json:"scope,omitempty"`
}

type _OAuthTokenResponse OAuthTokenResponse

// NewOAuthTokenResponse instantiates a new OAuthTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthTokenResponse(accessToken string, tokenType string) *OAuthTokenResponse {
	this := OAuthTokenResponse{}
	this.AccessToken = accessToken
	this.TokenType = tokenType
	return &this
}

// NewOAuthTokenResponseWithDefaults instantiates a new OAuthTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthTokenResponseWithDefaults() *OAuthTokenResponse {
	this := OAuthTokenResponse{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *OAuthTokenResponse) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *OAuthTokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *OAuthTokenResponse) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetTokenType returns the TokenType field value
func (o *OAuthTokenResponse) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *OAuthTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *OAuthTokenResponse) SetTokenType(v string) {
	o.TokenType = v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *OAuthTokenResponse) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthTokenResponse) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *OAuthTokenResponse) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *OAuthTokenResponse) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

// GetIssuedTokenType returns the IssuedTokenType field value if set, zero value otherwise.
func (o *OAuthTokenResponse) GetIssuedTokenType() TokenType {
	if o == nil || IsNil(o.IssuedTokenType) {
		var ret TokenType
		return ret
	}
	return *o.IssuedTokenType
}

// GetIssuedTokenTypeOk returns a tuple with the IssuedTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthTokenResponse) GetIssuedTokenTypeOk() (*TokenType, bool) {
	if o == nil || IsNil(o.IssuedTokenType) {
		return nil, false
	}
	return o.IssuedTokenType, true
}

// HasIssuedTokenType returns a boolean if a field has been set.
func (o *OAuthTokenResponse) HasIssuedTokenType() bool {
	if o != nil && !IsNil(o.IssuedTokenType) {
		return true
	}

	return false
}

// SetIssuedTokenType gets a reference to the given TokenType and assigns it to the IssuedTokenType field.
func (o *OAuthTokenResponse) SetIssuedTokenType(v TokenType) {
	o.IssuedTokenType = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *OAuthTokenResponse) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthTokenResponse) GetRefreshTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *OAuthTokenResponse) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *OAuthTokenResponse) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *OAuthTokenResponse) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthTokenResponse) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *OAuthTokenResponse) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *OAuthTokenResponse) SetScope(v string) {
	o.Scope = &v
}

func (o OAuthTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	toSerialize["token_type"] = o.TokenType
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !IsNil(o.IssuedTokenType) {
		toSerialize["issued_token_type"] = o.IssuedTokenType
	}
	if !IsNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

func (o *OAuthTokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"token_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOAuthTokenResponse := _OAuthTokenResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOAuthTokenResponse)

	if err != nil {
		return err
	}

	*o = OAuthTokenResponse(varOAuthTokenResponse)

	return err
}

type NullableOAuthTokenResponse struct {
	value *OAuthTokenResponse
	isSet bool
}

func (v NullableOAuthTokenResponse) Get() *OAuthTokenResponse {
	return v.value
}

func (v *NullableOAuthTokenResponse) Set(val *OAuthTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthTokenResponse(val *OAuthTokenResponse) *NullableOAuthTokenResponse {
	return &NullableOAuthTokenResponse{value: val, isSet: true}
}

func (v NullableOAuthTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
