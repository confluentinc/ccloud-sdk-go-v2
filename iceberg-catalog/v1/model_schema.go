/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schema{}

// Schema struct for Schema
type Schema struct {
	Type               string        `json:"type"`
	Fields             []StructField `json:"fields"`
	SchemaId           *int32        `json:"schema-id,omitempty"`
	IdentifierFieldIds []int32       `json:"identifier-field-ids,omitempty"`
}

type _Schema Schema

// NewSchema instantiates a new Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema(type_ string, fields []StructField) *Schema {
	this := Schema{}
	this.Type = type_
	this.Fields = fields
	return &this
}

// NewSchemaWithDefaults instantiates a new Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithDefaults() *Schema {
	this := Schema{}
	return &this
}

// GetType returns the Type field value
func (o *Schema) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Schema) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Schema) SetType(v string) {
	o.Type = v
}

// GetFields returns the Fields field value
func (o *Schema) GetFields() []StructField {
	if o == nil {
		var ret []StructField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *Schema) GetFieldsOk() ([]StructField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *Schema) SetFields(v []StructField) {
	o.Fields = v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *Schema) GetSchemaId() int32 {
	if o == nil || IsNil(o.SchemaId) {
		var ret int32
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetSchemaIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SchemaId) {
		return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *Schema) HasSchemaId() bool {
	if o != nil && !IsNil(o.SchemaId) {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given int32 and assigns it to the SchemaId field.
func (o *Schema) SetSchemaId(v int32) {
	o.SchemaId = &v
}

// GetIdentifierFieldIds returns the IdentifierFieldIds field value if set, zero value otherwise.
func (o *Schema) GetIdentifierFieldIds() []int32 {
	if o == nil || IsNil(o.IdentifierFieldIds) {
		var ret []int32
		return ret
	}
	return o.IdentifierFieldIds
}

// GetIdentifierFieldIdsOk returns a tuple with the IdentifierFieldIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetIdentifierFieldIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.IdentifierFieldIds) {
		return nil, false
	}
	return o.IdentifierFieldIds, true
}

// HasIdentifierFieldIds returns a boolean if a field has been set.
func (o *Schema) HasIdentifierFieldIds() bool {
	if o != nil && !IsNil(o.IdentifierFieldIds) {
		return true
	}

	return false
}

// SetIdentifierFieldIds gets a reference to the given []int32 and assigns it to the IdentifierFieldIds field.
func (o *Schema) SetIdentifierFieldIds(v []int32) {
	o.IdentifierFieldIds = v
}

func (o Schema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["fields"] = o.Fields
	if !IsNil(o.SchemaId) {
		toSerialize["schema-id"] = o.SchemaId
	}
	if !IsNil(o.IdentifierFieldIds) {
		toSerialize["identifier-field-ids"] = o.IdentifierFieldIds
	}
	return toSerialize, nil
}

func (o *Schema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchema := _Schema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSchema)

	if err != nil {
		return err
	}

	*o = Schema(varSchema)

	return err
}

type NullableSchema struct {
	value *Schema
	isSet bool
}

func (v NullableSchema) Get() *Schema {
	return v.value
}

func (v *NullableSchema) Set(val *Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema(val *Schema) *NullableSchema {
	return &NullableSchema{value: val, isSet: true}
}

func (v NullableSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
