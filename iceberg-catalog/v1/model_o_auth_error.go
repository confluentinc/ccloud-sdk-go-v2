/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the OAuthError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthError{}

// OAuthError struct for OAuthError
type OAuthError struct {
	Error            string  `json:"error"`
	ErrorDescription *string `json:"error_description,omitempty"`
	ErrorUri         *string `json:"error_uri,omitempty"`
}

type _OAuthError OAuthError

// NewOAuthError instantiates a new OAuthError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthError(error_ string) *OAuthError {
	this := OAuthError{}
	this.Error = error_
	return &this
}

// NewOAuthErrorWithDefaults instantiates a new OAuthError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthErrorWithDefaults() *OAuthError {
	this := OAuthError{}
	return &this
}

// GetError returns the Error field value
func (o *OAuthError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *OAuthError) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *OAuthError) SetError(v string) {
	o.Error = v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *OAuthError) GetErrorDescription() string {
	if o == nil || IsNil(o.ErrorDescription) {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthError) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDescription) {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *OAuthError) HasErrorDescription() bool {
	if o != nil && !IsNil(o.ErrorDescription) {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *OAuthError) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

// GetErrorUri returns the ErrorUri field value if set, zero value otherwise.
func (o *OAuthError) GetErrorUri() string {
	if o == nil || IsNil(o.ErrorUri) {
		var ret string
		return ret
	}
	return *o.ErrorUri
}

// GetErrorUriOk returns a tuple with the ErrorUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthError) GetErrorUriOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorUri) {
		return nil, false
	}
	return o.ErrorUri, true
}

// HasErrorUri returns a boolean if a field has been set.
func (o *OAuthError) HasErrorUri() bool {
	if o != nil && !IsNil(o.ErrorUri) {
		return true
	}

	return false
}

// SetErrorUri gets a reference to the given string and assigns it to the ErrorUri field.
func (o *OAuthError) SetErrorUri(v string) {
	o.ErrorUri = &v
}

func (o OAuthError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	if !IsNil(o.ErrorDescription) {
		toSerialize["error_description"] = o.ErrorDescription
	}
	if !IsNil(o.ErrorUri) {
		toSerialize["error_uri"] = o.ErrorUri
	}
	return toSerialize, nil
}

func (o *OAuthError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOAuthError := _OAuthError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varOAuthError)

	if err != nil {
		return err
	}

	*o = OAuthError(varOAuthError)

	return err
}

type NullableOAuthError struct {
	value *OAuthError
	isSet bool
}

func (v NullableOAuthError) Get() *OAuthError {
	return v.value
}

func (v *NullableOAuthError) Set(val *OAuthError) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthError) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthError(val *OAuthError) *NullableOAuthError {
	return &NullableOAuthError{value: val, isSet: true}
}

func (v NullableOAuthError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
