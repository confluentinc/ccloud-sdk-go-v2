/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StatisticsFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatisticsFile{}

// StatisticsFile struct for StatisticsFile
type StatisticsFile struct {
	SnapshotId            int64          `json:"snapshot-id"`
	StatisticsPath        string         `json:"statistics-path"`
	FileSizeInBytes       int64          `json:"file-size-in-bytes"`
	FileFooterSizeInBytes int64          `json:"file-footer-size-in-bytes"`
	BlobMetadata          []BlobMetadata `json:"blob-metadata"`
}

type _StatisticsFile StatisticsFile

// NewStatisticsFile instantiates a new StatisticsFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatisticsFile(snapshotId int64, statisticsPath string, fileSizeInBytes int64, fileFooterSizeInBytes int64, blobMetadata []BlobMetadata) *StatisticsFile {
	this := StatisticsFile{}
	this.SnapshotId = snapshotId
	this.StatisticsPath = statisticsPath
	this.FileSizeInBytes = fileSizeInBytes
	this.FileFooterSizeInBytes = fileFooterSizeInBytes
	this.BlobMetadata = blobMetadata
	return &this
}

// NewStatisticsFileWithDefaults instantiates a new StatisticsFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticsFileWithDefaults() *StatisticsFile {
	this := StatisticsFile{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value
func (o *StatisticsFile) GetSnapshotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *StatisticsFile) GetSnapshotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *StatisticsFile) SetSnapshotId(v int64) {
	o.SnapshotId = v
}

// GetStatisticsPath returns the StatisticsPath field value
func (o *StatisticsFile) GetStatisticsPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatisticsPath
}

// GetStatisticsPathOk returns a tuple with the StatisticsPath field value
// and a boolean to check if the value has been set.
func (o *StatisticsFile) GetStatisticsPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatisticsPath, true
}

// SetStatisticsPath sets field value
func (o *StatisticsFile) SetStatisticsPath(v string) {
	o.StatisticsPath = v
}

// GetFileSizeInBytes returns the FileSizeInBytes field value
func (o *StatisticsFile) GetFileSizeInBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileSizeInBytes
}

// GetFileSizeInBytesOk returns a tuple with the FileSizeInBytes field value
// and a boolean to check if the value has been set.
func (o *StatisticsFile) GetFileSizeInBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSizeInBytes, true
}

// SetFileSizeInBytes sets field value
func (o *StatisticsFile) SetFileSizeInBytes(v int64) {
	o.FileSizeInBytes = v
}

// GetFileFooterSizeInBytes returns the FileFooterSizeInBytes field value
func (o *StatisticsFile) GetFileFooterSizeInBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileFooterSizeInBytes
}

// GetFileFooterSizeInBytesOk returns a tuple with the FileFooterSizeInBytes field value
// and a boolean to check if the value has been set.
func (o *StatisticsFile) GetFileFooterSizeInBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileFooterSizeInBytes, true
}

// SetFileFooterSizeInBytes sets field value
func (o *StatisticsFile) SetFileFooterSizeInBytes(v int64) {
	o.FileFooterSizeInBytes = v
}

// GetBlobMetadata returns the BlobMetadata field value
func (o *StatisticsFile) GetBlobMetadata() []BlobMetadata {
	if o == nil {
		var ret []BlobMetadata
		return ret
	}

	return o.BlobMetadata
}

// GetBlobMetadataOk returns a tuple with the BlobMetadata field value
// and a boolean to check if the value has been set.
func (o *StatisticsFile) GetBlobMetadataOk() ([]BlobMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlobMetadata, true
}

// SetBlobMetadata sets field value
func (o *StatisticsFile) SetBlobMetadata(v []BlobMetadata) {
	o.BlobMetadata = v
}

func (o StatisticsFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatisticsFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snapshot-id"] = o.SnapshotId
	toSerialize["statistics-path"] = o.StatisticsPath
	toSerialize["file-size-in-bytes"] = o.FileSizeInBytes
	toSerialize["file-footer-size-in-bytes"] = o.FileFooterSizeInBytes
	toSerialize["blob-metadata"] = o.BlobMetadata
	return toSerialize, nil
}

func (o *StatisticsFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshot-id",
		"statistics-path",
		"file-size-in-bytes",
		"file-footer-size-in-bytes",
		"blob-metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatisticsFile := _StatisticsFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varStatisticsFile)

	if err != nil {
		return err
	}

	*o = StatisticsFile(varStatisticsFile)

	return err
}

type NullableStatisticsFile struct {
	value *StatisticsFile
	isSet bool
}

func (v NullableStatisticsFile) Get() *StatisticsFile {
	return v.value
}

func (v *NullableStatisticsFile) Set(val *StatisticsFile) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticsFile) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticsFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticsFile(val *StatisticsFile) *NullableStatisticsFile {
	return &NullableStatisticsFile{value: val, isSet: true}
}

func (v NullableStatisticsFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticsFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
