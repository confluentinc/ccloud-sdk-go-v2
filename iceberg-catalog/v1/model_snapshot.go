/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Snapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Snapshot{}

// Snapshot struct for Snapshot
type Snapshot struct {
	SnapshotId       int64  `json:"snapshot-id"`
	ParentSnapshotId *int64 `json:"parent-snapshot-id,omitempty"`
	SequenceNumber   *int64 `json:"sequence-number,omitempty"`
	TimestampMs      int64  `json:"timestamp-ms"`
	// Location of the snapshot's manifest list file
	ManifestList string          `json:"manifest-list"`
	Summary      SnapshotSummary `json:"summary"`
	SchemaId     *int32          `json:"schema-id,omitempty"`
}

type _Snapshot Snapshot

// NewSnapshot instantiates a new Snapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshot(snapshotId int64, timestampMs int64, manifestList string, summary SnapshotSummary) *Snapshot {
	this := Snapshot{}
	this.SnapshotId = snapshotId
	this.TimestampMs = timestampMs
	this.ManifestList = manifestList
	this.Summary = summary
	return &this
}

// NewSnapshotWithDefaults instantiates a new Snapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotWithDefaults() *Snapshot {
	this := Snapshot{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value
func (o *Snapshot) GetSnapshotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetSnapshotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *Snapshot) SetSnapshotId(v int64) {
	o.SnapshotId = v
}

// GetParentSnapshotId returns the ParentSnapshotId field value if set, zero value otherwise.
func (o *Snapshot) GetParentSnapshotId() int64 {
	if o == nil || IsNil(o.ParentSnapshotId) {
		var ret int64
		return ret
	}
	return *o.ParentSnapshotId
}

// GetParentSnapshotIdOk returns a tuple with the ParentSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetParentSnapshotIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParentSnapshotId) {
		return nil, false
	}
	return o.ParentSnapshotId, true
}

// HasParentSnapshotId returns a boolean if a field has been set.
func (o *Snapshot) HasParentSnapshotId() bool {
	if o != nil && !IsNil(o.ParentSnapshotId) {
		return true
	}

	return false
}

// SetParentSnapshotId gets a reference to the given int64 and assigns it to the ParentSnapshotId field.
func (o *Snapshot) SetParentSnapshotId(v int64) {
	o.ParentSnapshotId = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *Snapshot) GetSequenceNumber() int64 {
	if o == nil || IsNil(o.SequenceNumber) {
		var ret int64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetSequenceNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.SequenceNumber) {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Snapshot) HasSequenceNumber() bool {
	if o != nil && !IsNil(o.SequenceNumber) {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int64 and assigns it to the SequenceNumber field.
func (o *Snapshot) SetSequenceNumber(v int64) {
	o.SequenceNumber = &v
}

// GetTimestampMs returns the TimestampMs field value
func (o *Snapshot) GetTimestampMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TimestampMs
}

// GetTimestampMsOk returns a tuple with the TimestampMs field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetTimestampMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimestampMs, true
}

// SetTimestampMs sets field value
func (o *Snapshot) SetTimestampMs(v int64) {
	o.TimestampMs = v
}

// GetManifestList returns the ManifestList field value
func (o *Snapshot) GetManifestList() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManifestList
}

// GetManifestListOk returns a tuple with the ManifestList field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetManifestListOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManifestList, true
}

// SetManifestList sets field value
func (o *Snapshot) SetManifestList(v string) {
	o.ManifestList = v
}

// GetSummary returns the Summary field value
func (o *Snapshot) GetSummary() SnapshotSummary {
	if o == nil {
		var ret SnapshotSummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetSummaryOk() (*SnapshotSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *Snapshot) SetSummary(v SnapshotSummary) {
	o.Summary = v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *Snapshot) GetSchemaId() int32 {
	if o == nil || IsNil(o.SchemaId) {
		var ret int32
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetSchemaIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SchemaId) {
		return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *Snapshot) HasSchemaId() bool {
	if o != nil && !IsNil(o.SchemaId) {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given int32 and assigns it to the SchemaId field.
func (o *Snapshot) SetSchemaId(v int32) {
	o.SchemaId = &v
}

func (o Snapshot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Snapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snapshot-id"] = o.SnapshotId
	if !IsNil(o.ParentSnapshotId) {
		toSerialize["parent-snapshot-id"] = o.ParentSnapshotId
	}
	if !IsNil(o.SequenceNumber) {
		toSerialize["sequence-number"] = o.SequenceNumber
	}
	toSerialize["timestamp-ms"] = o.TimestampMs
	toSerialize["manifest-list"] = o.ManifestList
	toSerialize["summary"] = o.Summary
	if !IsNil(o.SchemaId) {
		toSerialize["schema-id"] = o.SchemaId
	}
	return toSerialize, nil
}

func (o *Snapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshot-id",
		"timestamp-ms",
		"manifest-list",
		"summary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshot := _Snapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varSnapshot)

	if err != nil {
		return err
	}

	*o = Snapshot(varSnapshot)

	return err
}

type NullableSnapshot struct {
	value *Snapshot
	isSet bool
}

func (v NullableSnapshot) Get() *Snapshot {
	return v.value
}

func (v *NullableSnapshot) Set(val *Snapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshot(val *Snapshot) *NullableSnapshot {
	return &NullableSnapshot{value: val, isSet: true}
}

func (v NullableSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
