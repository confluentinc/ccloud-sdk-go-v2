/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StructField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StructField{}

// StructField struct for StructField
type StructField struct {
	Id       int32   `json:"id"`
	Name     string  `json:"name"`
	Type     Type    `json:"type"`
	Required bool    `json:"required"`
	Doc      *string `json:"doc,omitempty"`
}

type _StructField StructField

// NewStructField instantiates a new StructField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructField(id int32, name string, type_ Type, required bool) *StructField {
	this := StructField{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.Required = required
	return &this
}

// NewStructFieldWithDefaults instantiates a new StructField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructFieldWithDefaults() *StructField {
	this := StructField{}
	return &this
}

// GetId returns the Id field value
func (o *StructField) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StructField) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StructField) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *StructField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StructField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StructField) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *StructField) GetType() Type {
	if o == nil {
		var ret Type
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *StructField) GetTypeOk() (*Type, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *StructField) SetType(v Type) {
	o.Type = v
}

// GetRequired returns the Required field value
func (o *StructField) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *StructField) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *StructField) SetRequired(v bool) {
	o.Required = v
}

// GetDoc returns the Doc field value if set, zero value otherwise.
func (o *StructField) GetDoc() string {
	if o == nil || IsNil(o.Doc) {
		var ret string
		return ret
	}
	return *o.Doc
}

// GetDocOk returns a tuple with the Doc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructField) GetDocOk() (*string, bool) {
	if o == nil || IsNil(o.Doc) {
		return nil, false
	}
	return o.Doc, true
}

// HasDoc returns a boolean if a field has been set.
func (o *StructField) HasDoc() bool {
	if o != nil && !IsNil(o.Doc) {
		return true
	}

	return false
}

// SetDoc gets a reference to the given string and assigns it to the Doc field.
func (o *StructField) SetDoc(v string) {
	o.Doc = &v
}

func (o StructField) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StructField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["required"] = o.Required
	if !IsNil(o.Doc) {
		toSerialize["doc"] = o.Doc
	}
	return toSerialize, nil
}

func (o *StructField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"required",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStructField := _StructField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStructField)

	if err != nil {
		return err
	}

	*o = StructField(varStructField)

	return err
}

type NullableStructField struct {
	value *StructField
	isSet bool
}

func (v NullableStructField) Get() *StructField {
	return v.value
}

func (v *NullableStructField) Set(val *StructField) {
	v.value = val
	v.isSet = true
}

func (v NullableStructField) IsSet() bool {
	return v.isSet
}

func (v *NullableStructField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructField(val *StructField) *NullableStructField {
	return &NullableStructField{value: val, isSet: true}
}

func (v NullableStructField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
