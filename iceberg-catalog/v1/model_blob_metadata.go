/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BlobMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlobMetadata{}

// BlobMetadata struct for BlobMetadata
type BlobMetadata struct {
	Type           string                 `json:"type"`
	SnapshotId     int64                  `json:"snapshot-id"`
	SequenceNumber int64                  `json:"sequence-number"`
	Fields         []int32                `json:"fields"`
	Properties     map[string]interface{} `json:"properties,omitempty"`
}

type _BlobMetadata BlobMetadata

// NewBlobMetadata instantiates a new BlobMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobMetadata(type_ string, snapshotId int64, sequenceNumber int64, fields []int32) *BlobMetadata {
	this := BlobMetadata{}
	this.Type = type_
	this.SnapshotId = snapshotId
	this.SequenceNumber = sequenceNumber
	this.Fields = fields
	return &this
}

// NewBlobMetadataWithDefaults instantiates a new BlobMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobMetadataWithDefaults() *BlobMetadata {
	this := BlobMetadata{}
	return &this
}

// GetType returns the Type field value
func (o *BlobMetadata) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BlobMetadata) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BlobMetadata) SetType(v string) {
	o.Type = v
}

// GetSnapshotId returns the SnapshotId field value
func (o *BlobMetadata) GetSnapshotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *BlobMetadata) GetSnapshotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *BlobMetadata) SetSnapshotId(v int64) {
	o.SnapshotId = v
}

// GetSequenceNumber returns the SequenceNumber field value
func (o *BlobMetadata) GetSequenceNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value
// and a boolean to check if the value has been set.
func (o *BlobMetadata) GetSequenceNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SequenceNumber, true
}

// SetSequenceNumber sets field value
func (o *BlobMetadata) SetSequenceNumber(v int64) {
	o.SequenceNumber = v
}

// GetFields returns the Fields field value
func (o *BlobMetadata) GetFields() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *BlobMetadata) GetFieldsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *BlobMetadata) SetFields(v []int32) {
	o.Fields = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *BlobMetadata) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobMetadata) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *BlobMetadata) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *BlobMetadata) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

func (o BlobMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlobMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["snapshot-id"] = o.SnapshotId
	toSerialize["sequence-number"] = o.SequenceNumber
	toSerialize["fields"] = o.Fields
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

func (o *BlobMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"snapshot-id",
		"sequence-number",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlobMetadata := _BlobMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlobMetadata)

	if err != nil {
		return err
	}

	*o = BlobMetadata(varBlobMetadata)

	return err
}

type NullableBlobMetadata struct {
	value *BlobMetadata
	isSet bool
}

func (v NullableBlobMetadata) Get() *BlobMetadata {
	return v.value
}

func (v *NullableBlobMetadata) Set(val *BlobMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobMetadata(val *BlobMetadata) *NullableBlobMetadata {
	return &NullableBlobMetadata{value: val, isSet: true}
}

func (v NullableBlobMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
