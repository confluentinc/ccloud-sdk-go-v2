/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type OAuth2APIAPI interface {

	/*
			GetToken Get a token using an OAuth2 flow

			Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.

		This endpoint is used for three purposes -
		1. To exchange client credentials (client ID and secret) for an access token This uses the client credentials flow.
		2. To exchange a client token and an identity token for a more specific access token This uses the token exchange flow.
		3. To exchange an access token for one with the same claims and a refreshed expiration period This uses the token exchange flow.

		For example, a catalog client may be configured with client credentials from the OAuth2 Authorization flow. This client would exchange its client ID and secret for an access token using the client credentials request with this endpoint (1). Subsequent requests would then use that access token.

		Some clients may also handle sessions that have additional user context. These clients would use the token exchange flow to exchange a user token (the "subject" token) from the session for a more specific access token for that user, using the catalog's access token as the "actor" token (2). The user ID token is the "subject" token and can be any token type allowed by the OAuth2 token exchange flow, including a unsecured JWT token with a sub claim. This request should use the catalog's bearer token in the "Authorization" header.

		Clients may also use the token exchange flow to refresh a token that is about to expire by sending a token exchange request (3). The request's "subject" token should be the expiring token. This request should use the subject token in the "Authorization" header.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ApiGetTokenRequest
	*/
	GetToken(ctx context.Context) ApiGetTokenRequest

	// GetTokenExecute executes the request
	//  @return OAuthTokenResponse
	GetTokenExecute(r ApiGetTokenRequest) (*OAuthTokenResponse, *http.Response, error)
}

// OAuth2APIAPIService OAuth2APIAPI service
type OAuth2APIAPIService service

type ApiGetTokenRequest struct {
	ctx                context.Context
	ApiService         OAuth2APIAPI
	grantType          *string
	scope              *string
	clientId           *string
	clientSecret       *string
	requestedTokenType *TokenType
	subjectToken       *string
	subjectTokenType   *TokenType
	actorToken         *string
	actorTokenType     *TokenType
}

func (r ApiGetTokenRequest) GrantType(grantType string) ApiGetTokenRequest {
	r.grantType = &grantType
	return r
}

func (r ApiGetTokenRequest) Scope(scope string) ApiGetTokenRequest {
	r.scope = &scope
	return r
}

// Client ID  This can be sent in the request body, but OAuth2 recommends sending it in a Basic Authorization header.
func (r ApiGetTokenRequest) ClientId(clientId string) ApiGetTokenRequest {
	r.clientId = &clientId
	return r
}

// Client secret  This can be sent in the request body, but OAuth2 recommends sending it in a Basic Authorization header.
func (r ApiGetTokenRequest) ClientSecret(clientSecret string) ApiGetTokenRequest {
	r.clientSecret = &clientSecret
	return r
}

func (r ApiGetTokenRequest) RequestedTokenType(requestedTokenType TokenType) ApiGetTokenRequest {
	r.requestedTokenType = &requestedTokenType
	return r
}

// Subject token for token exchange request
func (r ApiGetTokenRequest) SubjectToken(subjectToken string) ApiGetTokenRequest {
	r.subjectToken = &subjectToken
	return r
}

func (r ApiGetTokenRequest) SubjectTokenType(subjectTokenType TokenType) ApiGetTokenRequest {
	r.subjectTokenType = &subjectTokenType
	return r
}

// Actor token for token exchange request
func (r ApiGetTokenRequest) ActorToken(actorToken string) ApiGetTokenRequest {
	r.actorToken = &actorToken
	return r
}

func (r ApiGetTokenRequest) ActorTokenType(actorTokenType TokenType) ApiGetTokenRequest {
	r.actorTokenType = &actorTokenType
	return r
}

func (r ApiGetTokenRequest) Execute() (*OAuthTokenResponse, *http.Response, error) {
	return r.ApiService.GetTokenExecute(r)
}

/*
GetToken Get a token using an OAuth2 flow

Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.

This endpoint is used for three purposes -
1. To exchange client credentials (client ID and secret) for an access token This uses the client credentials flow.
2. To exchange a client token and an identity token for a more specific access token This uses the token exchange flow.
3. To exchange an access token for one with the same claims and a refreshed expiration period This uses the token exchange flow.

For example, a catalog client may be configured with client credentials from the OAuth2 Authorization flow. This client would exchange its client ID and secret for an access token using the client credentials request with this endpoint (1). Subsequent requests would then use that access token.

Some clients may also handle sessions that have additional user context. These clients would use the token exchange flow to exchange a user token (the "subject" token) from the session for a more specific access token for that user, using the catalog's access token as the "actor" token (2). The user ID token is the "subject" token and can be any token type allowed by the OAuth2 token exchange flow, including a unsecured JWT token with a sub claim. This request should use the catalog's bearer token in the "Authorization" header.

Clients may also use the token exchange flow to refresh a token that is about to expire by sending a token exchange request (3). The request's "subject" token should be the expiring token. This request should use the subject token in the "Authorization" header.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTokenRequest
*/
func (a *OAuth2APIAPIService) GetToken(ctx context.Context) ApiGetTokenRequest {
	return ApiGetTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OAuthTokenResponse
func (a *OAuth2APIAPIService) GetTokenExecute(r ApiGetTokenRequest) (*OAuthTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OAuthTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OAuth2APIAPIService.GetToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/oauth/tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.grantType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "grant_type", r.grantType, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "scope", r.scope, "")
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "client_id", r.clientId, "")
	}
	if r.clientSecret != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "client_secret", r.clientSecret, "")
	}
	if r.requestedTokenType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "requested_token_type", r.requestedTokenType, "")
	}
	if r.subjectToken != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "subject_token", r.subjectToken, "")
	}
	if r.subjectTokenType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "subject_token_type", r.subjectTokenType, "")
	}
	if r.actorToken != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "actor_token", r.actorToken, "")
	}
	if r.actorTokenType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "actor_token_type", r.actorTokenType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OAuthError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v OAuthError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v OAuthError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
