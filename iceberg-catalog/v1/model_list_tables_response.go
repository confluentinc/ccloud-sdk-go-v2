/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ListTablesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListTablesResponse{}

// ListTablesResponse struct for ListTablesResponse
type ListTablesResponse struct {
	Identifiers []TableIdentifier `json:"identifiers,omitempty"`
}

// NewListTablesResponse instantiates a new ListTablesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTablesResponse() *ListTablesResponse {
	this := ListTablesResponse{}
	return &this
}

// NewListTablesResponseWithDefaults instantiates a new ListTablesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTablesResponseWithDefaults() *ListTablesResponse {
	this := ListTablesResponse{}
	return &this
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise.
func (o *ListTablesResponse) GetIdentifiers() []TableIdentifier {
	if o == nil || IsNil(o.Identifiers) {
		var ret []TableIdentifier
		return ret
	}
	return o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTablesResponse) GetIdentifiersOk() ([]TableIdentifier, bool) {
	if o == nil || IsNil(o.Identifiers) {
		return nil, false
	}
	return o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *ListTablesResponse) HasIdentifiers() bool {
	if o != nil && !IsNil(o.Identifiers) {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given []TableIdentifier and assigns it to the Identifiers field.
func (o *ListTablesResponse) SetIdentifiers(v []TableIdentifier) {
	o.Identifiers = v
}

func (o ListTablesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListTablesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifiers) {
		toSerialize["identifiers"] = o.Identifiers
	}
	return toSerialize, nil
}

type NullableListTablesResponse struct {
	value *ListTablesResponse
	isSet bool
}

func (v NullableListTablesResponse) Get() *ListTablesResponse {
	return v.value
}

func (v *NullableListTablesResponse) Set(val *ListTablesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListTablesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListTablesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTablesResponse(val *ListTablesResponse) *NullableListTablesResponse {
	return &NullableListTablesResponse{value: val, isSet: true}
}

func (v NullableListTablesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTablesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
