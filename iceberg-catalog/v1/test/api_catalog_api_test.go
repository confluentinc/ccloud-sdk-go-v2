/*
Apache Iceberg REST Catalog API

Testing CatalogAPIAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v1

import (
	"context"
	openapiclient "github.com/confluentinc/ccloud-sdk-go-v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_v1_CatalogAPIAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CatalogAPIAPIService ListNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var prefix string

		resp, httpRes, err := apiClient.CatalogAPIAPI.ListNamespaces(context.Background(), prefix).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService ListTables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.ListTables(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService LoadNamespaceMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.LoadNamespaceMetadata(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService LoadTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var prefix string
		var namespace string
		var table string

		resp, httpRes, err := apiClient.CatalogAPIAPI.LoadTable(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService NamespaceExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var prefix string
		var namespace string

		httpRes, err := apiClient.CatalogAPIAPI.NamespaceExists(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService TableExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var prefix string
		var namespace string
		var table string

		httpRes, err := apiClient.CatalogAPIAPI.TableExists(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
