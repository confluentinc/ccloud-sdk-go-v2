/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the SnapshotLog type satisfies the MappedNullable interface at compile time
var _ ArrayMappedNullable = &SnapshotLog{}

// SnapshotLog struct for SnapshotLog
type SnapshotLog struct {
	Items []SnapshotLogInner
}

// NewSnapshotLog instantiates a new SnapshotLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotLog() *SnapshotLog {
	this := SnapshotLog{}
	return &this
}

// NewSnapshotLogWithDefaults instantiates a new SnapshotLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotLogWithDefaults() *SnapshotLog {
	this := SnapshotLog{}
	return &this
}

func (o SnapshotLog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotLog) ToMap() ([]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *SnapshotLog) UnmarshalJSON(data []byte) (err error) {
	return json.Unmarshal(data, &o.Items)
}

type NullableSnapshotLog struct {
	value SnapshotLog
	isSet bool
}

func (v NullableSnapshotLog) Get() SnapshotLog {
	return v.value
}

func (v *NullableSnapshotLog) Set(val SnapshotLog) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotLog) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotLog) Unset() {
	//v.value = nil
	v.isSet = false
}

func NewNullableSnapshotLog(val SnapshotLog) *NullableSnapshotLog {
	return &NullableSnapshotLog{value: val, isSet: true}
}

func (v NullableSnapshotLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
