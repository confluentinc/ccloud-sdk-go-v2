/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the SnapshotReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotReferences{}

// SnapshotReferences struct for SnapshotReferences
type SnapshotReferences struct {
	AdditionalProperties map[string]interface{}
}

type _SnapshotReferences SnapshotReferences

// NewSnapshotReferences instantiates a new SnapshotReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotReferences() *SnapshotReferences {
	this := SnapshotReferences{}
	return &this
}

// NewSnapshotReferencesWithDefaults instantiates a new SnapshotReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotReferencesWithDefaults() *SnapshotReferences {
	this := SnapshotReferences{}
	return &this
}

func (o SnapshotReferences) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnapshotReferences) UnmarshalJSON(data []byte) (err error) {
	varSnapshotReferences := _SnapshotReferences{}

	err = json.Unmarshal(data, &varSnapshotReferences)

	if err != nil {
		return err
	}

	*o = SnapshotReferences(varSnapshotReferences)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnapshotReferences struct {
	value *SnapshotReferences
	isSet bool
}

func (v NullableSnapshotReferences) Get() *SnapshotReferences {
	return v.value
}

func (v *NullableSnapshotReferences) Set(val *SnapshotReferences) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotReferences(val *SnapshotReferences) *NullableSnapshotReferences {
	return &NullableSnapshotReferences{value: val, isSet: true}
}

func (v NullableSnapshotReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
