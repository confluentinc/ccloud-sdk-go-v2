/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TableMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableMetadata{}

// TableMetadata struct for TableMetadata
type TableMetadata struct {
	FormatVersion            int32                     `json:"format-version"`
	TableUuid                string                    `json:"table-uuid"`
	Location                 *string                   `json:"location,omitempty"`
	LastUpdatedMs            *int64                    `json:"last-updated-ms,omitempty"`
	Properties               *map[string]string        `json:"properties,omitempty"`
	Schemas                  []Schema                  `json:"schemas,omitempty"`
	CurrentSchemaId          *int32                    `json:"current-schema-id,omitempty"`
	LastColumnId             *int32                    `json:"last-column-id,omitempty"`
	PartitionSpecs           []PartitionSpec           `json:"partition-specs,omitempty"`
	DefaultSpecId            *int32                    `json:"default-spec-id,omitempty"`
	LastPartitionId          *int32                    `json:"last-partition-id,omitempty"`
	SortOrders               []SortOrder               `json:"sort-orders,omitempty"`
	DefaultSortOrderId       *int32                    `json:"default-sort-order-id,omitempty"`
	Snapshots                []Snapshot                `json:"snapshots,omitempty"`
	Refs                     *SnapshotReferences       `json:"refs,omitempty"`
	CurrentSnapshotId        *int64                    `json:"current-snapshot-id,omitempty"`
	LastSequenceNumber       *int64                    `json:"last-sequence-number,omitempty"`
	SnapshotLog              *SnapshotLog              `json:"snapshot-log,omitempty"`
	MetadataLog              *MetadataLog              `json:"metadata-log,omitempty"`
	StatisticsFiles          []StatisticsFile          `json:"statistics-files,omitempty"`
	PartitionStatisticsFiles []PartitionStatisticsFile `json:"partition-statistics-files,omitempty"`
}

type _TableMetadata TableMetadata

// NewTableMetadata instantiates a new TableMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableMetadata(formatVersion int32, tableUuid string) *TableMetadata {
	this := TableMetadata{}
	this.FormatVersion = formatVersion
	this.TableUuid = tableUuid
	return &this
}

// NewTableMetadataWithDefaults instantiates a new TableMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableMetadataWithDefaults() *TableMetadata {
	this := TableMetadata{}
	return &this
}

// GetFormatVersion returns the FormatVersion field value
func (o *TableMetadata) GetFormatVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FormatVersion
}

// GetFormatVersionOk returns a tuple with the FormatVersion field value
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetFormatVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FormatVersion, true
}

// SetFormatVersion sets field value
func (o *TableMetadata) SetFormatVersion(v int32) {
	o.FormatVersion = v
}

// GetTableUuid returns the TableUuid field value
func (o *TableMetadata) GetTableUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableUuid
}

// GetTableUuidOk returns a tuple with the TableUuid field value
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetTableUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableUuid, true
}

// SetTableUuid sets field value
func (o *TableMetadata) SetTableUuid(v string) {
	o.TableUuid = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *TableMetadata) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *TableMetadata) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *TableMetadata) SetLocation(v string) {
	o.Location = &v
}

// GetLastUpdatedMs returns the LastUpdatedMs field value if set, zero value otherwise.
func (o *TableMetadata) GetLastUpdatedMs() int64 {
	if o == nil || IsNil(o.LastUpdatedMs) {
		var ret int64
		return ret
	}
	return *o.LastUpdatedMs
}

// GetLastUpdatedMsOk returns a tuple with the LastUpdatedMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetLastUpdatedMsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastUpdatedMs) {
		return nil, false
	}
	return o.LastUpdatedMs, true
}

// HasLastUpdatedMs returns a boolean if a field has been set.
func (o *TableMetadata) HasLastUpdatedMs() bool {
	if o != nil && !IsNil(o.LastUpdatedMs) {
		return true
	}

	return false
}

// SetLastUpdatedMs gets a reference to the given int64 and assigns it to the LastUpdatedMs field.
func (o *TableMetadata) SetLastUpdatedMs(v int64) {
	o.LastUpdatedMs = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *TableMetadata) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TableMetadata) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *TableMetadata) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *TableMetadata) GetSchemas() []Schema {
	if o == nil || IsNil(o.Schemas) {
		var ret []Schema
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetSchemasOk() ([]Schema, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *TableMetadata) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []Schema and assigns it to the Schemas field.
func (o *TableMetadata) SetSchemas(v []Schema) {
	o.Schemas = v
}

// GetCurrentSchemaId returns the CurrentSchemaId field value if set, zero value otherwise.
func (o *TableMetadata) GetCurrentSchemaId() int32 {
	if o == nil || IsNil(o.CurrentSchemaId) {
		var ret int32
		return ret
	}
	return *o.CurrentSchemaId
}

// GetCurrentSchemaIdOk returns a tuple with the CurrentSchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetCurrentSchemaIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CurrentSchemaId) {
		return nil, false
	}
	return o.CurrentSchemaId, true
}

// HasCurrentSchemaId returns a boolean if a field has been set.
func (o *TableMetadata) HasCurrentSchemaId() bool {
	if o != nil && !IsNil(o.CurrentSchemaId) {
		return true
	}

	return false
}

// SetCurrentSchemaId gets a reference to the given int32 and assigns it to the CurrentSchemaId field.
func (o *TableMetadata) SetCurrentSchemaId(v int32) {
	o.CurrentSchemaId = &v
}

// GetLastColumnId returns the LastColumnId field value if set, zero value otherwise.
func (o *TableMetadata) GetLastColumnId() int32 {
	if o == nil || IsNil(o.LastColumnId) {
		var ret int32
		return ret
	}
	return *o.LastColumnId
}

// GetLastColumnIdOk returns a tuple with the LastColumnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetLastColumnIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LastColumnId) {
		return nil, false
	}
	return o.LastColumnId, true
}

// HasLastColumnId returns a boolean if a field has been set.
func (o *TableMetadata) HasLastColumnId() bool {
	if o != nil && !IsNil(o.LastColumnId) {
		return true
	}

	return false
}

// SetLastColumnId gets a reference to the given int32 and assigns it to the LastColumnId field.
func (o *TableMetadata) SetLastColumnId(v int32) {
	o.LastColumnId = &v
}

// GetPartitionSpecs returns the PartitionSpecs field value if set, zero value otherwise.
func (o *TableMetadata) GetPartitionSpecs() []PartitionSpec {
	if o == nil || IsNil(o.PartitionSpecs) {
		var ret []PartitionSpec
		return ret
	}
	return o.PartitionSpecs
}

// GetPartitionSpecsOk returns a tuple with the PartitionSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetPartitionSpecsOk() ([]PartitionSpec, bool) {
	if o == nil || IsNil(o.PartitionSpecs) {
		return nil, false
	}
	return o.PartitionSpecs, true
}

// HasPartitionSpecs returns a boolean if a field has been set.
func (o *TableMetadata) HasPartitionSpecs() bool {
	if o != nil && !IsNil(o.PartitionSpecs) {
		return true
	}

	return false
}

// SetPartitionSpecs gets a reference to the given []PartitionSpec and assigns it to the PartitionSpecs field.
func (o *TableMetadata) SetPartitionSpecs(v []PartitionSpec) {
	o.PartitionSpecs = v
}

// GetDefaultSpecId returns the DefaultSpecId field value if set, zero value otherwise.
func (o *TableMetadata) GetDefaultSpecId() int32 {
	if o == nil || IsNil(o.DefaultSpecId) {
		var ret int32
		return ret
	}
	return *o.DefaultSpecId
}

// GetDefaultSpecIdOk returns a tuple with the DefaultSpecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetDefaultSpecIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultSpecId) {
		return nil, false
	}
	return o.DefaultSpecId, true
}

// HasDefaultSpecId returns a boolean if a field has been set.
func (o *TableMetadata) HasDefaultSpecId() bool {
	if o != nil && !IsNil(o.DefaultSpecId) {
		return true
	}

	return false
}

// SetDefaultSpecId gets a reference to the given int32 and assigns it to the DefaultSpecId field.
func (o *TableMetadata) SetDefaultSpecId(v int32) {
	o.DefaultSpecId = &v
}

// GetLastPartitionId returns the LastPartitionId field value if set, zero value otherwise.
func (o *TableMetadata) GetLastPartitionId() int32 {
	if o == nil || IsNil(o.LastPartitionId) {
		var ret int32
		return ret
	}
	return *o.LastPartitionId
}

// GetLastPartitionIdOk returns a tuple with the LastPartitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetLastPartitionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LastPartitionId) {
		return nil, false
	}
	return o.LastPartitionId, true
}

// HasLastPartitionId returns a boolean if a field has been set.
func (o *TableMetadata) HasLastPartitionId() bool {
	if o != nil && !IsNil(o.LastPartitionId) {
		return true
	}

	return false
}

// SetLastPartitionId gets a reference to the given int32 and assigns it to the LastPartitionId field.
func (o *TableMetadata) SetLastPartitionId(v int32) {
	o.LastPartitionId = &v
}

// GetSortOrders returns the SortOrders field value if set, zero value otherwise.
func (o *TableMetadata) GetSortOrders() []SortOrder {
	if o == nil || IsNil(o.SortOrders) {
		var ret []SortOrder
		return ret
	}
	return o.SortOrders
}

// GetSortOrdersOk returns a tuple with the SortOrders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetSortOrdersOk() ([]SortOrder, bool) {
	if o == nil || IsNil(o.SortOrders) {
		return nil, false
	}
	return o.SortOrders, true
}

// HasSortOrders returns a boolean if a field has been set.
func (o *TableMetadata) HasSortOrders() bool {
	if o != nil && !IsNil(o.SortOrders) {
		return true
	}

	return false
}

// SetSortOrders gets a reference to the given []SortOrder and assigns it to the SortOrders field.
func (o *TableMetadata) SetSortOrders(v []SortOrder) {
	o.SortOrders = v
}

// GetDefaultSortOrderId returns the DefaultSortOrderId field value if set, zero value otherwise.
func (o *TableMetadata) GetDefaultSortOrderId() int32 {
	if o == nil || IsNil(o.DefaultSortOrderId) {
		var ret int32
		return ret
	}
	return *o.DefaultSortOrderId
}

// GetDefaultSortOrderIdOk returns a tuple with the DefaultSortOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetDefaultSortOrderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultSortOrderId) {
		return nil, false
	}
	return o.DefaultSortOrderId, true
}

// HasDefaultSortOrderId returns a boolean if a field has been set.
func (o *TableMetadata) HasDefaultSortOrderId() bool {
	if o != nil && !IsNil(o.DefaultSortOrderId) {
		return true
	}

	return false
}

// SetDefaultSortOrderId gets a reference to the given int32 and assigns it to the DefaultSortOrderId field.
func (o *TableMetadata) SetDefaultSortOrderId(v int32) {
	o.DefaultSortOrderId = &v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise.
func (o *TableMetadata) GetSnapshots() []Snapshot {
	if o == nil || IsNil(o.Snapshots) {
		var ret []Snapshot
		return ret
	}
	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetSnapshotsOk() ([]Snapshot, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *TableMetadata) HasSnapshots() bool {
	if o != nil && !IsNil(o.Snapshots) {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given []Snapshot and assigns it to the Snapshots field.
func (o *TableMetadata) SetSnapshots(v []Snapshot) {
	o.Snapshots = v
}

// GetRefs returns the Refs field value if set, zero value otherwise.
func (o *TableMetadata) GetRefs() SnapshotReferences {
	if o == nil || IsNil(o.Refs) {
		var ret SnapshotReferences
		return ret
	}
	return *o.Refs
}

// GetRefsOk returns a tuple with the Refs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetRefsOk() (*SnapshotReferences, bool) {
	if o == nil || IsNil(o.Refs) {
		return nil, false
	}
	return o.Refs, true
}

// HasRefs returns a boolean if a field has been set.
func (o *TableMetadata) HasRefs() bool {
	if o != nil && !IsNil(o.Refs) {
		return true
	}

	return false
}

// SetRefs gets a reference to the given SnapshotReferences and assigns it to the Refs field.
func (o *TableMetadata) SetRefs(v SnapshotReferences) {
	o.Refs = &v
}

// GetCurrentSnapshotId returns the CurrentSnapshotId field value if set, zero value otherwise.
func (o *TableMetadata) GetCurrentSnapshotId() int64 {
	if o == nil || IsNil(o.CurrentSnapshotId) {
		var ret int64
		return ret
	}
	return *o.CurrentSnapshotId
}

// GetCurrentSnapshotIdOk returns a tuple with the CurrentSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetCurrentSnapshotIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CurrentSnapshotId) {
		return nil, false
	}
	return o.CurrentSnapshotId, true
}

// HasCurrentSnapshotId returns a boolean if a field has been set.
func (o *TableMetadata) HasCurrentSnapshotId() bool {
	if o != nil && !IsNil(o.CurrentSnapshotId) {
		return true
	}

	return false
}

// SetCurrentSnapshotId gets a reference to the given int64 and assigns it to the CurrentSnapshotId field.
func (o *TableMetadata) SetCurrentSnapshotId(v int64) {
	o.CurrentSnapshotId = &v
}

// GetLastSequenceNumber returns the LastSequenceNumber field value if set, zero value otherwise.
func (o *TableMetadata) GetLastSequenceNumber() int64 {
	if o == nil || IsNil(o.LastSequenceNumber) {
		var ret int64
		return ret
	}
	return *o.LastSequenceNumber
}

// GetLastSequenceNumberOk returns a tuple with the LastSequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetLastSequenceNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSequenceNumber) {
		return nil, false
	}
	return o.LastSequenceNumber, true
}

// HasLastSequenceNumber returns a boolean if a field has been set.
func (o *TableMetadata) HasLastSequenceNumber() bool {
	if o != nil && !IsNil(o.LastSequenceNumber) {
		return true
	}

	return false
}

// SetLastSequenceNumber gets a reference to the given int64 and assigns it to the LastSequenceNumber field.
func (o *TableMetadata) SetLastSequenceNumber(v int64) {
	o.LastSequenceNumber = &v
}

// GetSnapshotLog returns the SnapshotLog field value if set, zero value otherwise.
func (o *TableMetadata) GetSnapshotLog() SnapshotLog {
	if o == nil || IsNil(o.SnapshotLog) {
		var ret SnapshotLog
		return ret
	}
	return *o.SnapshotLog
}

// GetSnapshotLogOk returns a tuple with the SnapshotLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetSnapshotLogOk() (*SnapshotLog, bool) {
	if o == nil || IsNil(o.SnapshotLog) {
		return nil, false
	}
	return o.SnapshotLog, true
}

// HasSnapshotLog returns a boolean if a field has been set.
func (o *TableMetadata) HasSnapshotLog() bool {
	if o != nil && !IsNil(o.SnapshotLog) {
		return true
	}

	return false
}

// SetSnapshotLog gets a reference to the given SnapshotLog and assigns it to the SnapshotLog field.
func (o *TableMetadata) SetSnapshotLog(v SnapshotLog) {
	o.SnapshotLog = &v
}

// GetMetadataLog returns the MetadataLog field value if set, zero value otherwise.
func (o *TableMetadata) GetMetadataLog() MetadataLog {
	if o == nil || IsNil(o.MetadataLog) {
		var ret MetadataLog
		return ret
	}
	return *o.MetadataLog
}

// GetMetadataLogOk returns a tuple with the MetadataLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetMetadataLogOk() (*MetadataLog, bool) {
	if o == nil || IsNil(o.MetadataLog) {
		return nil, false
	}
	return o.MetadataLog, true
}

// HasMetadataLog returns a boolean if a field has been set.
func (o *TableMetadata) HasMetadataLog() bool {
	if o != nil && !IsNil(o.MetadataLog) {
		return true
	}

	return false
}

// SetMetadataLog gets a reference to the given MetadataLog and assigns it to the MetadataLog field.
func (o *TableMetadata) SetMetadataLog(v MetadataLog) {
	o.MetadataLog = &v
}

// GetStatisticsFiles returns the StatisticsFiles field value if set, zero value otherwise.
func (o *TableMetadata) GetStatisticsFiles() []StatisticsFile {
	if o == nil || IsNil(o.StatisticsFiles) {
		var ret []StatisticsFile
		return ret
	}
	return o.StatisticsFiles
}

// GetStatisticsFilesOk returns a tuple with the StatisticsFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetStatisticsFilesOk() ([]StatisticsFile, bool) {
	if o == nil || IsNil(o.StatisticsFiles) {
		return nil, false
	}
	return o.StatisticsFiles, true
}

// HasStatisticsFiles returns a boolean if a field has been set.
func (o *TableMetadata) HasStatisticsFiles() bool {
	if o != nil && !IsNil(o.StatisticsFiles) {
		return true
	}

	return false
}

// SetStatisticsFiles gets a reference to the given []StatisticsFile and assigns it to the StatisticsFiles field.
func (o *TableMetadata) SetStatisticsFiles(v []StatisticsFile) {
	o.StatisticsFiles = v
}

// GetPartitionStatisticsFiles returns the PartitionStatisticsFiles field value if set, zero value otherwise.
func (o *TableMetadata) GetPartitionStatisticsFiles() []PartitionStatisticsFile {
	if o == nil || IsNil(o.PartitionStatisticsFiles) {
		var ret []PartitionStatisticsFile
		return ret
	}
	return o.PartitionStatisticsFiles
}

// GetPartitionStatisticsFilesOk returns a tuple with the PartitionStatisticsFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableMetadata) GetPartitionStatisticsFilesOk() ([]PartitionStatisticsFile, bool) {
	if o == nil || IsNil(o.PartitionStatisticsFiles) {
		return nil, false
	}
	return o.PartitionStatisticsFiles, true
}

// HasPartitionStatisticsFiles returns a boolean if a field has been set.
func (o *TableMetadata) HasPartitionStatisticsFiles() bool {
	if o != nil && !IsNil(o.PartitionStatisticsFiles) {
		return true
	}

	return false
}

// SetPartitionStatisticsFiles gets a reference to the given []PartitionStatisticsFile and assigns it to the PartitionStatisticsFiles field.
func (o *TableMetadata) SetPartitionStatisticsFiles(v []PartitionStatisticsFile) {
	o.PartitionStatisticsFiles = v
}

func (o TableMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["format-version"] = o.FormatVersion
	toSerialize["table-uuid"] = o.TableUuid
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.LastUpdatedMs) {
		toSerialize["last-updated-ms"] = o.LastUpdatedMs
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.CurrentSchemaId) {
		toSerialize["current-schema-id"] = o.CurrentSchemaId
	}
	if !IsNil(o.LastColumnId) {
		toSerialize["last-column-id"] = o.LastColumnId
	}
	if !IsNil(o.PartitionSpecs) {
		toSerialize["partition-specs"] = o.PartitionSpecs
	}
	if !IsNil(o.DefaultSpecId) {
		toSerialize["default-spec-id"] = o.DefaultSpecId
	}
	if !IsNil(o.LastPartitionId) {
		toSerialize["last-partition-id"] = o.LastPartitionId
	}
	if !IsNil(o.SortOrders) {
		toSerialize["sort-orders"] = o.SortOrders
	}
	if !IsNil(o.DefaultSortOrderId) {
		toSerialize["default-sort-order-id"] = o.DefaultSortOrderId
	}
	if !IsNil(o.Snapshots) {
		toSerialize["snapshots"] = o.Snapshots
	}
	if !IsNil(o.Refs) {
		toSerialize["refs"] = o.Refs
	}
	if !IsNil(o.CurrentSnapshotId) {
		toSerialize["current-snapshot-id"] = o.CurrentSnapshotId
	}
	if !IsNil(o.LastSequenceNumber) {
		toSerialize["last-sequence-number"] = o.LastSequenceNumber
	}
	if !IsNil(o.SnapshotLog) {
		toSerialize["snapshot-log"] = o.SnapshotLog
	}
	if !IsNil(o.MetadataLog) {
		toSerialize["metadata-log"] = o.MetadataLog
	}
	if !IsNil(o.StatisticsFiles) {
		toSerialize["statistics-files"] = o.StatisticsFiles
	}
	if !IsNil(o.PartitionStatisticsFiles) {
		toSerialize["partition-statistics-files"] = o.PartitionStatisticsFiles
	}
	return toSerialize, nil
}

func (o *TableMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"format-version",
		"table-uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTableMetadata := _TableMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTableMetadata)

	if err != nil {
		return err
	}

	*o = TableMetadata(varTableMetadata)

	return err
}

type NullableTableMetadata struct {
	value *TableMetadata
	isSet bool
}

func (v NullableTableMetadata) Get() *TableMetadata {
	return v.value
}

func (v *NullableTableMetadata) Set(val *TableMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableMetadata(val *TableMetadata) *NullableTableMetadata {
	return &NullableTableMetadata{value: val, isSet: true}
}

func (v NullableTableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
