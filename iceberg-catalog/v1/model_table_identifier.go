/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TableIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableIdentifier{}

// TableIdentifier struct for TableIdentifier
type TableIdentifier struct {
	Namespace Namespace `json:"namespace"`
	Name      string    `json:"name"`
}

type _TableIdentifier TableIdentifier

// NewTableIdentifier instantiates a new TableIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableIdentifier(namespace Namespace, name string) *TableIdentifier {
	this := TableIdentifier{}
	this.Namespace = namespace
	this.Name = name
	return &this
}

// NewTableIdentifierWithDefaults instantiates a new TableIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableIdentifierWithDefaults() *TableIdentifier {
	this := TableIdentifier{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *TableIdentifier) GetNamespace() Namespace {
	if o == nil {
		var ret Namespace
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *TableIdentifier) GetNamespaceOk() (*Namespace, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *TableIdentifier) SetNamespace(v Namespace) {
	o.Namespace = v
}

// GetName returns the Name field value
func (o *TableIdentifier) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TableIdentifier) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TableIdentifier) SetName(v string) {
	o.Name = v
}

func (o TableIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *TableIdentifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTableIdentifier := _TableIdentifier{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varTableIdentifier)

	if err != nil {
		return err
	}

	*o = TableIdentifier(varTableIdentifier)

	return err
}

type NullableTableIdentifier struct {
	value *TableIdentifier
	isSet bool
}

func (v NullableTableIdentifier) Get() *TableIdentifier {
	return v.value
}

func (v *NullableTableIdentifier) Set(val *TableIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableTableIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableTableIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableIdentifier(val *TableIdentifier) *NullableTableIdentifier {
	return &NullableTableIdentifier{value: val, isSet: true}
}

func (v NullableTableIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
