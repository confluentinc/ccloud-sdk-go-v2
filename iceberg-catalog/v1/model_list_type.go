/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListType{}

// ListType struct for ListType
type ListType struct {
	Type            string `json:"type"`
	ElementId       int32  `json:"element-id"`
	Element         Type   `json:"element"`
	ElementRequired bool   `json:"element-required"`
}

type _ListType ListType

// NewListType instantiates a new ListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListType(type_ string, elementId int32, element Type, elementRequired bool) *ListType {
	this := ListType{}
	this.Type = type_
	this.ElementId = elementId
	this.Element = element
	this.ElementRequired = elementRequired
	return &this
}

// NewListTypeWithDefaults instantiates a new ListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTypeWithDefaults() *ListType {
	this := ListType{}
	return &this
}

// GetType returns the Type field value
func (o *ListType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ListType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ListType) SetType(v string) {
	o.Type = v
}

// GetElementId returns the ElementId field value
func (o *ListType) GetElementId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value
// and a boolean to check if the value has been set.
func (o *ListType) GetElementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementId, true
}

// SetElementId sets field value
func (o *ListType) SetElementId(v int32) {
	o.ElementId = v
}

// GetElement returns the Element field value
func (o *ListType) GetElement() Type {
	if o == nil {
		var ret Type
		return ret
	}

	return o.Element
}

// GetElementOk returns a tuple with the Element field value
// and a boolean to check if the value has been set.
func (o *ListType) GetElementOk() (*Type, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Element, true
}

// SetElement sets field value
func (o *ListType) SetElement(v Type) {
	o.Element = v
}

// GetElementRequired returns the ElementRequired field value
func (o *ListType) GetElementRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ElementRequired
}

// GetElementRequiredOk returns a tuple with the ElementRequired field value
// and a boolean to check if the value has been set.
func (o *ListType) GetElementRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementRequired, true
}

// SetElementRequired sets field value
func (o *ListType) SetElementRequired(v bool) {
	o.ElementRequired = v
}

func (o ListType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["element-id"] = o.ElementId
	toSerialize["element"] = o.Element
	toSerialize["element-required"] = o.ElementRequired
	return toSerialize, nil
}

func (o *ListType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"element-id",
		"element",
		"element-required",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListType := _ListType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varListType)

	if err != nil {
		return err
	}

	*o = ListType(varListType)

	return err
}

type NullableListType struct {
	value *ListType
	isSet bool
}

func (v NullableListType) Get() *ListType {
	return v.value
}

func (v *NullableListType) Set(val *ListType) {
	v.value = val
	v.isSet = true
}

func (v NullableListType) IsSet() bool {
	return v.isSet
}

func (v *NullableListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListType(val *ListType) *NullableListType {
	return &NullableListType{value: val, isSet: true}
}

func (v NullableListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
