/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SnapshotReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotReference{}

// SnapshotReference struct for SnapshotReference
type SnapshotReference struct {
	Type               string `json:"type"`
	SnapshotId         int64  `json:"snapshot-id"`
	MaxRefAgeMs        *int64 `json:"max-ref-age-ms,omitempty"`
	MaxSnapshotAgeMs   *int64 `json:"max-snapshot-age-ms,omitempty"`
	MinSnapshotsToKeep *int32 `json:"min-snapshots-to-keep,omitempty"`
}

type _SnapshotReference SnapshotReference

// NewSnapshotReference instantiates a new SnapshotReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotReference(type_ string, snapshotId int64) *SnapshotReference {
	this := SnapshotReference{}
	this.Type = type_
	this.SnapshotId = snapshotId
	return &this
}

// NewSnapshotReferenceWithDefaults instantiates a new SnapshotReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotReferenceWithDefaults() *SnapshotReference {
	this := SnapshotReference{}
	return &this
}

// GetType returns the Type field value
func (o *SnapshotReference) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SnapshotReference) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SnapshotReference) SetType(v string) {
	o.Type = v
}

// GetSnapshotId returns the SnapshotId field value
func (o *SnapshotReference) GetSnapshotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *SnapshotReference) GetSnapshotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *SnapshotReference) SetSnapshotId(v int64) {
	o.SnapshotId = v
}

// GetMaxRefAgeMs returns the MaxRefAgeMs field value if set, zero value otherwise.
func (o *SnapshotReference) GetMaxRefAgeMs() int64 {
	if o == nil || IsNil(o.MaxRefAgeMs) {
		var ret int64
		return ret
	}
	return *o.MaxRefAgeMs
}

// GetMaxRefAgeMsOk returns a tuple with the MaxRefAgeMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotReference) GetMaxRefAgeMsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxRefAgeMs) {
		return nil, false
	}
	return o.MaxRefAgeMs, true
}

// HasMaxRefAgeMs returns a boolean if a field has been set.
func (o *SnapshotReference) HasMaxRefAgeMs() bool {
	if o != nil && !IsNil(o.MaxRefAgeMs) {
		return true
	}

	return false
}

// SetMaxRefAgeMs gets a reference to the given int64 and assigns it to the MaxRefAgeMs field.
func (o *SnapshotReference) SetMaxRefAgeMs(v int64) {
	o.MaxRefAgeMs = &v
}

// GetMaxSnapshotAgeMs returns the MaxSnapshotAgeMs field value if set, zero value otherwise.
func (o *SnapshotReference) GetMaxSnapshotAgeMs() int64 {
	if o == nil || IsNil(o.MaxSnapshotAgeMs) {
		var ret int64
		return ret
	}
	return *o.MaxSnapshotAgeMs
}

// GetMaxSnapshotAgeMsOk returns a tuple with the MaxSnapshotAgeMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotReference) GetMaxSnapshotAgeMsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxSnapshotAgeMs) {
		return nil, false
	}
	return o.MaxSnapshotAgeMs, true
}

// HasMaxSnapshotAgeMs returns a boolean if a field has been set.
func (o *SnapshotReference) HasMaxSnapshotAgeMs() bool {
	if o != nil && !IsNil(o.MaxSnapshotAgeMs) {
		return true
	}

	return false
}

// SetMaxSnapshotAgeMs gets a reference to the given int64 and assigns it to the MaxSnapshotAgeMs field.
func (o *SnapshotReference) SetMaxSnapshotAgeMs(v int64) {
	o.MaxSnapshotAgeMs = &v
}

// GetMinSnapshotsToKeep returns the MinSnapshotsToKeep field value if set, zero value otherwise.
func (o *SnapshotReference) GetMinSnapshotsToKeep() int32 {
	if o == nil || IsNil(o.MinSnapshotsToKeep) {
		var ret int32
		return ret
	}
	return *o.MinSnapshotsToKeep
}

// GetMinSnapshotsToKeepOk returns a tuple with the MinSnapshotsToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotReference) GetMinSnapshotsToKeepOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSnapshotsToKeep) {
		return nil, false
	}
	return o.MinSnapshotsToKeep, true
}

// HasMinSnapshotsToKeep returns a boolean if a field has been set.
func (o *SnapshotReference) HasMinSnapshotsToKeep() bool {
	if o != nil && !IsNil(o.MinSnapshotsToKeep) {
		return true
	}

	return false
}

// SetMinSnapshotsToKeep gets a reference to the given int32 and assigns it to the MinSnapshotsToKeep field.
func (o *SnapshotReference) SetMinSnapshotsToKeep(v int32) {
	o.MinSnapshotsToKeep = &v
}

func (o SnapshotReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["snapshot-id"] = o.SnapshotId
	if !IsNil(o.MaxRefAgeMs) {
		toSerialize["max-ref-age-ms"] = o.MaxRefAgeMs
	}
	if !IsNil(o.MaxSnapshotAgeMs) {
		toSerialize["max-snapshot-age-ms"] = o.MaxSnapshotAgeMs
	}
	if !IsNil(o.MinSnapshotsToKeep) {
		toSerialize["min-snapshots-to-keep"] = o.MinSnapshotsToKeep
	}
	return toSerialize, nil
}

func (o *SnapshotReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"snapshot-id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotReference := _SnapshotReference{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotReference)

	if err != nil {
		return err
	}

	*o = SnapshotReference(varSnapshotReference)

	return err
}

type NullableSnapshotReference struct {
	value *SnapshotReference
	isSet bool
}

func (v NullableSnapshotReference) Get() *SnapshotReference {
	return v.value
}

func (v *NullableSnapshotReference) Set(val *SnapshotReference) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotReference) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotReference(val *SnapshotReference) *NullableSnapshotReference {
	return &NullableSnapshotReference{value: val, isSet: true}
}

func (v NullableSnapshotReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
