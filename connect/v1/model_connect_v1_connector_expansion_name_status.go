// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// ConnectV1ConnectorExpansionNameStatus Status of the connector and its tasks.
type ConnectV1ConnectorExpansionNameStatus struct {
	// The name of the connector.
	Name string `json:"name"`
	// Type of connector, sink or source.
	Type string `json:"type"`
	Connector ConnectV1ConnectorExpansionNameStatusConnector `json:"connector"`
	// A map containing the task status.
	Tasks *[]ConnectV1ConnectorExpansionNameStatusTasks `json:"tasks,omitempty"`
}

// NewConnectV1ConnectorExpansionNameStatus instantiates a new ConnectV1ConnectorExpansionNameStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1ConnectorExpansionNameStatus(name string, type_ string, connector ConnectV1ConnectorExpansionNameStatusConnector) *ConnectV1ConnectorExpansionNameStatus {
	this := ConnectV1ConnectorExpansionNameStatus{}
	this.Name = name
	this.Type = type_
	this.Connector = connector
	return &this
}

// NewConnectV1ConnectorExpansionNameStatusWithDefaults instantiates a new ConnectV1ConnectorExpansionNameStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1ConnectorExpansionNameStatusWithDefaults() *ConnectV1ConnectorExpansionNameStatus {
	this := ConnectV1ConnectorExpansionNameStatus{}
	return &this
}

// GetName returns the Name field value
func (o *ConnectV1ConnectorExpansionNameStatus) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionNameStatus) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectV1ConnectorExpansionNameStatus) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ConnectV1ConnectorExpansionNameStatus) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionNameStatus) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectV1ConnectorExpansionNameStatus) SetType(v string) {
	o.Type = v
}

// GetConnector returns the Connector field value
func (o *ConnectV1ConnectorExpansionNameStatus) GetConnector() ConnectV1ConnectorExpansionNameStatusConnector {
	if o == nil {
		var ret ConnectV1ConnectorExpansionNameStatusConnector
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionNameStatus) GetConnectorOk() (*ConnectV1ConnectorExpansionNameStatusConnector, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *ConnectV1ConnectorExpansionNameStatus) SetConnector(v ConnectV1ConnectorExpansionNameStatusConnector) {
	o.Connector = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ConnectV1ConnectorExpansionNameStatus) GetTasks() []ConnectV1ConnectorExpansionNameStatusTasks {
	if o == nil || o.Tasks == nil {
		var ret []ConnectV1ConnectorExpansionNameStatusTasks
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionNameStatus) GetTasksOk() (*[]ConnectV1ConnectorExpansionNameStatusTasks, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ConnectV1ConnectorExpansionNameStatus) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []ConnectV1ConnectorExpansionNameStatusTasks and assigns it to the Tasks field.
func (o *ConnectV1ConnectorExpansionNameStatus) SetTasks(v []ConnectV1ConnectorExpansionNameStatusTasks) {
	o.Tasks = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1ConnectorExpansionNameStatus) Redact() {
    o.recurseRedact(&o.Name)
    o.recurseRedact(&o.Type)
    o.recurseRedact(&o.Connector)
    o.recurseRedact(o.Tasks)
}

func (o *ConnectV1ConnectorExpansionNameStatus) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ConnectV1ConnectorExpansionNameStatus) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1ConnectorExpansionNameStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["connector"] = o.Connector
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	return json.Marshal(toSerialize)
}

type NullableConnectV1ConnectorExpansionNameStatus struct {
	value *ConnectV1ConnectorExpansionNameStatus
	isSet bool
}

func (v NullableConnectV1ConnectorExpansionNameStatus) Get() *ConnectV1ConnectorExpansionNameStatus {
	return v.value
}

func (v *NullableConnectV1ConnectorExpansionNameStatus) Set(val *ConnectV1ConnectorExpansionNameStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1ConnectorExpansionNameStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1ConnectorExpansionNameStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1ConnectorExpansionNameStatus(val *ConnectV1ConnectorExpansionNameStatus) *NullableConnectV1ConnectorExpansionNameStatus {
	return &NullableConnectV1ConnectorExpansionNameStatus{value: val, isSet: true}
}

func (v NullableConnectV1ConnectorExpansionNameStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectV1ConnectorExpansionNameStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


