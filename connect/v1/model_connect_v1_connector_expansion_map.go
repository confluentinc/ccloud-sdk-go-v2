// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ConnectV1ConnectorExpansionMap struct for ConnectV1ConnectorExpansionMap
type ConnectV1ConnectorExpansionMap struct {
}

// NewConnectV1ConnectorExpansionMap instantiates a new ConnectV1ConnectorExpansionMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1ConnectorExpansionMap() *ConnectV1ConnectorExpansionMap {
	this := ConnectV1ConnectorExpansionMap{}
	return &this
}

// NewConnectV1ConnectorExpansionMapWithDefaults instantiates a new ConnectV1ConnectorExpansionMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1ConnectorExpansionMapWithDefaults() *ConnectV1ConnectorExpansionMap {
	this := ConnectV1ConnectorExpansionMap{}
	return &this
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1ConnectorExpansionMap) Redact() {
}

func (o *ConnectV1ConnectorExpansionMap) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ConnectV1ConnectorExpansionMap) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1ConnectorExpansionMap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableConnectV1ConnectorExpansionMap struct {
	value *ConnectV1ConnectorExpansionMap
	isSet bool
}

func (v NullableConnectV1ConnectorExpansionMap) Get() *ConnectV1ConnectorExpansionMap {
	return v.value
}

func (v *NullableConnectV1ConnectorExpansionMap) Set(val *ConnectV1ConnectorExpansionMap) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1ConnectorExpansionMap) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1ConnectorExpansionMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1ConnectorExpansionMap(val *ConnectV1ConnectorExpansionMap) *NullableConnectV1ConnectorExpansionMap {
	return &NullableConnectV1ConnectorExpansionMap{value: val, isSet: true}
}

func (v NullableConnectV1ConnectorExpansionMap) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableConnectV1ConnectorExpansionMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
