// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_offsets_connect_v1.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1 "github.com/confluentinc/ccloud-sdk-go-v2-internal/connect/v1"
)

// OffsetsConnectV1Api is a mock of OffsetsConnectV1Api interface
type OffsetsConnectV1Api struct {
	lockAlterConnectv1ConnectorOffsetsRequest sync.Mutex
	AlterConnectv1ConnectorOffsetsRequestFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiAlterConnectv1ConnectorOffsetsRequestRequest

	lockAlterConnectv1ConnectorOffsetsRequestExecute sync.Mutex
	AlterConnectv1ConnectorOffsetsRequestExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiAlterConnectv1ConnectorOffsetsRequestRequest) (github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ConnectV1AlterOffsetRequestInfo, *net_http.Response, error)

	lockGetConnectv1ConnectorOffsets sync.Mutex
	GetConnectv1ConnectorOffsetsFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequest

	lockGetConnectv1ConnectorOffsetsExecute sync.Mutex
	GetConnectv1ConnectorOffsetsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ConnectV1ConnectorOffsets, *net_http.Response, error)

	lockGetConnectv1ConnectorOffsetsRequestStatus sync.Mutex
	GetConnectv1ConnectorOffsetsRequestStatusFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequestStatusRequest

	lockGetConnectv1ConnectorOffsetsRequestStatusExecute sync.Mutex
	GetConnectv1ConnectorOffsetsRequestStatusExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequestStatusRequest) (github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ConnectV1AlterOffsetStatus, *net_http.Response, error)

	calls struct {
		AlterConnectv1ConnectorOffsetsRequest []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		AlterConnectv1ConnectorOffsetsRequestExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiAlterConnectv1ConnectorOffsetsRequestRequest
		}
		GetConnectv1ConnectorOffsets []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		GetConnectv1ConnectorOffsetsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequest
		}
		GetConnectv1ConnectorOffsetsRequestStatus []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		GetConnectv1ConnectorOffsetsRequestStatusExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequestStatusRequest
		}
	}
}

// AlterConnectv1ConnectorOffsetsRequest mocks base method by wrapping the associated func.
func (m *OffsetsConnectV1Api) AlterConnectv1ConnectorOffsetsRequest(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiAlterConnectv1ConnectorOffsetsRequestRequest {
	m.lockAlterConnectv1ConnectorOffsetsRequest.Lock()
	defer m.lockAlterConnectv1ConnectorOffsetsRequest.Unlock()

	if m.AlterConnectv1ConnectorOffsetsRequestFunc == nil {
		panic("mocker: OffsetsConnectV1Api.AlterConnectv1ConnectorOffsetsRequestFunc is nil but OffsetsConnectV1Api.AlterConnectv1ConnectorOffsetsRequest was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.AlterConnectv1ConnectorOffsetsRequest = append(m.calls.AlterConnectv1ConnectorOffsetsRequest, call)

	return m.AlterConnectv1ConnectorOffsetsRequestFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// AlterConnectv1ConnectorOffsetsRequestCalled returns true if AlterConnectv1ConnectorOffsetsRequest was called at least once.
func (m *OffsetsConnectV1Api) AlterConnectv1ConnectorOffsetsRequestCalled() bool {
	m.lockAlterConnectv1ConnectorOffsetsRequest.Lock()
	defer m.lockAlterConnectv1ConnectorOffsetsRequest.Unlock()

	return len(m.calls.AlterConnectv1ConnectorOffsetsRequest) > 0
}

// AlterConnectv1ConnectorOffsetsRequestCalls returns the calls made to AlterConnectv1ConnectorOffsetsRequest.
func (m *OffsetsConnectV1Api) AlterConnectv1ConnectorOffsetsRequestCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockAlterConnectv1ConnectorOffsetsRequest.Lock()
	defer m.lockAlterConnectv1ConnectorOffsetsRequest.Unlock()

	return m.calls.AlterConnectv1ConnectorOffsetsRequest
}

// AlterConnectv1ConnectorOffsetsRequestExecute mocks base method by wrapping the associated func.
func (m *OffsetsConnectV1Api) AlterConnectv1ConnectorOffsetsRequestExecute(r github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiAlterConnectv1ConnectorOffsetsRequestRequest) (github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ConnectV1AlterOffsetRequestInfo, *net_http.Response, error) {
	m.lockAlterConnectv1ConnectorOffsetsRequestExecute.Lock()
	defer m.lockAlterConnectv1ConnectorOffsetsRequestExecute.Unlock()

	if m.AlterConnectv1ConnectorOffsetsRequestExecuteFunc == nil {
		panic("mocker: OffsetsConnectV1Api.AlterConnectv1ConnectorOffsetsRequestExecuteFunc is nil but OffsetsConnectV1Api.AlterConnectv1ConnectorOffsetsRequestExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiAlterConnectv1ConnectorOffsetsRequestRequest
	}{
		R: r,
	}

	m.calls.AlterConnectv1ConnectorOffsetsRequestExecute = append(m.calls.AlterConnectv1ConnectorOffsetsRequestExecute, call)

	return m.AlterConnectv1ConnectorOffsetsRequestExecuteFunc(r)
}

// AlterConnectv1ConnectorOffsetsRequestExecuteCalled returns true if AlterConnectv1ConnectorOffsetsRequestExecute was called at least once.
func (m *OffsetsConnectV1Api) AlterConnectv1ConnectorOffsetsRequestExecuteCalled() bool {
	m.lockAlterConnectv1ConnectorOffsetsRequestExecute.Lock()
	defer m.lockAlterConnectv1ConnectorOffsetsRequestExecute.Unlock()

	return len(m.calls.AlterConnectv1ConnectorOffsetsRequestExecute) > 0
}

// AlterConnectv1ConnectorOffsetsRequestExecuteCalls returns the calls made to AlterConnectv1ConnectorOffsetsRequestExecute.
func (m *OffsetsConnectV1Api) AlterConnectv1ConnectorOffsetsRequestExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiAlterConnectv1ConnectorOffsetsRequestRequest
} {
	m.lockAlterConnectv1ConnectorOffsetsRequestExecute.Lock()
	defer m.lockAlterConnectv1ConnectorOffsetsRequestExecute.Unlock()

	return m.calls.AlterConnectv1ConnectorOffsetsRequestExecute
}

// GetConnectv1ConnectorOffsets mocks base method by wrapping the associated func.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsets(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequest {
	m.lockGetConnectv1ConnectorOffsets.Lock()
	defer m.lockGetConnectv1ConnectorOffsets.Unlock()

	if m.GetConnectv1ConnectorOffsetsFunc == nil {
		panic("mocker: OffsetsConnectV1Api.GetConnectv1ConnectorOffsetsFunc is nil but OffsetsConnectV1Api.GetConnectv1ConnectorOffsets was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.GetConnectv1ConnectorOffsets = append(m.calls.GetConnectv1ConnectorOffsets, call)

	return m.GetConnectv1ConnectorOffsetsFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// GetConnectv1ConnectorOffsetsCalled returns true if GetConnectv1ConnectorOffsets was called at least once.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsCalled() bool {
	m.lockGetConnectv1ConnectorOffsets.Lock()
	defer m.lockGetConnectv1ConnectorOffsets.Unlock()

	return len(m.calls.GetConnectv1ConnectorOffsets) > 0
}

// GetConnectv1ConnectorOffsetsCalls returns the calls made to GetConnectv1ConnectorOffsets.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockGetConnectv1ConnectorOffsets.Lock()
	defer m.lockGetConnectv1ConnectorOffsets.Unlock()

	return m.calls.GetConnectv1ConnectorOffsets
}

// GetConnectv1ConnectorOffsetsExecute mocks base method by wrapping the associated func.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ConnectV1ConnectorOffsets, *net_http.Response, error) {
	m.lockGetConnectv1ConnectorOffsetsExecute.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsExecute.Unlock()

	if m.GetConnectv1ConnectorOffsetsExecuteFunc == nil {
		panic("mocker: OffsetsConnectV1Api.GetConnectv1ConnectorOffsetsExecuteFunc is nil but OffsetsConnectV1Api.GetConnectv1ConnectorOffsetsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequest
	}{
		R: r,
	}

	m.calls.GetConnectv1ConnectorOffsetsExecute = append(m.calls.GetConnectv1ConnectorOffsetsExecute, call)

	return m.GetConnectv1ConnectorOffsetsExecuteFunc(r)
}

// GetConnectv1ConnectorOffsetsExecuteCalled returns true if GetConnectv1ConnectorOffsetsExecute was called at least once.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsExecuteCalled() bool {
	m.lockGetConnectv1ConnectorOffsetsExecute.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsExecute.Unlock()

	return len(m.calls.GetConnectv1ConnectorOffsetsExecute) > 0
}

// GetConnectv1ConnectorOffsetsExecuteCalls returns the calls made to GetConnectv1ConnectorOffsetsExecute.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequest
} {
	m.lockGetConnectv1ConnectorOffsetsExecute.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsExecute.Unlock()

	return m.calls.GetConnectv1ConnectorOffsetsExecute
}

// GetConnectv1ConnectorOffsetsRequestStatus mocks base method by wrapping the associated func.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsRequestStatus(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequestStatusRequest {
	m.lockGetConnectv1ConnectorOffsetsRequestStatus.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsRequestStatus.Unlock()

	if m.GetConnectv1ConnectorOffsetsRequestStatusFunc == nil {
		panic("mocker: OffsetsConnectV1Api.GetConnectv1ConnectorOffsetsRequestStatusFunc is nil but OffsetsConnectV1Api.GetConnectv1ConnectorOffsetsRequestStatus was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.GetConnectv1ConnectorOffsetsRequestStatus = append(m.calls.GetConnectv1ConnectorOffsetsRequestStatus, call)

	return m.GetConnectv1ConnectorOffsetsRequestStatusFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// GetConnectv1ConnectorOffsetsRequestStatusCalled returns true if GetConnectv1ConnectorOffsetsRequestStatus was called at least once.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsRequestStatusCalled() bool {
	m.lockGetConnectv1ConnectorOffsetsRequestStatus.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsRequestStatus.Unlock()

	return len(m.calls.GetConnectv1ConnectorOffsetsRequestStatus) > 0
}

// GetConnectv1ConnectorOffsetsRequestStatusCalls returns the calls made to GetConnectv1ConnectorOffsetsRequestStatus.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsRequestStatusCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockGetConnectv1ConnectorOffsetsRequestStatus.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsRequestStatus.Unlock()

	return m.calls.GetConnectv1ConnectorOffsetsRequestStatus
}

// GetConnectv1ConnectorOffsetsRequestStatusExecute mocks base method by wrapping the associated func.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsRequestStatusExecute(r github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequestStatusRequest) (github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ConnectV1AlterOffsetStatus, *net_http.Response, error) {
	m.lockGetConnectv1ConnectorOffsetsRequestStatusExecute.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsRequestStatusExecute.Unlock()

	if m.GetConnectv1ConnectorOffsetsRequestStatusExecuteFunc == nil {
		panic("mocker: OffsetsConnectV1Api.GetConnectv1ConnectorOffsetsRequestStatusExecuteFunc is nil but OffsetsConnectV1Api.GetConnectv1ConnectorOffsetsRequestStatusExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequestStatusRequest
	}{
		R: r,
	}

	m.calls.GetConnectv1ConnectorOffsetsRequestStatusExecute = append(m.calls.GetConnectv1ConnectorOffsetsRequestStatusExecute, call)

	return m.GetConnectv1ConnectorOffsetsRequestStatusExecuteFunc(r)
}

// GetConnectv1ConnectorOffsetsRequestStatusExecuteCalled returns true if GetConnectv1ConnectorOffsetsRequestStatusExecute was called at least once.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsRequestStatusExecuteCalled() bool {
	m.lockGetConnectv1ConnectorOffsetsRequestStatusExecute.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsRequestStatusExecute.Unlock()

	return len(m.calls.GetConnectv1ConnectorOffsetsRequestStatusExecute) > 0
}

// GetConnectv1ConnectorOffsetsRequestStatusExecuteCalls returns the calls made to GetConnectv1ConnectorOffsetsRequestStatusExecute.
func (m *OffsetsConnectV1Api) GetConnectv1ConnectorOffsetsRequestStatusExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_internal_connect_v1.ApiGetConnectv1ConnectorOffsetsRequestStatusRequest
} {
	m.lockGetConnectv1ConnectorOffsetsRequestStatusExecute.Lock()
	defer m.lockGetConnectv1ConnectorOffsetsRequestStatusExecute.Unlock()

	return m.calls.GetConnectv1ConnectorOffsetsRequestStatusExecute
}

// Reset resets the calls made to the mocked methods.
func (m *OffsetsConnectV1Api) Reset() {
	m.lockAlterConnectv1ConnectorOffsetsRequest.Lock()
	m.calls.AlterConnectv1ConnectorOffsetsRequest = nil
	m.lockAlterConnectv1ConnectorOffsetsRequest.Unlock()
	m.lockAlterConnectv1ConnectorOffsetsRequestExecute.Lock()
	m.calls.AlterConnectv1ConnectorOffsetsRequestExecute = nil
	m.lockAlterConnectv1ConnectorOffsetsRequestExecute.Unlock()
	m.lockGetConnectv1ConnectorOffsets.Lock()
	m.calls.GetConnectv1ConnectorOffsets = nil
	m.lockGetConnectv1ConnectorOffsets.Unlock()
	m.lockGetConnectv1ConnectorOffsetsExecute.Lock()
	m.calls.GetConnectv1ConnectorOffsetsExecute = nil
	m.lockGetConnectv1ConnectorOffsetsExecute.Unlock()
	m.lockGetConnectv1ConnectorOffsetsRequestStatus.Lock()
	m.calls.GetConnectv1ConnectorOffsetsRequestStatus = nil
	m.lockGetConnectv1ConnectorOffsetsRequestStatus.Unlock()
	m.lockGetConnectv1ConnectorOffsetsRequestStatusExecute.Lock()
	m.calls.GetConnectv1ConnectorOffsetsRequestStatusExecute = nil
	m.lockGetConnectv1ConnectorOffsetsRequestStatusExecute.Unlock()
}
