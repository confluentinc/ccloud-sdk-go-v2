// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_lifecycle_v1.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_connect_v1 "github.com/confluentinc/ccloud-sdk-go-v2/connect/v1"
)

// LifecycleV1Api is a mock of LifecycleV1Api interface
type LifecycleV1Api struct {
	lockPauseConnectv1Connector sync.Mutex
	PauseConnectv1ConnectorFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiPauseConnectv1ConnectorRequest

	lockPauseConnectv1ConnectorExecute sync.Mutex
	PauseConnectv1ConnectorExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiPauseConnectv1ConnectorRequest) (*net_http.Response, error)

	lockResumeConnectv1Connector sync.Mutex
	ResumeConnectv1ConnectorFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiResumeConnectv1ConnectorRequest

	lockResumeConnectv1ConnectorExecute sync.Mutex
	ResumeConnectv1ConnectorExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiResumeConnectv1ConnectorRequest) (*net_http.Response, error)

	calls struct {
		PauseConnectv1Connector []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		PauseConnectv1ConnectorExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiPauseConnectv1ConnectorRequest
		}
		ResumeConnectv1Connector []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		ResumeConnectv1ConnectorExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiResumeConnectv1ConnectorRequest
		}
	}
}

// PauseConnectv1Connector mocks base method by wrapping the associated func.
func (m *LifecycleV1Api) PauseConnectv1Connector(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiPauseConnectv1ConnectorRequest {
	m.lockPauseConnectv1Connector.Lock()
	defer m.lockPauseConnectv1Connector.Unlock()

	if m.PauseConnectv1ConnectorFunc == nil {
		panic("mocker: LifecycleV1Api.PauseConnectv1ConnectorFunc is nil but LifecycleV1Api.PauseConnectv1Connector was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.PauseConnectv1Connector = append(m.calls.PauseConnectv1Connector, call)

	return m.PauseConnectv1ConnectorFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// PauseConnectv1ConnectorCalled returns true if PauseConnectv1Connector was called at least once.
func (m *LifecycleV1Api) PauseConnectv1ConnectorCalled() bool {
	m.lockPauseConnectv1Connector.Lock()
	defer m.lockPauseConnectv1Connector.Unlock()

	return len(m.calls.PauseConnectv1Connector) > 0
}

// PauseConnectv1ConnectorCalls returns the calls made to PauseConnectv1Connector.
func (m *LifecycleV1Api) PauseConnectv1ConnectorCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockPauseConnectv1Connector.Lock()
	defer m.lockPauseConnectv1Connector.Unlock()

	return m.calls.PauseConnectv1Connector
}

// PauseConnectv1ConnectorExecute mocks base method by wrapping the associated func.
func (m *LifecycleV1Api) PauseConnectv1ConnectorExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiPauseConnectv1ConnectorRequest) (*net_http.Response, error) {
	m.lockPauseConnectv1ConnectorExecute.Lock()
	defer m.lockPauseConnectv1ConnectorExecute.Unlock()

	if m.PauseConnectv1ConnectorExecuteFunc == nil {
		panic("mocker: LifecycleV1Api.PauseConnectv1ConnectorExecuteFunc is nil but LifecycleV1Api.PauseConnectv1ConnectorExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiPauseConnectv1ConnectorRequest
	}{
		R: r,
	}

	m.calls.PauseConnectv1ConnectorExecute = append(m.calls.PauseConnectv1ConnectorExecute, call)

	return m.PauseConnectv1ConnectorExecuteFunc(r)
}

// PauseConnectv1ConnectorExecuteCalled returns true if PauseConnectv1ConnectorExecute was called at least once.
func (m *LifecycleV1Api) PauseConnectv1ConnectorExecuteCalled() bool {
	m.lockPauseConnectv1ConnectorExecute.Lock()
	defer m.lockPauseConnectv1ConnectorExecute.Unlock()

	return len(m.calls.PauseConnectv1ConnectorExecute) > 0
}

// PauseConnectv1ConnectorExecuteCalls returns the calls made to PauseConnectv1ConnectorExecute.
func (m *LifecycleV1Api) PauseConnectv1ConnectorExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiPauseConnectv1ConnectorRequest
} {
	m.lockPauseConnectv1ConnectorExecute.Lock()
	defer m.lockPauseConnectv1ConnectorExecute.Unlock()

	return m.calls.PauseConnectv1ConnectorExecute
}

// ResumeConnectv1Connector mocks base method by wrapping the associated func.
func (m *LifecycleV1Api) ResumeConnectv1Connector(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiResumeConnectv1ConnectorRequest {
	m.lockResumeConnectv1Connector.Lock()
	defer m.lockResumeConnectv1Connector.Unlock()

	if m.ResumeConnectv1ConnectorFunc == nil {
		panic("mocker: LifecycleV1Api.ResumeConnectv1ConnectorFunc is nil but LifecycleV1Api.ResumeConnectv1Connector was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.ResumeConnectv1Connector = append(m.calls.ResumeConnectv1Connector, call)

	return m.ResumeConnectv1ConnectorFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// ResumeConnectv1ConnectorCalled returns true if ResumeConnectv1Connector was called at least once.
func (m *LifecycleV1Api) ResumeConnectv1ConnectorCalled() bool {
	m.lockResumeConnectv1Connector.Lock()
	defer m.lockResumeConnectv1Connector.Unlock()

	return len(m.calls.ResumeConnectv1Connector) > 0
}

// ResumeConnectv1ConnectorCalls returns the calls made to ResumeConnectv1Connector.
func (m *LifecycleV1Api) ResumeConnectv1ConnectorCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockResumeConnectv1Connector.Lock()
	defer m.lockResumeConnectv1Connector.Unlock()

	return m.calls.ResumeConnectv1Connector
}

// ResumeConnectv1ConnectorExecute mocks base method by wrapping the associated func.
func (m *LifecycleV1Api) ResumeConnectv1ConnectorExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiResumeConnectv1ConnectorRequest) (*net_http.Response, error) {
	m.lockResumeConnectv1ConnectorExecute.Lock()
	defer m.lockResumeConnectv1ConnectorExecute.Unlock()

	if m.ResumeConnectv1ConnectorExecuteFunc == nil {
		panic("mocker: LifecycleV1Api.ResumeConnectv1ConnectorExecuteFunc is nil but LifecycleV1Api.ResumeConnectv1ConnectorExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiResumeConnectv1ConnectorRequest
	}{
		R: r,
	}

	m.calls.ResumeConnectv1ConnectorExecute = append(m.calls.ResumeConnectv1ConnectorExecute, call)

	return m.ResumeConnectv1ConnectorExecuteFunc(r)
}

// ResumeConnectv1ConnectorExecuteCalled returns true if ResumeConnectv1ConnectorExecute was called at least once.
func (m *LifecycleV1Api) ResumeConnectv1ConnectorExecuteCalled() bool {
	m.lockResumeConnectv1ConnectorExecute.Lock()
	defer m.lockResumeConnectv1ConnectorExecute.Unlock()

	return len(m.calls.ResumeConnectv1ConnectorExecute) > 0
}

// ResumeConnectv1ConnectorExecuteCalls returns the calls made to ResumeConnectv1ConnectorExecute.
func (m *LifecycleV1Api) ResumeConnectv1ConnectorExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiResumeConnectv1ConnectorRequest
} {
	m.lockResumeConnectv1ConnectorExecute.Lock()
	defer m.lockResumeConnectv1ConnectorExecute.Unlock()

	return m.calls.ResumeConnectv1ConnectorExecute
}

// Reset resets the calls made to the mocked methods.
func (m *LifecycleV1Api) Reset() {
	m.lockPauseConnectv1Connector.Lock()
	m.calls.PauseConnectv1Connector = nil
	m.lockPauseConnectv1Connector.Unlock()
	m.lockPauseConnectv1ConnectorExecute.Lock()
	m.calls.PauseConnectv1ConnectorExecute = nil
	m.lockPauseConnectv1ConnectorExecute.Unlock()
	m.lockResumeConnectv1Connector.Lock()
	m.calls.ResumeConnectv1Connector = nil
	m.lockResumeConnectv1Connector.Unlock()
	m.lockResumeConnectv1ConnectorExecute.Lock()
	m.calls.ResumeConnectv1ConnectorExecute = nil
	m.lockResumeConnectv1ConnectorExecute.Unlock()
}
