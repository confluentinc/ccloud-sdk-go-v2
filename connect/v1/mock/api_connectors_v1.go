// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_connectors_v1.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_connect_v1 "github.com/confluentinc/ccloud-sdk-go-v2/connect/v1"
)

// ConnectorsV1Api is a mock of ConnectorsV1Api interface
type ConnectorsV1Api struct {
	lockCreateConnectv1Connector sync.Mutex
	CreateConnectv1ConnectorFunc func(ctx context.Context, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateConnectv1ConnectorRequest

	lockCreateConnectv1ConnectorExecute sync.Mutex
	CreateConnectv1ConnectorExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateConnectv1ConnectorRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ConnectV1Connector, *net_http.Response, error)

	lockCreateOrUpdateConnectv1ConnectorConfig sync.Mutex
	CreateOrUpdateConnectv1ConnectorConfigFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateOrUpdateConnectv1ConnectorConfigRequest

	lockCreateOrUpdateConnectv1ConnectorConfigExecute sync.Mutex
	CreateOrUpdateConnectv1ConnectorConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateOrUpdateConnectv1ConnectorConfigRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ConnectV1Connector, *net_http.Response, error)

	lockDeleteConnectv1Connector sync.Mutex
	DeleteConnectv1ConnectorFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiDeleteConnectv1ConnectorRequest

	lockDeleteConnectv1ConnectorExecute sync.Mutex
	DeleteConnectv1ConnectorExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiDeleteConnectv1ConnectorRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.InlineResponse200, *net_http.Response, error)

	lockGetConnectv1ConnectorConfig sync.Mutex
	GetConnectv1ConnectorConfigFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiGetConnectv1ConnectorConfigRequest

	lockGetConnectv1ConnectorConfigExecute sync.Mutex
	GetConnectv1ConnectorConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiGetConnectv1ConnectorConfigRequest) (map[string]string, *net_http.Response, error)

	lockListConnectv1Connectors sync.Mutex
	ListConnectv1ConnectorsFunc func(ctx context.Context, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsRequest

	lockListConnectv1ConnectorsExecute sync.Mutex
	ListConnectv1ConnectorsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsRequest) ([]string, *net_http.Response, error)

	lockListConnectv1ConnectorsWithExpansions sync.Mutex
	ListConnectv1ConnectorsWithExpansionsFunc func(ctx context.Context, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsWithExpansionsRequest

	lockListConnectv1ConnectorsWithExpansionsExecute sync.Mutex
	ListConnectv1ConnectorsWithExpansionsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsWithExpansionsRequest) (map[string]github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ConnectV1ConnectorExpansion, *net_http.Response, error)

	lockReadConnectv1Connector sync.Mutex
	ReadConnectv1ConnectorFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorRequest

	lockReadConnectv1ConnectorExecute sync.Mutex
	ReadConnectv1ConnectorExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ConnectV1Connector, *net_http.Response, error)

	calls struct {
		CreateConnectv1Connector []struct {
			Ctx            context.Context
			EnvironmentId  string
			KafkaClusterId string
		}
		CreateConnectv1ConnectorExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateConnectv1ConnectorRequest
		}
		CreateOrUpdateConnectv1ConnectorConfig []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		CreateOrUpdateConnectv1ConnectorConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateOrUpdateConnectv1ConnectorConfigRequest
		}
		DeleteConnectv1Connector []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		DeleteConnectv1ConnectorExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiDeleteConnectv1ConnectorRequest
		}
		GetConnectv1ConnectorConfig []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		GetConnectv1ConnectorConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiGetConnectv1ConnectorConfigRequest
		}
		ListConnectv1Connectors []struct {
			Ctx            context.Context
			EnvironmentId  string
			KafkaClusterId string
		}
		ListConnectv1ConnectorsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsRequest
		}
		ListConnectv1ConnectorsWithExpansions []struct {
			Ctx            context.Context
			EnvironmentId  string
			KafkaClusterId string
		}
		ListConnectv1ConnectorsWithExpansionsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsWithExpansionsRequest
		}
		ReadConnectv1Connector []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		ReadConnectv1ConnectorExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorRequest
		}
	}
}

// CreateConnectv1Connector mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) CreateConnectv1Connector(ctx context.Context, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateConnectv1ConnectorRequest {
	m.lockCreateConnectv1Connector.Lock()
	defer m.lockCreateConnectv1Connector.Unlock()

	if m.CreateConnectv1ConnectorFunc == nil {
		panic("mocker: ConnectorsV1Api.CreateConnectv1ConnectorFunc is nil but ConnectorsV1Api.CreateConnectv1Connector was called.")
	}

	call := struct {
		Ctx            context.Context
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.CreateConnectv1Connector = append(m.calls.CreateConnectv1Connector, call)

	return m.CreateConnectv1ConnectorFunc(ctx, environmentId, kafkaClusterId)
}

// CreateConnectv1ConnectorCalled returns true if CreateConnectv1Connector was called at least once.
func (m *ConnectorsV1Api) CreateConnectv1ConnectorCalled() bool {
	m.lockCreateConnectv1Connector.Lock()
	defer m.lockCreateConnectv1Connector.Unlock()

	return len(m.calls.CreateConnectv1Connector) > 0
}

// CreateConnectv1ConnectorCalls returns the calls made to CreateConnectv1Connector.
func (m *ConnectorsV1Api) CreateConnectv1ConnectorCalls() []struct {
	Ctx            context.Context
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockCreateConnectv1Connector.Lock()
	defer m.lockCreateConnectv1Connector.Unlock()

	return m.calls.CreateConnectv1Connector
}

// CreateConnectv1ConnectorExecute mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) CreateConnectv1ConnectorExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateConnectv1ConnectorRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ConnectV1Connector, *net_http.Response, error) {
	m.lockCreateConnectv1ConnectorExecute.Lock()
	defer m.lockCreateConnectv1ConnectorExecute.Unlock()

	if m.CreateConnectv1ConnectorExecuteFunc == nil {
		panic("mocker: ConnectorsV1Api.CreateConnectv1ConnectorExecuteFunc is nil but ConnectorsV1Api.CreateConnectv1ConnectorExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateConnectv1ConnectorRequest
	}{
		R: r,
	}

	m.calls.CreateConnectv1ConnectorExecute = append(m.calls.CreateConnectv1ConnectorExecute, call)

	return m.CreateConnectv1ConnectorExecuteFunc(r)
}

// CreateConnectv1ConnectorExecuteCalled returns true if CreateConnectv1ConnectorExecute was called at least once.
func (m *ConnectorsV1Api) CreateConnectv1ConnectorExecuteCalled() bool {
	m.lockCreateConnectv1ConnectorExecute.Lock()
	defer m.lockCreateConnectv1ConnectorExecute.Unlock()

	return len(m.calls.CreateConnectv1ConnectorExecute) > 0
}

// CreateConnectv1ConnectorExecuteCalls returns the calls made to CreateConnectv1ConnectorExecute.
func (m *ConnectorsV1Api) CreateConnectv1ConnectorExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateConnectv1ConnectorRequest
} {
	m.lockCreateConnectv1ConnectorExecute.Lock()
	defer m.lockCreateConnectv1ConnectorExecute.Unlock()

	return m.calls.CreateConnectv1ConnectorExecute
}

// CreateOrUpdateConnectv1ConnectorConfig mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) CreateOrUpdateConnectv1ConnectorConfig(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateOrUpdateConnectv1ConnectorConfigRequest {
	m.lockCreateOrUpdateConnectv1ConnectorConfig.Lock()
	defer m.lockCreateOrUpdateConnectv1ConnectorConfig.Unlock()

	if m.CreateOrUpdateConnectv1ConnectorConfigFunc == nil {
		panic("mocker: ConnectorsV1Api.CreateOrUpdateConnectv1ConnectorConfigFunc is nil but ConnectorsV1Api.CreateOrUpdateConnectv1ConnectorConfig was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.CreateOrUpdateConnectv1ConnectorConfig = append(m.calls.CreateOrUpdateConnectv1ConnectorConfig, call)

	return m.CreateOrUpdateConnectv1ConnectorConfigFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// CreateOrUpdateConnectv1ConnectorConfigCalled returns true if CreateOrUpdateConnectv1ConnectorConfig was called at least once.
func (m *ConnectorsV1Api) CreateOrUpdateConnectv1ConnectorConfigCalled() bool {
	m.lockCreateOrUpdateConnectv1ConnectorConfig.Lock()
	defer m.lockCreateOrUpdateConnectv1ConnectorConfig.Unlock()

	return len(m.calls.CreateOrUpdateConnectv1ConnectorConfig) > 0
}

// CreateOrUpdateConnectv1ConnectorConfigCalls returns the calls made to CreateOrUpdateConnectv1ConnectorConfig.
func (m *ConnectorsV1Api) CreateOrUpdateConnectv1ConnectorConfigCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockCreateOrUpdateConnectv1ConnectorConfig.Lock()
	defer m.lockCreateOrUpdateConnectv1ConnectorConfig.Unlock()

	return m.calls.CreateOrUpdateConnectv1ConnectorConfig
}

// CreateOrUpdateConnectv1ConnectorConfigExecute mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) CreateOrUpdateConnectv1ConnectorConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateOrUpdateConnectv1ConnectorConfigRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ConnectV1Connector, *net_http.Response, error) {
	m.lockCreateOrUpdateConnectv1ConnectorConfigExecute.Lock()
	defer m.lockCreateOrUpdateConnectv1ConnectorConfigExecute.Unlock()

	if m.CreateOrUpdateConnectv1ConnectorConfigExecuteFunc == nil {
		panic("mocker: ConnectorsV1Api.CreateOrUpdateConnectv1ConnectorConfigExecuteFunc is nil but ConnectorsV1Api.CreateOrUpdateConnectv1ConnectorConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateOrUpdateConnectv1ConnectorConfigRequest
	}{
		R: r,
	}

	m.calls.CreateOrUpdateConnectv1ConnectorConfigExecute = append(m.calls.CreateOrUpdateConnectv1ConnectorConfigExecute, call)

	return m.CreateOrUpdateConnectv1ConnectorConfigExecuteFunc(r)
}

// CreateOrUpdateConnectv1ConnectorConfigExecuteCalled returns true if CreateOrUpdateConnectv1ConnectorConfigExecute was called at least once.
func (m *ConnectorsV1Api) CreateOrUpdateConnectv1ConnectorConfigExecuteCalled() bool {
	m.lockCreateOrUpdateConnectv1ConnectorConfigExecute.Lock()
	defer m.lockCreateOrUpdateConnectv1ConnectorConfigExecute.Unlock()

	return len(m.calls.CreateOrUpdateConnectv1ConnectorConfigExecute) > 0
}

// CreateOrUpdateConnectv1ConnectorConfigExecuteCalls returns the calls made to CreateOrUpdateConnectv1ConnectorConfigExecute.
func (m *ConnectorsV1Api) CreateOrUpdateConnectv1ConnectorConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiCreateOrUpdateConnectv1ConnectorConfigRequest
} {
	m.lockCreateOrUpdateConnectv1ConnectorConfigExecute.Lock()
	defer m.lockCreateOrUpdateConnectv1ConnectorConfigExecute.Unlock()

	return m.calls.CreateOrUpdateConnectv1ConnectorConfigExecute
}

// DeleteConnectv1Connector mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) DeleteConnectv1Connector(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiDeleteConnectv1ConnectorRequest {
	m.lockDeleteConnectv1Connector.Lock()
	defer m.lockDeleteConnectv1Connector.Unlock()

	if m.DeleteConnectv1ConnectorFunc == nil {
		panic("mocker: ConnectorsV1Api.DeleteConnectv1ConnectorFunc is nil but ConnectorsV1Api.DeleteConnectv1Connector was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.DeleteConnectv1Connector = append(m.calls.DeleteConnectv1Connector, call)

	return m.DeleteConnectv1ConnectorFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// DeleteConnectv1ConnectorCalled returns true if DeleteConnectv1Connector was called at least once.
func (m *ConnectorsV1Api) DeleteConnectv1ConnectorCalled() bool {
	m.lockDeleteConnectv1Connector.Lock()
	defer m.lockDeleteConnectv1Connector.Unlock()

	return len(m.calls.DeleteConnectv1Connector) > 0
}

// DeleteConnectv1ConnectorCalls returns the calls made to DeleteConnectv1Connector.
func (m *ConnectorsV1Api) DeleteConnectv1ConnectorCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockDeleteConnectv1Connector.Lock()
	defer m.lockDeleteConnectv1Connector.Unlock()

	return m.calls.DeleteConnectv1Connector
}

// DeleteConnectv1ConnectorExecute mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) DeleteConnectv1ConnectorExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiDeleteConnectv1ConnectorRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.InlineResponse200, *net_http.Response, error) {
	m.lockDeleteConnectv1ConnectorExecute.Lock()
	defer m.lockDeleteConnectv1ConnectorExecute.Unlock()

	if m.DeleteConnectv1ConnectorExecuteFunc == nil {
		panic("mocker: ConnectorsV1Api.DeleteConnectv1ConnectorExecuteFunc is nil but ConnectorsV1Api.DeleteConnectv1ConnectorExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiDeleteConnectv1ConnectorRequest
	}{
		R: r,
	}

	m.calls.DeleteConnectv1ConnectorExecute = append(m.calls.DeleteConnectv1ConnectorExecute, call)

	return m.DeleteConnectv1ConnectorExecuteFunc(r)
}

// DeleteConnectv1ConnectorExecuteCalled returns true if DeleteConnectv1ConnectorExecute was called at least once.
func (m *ConnectorsV1Api) DeleteConnectv1ConnectorExecuteCalled() bool {
	m.lockDeleteConnectv1ConnectorExecute.Lock()
	defer m.lockDeleteConnectv1ConnectorExecute.Unlock()

	return len(m.calls.DeleteConnectv1ConnectorExecute) > 0
}

// DeleteConnectv1ConnectorExecuteCalls returns the calls made to DeleteConnectv1ConnectorExecute.
func (m *ConnectorsV1Api) DeleteConnectv1ConnectorExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiDeleteConnectv1ConnectorRequest
} {
	m.lockDeleteConnectv1ConnectorExecute.Lock()
	defer m.lockDeleteConnectv1ConnectorExecute.Unlock()

	return m.calls.DeleteConnectv1ConnectorExecute
}

// GetConnectv1ConnectorConfig mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) GetConnectv1ConnectorConfig(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiGetConnectv1ConnectorConfigRequest {
	m.lockGetConnectv1ConnectorConfig.Lock()
	defer m.lockGetConnectv1ConnectorConfig.Unlock()

	if m.GetConnectv1ConnectorConfigFunc == nil {
		panic("mocker: ConnectorsV1Api.GetConnectv1ConnectorConfigFunc is nil but ConnectorsV1Api.GetConnectv1ConnectorConfig was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.GetConnectv1ConnectorConfig = append(m.calls.GetConnectv1ConnectorConfig, call)

	return m.GetConnectv1ConnectorConfigFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// GetConnectv1ConnectorConfigCalled returns true if GetConnectv1ConnectorConfig was called at least once.
func (m *ConnectorsV1Api) GetConnectv1ConnectorConfigCalled() bool {
	m.lockGetConnectv1ConnectorConfig.Lock()
	defer m.lockGetConnectv1ConnectorConfig.Unlock()

	return len(m.calls.GetConnectv1ConnectorConfig) > 0
}

// GetConnectv1ConnectorConfigCalls returns the calls made to GetConnectv1ConnectorConfig.
func (m *ConnectorsV1Api) GetConnectv1ConnectorConfigCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockGetConnectv1ConnectorConfig.Lock()
	defer m.lockGetConnectv1ConnectorConfig.Unlock()

	return m.calls.GetConnectv1ConnectorConfig
}

// GetConnectv1ConnectorConfigExecute mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) GetConnectv1ConnectorConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiGetConnectv1ConnectorConfigRequest) (map[string]string, *net_http.Response, error) {
	m.lockGetConnectv1ConnectorConfigExecute.Lock()
	defer m.lockGetConnectv1ConnectorConfigExecute.Unlock()

	if m.GetConnectv1ConnectorConfigExecuteFunc == nil {
		panic("mocker: ConnectorsV1Api.GetConnectv1ConnectorConfigExecuteFunc is nil but ConnectorsV1Api.GetConnectv1ConnectorConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiGetConnectv1ConnectorConfigRequest
	}{
		R: r,
	}

	m.calls.GetConnectv1ConnectorConfigExecute = append(m.calls.GetConnectv1ConnectorConfigExecute, call)

	return m.GetConnectv1ConnectorConfigExecuteFunc(r)
}

// GetConnectv1ConnectorConfigExecuteCalled returns true if GetConnectv1ConnectorConfigExecute was called at least once.
func (m *ConnectorsV1Api) GetConnectv1ConnectorConfigExecuteCalled() bool {
	m.lockGetConnectv1ConnectorConfigExecute.Lock()
	defer m.lockGetConnectv1ConnectorConfigExecute.Unlock()

	return len(m.calls.GetConnectv1ConnectorConfigExecute) > 0
}

// GetConnectv1ConnectorConfigExecuteCalls returns the calls made to GetConnectv1ConnectorConfigExecute.
func (m *ConnectorsV1Api) GetConnectv1ConnectorConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiGetConnectv1ConnectorConfigRequest
} {
	m.lockGetConnectv1ConnectorConfigExecute.Lock()
	defer m.lockGetConnectv1ConnectorConfigExecute.Unlock()

	return m.calls.GetConnectv1ConnectorConfigExecute
}

// ListConnectv1Connectors mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) ListConnectv1Connectors(ctx context.Context, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsRequest {
	m.lockListConnectv1Connectors.Lock()
	defer m.lockListConnectv1Connectors.Unlock()

	if m.ListConnectv1ConnectorsFunc == nil {
		panic("mocker: ConnectorsV1Api.ListConnectv1ConnectorsFunc is nil but ConnectorsV1Api.ListConnectv1Connectors was called.")
	}

	call := struct {
		Ctx            context.Context
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.ListConnectv1Connectors = append(m.calls.ListConnectv1Connectors, call)

	return m.ListConnectv1ConnectorsFunc(ctx, environmentId, kafkaClusterId)
}

// ListConnectv1ConnectorsCalled returns true if ListConnectv1Connectors was called at least once.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsCalled() bool {
	m.lockListConnectv1Connectors.Lock()
	defer m.lockListConnectv1Connectors.Unlock()

	return len(m.calls.ListConnectv1Connectors) > 0
}

// ListConnectv1ConnectorsCalls returns the calls made to ListConnectv1Connectors.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsCalls() []struct {
	Ctx            context.Context
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockListConnectv1Connectors.Lock()
	defer m.lockListConnectv1Connectors.Unlock()

	return m.calls.ListConnectv1Connectors
}

// ListConnectv1ConnectorsExecute mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsRequest) ([]string, *net_http.Response, error) {
	m.lockListConnectv1ConnectorsExecute.Lock()
	defer m.lockListConnectv1ConnectorsExecute.Unlock()

	if m.ListConnectv1ConnectorsExecuteFunc == nil {
		panic("mocker: ConnectorsV1Api.ListConnectv1ConnectorsExecuteFunc is nil but ConnectorsV1Api.ListConnectv1ConnectorsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsRequest
	}{
		R: r,
	}

	m.calls.ListConnectv1ConnectorsExecute = append(m.calls.ListConnectv1ConnectorsExecute, call)

	return m.ListConnectv1ConnectorsExecuteFunc(r)
}

// ListConnectv1ConnectorsExecuteCalled returns true if ListConnectv1ConnectorsExecute was called at least once.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsExecuteCalled() bool {
	m.lockListConnectv1ConnectorsExecute.Lock()
	defer m.lockListConnectv1ConnectorsExecute.Unlock()

	return len(m.calls.ListConnectv1ConnectorsExecute) > 0
}

// ListConnectv1ConnectorsExecuteCalls returns the calls made to ListConnectv1ConnectorsExecute.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsRequest
} {
	m.lockListConnectv1ConnectorsExecute.Lock()
	defer m.lockListConnectv1ConnectorsExecute.Unlock()

	return m.calls.ListConnectv1ConnectorsExecute
}

// ListConnectv1ConnectorsWithExpansions mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsWithExpansions(ctx context.Context, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsWithExpansionsRequest {
	m.lockListConnectv1ConnectorsWithExpansions.Lock()
	defer m.lockListConnectv1ConnectorsWithExpansions.Unlock()

	if m.ListConnectv1ConnectorsWithExpansionsFunc == nil {
		panic("mocker: ConnectorsV1Api.ListConnectv1ConnectorsWithExpansionsFunc is nil but ConnectorsV1Api.ListConnectv1ConnectorsWithExpansions was called.")
	}

	call := struct {
		Ctx            context.Context
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.ListConnectv1ConnectorsWithExpansions = append(m.calls.ListConnectv1ConnectorsWithExpansions, call)

	return m.ListConnectv1ConnectorsWithExpansionsFunc(ctx, environmentId, kafkaClusterId)
}

// ListConnectv1ConnectorsWithExpansionsCalled returns true if ListConnectv1ConnectorsWithExpansions was called at least once.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsWithExpansionsCalled() bool {
	m.lockListConnectv1ConnectorsWithExpansions.Lock()
	defer m.lockListConnectv1ConnectorsWithExpansions.Unlock()

	return len(m.calls.ListConnectv1ConnectorsWithExpansions) > 0
}

// ListConnectv1ConnectorsWithExpansionsCalls returns the calls made to ListConnectv1ConnectorsWithExpansions.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsWithExpansionsCalls() []struct {
	Ctx            context.Context
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockListConnectv1ConnectorsWithExpansions.Lock()
	defer m.lockListConnectv1ConnectorsWithExpansions.Unlock()

	return m.calls.ListConnectv1ConnectorsWithExpansions
}

// ListConnectv1ConnectorsWithExpansionsExecute mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsWithExpansionsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsWithExpansionsRequest) (map[string]github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ConnectV1ConnectorExpansion, *net_http.Response, error) {
	m.lockListConnectv1ConnectorsWithExpansionsExecute.Lock()
	defer m.lockListConnectv1ConnectorsWithExpansionsExecute.Unlock()

	if m.ListConnectv1ConnectorsWithExpansionsExecuteFunc == nil {
		panic("mocker: ConnectorsV1Api.ListConnectv1ConnectorsWithExpansionsExecuteFunc is nil but ConnectorsV1Api.ListConnectv1ConnectorsWithExpansionsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsWithExpansionsRequest
	}{
		R: r,
	}

	m.calls.ListConnectv1ConnectorsWithExpansionsExecute = append(m.calls.ListConnectv1ConnectorsWithExpansionsExecute, call)

	return m.ListConnectv1ConnectorsWithExpansionsExecuteFunc(r)
}

// ListConnectv1ConnectorsWithExpansionsExecuteCalled returns true if ListConnectv1ConnectorsWithExpansionsExecute was called at least once.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsWithExpansionsExecuteCalled() bool {
	m.lockListConnectv1ConnectorsWithExpansionsExecute.Lock()
	defer m.lockListConnectv1ConnectorsWithExpansionsExecute.Unlock()

	return len(m.calls.ListConnectv1ConnectorsWithExpansionsExecute) > 0
}

// ListConnectv1ConnectorsWithExpansionsExecuteCalls returns the calls made to ListConnectv1ConnectorsWithExpansionsExecute.
func (m *ConnectorsV1Api) ListConnectv1ConnectorsWithExpansionsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorsWithExpansionsRequest
} {
	m.lockListConnectv1ConnectorsWithExpansionsExecute.Lock()
	defer m.lockListConnectv1ConnectorsWithExpansionsExecute.Unlock()

	return m.calls.ListConnectv1ConnectorsWithExpansionsExecute
}

// ReadConnectv1Connector mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) ReadConnectv1Connector(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorRequest {
	m.lockReadConnectv1Connector.Lock()
	defer m.lockReadConnectv1Connector.Unlock()

	if m.ReadConnectv1ConnectorFunc == nil {
		panic("mocker: ConnectorsV1Api.ReadConnectv1ConnectorFunc is nil but ConnectorsV1Api.ReadConnectv1Connector was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.ReadConnectv1Connector = append(m.calls.ReadConnectv1Connector, call)

	return m.ReadConnectv1ConnectorFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// ReadConnectv1ConnectorCalled returns true if ReadConnectv1Connector was called at least once.
func (m *ConnectorsV1Api) ReadConnectv1ConnectorCalled() bool {
	m.lockReadConnectv1Connector.Lock()
	defer m.lockReadConnectv1Connector.Unlock()

	return len(m.calls.ReadConnectv1Connector) > 0
}

// ReadConnectv1ConnectorCalls returns the calls made to ReadConnectv1Connector.
func (m *ConnectorsV1Api) ReadConnectv1ConnectorCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockReadConnectv1Connector.Lock()
	defer m.lockReadConnectv1Connector.Unlock()

	return m.calls.ReadConnectv1Connector
}

// ReadConnectv1ConnectorExecute mocks base method by wrapping the associated func.
func (m *ConnectorsV1Api) ReadConnectv1ConnectorExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ConnectV1Connector, *net_http.Response, error) {
	m.lockReadConnectv1ConnectorExecute.Lock()
	defer m.lockReadConnectv1ConnectorExecute.Unlock()

	if m.ReadConnectv1ConnectorExecuteFunc == nil {
		panic("mocker: ConnectorsV1Api.ReadConnectv1ConnectorExecuteFunc is nil but ConnectorsV1Api.ReadConnectv1ConnectorExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorRequest
	}{
		R: r,
	}

	m.calls.ReadConnectv1ConnectorExecute = append(m.calls.ReadConnectv1ConnectorExecute, call)

	return m.ReadConnectv1ConnectorExecuteFunc(r)
}

// ReadConnectv1ConnectorExecuteCalled returns true if ReadConnectv1ConnectorExecute was called at least once.
func (m *ConnectorsV1Api) ReadConnectv1ConnectorExecuteCalled() bool {
	m.lockReadConnectv1ConnectorExecute.Lock()
	defer m.lockReadConnectv1ConnectorExecute.Unlock()

	return len(m.calls.ReadConnectv1ConnectorExecute) > 0
}

// ReadConnectv1ConnectorExecuteCalls returns the calls made to ReadConnectv1ConnectorExecute.
func (m *ConnectorsV1Api) ReadConnectv1ConnectorExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorRequest
} {
	m.lockReadConnectv1ConnectorExecute.Lock()
	defer m.lockReadConnectv1ConnectorExecute.Unlock()

	return m.calls.ReadConnectv1ConnectorExecute
}

// Reset resets the calls made to the mocked methods.
func (m *ConnectorsV1Api) Reset() {
	m.lockCreateConnectv1Connector.Lock()
	m.calls.CreateConnectv1Connector = nil
	m.lockCreateConnectv1Connector.Unlock()
	m.lockCreateConnectv1ConnectorExecute.Lock()
	m.calls.CreateConnectv1ConnectorExecute = nil
	m.lockCreateConnectv1ConnectorExecute.Unlock()
	m.lockCreateOrUpdateConnectv1ConnectorConfig.Lock()
	m.calls.CreateOrUpdateConnectv1ConnectorConfig = nil
	m.lockCreateOrUpdateConnectv1ConnectorConfig.Unlock()
	m.lockCreateOrUpdateConnectv1ConnectorConfigExecute.Lock()
	m.calls.CreateOrUpdateConnectv1ConnectorConfigExecute = nil
	m.lockCreateOrUpdateConnectv1ConnectorConfigExecute.Unlock()
	m.lockDeleteConnectv1Connector.Lock()
	m.calls.DeleteConnectv1Connector = nil
	m.lockDeleteConnectv1Connector.Unlock()
	m.lockDeleteConnectv1ConnectorExecute.Lock()
	m.calls.DeleteConnectv1ConnectorExecute = nil
	m.lockDeleteConnectv1ConnectorExecute.Unlock()
	m.lockGetConnectv1ConnectorConfig.Lock()
	m.calls.GetConnectv1ConnectorConfig = nil
	m.lockGetConnectv1ConnectorConfig.Unlock()
	m.lockGetConnectv1ConnectorConfigExecute.Lock()
	m.calls.GetConnectv1ConnectorConfigExecute = nil
	m.lockGetConnectv1ConnectorConfigExecute.Unlock()
	m.lockListConnectv1Connectors.Lock()
	m.calls.ListConnectv1Connectors = nil
	m.lockListConnectv1Connectors.Unlock()
	m.lockListConnectv1ConnectorsExecute.Lock()
	m.calls.ListConnectv1ConnectorsExecute = nil
	m.lockListConnectv1ConnectorsExecute.Unlock()
	m.lockListConnectv1ConnectorsWithExpansions.Lock()
	m.calls.ListConnectv1ConnectorsWithExpansions = nil
	m.lockListConnectv1ConnectorsWithExpansions.Unlock()
	m.lockListConnectv1ConnectorsWithExpansionsExecute.Lock()
	m.calls.ListConnectv1ConnectorsWithExpansionsExecute = nil
	m.lockListConnectv1ConnectorsWithExpansionsExecute.Unlock()
	m.lockReadConnectv1Connector.Lock()
	m.calls.ReadConnectv1Connector = nil
	m.lockReadConnectv1Connector.Unlock()
	m.lockReadConnectv1ConnectorExecute.Lock()
	m.calls.ReadConnectv1ConnectorExecute = nil
	m.lockReadConnectv1ConnectorExecute.Unlock()
}
