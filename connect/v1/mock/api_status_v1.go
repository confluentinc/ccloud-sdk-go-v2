// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_status_v1.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_connect_v1 "github.com/confluentinc/ccloud-sdk-go-v2/connect/v1"
)

// StatusV1Api is a mock of StatusV1Api interface
type StatusV1Api struct {
	lockListConnectv1ConnectorTasks sync.Mutex
	ListConnectv1ConnectorTasksFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorTasksRequest

	lockListConnectv1ConnectorTasksExecute sync.Mutex
	ListConnectv1ConnectorTasksExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorTasksRequest) ([]map[string]interface{}, *net_http.Response, error)

	lockReadConnectv1ConnectorStatus sync.Mutex
	ReadConnectv1ConnectorStatusFunc func(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorStatusRequest

	lockReadConnectv1ConnectorStatusExecute sync.Mutex
	ReadConnectv1ConnectorStatusExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorStatusRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.InlineResponse2001, *net_http.Response, error)

	calls struct {
		ListConnectv1ConnectorTasks []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		ListConnectv1ConnectorTasksExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorTasksRequest
		}
		ReadConnectv1ConnectorStatus []struct {
			Ctx            context.Context
			ConnectorName  string
			EnvironmentId  string
			KafkaClusterId string
		}
		ReadConnectv1ConnectorStatusExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorStatusRequest
		}
	}
}

// ListConnectv1ConnectorTasks mocks base method by wrapping the associated func.
func (m *StatusV1Api) ListConnectv1ConnectorTasks(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorTasksRequest {
	m.lockListConnectv1ConnectorTasks.Lock()
	defer m.lockListConnectv1ConnectorTasks.Unlock()

	if m.ListConnectv1ConnectorTasksFunc == nil {
		panic("mocker: StatusV1Api.ListConnectv1ConnectorTasksFunc is nil but StatusV1Api.ListConnectv1ConnectorTasks was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.ListConnectv1ConnectorTasks = append(m.calls.ListConnectv1ConnectorTasks, call)

	return m.ListConnectv1ConnectorTasksFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// ListConnectv1ConnectorTasksCalled returns true if ListConnectv1ConnectorTasks was called at least once.
func (m *StatusV1Api) ListConnectv1ConnectorTasksCalled() bool {
	m.lockListConnectv1ConnectorTasks.Lock()
	defer m.lockListConnectv1ConnectorTasks.Unlock()

	return len(m.calls.ListConnectv1ConnectorTasks) > 0
}

// ListConnectv1ConnectorTasksCalls returns the calls made to ListConnectv1ConnectorTasks.
func (m *StatusV1Api) ListConnectv1ConnectorTasksCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockListConnectv1ConnectorTasks.Lock()
	defer m.lockListConnectv1ConnectorTasks.Unlock()

	return m.calls.ListConnectv1ConnectorTasks
}

// ListConnectv1ConnectorTasksExecute mocks base method by wrapping the associated func.
func (m *StatusV1Api) ListConnectv1ConnectorTasksExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorTasksRequest) ([]map[string]interface{}, *net_http.Response, error) {
	m.lockListConnectv1ConnectorTasksExecute.Lock()
	defer m.lockListConnectv1ConnectorTasksExecute.Unlock()

	if m.ListConnectv1ConnectorTasksExecuteFunc == nil {
		panic("mocker: StatusV1Api.ListConnectv1ConnectorTasksExecuteFunc is nil but StatusV1Api.ListConnectv1ConnectorTasksExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorTasksRequest
	}{
		R: r,
	}

	m.calls.ListConnectv1ConnectorTasksExecute = append(m.calls.ListConnectv1ConnectorTasksExecute, call)

	return m.ListConnectv1ConnectorTasksExecuteFunc(r)
}

// ListConnectv1ConnectorTasksExecuteCalled returns true if ListConnectv1ConnectorTasksExecute was called at least once.
func (m *StatusV1Api) ListConnectv1ConnectorTasksExecuteCalled() bool {
	m.lockListConnectv1ConnectorTasksExecute.Lock()
	defer m.lockListConnectv1ConnectorTasksExecute.Unlock()

	return len(m.calls.ListConnectv1ConnectorTasksExecute) > 0
}

// ListConnectv1ConnectorTasksExecuteCalls returns the calls made to ListConnectv1ConnectorTasksExecute.
func (m *StatusV1Api) ListConnectv1ConnectorTasksExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiListConnectv1ConnectorTasksRequest
} {
	m.lockListConnectv1ConnectorTasksExecute.Lock()
	defer m.lockListConnectv1ConnectorTasksExecute.Unlock()

	return m.calls.ListConnectv1ConnectorTasksExecute
}

// ReadConnectv1ConnectorStatus mocks base method by wrapping the associated func.
func (m *StatusV1Api) ReadConnectv1ConnectorStatus(ctx context.Context, connectorName, environmentId, kafkaClusterId string) github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorStatusRequest {
	m.lockReadConnectv1ConnectorStatus.Lock()
	defer m.lockReadConnectv1ConnectorStatus.Unlock()

	if m.ReadConnectv1ConnectorStatusFunc == nil {
		panic("mocker: StatusV1Api.ReadConnectv1ConnectorStatusFunc is nil but StatusV1Api.ReadConnectv1ConnectorStatus was called.")
	}

	call := struct {
		Ctx            context.Context
		ConnectorName  string
		EnvironmentId  string
		KafkaClusterId string
	}{
		Ctx:            ctx,
		ConnectorName:  connectorName,
		EnvironmentId:  environmentId,
		KafkaClusterId: kafkaClusterId,
	}

	m.calls.ReadConnectv1ConnectorStatus = append(m.calls.ReadConnectv1ConnectorStatus, call)

	return m.ReadConnectv1ConnectorStatusFunc(ctx, connectorName, environmentId, kafkaClusterId)
}

// ReadConnectv1ConnectorStatusCalled returns true if ReadConnectv1ConnectorStatus was called at least once.
func (m *StatusV1Api) ReadConnectv1ConnectorStatusCalled() bool {
	m.lockReadConnectv1ConnectorStatus.Lock()
	defer m.lockReadConnectv1ConnectorStatus.Unlock()

	return len(m.calls.ReadConnectv1ConnectorStatus) > 0
}

// ReadConnectv1ConnectorStatusCalls returns the calls made to ReadConnectv1ConnectorStatus.
func (m *StatusV1Api) ReadConnectv1ConnectorStatusCalls() []struct {
	Ctx            context.Context
	ConnectorName  string
	EnvironmentId  string
	KafkaClusterId string
} {
	m.lockReadConnectv1ConnectorStatus.Lock()
	defer m.lockReadConnectv1ConnectorStatus.Unlock()

	return m.calls.ReadConnectv1ConnectorStatus
}

// ReadConnectv1ConnectorStatusExecute mocks base method by wrapping the associated func.
func (m *StatusV1Api) ReadConnectv1ConnectorStatusExecute(r github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorStatusRequest) (github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.InlineResponse2001, *net_http.Response, error) {
	m.lockReadConnectv1ConnectorStatusExecute.Lock()
	defer m.lockReadConnectv1ConnectorStatusExecute.Unlock()

	if m.ReadConnectv1ConnectorStatusExecuteFunc == nil {
		panic("mocker: StatusV1Api.ReadConnectv1ConnectorStatusExecuteFunc is nil but StatusV1Api.ReadConnectv1ConnectorStatusExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorStatusRequest
	}{
		R: r,
	}

	m.calls.ReadConnectv1ConnectorStatusExecute = append(m.calls.ReadConnectv1ConnectorStatusExecute, call)

	return m.ReadConnectv1ConnectorStatusExecuteFunc(r)
}

// ReadConnectv1ConnectorStatusExecuteCalled returns true if ReadConnectv1ConnectorStatusExecute was called at least once.
func (m *StatusV1Api) ReadConnectv1ConnectorStatusExecuteCalled() bool {
	m.lockReadConnectv1ConnectorStatusExecute.Lock()
	defer m.lockReadConnectv1ConnectorStatusExecute.Unlock()

	return len(m.calls.ReadConnectv1ConnectorStatusExecute) > 0
}

// ReadConnectv1ConnectorStatusExecuteCalls returns the calls made to ReadConnectv1ConnectorStatusExecute.
func (m *StatusV1Api) ReadConnectv1ConnectorStatusExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_connect_v1.ApiReadConnectv1ConnectorStatusRequest
} {
	m.lockReadConnectv1ConnectorStatusExecute.Lock()
	defer m.lockReadConnectv1ConnectorStatusExecute.Unlock()

	return m.calls.ReadConnectv1ConnectorStatusExecute
}

// Reset resets the calls made to the mocked methods.
func (m *StatusV1Api) Reset() {
	m.lockListConnectv1ConnectorTasks.Lock()
	m.calls.ListConnectv1ConnectorTasks = nil
	m.lockListConnectv1ConnectorTasks.Unlock()
	m.lockListConnectv1ConnectorTasksExecute.Lock()
	m.calls.ListConnectv1ConnectorTasksExecute = nil
	m.lockListConnectv1ConnectorTasksExecute.Unlock()
	m.lockReadConnectv1ConnectorStatus.Lock()
	m.calls.ReadConnectv1ConnectorStatus = nil
	m.lockReadConnectv1ConnectorStatus.Unlock()
	m.lockReadConnectv1ConnectorStatusExecute.Lock()
	m.calls.ReadConnectv1ConnectorStatusExecute = nil
	m.lockReadConnectv1ConnectorStatusExecute.Unlock()
}
