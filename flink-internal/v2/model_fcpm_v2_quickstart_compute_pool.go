// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Compute Pool Management API - Internal endpoints

This is the Flink Compute Pool management API.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// FcpmV2QuickstartComputePool Quickstart compute pool for the EnvironmentId + Region + Cloud 
type FcpmV2QuickstartComputePool struct {
	// The environment for which quickstart a compute pool. 
	EnvironmentId string `json:"environment_id,omitempty"`
	// The region for which quickstart a compute pool. 
	Region string `json:"region,omitempty"`
	// The cloud for which quickstart a compute pool. 
	Cloud string `json:"cloud,omitempty"`
	// The id of the compute pool. 
	ComputePoolId *string `json:"compute_pool_id,omitempty"`
	// The display_name of the compute pool. 
	DisplayName *string `json:"display_name,omitempty"`
	// The max_cfu of the compute pool. 
	MaxCfu *int32 `json:"max_cfu,omitempty"`
}

// NewFcpmV2QuickstartComputePool instantiates a new FcpmV2QuickstartComputePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFcpmV2QuickstartComputePool(environmentId string, region string, cloud string) *FcpmV2QuickstartComputePool {
	this := FcpmV2QuickstartComputePool{}
	this.EnvironmentId = environmentId
	this.Region = region
	this.Cloud = cloud
	return &this
}

// NewFcpmV2QuickstartComputePoolWithDefaults instantiates a new FcpmV2QuickstartComputePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFcpmV2QuickstartComputePoolWithDefaults() *FcpmV2QuickstartComputePool {
	this := FcpmV2QuickstartComputePool{}
	return &this
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *FcpmV2QuickstartComputePool) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *FcpmV2QuickstartComputePool) GetEnvironmentIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *FcpmV2QuickstartComputePool) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetRegion returns the Region field value
func (o *FcpmV2QuickstartComputePool) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *FcpmV2QuickstartComputePool) GetRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *FcpmV2QuickstartComputePool) SetRegion(v string) {
	o.Region = v
}

// GetCloud returns the Cloud field value
func (o *FcpmV2QuickstartComputePool) GetCloud() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *FcpmV2QuickstartComputePool) GetCloudOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *FcpmV2QuickstartComputePool) SetCloud(v string) {
	o.Cloud = v
}

// GetComputePoolId returns the ComputePoolId field value if set, zero value otherwise.
func (o *FcpmV2QuickstartComputePool) GetComputePoolId() string {
	if o == nil || o.ComputePoolId == nil {
		var ret string
		return ret
	}
	return *o.ComputePoolId
}

// GetComputePoolIdOk returns a tuple with the ComputePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2QuickstartComputePool) GetComputePoolIdOk() (*string, bool) {
	if o == nil || o.ComputePoolId == nil {
		return nil, false
	}
	return o.ComputePoolId, true
}

// HasComputePoolId returns a boolean if a field has been set.
func (o *FcpmV2QuickstartComputePool) HasComputePoolId() bool {
	if o != nil && o.ComputePoolId != nil {
		return true
	}

	return false
}

// SetComputePoolId gets a reference to the given string and assigns it to the ComputePoolId field.
func (o *FcpmV2QuickstartComputePool) SetComputePoolId(v string) {
	o.ComputePoolId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FcpmV2QuickstartComputePool) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2QuickstartComputePool) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FcpmV2QuickstartComputePool) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FcpmV2QuickstartComputePool) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMaxCfu returns the MaxCfu field value if set, zero value otherwise.
func (o *FcpmV2QuickstartComputePool) GetMaxCfu() int32 {
	if o == nil || o.MaxCfu == nil {
		var ret int32
		return ret
	}
	return *o.MaxCfu
}

// GetMaxCfuOk returns a tuple with the MaxCfu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2QuickstartComputePool) GetMaxCfuOk() (*int32, bool) {
	if o == nil || o.MaxCfu == nil {
		return nil, false
	}
	return o.MaxCfu, true
}

// HasMaxCfu returns a boolean if a field has been set.
func (o *FcpmV2QuickstartComputePool) HasMaxCfu() bool {
	if o != nil && o.MaxCfu != nil {
		return true
	}

	return false
}

// SetMaxCfu gets a reference to the given int32 and assigns it to the MaxCfu field.
func (o *FcpmV2QuickstartComputePool) SetMaxCfu(v int32) {
	o.MaxCfu = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *FcpmV2QuickstartComputePool) Redact() {
    o.recurseRedact(&o.EnvironmentId)
    o.recurseRedact(&o.Region)
    o.recurseRedact(&o.Cloud)
    o.recurseRedact(o.ComputePoolId)
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.MaxCfu)
}

func (o *FcpmV2QuickstartComputePool) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o FcpmV2QuickstartComputePool) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o FcpmV2QuickstartComputePool) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if true {
		toSerialize["region"] = o.Region
	}
	if true {
		toSerialize["cloud"] = o.Cloud
	}
	if o.ComputePoolId != nil {
		toSerialize["compute_pool_id"] = o.ComputePoolId
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.MaxCfu != nil {
		toSerialize["max_cfu"] = o.MaxCfu
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableFcpmV2QuickstartComputePool struct {
	value *FcpmV2QuickstartComputePool
	isSet bool
}

func (v NullableFcpmV2QuickstartComputePool) Get() *FcpmV2QuickstartComputePool {
	return v.value
}

func (v *NullableFcpmV2QuickstartComputePool) Set(val *FcpmV2QuickstartComputePool) {
	v.value = val
	v.isSet = true
}

func (v NullableFcpmV2QuickstartComputePool) IsSet() bool {
	return v.isSet
}

func (v *NullableFcpmV2QuickstartComputePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcpmV2QuickstartComputePool(val *FcpmV2QuickstartComputePool) *NullableFcpmV2QuickstartComputePool {
	return &NullableFcpmV2QuickstartComputePool{value: val, isSet: true}
}

func (v NullableFcpmV2QuickstartComputePool) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableFcpmV2QuickstartComputePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


