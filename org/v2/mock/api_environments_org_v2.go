// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_environments_org_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_org_v2 "github.com/confluentinc/ccloud-sdk-go-v2/org/v2"
)

// EnvironmentsOrgV2Api is a mock of EnvironmentsOrgV2Api interface
type EnvironmentsOrgV2Api struct {
	lockCreateOrgV2Environment sync.Mutex
	CreateOrgV2EnvironmentFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiCreateOrgV2EnvironmentRequest

	lockCreateOrgV2EnvironmentExecute sync.Mutex
	CreateOrgV2EnvironmentExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiCreateOrgV2EnvironmentRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Environment, *net_http.Response, error)

	lockDeleteOrgV2Environment sync.Mutex
	DeleteOrgV2EnvironmentFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiDeleteOrgV2EnvironmentRequest

	lockDeleteOrgV2EnvironmentExecute sync.Mutex
	DeleteOrgV2EnvironmentExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiDeleteOrgV2EnvironmentRequest) (*net_http.Response, error)

	lockGetOrgV2Environment sync.Mutex
	GetOrgV2EnvironmentFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2EnvironmentRequest

	lockGetOrgV2EnvironmentExecute sync.Mutex
	GetOrgV2EnvironmentExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2EnvironmentRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Environment, *net_http.Response, error)

	lockListOrgV2Environments sync.Mutex
	ListOrgV2EnvironmentsFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2EnvironmentsRequest

	lockListOrgV2EnvironmentsExecute sync.Mutex
	ListOrgV2EnvironmentsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2EnvironmentsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2EnvironmentList, *net_http.Response, error)

	lockUpdateOrgV2Environment sync.Mutex
	UpdateOrgV2EnvironmentFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2EnvironmentRequest

	lockUpdateOrgV2EnvironmentExecute sync.Mutex
	UpdateOrgV2EnvironmentExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2EnvironmentRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Environment, *net_http.Response, error)

	calls struct {
		CreateOrgV2Environment []struct {
			Ctx context.Context
		}
		CreateOrgV2EnvironmentExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiCreateOrgV2EnvironmentRequest
		}
		DeleteOrgV2Environment []struct {
			Ctx context.Context
			Id  string
		}
		DeleteOrgV2EnvironmentExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiDeleteOrgV2EnvironmentRequest
		}
		GetOrgV2Environment []struct {
			Ctx context.Context
			Id  string
		}
		GetOrgV2EnvironmentExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2EnvironmentRequest
		}
		ListOrgV2Environments []struct {
			Ctx context.Context
		}
		ListOrgV2EnvironmentsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2EnvironmentsRequest
		}
		UpdateOrgV2Environment []struct {
			Ctx context.Context
			Id  string
		}
		UpdateOrgV2EnvironmentExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2EnvironmentRequest
		}
	}
}

// CreateOrgV2Environment mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) CreateOrgV2Environment(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiCreateOrgV2EnvironmentRequest {
	m.lockCreateOrgV2Environment.Lock()
	defer m.lockCreateOrgV2Environment.Unlock()

	if m.CreateOrgV2EnvironmentFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.CreateOrgV2EnvironmentFunc is nil but EnvironmentsOrgV2Api.CreateOrgV2Environment was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.CreateOrgV2Environment = append(m.calls.CreateOrgV2Environment, call)

	return m.CreateOrgV2EnvironmentFunc(ctx)
}

// CreateOrgV2EnvironmentCalled returns true if CreateOrgV2Environment was called at least once.
func (m *EnvironmentsOrgV2Api) CreateOrgV2EnvironmentCalled() bool {
	m.lockCreateOrgV2Environment.Lock()
	defer m.lockCreateOrgV2Environment.Unlock()

	return len(m.calls.CreateOrgV2Environment) > 0
}

// CreateOrgV2EnvironmentCalls returns the calls made to CreateOrgV2Environment.
func (m *EnvironmentsOrgV2Api) CreateOrgV2EnvironmentCalls() []struct {
	Ctx context.Context
} {
	m.lockCreateOrgV2Environment.Lock()
	defer m.lockCreateOrgV2Environment.Unlock()

	return m.calls.CreateOrgV2Environment
}

// CreateOrgV2EnvironmentExecute mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) CreateOrgV2EnvironmentExecute(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiCreateOrgV2EnvironmentRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Environment, *net_http.Response, error) {
	m.lockCreateOrgV2EnvironmentExecute.Lock()
	defer m.lockCreateOrgV2EnvironmentExecute.Unlock()

	if m.CreateOrgV2EnvironmentExecuteFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.CreateOrgV2EnvironmentExecuteFunc is nil but EnvironmentsOrgV2Api.CreateOrgV2EnvironmentExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiCreateOrgV2EnvironmentRequest
	}{
		R: r,
	}

	m.calls.CreateOrgV2EnvironmentExecute = append(m.calls.CreateOrgV2EnvironmentExecute, call)

	return m.CreateOrgV2EnvironmentExecuteFunc(r)
}

// CreateOrgV2EnvironmentExecuteCalled returns true if CreateOrgV2EnvironmentExecute was called at least once.
func (m *EnvironmentsOrgV2Api) CreateOrgV2EnvironmentExecuteCalled() bool {
	m.lockCreateOrgV2EnvironmentExecute.Lock()
	defer m.lockCreateOrgV2EnvironmentExecute.Unlock()

	return len(m.calls.CreateOrgV2EnvironmentExecute) > 0
}

// CreateOrgV2EnvironmentExecuteCalls returns the calls made to CreateOrgV2EnvironmentExecute.
func (m *EnvironmentsOrgV2Api) CreateOrgV2EnvironmentExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiCreateOrgV2EnvironmentRequest
} {
	m.lockCreateOrgV2EnvironmentExecute.Lock()
	defer m.lockCreateOrgV2EnvironmentExecute.Unlock()

	return m.calls.CreateOrgV2EnvironmentExecute
}

// DeleteOrgV2Environment mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) DeleteOrgV2Environment(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiDeleteOrgV2EnvironmentRequest {
	m.lockDeleteOrgV2Environment.Lock()
	defer m.lockDeleteOrgV2Environment.Unlock()

	if m.DeleteOrgV2EnvironmentFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.DeleteOrgV2EnvironmentFunc is nil but EnvironmentsOrgV2Api.DeleteOrgV2Environment was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.DeleteOrgV2Environment = append(m.calls.DeleteOrgV2Environment, call)

	return m.DeleteOrgV2EnvironmentFunc(ctx, id)
}

// DeleteOrgV2EnvironmentCalled returns true if DeleteOrgV2Environment was called at least once.
func (m *EnvironmentsOrgV2Api) DeleteOrgV2EnvironmentCalled() bool {
	m.lockDeleteOrgV2Environment.Lock()
	defer m.lockDeleteOrgV2Environment.Unlock()

	return len(m.calls.DeleteOrgV2Environment) > 0
}

// DeleteOrgV2EnvironmentCalls returns the calls made to DeleteOrgV2Environment.
func (m *EnvironmentsOrgV2Api) DeleteOrgV2EnvironmentCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockDeleteOrgV2Environment.Lock()
	defer m.lockDeleteOrgV2Environment.Unlock()

	return m.calls.DeleteOrgV2Environment
}

// DeleteOrgV2EnvironmentExecute mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) DeleteOrgV2EnvironmentExecute(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiDeleteOrgV2EnvironmentRequest) (*net_http.Response, error) {
	m.lockDeleteOrgV2EnvironmentExecute.Lock()
	defer m.lockDeleteOrgV2EnvironmentExecute.Unlock()

	if m.DeleteOrgV2EnvironmentExecuteFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.DeleteOrgV2EnvironmentExecuteFunc is nil but EnvironmentsOrgV2Api.DeleteOrgV2EnvironmentExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiDeleteOrgV2EnvironmentRequest
	}{
		R: r,
	}

	m.calls.DeleteOrgV2EnvironmentExecute = append(m.calls.DeleteOrgV2EnvironmentExecute, call)

	return m.DeleteOrgV2EnvironmentExecuteFunc(r)
}

// DeleteOrgV2EnvironmentExecuteCalled returns true if DeleteOrgV2EnvironmentExecute was called at least once.
func (m *EnvironmentsOrgV2Api) DeleteOrgV2EnvironmentExecuteCalled() bool {
	m.lockDeleteOrgV2EnvironmentExecute.Lock()
	defer m.lockDeleteOrgV2EnvironmentExecute.Unlock()

	return len(m.calls.DeleteOrgV2EnvironmentExecute) > 0
}

// DeleteOrgV2EnvironmentExecuteCalls returns the calls made to DeleteOrgV2EnvironmentExecute.
func (m *EnvironmentsOrgV2Api) DeleteOrgV2EnvironmentExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiDeleteOrgV2EnvironmentRequest
} {
	m.lockDeleteOrgV2EnvironmentExecute.Lock()
	defer m.lockDeleteOrgV2EnvironmentExecute.Unlock()

	return m.calls.DeleteOrgV2EnvironmentExecute
}

// GetOrgV2Environment mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) GetOrgV2Environment(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2EnvironmentRequest {
	m.lockGetOrgV2Environment.Lock()
	defer m.lockGetOrgV2Environment.Unlock()

	if m.GetOrgV2EnvironmentFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.GetOrgV2EnvironmentFunc is nil but EnvironmentsOrgV2Api.GetOrgV2Environment was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetOrgV2Environment = append(m.calls.GetOrgV2Environment, call)

	return m.GetOrgV2EnvironmentFunc(ctx, id)
}

// GetOrgV2EnvironmentCalled returns true if GetOrgV2Environment was called at least once.
func (m *EnvironmentsOrgV2Api) GetOrgV2EnvironmentCalled() bool {
	m.lockGetOrgV2Environment.Lock()
	defer m.lockGetOrgV2Environment.Unlock()

	return len(m.calls.GetOrgV2Environment) > 0
}

// GetOrgV2EnvironmentCalls returns the calls made to GetOrgV2Environment.
func (m *EnvironmentsOrgV2Api) GetOrgV2EnvironmentCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetOrgV2Environment.Lock()
	defer m.lockGetOrgV2Environment.Unlock()

	return m.calls.GetOrgV2Environment
}

// GetOrgV2EnvironmentExecute mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) GetOrgV2EnvironmentExecute(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2EnvironmentRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Environment, *net_http.Response, error) {
	m.lockGetOrgV2EnvironmentExecute.Lock()
	defer m.lockGetOrgV2EnvironmentExecute.Unlock()

	if m.GetOrgV2EnvironmentExecuteFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.GetOrgV2EnvironmentExecuteFunc is nil but EnvironmentsOrgV2Api.GetOrgV2EnvironmentExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2EnvironmentRequest
	}{
		R: r,
	}

	m.calls.GetOrgV2EnvironmentExecute = append(m.calls.GetOrgV2EnvironmentExecute, call)

	return m.GetOrgV2EnvironmentExecuteFunc(r)
}

// GetOrgV2EnvironmentExecuteCalled returns true if GetOrgV2EnvironmentExecute was called at least once.
func (m *EnvironmentsOrgV2Api) GetOrgV2EnvironmentExecuteCalled() bool {
	m.lockGetOrgV2EnvironmentExecute.Lock()
	defer m.lockGetOrgV2EnvironmentExecute.Unlock()

	return len(m.calls.GetOrgV2EnvironmentExecute) > 0
}

// GetOrgV2EnvironmentExecuteCalls returns the calls made to GetOrgV2EnvironmentExecute.
func (m *EnvironmentsOrgV2Api) GetOrgV2EnvironmentExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2EnvironmentRequest
} {
	m.lockGetOrgV2EnvironmentExecute.Lock()
	defer m.lockGetOrgV2EnvironmentExecute.Unlock()

	return m.calls.GetOrgV2EnvironmentExecute
}

// ListOrgV2Environments mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) ListOrgV2Environments(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2EnvironmentsRequest {
	m.lockListOrgV2Environments.Lock()
	defer m.lockListOrgV2Environments.Unlock()

	if m.ListOrgV2EnvironmentsFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.ListOrgV2EnvironmentsFunc is nil but EnvironmentsOrgV2Api.ListOrgV2Environments was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListOrgV2Environments = append(m.calls.ListOrgV2Environments, call)

	return m.ListOrgV2EnvironmentsFunc(ctx)
}

// ListOrgV2EnvironmentsCalled returns true if ListOrgV2Environments was called at least once.
func (m *EnvironmentsOrgV2Api) ListOrgV2EnvironmentsCalled() bool {
	m.lockListOrgV2Environments.Lock()
	defer m.lockListOrgV2Environments.Unlock()

	return len(m.calls.ListOrgV2Environments) > 0
}

// ListOrgV2EnvironmentsCalls returns the calls made to ListOrgV2Environments.
func (m *EnvironmentsOrgV2Api) ListOrgV2EnvironmentsCalls() []struct {
	Ctx context.Context
} {
	m.lockListOrgV2Environments.Lock()
	defer m.lockListOrgV2Environments.Unlock()

	return m.calls.ListOrgV2Environments
}

// ListOrgV2EnvironmentsExecute mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) ListOrgV2EnvironmentsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2EnvironmentsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2EnvironmentList, *net_http.Response, error) {
	m.lockListOrgV2EnvironmentsExecute.Lock()
	defer m.lockListOrgV2EnvironmentsExecute.Unlock()

	if m.ListOrgV2EnvironmentsExecuteFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.ListOrgV2EnvironmentsExecuteFunc is nil but EnvironmentsOrgV2Api.ListOrgV2EnvironmentsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2EnvironmentsRequest
	}{
		R: r,
	}

	m.calls.ListOrgV2EnvironmentsExecute = append(m.calls.ListOrgV2EnvironmentsExecute, call)

	return m.ListOrgV2EnvironmentsExecuteFunc(r)
}

// ListOrgV2EnvironmentsExecuteCalled returns true if ListOrgV2EnvironmentsExecute was called at least once.
func (m *EnvironmentsOrgV2Api) ListOrgV2EnvironmentsExecuteCalled() bool {
	m.lockListOrgV2EnvironmentsExecute.Lock()
	defer m.lockListOrgV2EnvironmentsExecute.Unlock()

	return len(m.calls.ListOrgV2EnvironmentsExecute) > 0
}

// ListOrgV2EnvironmentsExecuteCalls returns the calls made to ListOrgV2EnvironmentsExecute.
func (m *EnvironmentsOrgV2Api) ListOrgV2EnvironmentsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2EnvironmentsRequest
} {
	m.lockListOrgV2EnvironmentsExecute.Lock()
	defer m.lockListOrgV2EnvironmentsExecute.Unlock()

	return m.calls.ListOrgV2EnvironmentsExecute
}

// UpdateOrgV2Environment mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) UpdateOrgV2Environment(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2EnvironmentRequest {
	m.lockUpdateOrgV2Environment.Lock()
	defer m.lockUpdateOrgV2Environment.Unlock()

	if m.UpdateOrgV2EnvironmentFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.UpdateOrgV2EnvironmentFunc is nil but EnvironmentsOrgV2Api.UpdateOrgV2Environment was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.UpdateOrgV2Environment = append(m.calls.UpdateOrgV2Environment, call)

	return m.UpdateOrgV2EnvironmentFunc(ctx, id)
}

// UpdateOrgV2EnvironmentCalled returns true if UpdateOrgV2Environment was called at least once.
func (m *EnvironmentsOrgV2Api) UpdateOrgV2EnvironmentCalled() bool {
	m.lockUpdateOrgV2Environment.Lock()
	defer m.lockUpdateOrgV2Environment.Unlock()

	return len(m.calls.UpdateOrgV2Environment) > 0
}

// UpdateOrgV2EnvironmentCalls returns the calls made to UpdateOrgV2Environment.
func (m *EnvironmentsOrgV2Api) UpdateOrgV2EnvironmentCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockUpdateOrgV2Environment.Lock()
	defer m.lockUpdateOrgV2Environment.Unlock()

	return m.calls.UpdateOrgV2Environment
}

// UpdateOrgV2EnvironmentExecute mocks base method by wrapping the associated func.
func (m *EnvironmentsOrgV2Api) UpdateOrgV2EnvironmentExecute(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2EnvironmentRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Environment, *net_http.Response, error) {
	m.lockUpdateOrgV2EnvironmentExecute.Lock()
	defer m.lockUpdateOrgV2EnvironmentExecute.Unlock()

	if m.UpdateOrgV2EnvironmentExecuteFunc == nil {
		panic("mocker: EnvironmentsOrgV2Api.UpdateOrgV2EnvironmentExecuteFunc is nil but EnvironmentsOrgV2Api.UpdateOrgV2EnvironmentExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2EnvironmentRequest
	}{
		R: r,
	}

	m.calls.UpdateOrgV2EnvironmentExecute = append(m.calls.UpdateOrgV2EnvironmentExecute, call)

	return m.UpdateOrgV2EnvironmentExecuteFunc(r)
}

// UpdateOrgV2EnvironmentExecuteCalled returns true if UpdateOrgV2EnvironmentExecute was called at least once.
func (m *EnvironmentsOrgV2Api) UpdateOrgV2EnvironmentExecuteCalled() bool {
	m.lockUpdateOrgV2EnvironmentExecute.Lock()
	defer m.lockUpdateOrgV2EnvironmentExecute.Unlock()

	return len(m.calls.UpdateOrgV2EnvironmentExecute) > 0
}

// UpdateOrgV2EnvironmentExecuteCalls returns the calls made to UpdateOrgV2EnvironmentExecute.
func (m *EnvironmentsOrgV2Api) UpdateOrgV2EnvironmentExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2EnvironmentRequest
} {
	m.lockUpdateOrgV2EnvironmentExecute.Lock()
	defer m.lockUpdateOrgV2EnvironmentExecute.Unlock()

	return m.calls.UpdateOrgV2EnvironmentExecute
}

// Reset resets the calls made to the mocked methods.
func (m *EnvironmentsOrgV2Api) Reset() {
	m.lockCreateOrgV2Environment.Lock()
	m.calls.CreateOrgV2Environment = nil
	m.lockCreateOrgV2Environment.Unlock()
	m.lockCreateOrgV2EnvironmentExecute.Lock()
	m.calls.CreateOrgV2EnvironmentExecute = nil
	m.lockCreateOrgV2EnvironmentExecute.Unlock()
	m.lockDeleteOrgV2Environment.Lock()
	m.calls.DeleteOrgV2Environment = nil
	m.lockDeleteOrgV2Environment.Unlock()
	m.lockDeleteOrgV2EnvironmentExecute.Lock()
	m.calls.DeleteOrgV2EnvironmentExecute = nil
	m.lockDeleteOrgV2EnvironmentExecute.Unlock()
	m.lockGetOrgV2Environment.Lock()
	m.calls.GetOrgV2Environment = nil
	m.lockGetOrgV2Environment.Unlock()
	m.lockGetOrgV2EnvironmentExecute.Lock()
	m.calls.GetOrgV2EnvironmentExecute = nil
	m.lockGetOrgV2EnvironmentExecute.Unlock()
	m.lockListOrgV2Environments.Lock()
	m.calls.ListOrgV2Environments = nil
	m.lockListOrgV2Environments.Unlock()
	m.lockListOrgV2EnvironmentsExecute.Lock()
	m.calls.ListOrgV2EnvironmentsExecute = nil
	m.lockListOrgV2EnvironmentsExecute.Unlock()
	m.lockUpdateOrgV2Environment.Lock()
	m.calls.UpdateOrgV2Environment = nil
	m.lockUpdateOrgV2Environment.Unlock()
	m.lockUpdateOrgV2EnvironmentExecute.Lock()
	m.calls.UpdateOrgV2EnvironmentExecute = nil
	m.lockUpdateOrgV2EnvironmentExecute.Unlock()
}
