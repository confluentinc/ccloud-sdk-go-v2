// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_organizations_org_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_org_v2 "github.com/confluentinc/ccloud-sdk-go-v2/org/v2"
)

// OrganizationsOrgV2Api is a mock of OrganizationsOrgV2Api interface
type OrganizationsOrgV2Api struct {
	lockGetOrgV2Organization sync.Mutex
	GetOrgV2OrganizationFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2OrganizationRequest

	lockGetOrgV2OrganizationExecute sync.Mutex
	GetOrgV2OrganizationExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2OrganizationRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Organization, *net_http.Response, error)

	lockListOrgV2Organizations sync.Mutex
	ListOrgV2OrganizationsFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2OrganizationsRequest

	lockListOrgV2OrganizationsExecute sync.Mutex
	ListOrgV2OrganizationsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2OrganizationsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2OrganizationList, *net_http.Response, error)

	lockUpdateOrgV2Organization sync.Mutex
	UpdateOrgV2OrganizationFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2OrganizationRequest

	lockUpdateOrgV2OrganizationExecute sync.Mutex
	UpdateOrgV2OrganizationExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2OrganizationRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Organization, *net_http.Response, error)

	calls struct {
		GetOrgV2Organization []struct {
			Ctx context.Context
			Id  string
		}
		GetOrgV2OrganizationExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2OrganizationRequest
		}
		ListOrgV2Organizations []struct {
			Ctx context.Context
		}
		ListOrgV2OrganizationsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2OrganizationsRequest
		}
		UpdateOrgV2Organization []struct {
			Ctx context.Context
			Id  string
		}
		UpdateOrgV2OrganizationExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2OrganizationRequest
		}
	}
}

// GetOrgV2Organization mocks base method by wrapping the associated func.
func (m *OrganizationsOrgV2Api) GetOrgV2Organization(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2OrganizationRequest {
	m.lockGetOrgV2Organization.Lock()
	defer m.lockGetOrgV2Organization.Unlock()

	if m.GetOrgV2OrganizationFunc == nil {
		panic("mocker: OrganizationsOrgV2Api.GetOrgV2OrganizationFunc is nil but OrganizationsOrgV2Api.GetOrgV2Organization was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetOrgV2Organization = append(m.calls.GetOrgV2Organization, call)

	return m.GetOrgV2OrganizationFunc(ctx, id)
}

// GetOrgV2OrganizationCalled returns true if GetOrgV2Organization was called at least once.
func (m *OrganizationsOrgV2Api) GetOrgV2OrganizationCalled() bool {
	m.lockGetOrgV2Organization.Lock()
	defer m.lockGetOrgV2Organization.Unlock()

	return len(m.calls.GetOrgV2Organization) > 0
}

// GetOrgV2OrganizationCalls returns the calls made to GetOrgV2Organization.
func (m *OrganizationsOrgV2Api) GetOrgV2OrganizationCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetOrgV2Organization.Lock()
	defer m.lockGetOrgV2Organization.Unlock()

	return m.calls.GetOrgV2Organization
}

// GetOrgV2OrganizationExecute mocks base method by wrapping the associated func.
func (m *OrganizationsOrgV2Api) GetOrgV2OrganizationExecute(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2OrganizationRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Organization, *net_http.Response, error) {
	m.lockGetOrgV2OrganizationExecute.Lock()
	defer m.lockGetOrgV2OrganizationExecute.Unlock()

	if m.GetOrgV2OrganizationExecuteFunc == nil {
		panic("mocker: OrganizationsOrgV2Api.GetOrgV2OrganizationExecuteFunc is nil but OrganizationsOrgV2Api.GetOrgV2OrganizationExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2OrganizationRequest
	}{
		R: r,
	}

	m.calls.GetOrgV2OrganizationExecute = append(m.calls.GetOrgV2OrganizationExecute, call)

	return m.GetOrgV2OrganizationExecuteFunc(r)
}

// GetOrgV2OrganizationExecuteCalled returns true if GetOrgV2OrganizationExecute was called at least once.
func (m *OrganizationsOrgV2Api) GetOrgV2OrganizationExecuteCalled() bool {
	m.lockGetOrgV2OrganizationExecute.Lock()
	defer m.lockGetOrgV2OrganizationExecute.Unlock()

	return len(m.calls.GetOrgV2OrganizationExecute) > 0
}

// GetOrgV2OrganizationExecuteCalls returns the calls made to GetOrgV2OrganizationExecute.
func (m *OrganizationsOrgV2Api) GetOrgV2OrganizationExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiGetOrgV2OrganizationRequest
} {
	m.lockGetOrgV2OrganizationExecute.Lock()
	defer m.lockGetOrgV2OrganizationExecute.Unlock()

	return m.calls.GetOrgV2OrganizationExecute
}

// ListOrgV2Organizations mocks base method by wrapping the associated func.
func (m *OrganizationsOrgV2Api) ListOrgV2Organizations(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2OrganizationsRequest {
	m.lockListOrgV2Organizations.Lock()
	defer m.lockListOrgV2Organizations.Unlock()

	if m.ListOrgV2OrganizationsFunc == nil {
		panic("mocker: OrganizationsOrgV2Api.ListOrgV2OrganizationsFunc is nil but OrganizationsOrgV2Api.ListOrgV2Organizations was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListOrgV2Organizations = append(m.calls.ListOrgV2Organizations, call)

	return m.ListOrgV2OrganizationsFunc(ctx)
}

// ListOrgV2OrganizationsCalled returns true if ListOrgV2Organizations was called at least once.
func (m *OrganizationsOrgV2Api) ListOrgV2OrganizationsCalled() bool {
	m.lockListOrgV2Organizations.Lock()
	defer m.lockListOrgV2Organizations.Unlock()

	return len(m.calls.ListOrgV2Organizations) > 0
}

// ListOrgV2OrganizationsCalls returns the calls made to ListOrgV2Organizations.
func (m *OrganizationsOrgV2Api) ListOrgV2OrganizationsCalls() []struct {
	Ctx context.Context
} {
	m.lockListOrgV2Organizations.Lock()
	defer m.lockListOrgV2Organizations.Unlock()

	return m.calls.ListOrgV2Organizations
}

// ListOrgV2OrganizationsExecute mocks base method by wrapping the associated func.
func (m *OrganizationsOrgV2Api) ListOrgV2OrganizationsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2OrganizationsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2OrganizationList, *net_http.Response, error) {
	m.lockListOrgV2OrganizationsExecute.Lock()
	defer m.lockListOrgV2OrganizationsExecute.Unlock()

	if m.ListOrgV2OrganizationsExecuteFunc == nil {
		panic("mocker: OrganizationsOrgV2Api.ListOrgV2OrganizationsExecuteFunc is nil but OrganizationsOrgV2Api.ListOrgV2OrganizationsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2OrganizationsRequest
	}{
		R: r,
	}

	m.calls.ListOrgV2OrganizationsExecute = append(m.calls.ListOrgV2OrganizationsExecute, call)

	return m.ListOrgV2OrganizationsExecuteFunc(r)
}

// ListOrgV2OrganizationsExecuteCalled returns true if ListOrgV2OrganizationsExecute was called at least once.
func (m *OrganizationsOrgV2Api) ListOrgV2OrganizationsExecuteCalled() bool {
	m.lockListOrgV2OrganizationsExecute.Lock()
	defer m.lockListOrgV2OrganizationsExecute.Unlock()

	return len(m.calls.ListOrgV2OrganizationsExecute) > 0
}

// ListOrgV2OrganizationsExecuteCalls returns the calls made to ListOrgV2OrganizationsExecute.
func (m *OrganizationsOrgV2Api) ListOrgV2OrganizationsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiListOrgV2OrganizationsRequest
} {
	m.lockListOrgV2OrganizationsExecute.Lock()
	defer m.lockListOrgV2OrganizationsExecute.Unlock()

	return m.calls.ListOrgV2OrganizationsExecute
}

// UpdateOrgV2Organization mocks base method by wrapping the associated func.
func (m *OrganizationsOrgV2Api) UpdateOrgV2Organization(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2OrganizationRequest {
	m.lockUpdateOrgV2Organization.Lock()
	defer m.lockUpdateOrgV2Organization.Unlock()

	if m.UpdateOrgV2OrganizationFunc == nil {
		panic("mocker: OrganizationsOrgV2Api.UpdateOrgV2OrganizationFunc is nil but OrganizationsOrgV2Api.UpdateOrgV2Organization was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.UpdateOrgV2Organization = append(m.calls.UpdateOrgV2Organization, call)

	return m.UpdateOrgV2OrganizationFunc(ctx, id)
}

// UpdateOrgV2OrganizationCalled returns true if UpdateOrgV2Organization was called at least once.
func (m *OrganizationsOrgV2Api) UpdateOrgV2OrganizationCalled() bool {
	m.lockUpdateOrgV2Organization.Lock()
	defer m.lockUpdateOrgV2Organization.Unlock()

	return len(m.calls.UpdateOrgV2Organization) > 0
}

// UpdateOrgV2OrganizationCalls returns the calls made to UpdateOrgV2Organization.
func (m *OrganizationsOrgV2Api) UpdateOrgV2OrganizationCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockUpdateOrgV2Organization.Lock()
	defer m.lockUpdateOrgV2Organization.Unlock()

	return m.calls.UpdateOrgV2Organization
}

// UpdateOrgV2OrganizationExecute mocks base method by wrapping the associated func.
func (m *OrganizationsOrgV2Api) UpdateOrgV2OrganizationExecute(r github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2OrganizationRequest) (github_com_confluentinc_ccloud_sdk_go_v2_org_v2.OrgV2Organization, *net_http.Response, error) {
	m.lockUpdateOrgV2OrganizationExecute.Lock()
	defer m.lockUpdateOrgV2OrganizationExecute.Unlock()

	if m.UpdateOrgV2OrganizationExecuteFunc == nil {
		panic("mocker: OrganizationsOrgV2Api.UpdateOrgV2OrganizationExecuteFunc is nil but OrganizationsOrgV2Api.UpdateOrgV2OrganizationExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2OrganizationRequest
	}{
		R: r,
	}

	m.calls.UpdateOrgV2OrganizationExecute = append(m.calls.UpdateOrgV2OrganizationExecute, call)

	return m.UpdateOrgV2OrganizationExecuteFunc(r)
}

// UpdateOrgV2OrganizationExecuteCalled returns true if UpdateOrgV2OrganizationExecute was called at least once.
func (m *OrganizationsOrgV2Api) UpdateOrgV2OrganizationExecuteCalled() bool {
	m.lockUpdateOrgV2OrganizationExecute.Lock()
	defer m.lockUpdateOrgV2OrganizationExecute.Unlock()

	return len(m.calls.UpdateOrgV2OrganizationExecute) > 0
}

// UpdateOrgV2OrganizationExecuteCalls returns the calls made to UpdateOrgV2OrganizationExecute.
func (m *OrganizationsOrgV2Api) UpdateOrgV2OrganizationExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_org_v2.ApiUpdateOrgV2OrganizationRequest
} {
	m.lockUpdateOrgV2OrganizationExecute.Lock()
	defer m.lockUpdateOrgV2OrganizationExecute.Unlock()

	return m.calls.UpdateOrgV2OrganizationExecute
}

// Reset resets the calls made to the mocked methods.
func (m *OrganizationsOrgV2Api) Reset() {
	m.lockGetOrgV2Organization.Lock()
	m.calls.GetOrgV2Organization = nil
	m.lockGetOrgV2Organization.Unlock()
	m.lockGetOrgV2OrganizationExecute.Lock()
	m.calls.GetOrgV2OrganizationExecute = nil
	m.lockGetOrgV2OrganizationExecute.Unlock()
	m.lockListOrgV2Organizations.Lock()
	m.calls.ListOrgV2Organizations = nil
	m.lockListOrgV2Organizations.Unlock()
	m.lockListOrgV2OrganizationsExecute.Lock()
	m.calls.ListOrgV2OrganizationsExecute = nil
	m.lockListOrgV2OrganizationsExecute.Unlock()
	m.lockUpdateOrgV2Organization.Lock()
	m.calls.UpdateOrgV2Organization = nil
	m.lockUpdateOrgV2Organization.Unlock()
	m.lockUpdateOrgV2OrganizationExecute.Lock()
	m.calls.UpdateOrgV2OrganizationExecute = nil
	m.lockUpdateOrgV2OrganizationExecute.Unlock()
}
