// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Identity & Access Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha0
Contact: paas-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// IamV2IpFilterSummaryCategories struct for IamV2IpFilterSummaryCategories
type IamV2IpFilterSummaryCategories struct {
	// Name of the category.
	Name *string `json:"name,omitempty"`
	// Open, limited, or mixed.
	Status *string `json:"status,omitempty"`
	// Operation groups part of this category.
	OperationGroups *[]IamV2IpFilterSummaryOperationGroups `json:"operation_groups,omitempty"`
}

// NewIamV2IpFilterSummaryCategories instantiates a new IamV2IpFilterSummaryCategories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamV2IpFilterSummaryCategories() *IamV2IpFilterSummaryCategories {
	this := IamV2IpFilterSummaryCategories{}
	return &this
}

// NewIamV2IpFilterSummaryCategoriesWithDefaults instantiates a new IamV2IpFilterSummaryCategories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamV2IpFilterSummaryCategoriesWithDefaults() *IamV2IpFilterSummaryCategories {
	this := IamV2IpFilterSummaryCategories{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IamV2IpFilterSummaryCategories) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2IpFilterSummaryCategories) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IamV2IpFilterSummaryCategories) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IamV2IpFilterSummaryCategories) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IamV2IpFilterSummaryCategories) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2IpFilterSummaryCategories) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IamV2IpFilterSummaryCategories) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IamV2IpFilterSummaryCategories) SetStatus(v string) {
	o.Status = &v
}

// GetOperationGroups returns the OperationGroups field value if set, zero value otherwise.
func (o *IamV2IpFilterSummaryCategories) GetOperationGroups() []IamV2IpFilterSummaryOperationGroups {
	if o == nil || o.OperationGroups == nil {
		var ret []IamV2IpFilterSummaryOperationGroups
		return ret
	}
	return *o.OperationGroups
}

// GetOperationGroupsOk returns a tuple with the OperationGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2IpFilterSummaryCategories) GetOperationGroupsOk() (*[]IamV2IpFilterSummaryOperationGroups, bool) {
	if o == nil || o.OperationGroups == nil {
		return nil, false
	}
	return o.OperationGroups, true
}

// HasOperationGroups returns a boolean if a field has been set.
func (o *IamV2IpFilterSummaryCategories) HasOperationGroups() bool {
	if o != nil && o.OperationGroups != nil {
		return true
	}

	return false
}

// SetOperationGroups gets a reference to the given []IamV2IpFilterSummaryOperationGroups and assigns it to the OperationGroups field.
func (o *IamV2IpFilterSummaryCategories) SetOperationGroups(v []IamV2IpFilterSummaryOperationGroups) {
	o.OperationGroups = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *IamV2IpFilterSummaryCategories) Redact() {
    o.recurseRedact(o.Name)
    o.recurseRedact(o.Status)
    o.recurseRedact(o.OperationGroups)
}

func (o *IamV2IpFilterSummaryCategories) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o IamV2IpFilterSummaryCategories) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o IamV2IpFilterSummaryCategories) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.OperationGroups != nil {
		toSerialize["operation_groups"] = o.OperationGroups
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableIamV2IpFilterSummaryCategories struct {
	value *IamV2IpFilterSummaryCategories
	isSet bool
}

func (v NullableIamV2IpFilterSummaryCategories) Get() *IamV2IpFilterSummaryCategories {
	return v.value
}

func (v *NullableIamV2IpFilterSummaryCategories) Set(val *IamV2IpFilterSummaryCategories) {
	v.value = val
	v.isSet = true
}

func (v NullableIamV2IpFilterSummaryCategories) IsSet() bool {
	return v.isSet
}

func (v *NullableIamV2IpFilterSummaryCategories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamV2IpFilterSummaryCategories(val *IamV2IpFilterSummaryCategories) *NullableIamV2IpFilterSummaryCategories {
	return &NullableIamV2IpFilterSummaryCategories{value: val, isSet: true}
}

func (v NullableIamV2IpFilterSummaryCategories) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableIamV2IpFilterSummaryCategories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


