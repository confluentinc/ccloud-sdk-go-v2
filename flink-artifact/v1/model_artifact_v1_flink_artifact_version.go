// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Artifact Management API

This is the Flink Artifact Management API.

API version: 0.0.1
Contact: flink-runtime@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ArtifactV1FlinkArtifactVersion Version of the Flink Artifact
type ArtifactV1FlinkArtifactVersion struct {
	// Version id of the Flink Artifact.
	Version string `json:"version,omitempty"`
	// Release Notes of the Flink Artifact version.
	ReleaseNotes *string `json:"release_notes,omitempty"`
	// Flag to specify stability of the version
	IsBeta *bool `json:"is_beta,omitempty"`
	// The Flink Artifact this version belongs to.
	ArtifactId ArtifactV1FlinkArtifact `json:"artifact_id,omitempty"`
	// Upload source of the Flink Artifact Version.
	UploadSource ArtifactV1FlinkArtifactVersionUploadSourceOneOf `json:"upload_source,omitempty"`
}

// NewArtifactV1FlinkArtifactVersion instantiates a new ArtifactV1FlinkArtifactVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactV1FlinkArtifactVersion(version string, artifactId ArtifactV1FlinkArtifact, uploadSource ArtifactV1FlinkArtifactVersionUploadSourceOneOf) *ArtifactV1FlinkArtifactVersion {
	this := ArtifactV1FlinkArtifactVersion{}
	this.Version = version
	this.ArtifactId = artifactId
	this.UploadSource = uploadSource
	return &this
}

// NewArtifactV1FlinkArtifactVersionWithDefaults instantiates a new ArtifactV1FlinkArtifactVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactV1FlinkArtifactVersionWithDefaults() *ArtifactV1FlinkArtifactVersion {
	this := ArtifactV1FlinkArtifactVersion{}
	return &this
}

// GetVersion returns the Version field value
func (o *ArtifactV1FlinkArtifactVersion) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ArtifactV1FlinkArtifactVersion) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ArtifactV1FlinkArtifactVersion) SetVersion(v string) {
	o.Version = v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise.
func (o *ArtifactV1FlinkArtifactVersion) GetReleaseNotes() string {
	if o == nil || o.ReleaseNotes == nil {
		var ret string
		return ret
	}
	return *o.ReleaseNotes
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactV1FlinkArtifactVersion) GetReleaseNotesOk() (*string, bool) {
	if o == nil || o.ReleaseNotes == nil {
		return nil, false
	}
	return o.ReleaseNotes, true
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *ArtifactV1FlinkArtifactVersion) HasReleaseNotes() bool {
	if o != nil && o.ReleaseNotes != nil {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given string and assigns it to the ReleaseNotes field.
func (o *ArtifactV1FlinkArtifactVersion) SetReleaseNotes(v string) {
	o.ReleaseNotes = &v
}

// GetIsBeta returns the IsBeta field value if set, zero value otherwise.
func (o *ArtifactV1FlinkArtifactVersion) GetIsBeta() bool {
	if o == nil || o.IsBeta == nil {
		var ret bool
		return ret
	}
	return *o.IsBeta
}

// GetIsBetaOk returns a tuple with the IsBeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactV1FlinkArtifactVersion) GetIsBetaOk() (*bool, bool) {
	if o == nil || o.IsBeta == nil {
		return nil, false
	}
	return o.IsBeta, true
}

// HasIsBeta returns a boolean if a field has been set.
func (o *ArtifactV1FlinkArtifactVersion) HasIsBeta() bool {
	if o != nil && o.IsBeta != nil {
		return true
	}

	return false
}

// SetIsBeta gets a reference to the given bool and assigns it to the IsBeta field.
func (o *ArtifactV1FlinkArtifactVersion) SetIsBeta(v bool) {
	o.IsBeta = &v
}

// GetArtifactId returns the ArtifactId field value
func (o *ArtifactV1FlinkArtifactVersion) GetArtifactId() ArtifactV1FlinkArtifact {
	if o == nil {
		var ret ArtifactV1FlinkArtifact
		return ret
	}

	return o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value
// and a boolean to check if the value has been set.
func (o *ArtifactV1FlinkArtifactVersion) GetArtifactIdOk() (*ArtifactV1FlinkArtifact, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtifactId, true
}

// SetArtifactId sets field value
func (o *ArtifactV1FlinkArtifactVersion) SetArtifactId(v ArtifactV1FlinkArtifact) {
	o.ArtifactId = v
}

// GetUploadSource returns the UploadSource field value
func (o *ArtifactV1FlinkArtifactVersion) GetUploadSource() ArtifactV1FlinkArtifactVersionUploadSourceOneOf {
	if o == nil {
		var ret ArtifactV1FlinkArtifactVersionUploadSourceOneOf
		return ret
	}

	return o.UploadSource
}

// GetUploadSourceOk returns a tuple with the UploadSource field value
// and a boolean to check if the value has been set.
func (o *ArtifactV1FlinkArtifactVersion) GetUploadSourceOk() (*ArtifactV1FlinkArtifactVersionUploadSourceOneOf, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadSource, true
}

// SetUploadSource sets field value
func (o *ArtifactV1FlinkArtifactVersion) SetUploadSource(v ArtifactV1FlinkArtifactVersionUploadSourceOneOf) {
	o.UploadSource = v
}

// Redact resets all sensitive fields to their zero value.
func (o *ArtifactV1FlinkArtifactVersion) Redact() {
	o.recurseRedact(&o.Version)
	o.recurseRedact(o.ReleaseNotes)
	o.recurseRedact(o.IsBeta)
	o.recurseRedact(&o.ArtifactId)
	o.recurseRedact(&o.UploadSource)
}

func (o *ArtifactV1FlinkArtifactVersion) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ArtifactV1FlinkArtifactVersion) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ArtifactV1FlinkArtifactVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["version"] = o.Version
	}
	if o.ReleaseNotes != nil {
		toSerialize["release_notes"] = o.ReleaseNotes
	}
	if o.IsBeta != nil {
		toSerialize["is_beta"] = o.IsBeta
	}
	if true {
		toSerialize["artifact_id"] = o.ArtifactId
	}
	if true {
		toSerialize["upload_source"] = o.UploadSource
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableArtifactV1FlinkArtifactVersion struct {
	value *ArtifactV1FlinkArtifactVersion
	isSet bool
}

func (v NullableArtifactV1FlinkArtifactVersion) Get() *ArtifactV1FlinkArtifactVersion {
	return v.value
}

func (v *NullableArtifactV1FlinkArtifactVersion) Set(val *ArtifactV1FlinkArtifactVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactV1FlinkArtifactVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactV1FlinkArtifactVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactV1FlinkArtifactVersion(val *ArtifactV1FlinkArtifactVersion) *NullableArtifactV1FlinkArtifactVersion {
	return &NullableArtifactV1FlinkArtifactVersion{value: val, isSet: true}
}

func (v NullableArtifactV1FlinkArtifactVersion) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableArtifactV1FlinkArtifactVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
