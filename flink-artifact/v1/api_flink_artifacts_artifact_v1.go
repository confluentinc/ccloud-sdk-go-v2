// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Artifact Management API

This is the Flink Artifact Management API.

API version: 0.0.1
Contact: flink-runtime@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type FlinkArtifactsArtifactV1Api interface {

	/*
			CreateArtifactV1FlinkArtifact Create a new Flink Artifact.

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to create a flink artifact.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiCreateArtifactV1FlinkArtifactRequest
	*/
	CreateArtifactV1FlinkArtifact(ctx _context.Context) ApiCreateArtifactV1FlinkArtifactRequest

	// CreateArtifactV1FlinkArtifactExecute executes the request
	//  @return ArtifactV1FlinkArtifact
	CreateArtifactV1FlinkArtifactExecute(r ApiCreateArtifactV1FlinkArtifactRequest) (ArtifactV1FlinkArtifact, *_nethttp.Response, error)

	/*
			DeleteArtifactV1FlinkArtifact Delete a Flink Artifact

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to delete a flink artifact.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param id The unique identifier for the flink artifact.
			 @return ApiDeleteArtifactV1FlinkArtifactRequest
	*/
	DeleteArtifactV1FlinkArtifact(ctx _context.Context, id string) ApiDeleteArtifactV1FlinkArtifactRequest

	// DeleteArtifactV1FlinkArtifactExecute executes the request
	DeleteArtifactV1FlinkArtifactExecute(r ApiDeleteArtifactV1FlinkArtifactRequest) (*_nethttp.Response, error)

	/*
			GetArtifactV1FlinkArtifact Read a Flink Artifact

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to read a flink artifact.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param id The unique identifier for the flink artifact.
			 @return ApiGetArtifactV1FlinkArtifactRequest
	*/
	GetArtifactV1FlinkArtifact(ctx _context.Context, id string) ApiGetArtifactV1FlinkArtifactRequest

	// GetArtifactV1FlinkArtifactExecute executes the request
	//  @return ArtifactV1FlinkArtifact
	GetArtifactV1FlinkArtifactExecute(r ApiGetArtifactV1FlinkArtifactRequest) (ArtifactV1FlinkArtifact, *_nethttp.Response, error)

	/*
			ListArtifactV1FlinkArtifacts List of Flink Artifacts

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Retrieve a sorted, filtered, paginated list of all flink artifacts.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiListArtifactV1FlinkArtifactsRequest
	*/
	ListArtifactV1FlinkArtifacts(ctx _context.Context) ApiListArtifactV1FlinkArtifactsRequest

	// ListArtifactV1FlinkArtifactsExecute executes the request
	//  @return ArtifactV1FlinkArtifactList
	ListArtifactV1FlinkArtifactsExecute(r ApiListArtifactV1FlinkArtifactsRequest) (ArtifactV1FlinkArtifactList, *_nethttp.Response, error)

	/*
			UpdateArtifactV1FlinkArtifact Update a Flink Artifact

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to update a flink artifact.



			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param id The unique identifier for the flink artifact.
			 @return ApiUpdateArtifactV1FlinkArtifactRequest
	*/
	UpdateArtifactV1FlinkArtifact(ctx _context.Context, id string) ApiUpdateArtifactV1FlinkArtifactRequest

	// UpdateArtifactV1FlinkArtifactExecute executes the request
	//  @return ArtifactV1FlinkArtifact
	UpdateArtifactV1FlinkArtifactExecute(r ApiUpdateArtifactV1FlinkArtifactRequest) (ArtifactV1FlinkArtifact, *_nethttp.Response, error)
}

// FlinkArtifactsArtifactV1ApiService FlinkArtifactsArtifactV1Api service
type FlinkArtifactsArtifactV1ApiService service

type ApiCreateArtifactV1FlinkArtifactRequest struct {
	ctx          _context.Context
	ApiService   FlinkArtifactsArtifactV1Api
	cloud        *string
	region       *string
	inlineObject *InlineObject
}

// Scope the operation to the given cloud.
func (r ApiCreateArtifactV1FlinkArtifactRequest) Cloud(cloud string) ApiCreateArtifactV1FlinkArtifactRequest {
	r.cloud = &cloud
	return r
}

// Scope the operation to the given region.
func (r ApiCreateArtifactV1FlinkArtifactRequest) Region(region string) ApiCreateArtifactV1FlinkArtifactRequest {
	r.region = &region
	return r
}
func (r ApiCreateArtifactV1FlinkArtifactRequest) InlineObject(inlineObject InlineObject) ApiCreateArtifactV1FlinkArtifactRequest {
	r.inlineObject = &inlineObject
	return r
}

func (r ApiCreateArtifactV1FlinkArtifactRequest) Execute() (ArtifactV1FlinkArtifact, *_nethttp.Response, error) {
	return r.ApiService.CreateArtifactV1FlinkArtifactExecute(r)
}

/*
CreateArtifactV1FlinkArtifact Create a new Flink Artifact.

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to create a flink artifact.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateArtifactV1FlinkArtifactRequest
*/
func (a *FlinkArtifactsArtifactV1ApiService) CreateArtifactV1FlinkArtifact(ctx _context.Context) ApiCreateArtifactV1FlinkArtifactRequest {
	return ApiCreateArtifactV1FlinkArtifactRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ArtifactV1FlinkArtifact
func (a *FlinkArtifactsArtifactV1ApiService) CreateArtifactV1FlinkArtifactExecute(r ApiCreateArtifactV1FlinkArtifactRequest) (ArtifactV1FlinkArtifact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ArtifactV1FlinkArtifact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlinkArtifactsArtifactV1ApiService.CreateArtifactV1FlinkArtifact")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/artifact/v1/flink-artifacts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cloud == nil {
		return localVarReturnValue, nil, reportError("cloud is required and must be specified")
	}
	if r.region == nil {
		return localVarReturnValue, nil, reportError("region is required and must be specified")
	}

	localVarQueryParams.Add("cloud", parameterToString(*r.cloud, ""))
	localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteArtifactV1FlinkArtifactRequest struct {
	ctx         _context.Context
	ApiService  FlinkArtifactsArtifactV1Api
	cloud       *string
	region      *string
	environment *string
	id          string
}

// Scope the operation to the given cloud.
func (r ApiDeleteArtifactV1FlinkArtifactRequest) Cloud(cloud string) ApiDeleteArtifactV1FlinkArtifactRequest {
	r.cloud = &cloud
	return r
}

// Scope the operation to the given region.
func (r ApiDeleteArtifactV1FlinkArtifactRequest) Region(region string) ApiDeleteArtifactV1FlinkArtifactRequest {
	r.region = &region
	return r
}

// Scope the operation to the given environment.
func (r ApiDeleteArtifactV1FlinkArtifactRequest) Environment(environment string) ApiDeleteArtifactV1FlinkArtifactRequest {
	r.environment = &environment
	return r
}

func (r ApiDeleteArtifactV1FlinkArtifactRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteArtifactV1FlinkArtifactExecute(r)
}

/*
DeleteArtifactV1FlinkArtifact Delete a Flink Artifact

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to delete a flink artifact.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The unique identifier for the flink artifact.
	@return ApiDeleteArtifactV1FlinkArtifactRequest
*/
func (a *FlinkArtifactsArtifactV1ApiService) DeleteArtifactV1FlinkArtifact(ctx _context.Context, id string) ApiDeleteArtifactV1FlinkArtifactRequest {
	return ApiDeleteArtifactV1FlinkArtifactRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *FlinkArtifactsArtifactV1ApiService) DeleteArtifactV1FlinkArtifactExecute(r ApiDeleteArtifactV1FlinkArtifactRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlinkArtifactsArtifactV1ApiService.DeleteArtifactV1FlinkArtifact")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/artifact/v1/flink-artifacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cloud == nil {
		return nil, reportError("cloud is required and must be specified")
	}
	if r.region == nil {
		return nil, reportError("region is required and must be specified")
	}
	if r.environment == nil {
		return nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("cloud", parameterToString(*r.cloud, ""))
	localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetArtifactV1FlinkArtifactRequest struct {
	ctx         _context.Context
	ApiService  FlinkArtifactsArtifactV1Api
	cloud       *string
	region      *string
	environment *string
	id          string
}

// Scope the operation to the given cloud.
func (r ApiGetArtifactV1FlinkArtifactRequest) Cloud(cloud string) ApiGetArtifactV1FlinkArtifactRequest {
	r.cloud = &cloud
	return r
}

// Scope the operation to the given region.
func (r ApiGetArtifactV1FlinkArtifactRequest) Region(region string) ApiGetArtifactV1FlinkArtifactRequest {
	r.region = &region
	return r
}

// Scope the operation to the given environment.
func (r ApiGetArtifactV1FlinkArtifactRequest) Environment(environment string) ApiGetArtifactV1FlinkArtifactRequest {
	r.environment = &environment
	return r
}

func (r ApiGetArtifactV1FlinkArtifactRequest) Execute() (ArtifactV1FlinkArtifact, *_nethttp.Response, error) {
	return r.ApiService.GetArtifactV1FlinkArtifactExecute(r)
}

/*
GetArtifactV1FlinkArtifact Read a Flink Artifact

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to read a flink artifact.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The unique identifier for the flink artifact.
	@return ApiGetArtifactV1FlinkArtifactRequest
*/
func (a *FlinkArtifactsArtifactV1ApiService) GetArtifactV1FlinkArtifact(ctx _context.Context, id string) ApiGetArtifactV1FlinkArtifactRequest {
	return ApiGetArtifactV1FlinkArtifactRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ArtifactV1FlinkArtifact
func (a *FlinkArtifactsArtifactV1ApiService) GetArtifactV1FlinkArtifactExecute(r ApiGetArtifactV1FlinkArtifactRequest) (ArtifactV1FlinkArtifact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ArtifactV1FlinkArtifact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlinkArtifactsArtifactV1ApiService.GetArtifactV1FlinkArtifact")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/artifact/v1/flink-artifacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cloud == nil {
		return localVarReturnValue, nil, reportError("cloud is required and must be specified")
	}
	if r.region == nil {
		return localVarReturnValue, nil, reportError("region is required and must be specified")
	}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("cloud", parameterToString(*r.cloud, ""))
	localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListArtifactV1FlinkArtifactsRequest struct {
	ctx         _context.Context
	ApiService  FlinkArtifactsArtifactV1Api
	cloud       *string
	region      *string
	environment *string
	pageSize    *int32
	pageToken   *string
}

// Filter the results by exact match for cloud.
func (r ApiListArtifactV1FlinkArtifactsRequest) Cloud(cloud string) ApiListArtifactV1FlinkArtifactsRequest {
	r.cloud = &cloud
	return r
}

// Filter the results by exact match for region.
func (r ApiListArtifactV1FlinkArtifactsRequest) Region(region string) ApiListArtifactV1FlinkArtifactsRequest {
	r.region = &region
	return r
}

// Filter the results by exact match for environment.
func (r ApiListArtifactV1FlinkArtifactsRequest) Environment(environment string) ApiListArtifactV1FlinkArtifactsRequest {
	r.environment = &environment
	return r
}

// A pagination size for collection requests.
func (r ApiListArtifactV1FlinkArtifactsRequest) PageSize(pageSize int32) ApiListArtifactV1FlinkArtifactsRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListArtifactV1FlinkArtifactsRequest) PageToken(pageToken string) ApiListArtifactV1FlinkArtifactsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListArtifactV1FlinkArtifactsRequest) Execute() (ArtifactV1FlinkArtifactList, *_nethttp.Response, error) {
	return r.ApiService.ListArtifactV1FlinkArtifactsExecute(r)
}

/*
ListArtifactV1FlinkArtifacts List of Flink Artifacts

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a sorted, filtered, paginated list of all flink artifacts.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListArtifactV1FlinkArtifactsRequest
*/
func (a *FlinkArtifactsArtifactV1ApiService) ListArtifactV1FlinkArtifacts(ctx _context.Context) ApiListArtifactV1FlinkArtifactsRequest {
	return ApiListArtifactV1FlinkArtifactsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ArtifactV1FlinkArtifactList
func (a *FlinkArtifactsArtifactV1ApiService) ListArtifactV1FlinkArtifactsExecute(r ApiListArtifactV1FlinkArtifactsRequest) (ArtifactV1FlinkArtifactList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ArtifactV1FlinkArtifactList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlinkArtifactsArtifactV1ApiService.ListArtifactV1FlinkArtifacts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/artifact/v1/flink-artifacts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cloud == nil {
		return localVarReturnValue, nil, reportError("cloud is required and must be specified")
	}
	if r.region == nil {
		return localVarReturnValue, nil, reportError("region is required and must be specified")
	}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("cloud", parameterToString(*r.cloud, ""))
	localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateArtifactV1FlinkArtifactRequest struct {
	ctx                           _context.Context
	ApiService                    FlinkArtifactsArtifactV1Api
	cloud                         *string
	region                        *string
	environment                   *string
	id                            string
	artifactV1FlinkArtifactUpdate *ArtifactV1FlinkArtifactUpdate
}

// Scope the operation to the given cloud.
func (r ApiUpdateArtifactV1FlinkArtifactRequest) Cloud(cloud string) ApiUpdateArtifactV1FlinkArtifactRequest {
	r.cloud = &cloud
	return r
}

// Scope the operation to the given region.
func (r ApiUpdateArtifactV1FlinkArtifactRequest) Region(region string) ApiUpdateArtifactV1FlinkArtifactRequest {
	r.region = &region
	return r
}

// Scope the operation to the given environment.
func (r ApiUpdateArtifactV1FlinkArtifactRequest) Environment(environment string) ApiUpdateArtifactV1FlinkArtifactRequest {
	r.environment = &environment
	return r
}
func (r ApiUpdateArtifactV1FlinkArtifactRequest) ArtifactV1FlinkArtifactUpdate(artifactV1FlinkArtifactUpdate ArtifactV1FlinkArtifactUpdate) ApiUpdateArtifactV1FlinkArtifactRequest {
	r.artifactV1FlinkArtifactUpdate = &artifactV1FlinkArtifactUpdate
	return r
}

func (r ApiUpdateArtifactV1FlinkArtifactRequest) Execute() (ArtifactV1FlinkArtifact, *_nethttp.Response, error) {
	return r.ApiService.UpdateArtifactV1FlinkArtifactExecute(r)
}

/*
UpdateArtifactV1FlinkArtifact Update a Flink Artifact

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to update a flink artifact.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The unique identifier for the flink artifact.
	@return ApiUpdateArtifactV1FlinkArtifactRequest
*/
func (a *FlinkArtifactsArtifactV1ApiService) UpdateArtifactV1FlinkArtifact(ctx _context.Context, id string) ApiUpdateArtifactV1FlinkArtifactRequest {
	return ApiUpdateArtifactV1FlinkArtifactRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ArtifactV1FlinkArtifact
func (a *FlinkArtifactsArtifactV1ApiService) UpdateArtifactV1FlinkArtifactExecute(r ApiUpdateArtifactV1FlinkArtifactRequest) (ArtifactV1FlinkArtifact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ArtifactV1FlinkArtifact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlinkArtifactsArtifactV1ApiService.UpdateArtifactV1FlinkArtifact")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/artifact/v1/flink-artifacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cloud == nil {
		return localVarReturnValue, nil, reportError("cloud is required and must be specified")
	}
	if r.region == nil {
		return localVarReturnValue, nil, reportError("region is required and must be specified")
	}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("cloud", parameterToString(*r.cloud, ""))
	localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.artifactV1FlinkArtifactUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
