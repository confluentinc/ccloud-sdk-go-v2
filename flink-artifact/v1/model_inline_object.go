// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Artifact Management API

This is the Flink Artifact Management API.

API version: 0.0.1
Contact: flink-runtime@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// InlineObject struct for InlineObject
type InlineObject struct {
	// Cloud provider where the Flink Artifact archive is uploaded.
	Cloud string `json:"cloud,omitempty"`
	// The Cloud provider region the Flink Artifact archive is uploaded.
	Region string `json:"region,omitempty"`
	// Environment the Flink Artifact belongs to.
	Environment string `json:"environment,omitempty"`
	// Display name of the Flink Artifact.
	DisplayName string `json:"display_name,omitempty"`
	// Java class or alias for the artifact as provided by developer.
	Class string `json:"class,omitempty"`
	// Archive format of the Flink Artifact.
	ContentFormat *string `json:"content_format,omitempty"`
	// Description of the Flink Artifact.
	Description *string `json:"description,omitempty"`
	// Document link of the Flink Artifact.
	DocumentationLink *string `json:"documentation_link,omitempty"`
	// Runtime language of the Flink Artifact.
	RuntimeLanguage *string `json:"runtime_language,omitempty"`
	// Upload source of the Flink Artifact source.
	UploadSource InlineObjectUploadSourceOneOf `json:"upload_source,omitempty"`
}

// NewInlineObject instantiates a new InlineObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject(cloud string, region string, environment string, displayName string, class string, uploadSource InlineObjectUploadSourceOneOf) *InlineObject {
	this := InlineObject{}
	this.Cloud = cloud
	this.Region = region
	this.Environment = environment
	this.DisplayName = displayName
	this.Class = class
	var runtimeLanguage string = "JAVA"
	this.RuntimeLanguage = &runtimeLanguage
	this.UploadSource = uploadSource
	return &this
}

// NewInlineObjectWithDefaults instantiates a new InlineObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObjectWithDefaults() *InlineObject {
	this := InlineObject{}
	var runtimeLanguage string = "JAVA"
	this.RuntimeLanguage = &runtimeLanguage
	return &this
}

// GetCloud returns the Cloud field value
func (o *InlineObject) GetCloud() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetCloudOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *InlineObject) SetCloud(v string) {
	o.Cloud = v
}

// GetRegion returns the Region field value
func (o *InlineObject) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *InlineObject) SetRegion(v string) {
	o.Region = v
}

// GetEnvironment returns the Environment field value
func (o *InlineObject) GetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *InlineObject) SetEnvironment(v string) {
	o.Environment = v
}

// GetDisplayName returns the DisplayName field value
func (o *InlineObject) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *InlineObject) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetClass returns the Class field value
func (o *InlineObject) GetClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *InlineObject) SetClass(v string) {
	o.Class = v
}

// GetContentFormat returns the ContentFormat field value if set, zero value otherwise.
func (o *InlineObject) GetContentFormat() string {
	if o == nil || o.ContentFormat == nil {
		var ret string
		return ret
	}
	return *o.ContentFormat
}

// GetContentFormatOk returns a tuple with the ContentFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetContentFormatOk() (*string, bool) {
	if o == nil || o.ContentFormat == nil {
		return nil, false
	}
	return o.ContentFormat, true
}

// HasContentFormat returns a boolean if a field has been set.
func (o *InlineObject) HasContentFormat() bool {
	if o != nil && o.ContentFormat != nil {
		return true
	}

	return false
}

// SetContentFormat gets a reference to the given string and assigns it to the ContentFormat field.
func (o *InlineObject) SetContentFormat(v string) {
	o.ContentFormat = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InlineObject) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InlineObject) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InlineObject) SetDescription(v string) {
	o.Description = &v
}

// GetDocumentationLink returns the DocumentationLink field value if set, zero value otherwise.
func (o *InlineObject) GetDocumentationLink() string {
	if o == nil || o.DocumentationLink == nil {
		var ret string
		return ret
	}
	return *o.DocumentationLink
}

// GetDocumentationLinkOk returns a tuple with the DocumentationLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetDocumentationLinkOk() (*string, bool) {
	if o == nil || o.DocumentationLink == nil {
		return nil, false
	}
	return o.DocumentationLink, true
}

// HasDocumentationLink returns a boolean if a field has been set.
func (o *InlineObject) HasDocumentationLink() bool {
	if o != nil && o.DocumentationLink != nil {
		return true
	}

	return false
}

// SetDocumentationLink gets a reference to the given string and assigns it to the DocumentationLink field.
func (o *InlineObject) SetDocumentationLink(v string) {
	o.DocumentationLink = &v
}

// GetRuntimeLanguage returns the RuntimeLanguage field value if set, zero value otherwise.
func (o *InlineObject) GetRuntimeLanguage() string {
	if o == nil || o.RuntimeLanguage == nil {
		var ret string
		return ret
	}
	return *o.RuntimeLanguage
}

// GetRuntimeLanguageOk returns a tuple with the RuntimeLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetRuntimeLanguageOk() (*string, bool) {
	if o == nil || o.RuntimeLanguage == nil {
		return nil, false
	}
	return o.RuntimeLanguage, true
}

// HasRuntimeLanguage returns a boolean if a field has been set.
func (o *InlineObject) HasRuntimeLanguage() bool {
	if o != nil && o.RuntimeLanguage != nil {
		return true
	}

	return false
}

// SetRuntimeLanguage gets a reference to the given string and assigns it to the RuntimeLanguage field.
func (o *InlineObject) SetRuntimeLanguage(v string) {
	o.RuntimeLanguage = &v
}

// GetUploadSource returns the UploadSource field value
func (o *InlineObject) GetUploadSource() InlineObjectUploadSourceOneOf {
	if o == nil {
		var ret InlineObjectUploadSourceOneOf
		return ret
	}

	return o.UploadSource
}

// GetUploadSourceOk returns a tuple with the UploadSource field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetUploadSourceOk() (*InlineObjectUploadSourceOneOf, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadSource, true
}

// SetUploadSource sets field value
func (o *InlineObject) SetUploadSource(v InlineObjectUploadSourceOneOf) {
	o.UploadSource = v
}

// Redact resets all sensitive fields to their zero value.
func (o *InlineObject) Redact() {
	o.recurseRedact(&o.Cloud)
	o.recurseRedact(&o.Region)
	o.recurseRedact(&o.Environment)
	o.recurseRedact(&o.DisplayName)
	o.recurseRedact(&o.Class)
	o.recurseRedact(o.ContentFormat)
	o.recurseRedact(o.Description)
	o.recurseRedact(o.DocumentationLink)
	o.recurseRedact(o.RuntimeLanguage)
	o.recurseRedact(&o.UploadSource)
}

func (o *InlineObject) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o InlineObject) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o InlineObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cloud"] = o.Cloud
	}
	if true {
		toSerialize["region"] = o.Region
	}
	if true {
		toSerialize["environment"] = o.Environment
	}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if true {
		toSerialize["class"] = o.Class
	}
	if o.ContentFormat != nil {
		toSerialize["content_format"] = o.ContentFormat
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DocumentationLink != nil {
		toSerialize["documentation_link"] = o.DocumentationLink
	}
	if o.RuntimeLanguage != nil {
		toSerialize["runtime_language"] = o.RuntimeLanguage
	}
	if true {
		toSerialize["upload_source"] = o.UploadSource
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableInlineObject struct {
	value *InlineObject
	isSet bool
}

func (v NullableInlineObject) Get() *InlineObject {
	return v.value
}

func (v *NullableInlineObject) Set(val *InlineObject) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject(val *InlineObject) *NullableInlineObject {
	return &NullableInlineObject{value: val, isSet: true}
}

func (v NullableInlineObject) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableInlineObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
