// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Data Catalog Management API

Data Catalog Management API

API version: 0.0.1-alpha1
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type CollibraDomainListingsStreamCatalogV2Api interface {

	/*
			PostStreamCatalogV2CollibraDomainListing List collibra sink domains

			[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Data Catalog v2](https://img.shields.io/badge/-Request%20Access%20To%20Data%20Catalog%20v2-%23bc8540)](mailto:ccloud-api-access+stream-catalog-v2-early-access@confluent.io?subject=Request%20to%20join%20stream-catalog/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20stream-catalog/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

		Returns the domain details for Collibra

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiPostStreamCatalogV2CollibraDomainListingRequest
	*/
	PostStreamCatalogV2CollibraDomainListing(ctx _context.Context) ApiPostStreamCatalogV2CollibraDomainListingRequest

	// PostStreamCatalogV2CollibraDomainListingExecute executes the request
	//  @return StreamCatalogV2CollibraDomains
	PostStreamCatalogV2CollibraDomainListingExecute(r ApiPostStreamCatalogV2CollibraDomainListingRequest) (StreamCatalogV2CollibraDomains, *_nethttp.Response, error)
}

// CollibraDomainListingsStreamCatalogV2ApiService CollibraDomainListingsStreamCatalogV2Api service
type CollibraDomainListingsStreamCatalogV2ApiService service

type ApiPostStreamCatalogV2CollibraDomainListingRequest struct {
	ctx                                   _context.Context
	ApiService                            CollibraDomainListingsStreamCatalogV2Api
	streamCatalogV2CollibraDomainsRequest *StreamCatalogV2CollibraDomainsRequest
}

func (r ApiPostStreamCatalogV2CollibraDomainListingRequest) StreamCatalogV2CollibraDomainsRequest(streamCatalogV2CollibraDomainsRequest StreamCatalogV2CollibraDomainsRequest) ApiPostStreamCatalogV2CollibraDomainListingRequest {
	r.streamCatalogV2CollibraDomainsRequest = &streamCatalogV2CollibraDomainsRequest
	return r
}

func (r ApiPostStreamCatalogV2CollibraDomainListingRequest) Execute() (StreamCatalogV2CollibraDomains, *_nethttp.Response, error) {
	return r.ApiService.PostStreamCatalogV2CollibraDomainListingExecute(r)
}

/*
PostStreamCatalogV2CollibraDomainListing List collibra sink domains

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Data Catalog v2](https://img.shields.io/badge/-Request%20Access%20To%20Data%20Catalog%20v2-%23bc8540)](mailto:ccloud-api-access+stream-catalog-v2-early-access@confluent.io?subject=Request%20to%20join%20stream-catalog/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20stream-catalog/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Returns the domain details for Collibra

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostStreamCatalogV2CollibraDomainListingRequest
*/
func (a *CollibraDomainListingsStreamCatalogV2ApiService) PostStreamCatalogV2CollibraDomainListing(ctx _context.Context) ApiPostStreamCatalogV2CollibraDomainListingRequest {
	return ApiPostStreamCatalogV2CollibraDomainListingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StreamCatalogV2CollibraDomains
func (a *CollibraDomainListingsStreamCatalogV2ApiService) PostStreamCatalogV2CollibraDomainListingExecute(r ApiPostStreamCatalogV2CollibraDomainListingRequest) (StreamCatalogV2CollibraDomains, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StreamCatalogV2CollibraDomains
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CollibraDomainListingsStreamCatalogV2ApiService.PostStreamCatalogV2CollibraDomainListing")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stream-catalog/v2/collibra-sink/domains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.streamCatalogV2CollibraDomainsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StreamCatalogV2CollibraError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
