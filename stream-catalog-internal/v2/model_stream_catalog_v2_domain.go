// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Data Catalog Management API

Data Catalog Management API

API version: 0.0.1-alpha1
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// StreamCatalogV2Domain Domain within the data catalog, including id, name, resource type, and associated community details.
type StreamCatalogV2Domain struct {
	// The unique identifier of the domain.
	Id string `json:"id,omitempty"`
	// The name of the domain.
	Name *string `json:"name,omitempty"`
	// The type of the resource
	ResourceType *string                        `json:"resource_type,omitempty"`
	Community    StreamCatalogV2DomainCommunity `json:"community,omitempty"`
	// A brief description of the domain.
	Description *string `json:"description,omitempty"`
}

// NewStreamCatalogV2Domain instantiates a new StreamCatalogV2Domain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamCatalogV2Domain(id string, community StreamCatalogV2DomainCommunity) *StreamCatalogV2Domain {
	this := StreamCatalogV2Domain{}
	this.Id = id
	this.Community = community
	return &this
}

// NewStreamCatalogV2DomainWithDefaults instantiates a new StreamCatalogV2Domain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamCatalogV2DomainWithDefaults() *StreamCatalogV2Domain {
	this := StreamCatalogV2Domain{}
	return &this
}

// GetId returns the Id field value
func (o *StreamCatalogV2Domain) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StreamCatalogV2Domain) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StreamCatalogV2Domain) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StreamCatalogV2Domain) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamCatalogV2Domain) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StreamCatalogV2Domain) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StreamCatalogV2Domain) SetName(v string) {
	o.Name = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *StreamCatalogV2Domain) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamCatalogV2Domain) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *StreamCatalogV2Domain) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *StreamCatalogV2Domain) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetCommunity returns the Community field value
func (o *StreamCatalogV2Domain) GetCommunity() StreamCatalogV2DomainCommunity {
	if o == nil {
		var ret StreamCatalogV2DomainCommunity
		return ret
	}

	return o.Community
}

// GetCommunityOk returns a tuple with the Community field value
// and a boolean to check if the value has been set.
func (o *StreamCatalogV2Domain) GetCommunityOk() (*StreamCatalogV2DomainCommunity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Community, true
}

// SetCommunity sets field value
func (o *StreamCatalogV2Domain) SetCommunity(v StreamCatalogV2DomainCommunity) {
	o.Community = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StreamCatalogV2Domain) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamCatalogV2Domain) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StreamCatalogV2Domain) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StreamCatalogV2Domain) SetDescription(v string) {
	o.Description = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *StreamCatalogV2Domain) Redact() {
	o.recurseRedact(&o.Id)
	o.recurseRedact(o.Name)
	o.recurseRedact(o.ResourceType)
	o.recurseRedact(&o.Community)
	o.recurseRedact(o.Description)
}

func (o *StreamCatalogV2Domain) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o StreamCatalogV2Domain) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o StreamCatalogV2Domain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ResourceType != nil {
		toSerialize["resource_type"] = o.ResourceType
	}
	if true {
		toSerialize["community"] = o.Community
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableStreamCatalogV2Domain struct {
	value *StreamCatalogV2Domain
	isSet bool
}

func (v NullableStreamCatalogV2Domain) Get() *StreamCatalogV2Domain {
	return v.value
}

func (v *NullableStreamCatalogV2Domain) Set(val *StreamCatalogV2Domain) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamCatalogV2Domain) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamCatalogV2Domain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamCatalogV2Domain(val *StreamCatalogV2Domain) *NullableStreamCatalogV2Domain {
	return &NullableStreamCatalogV2Domain{value: val, isSet: true}
}

func (v NullableStreamCatalogV2Domain) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableStreamCatalogV2Domain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
