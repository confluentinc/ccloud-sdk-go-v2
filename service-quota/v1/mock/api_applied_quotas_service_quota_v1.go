// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_applied_quotas_service_quota_v1.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1 "github.com/confluentinc/ccloud-sdk-go-v2/service-quota/v1"
)

// AppliedQuotasServiceQuotaV1Api is a mock of AppliedQuotasServiceQuotaV1Api interface
type AppliedQuotasServiceQuotaV1Api struct {
	lockGetServiceQuotaV1AppliedQuota sync.Mutex
	GetServiceQuotaV1AppliedQuotaFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiGetServiceQuotaV1AppliedQuotaRequest

	lockGetServiceQuotaV1AppliedQuotaExecute sync.Mutex
	GetServiceQuotaV1AppliedQuotaExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiGetServiceQuotaV1AppliedQuotaRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ServiceQuotaV1AppliedQuota, *net_http.Response, error)

	lockListServiceQuotaV1AppliedQuotas sync.Mutex
	ListServiceQuotaV1AppliedQuotasFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiListServiceQuotaV1AppliedQuotasRequest

	lockListServiceQuotaV1AppliedQuotasExecute sync.Mutex
	ListServiceQuotaV1AppliedQuotasExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiListServiceQuotaV1AppliedQuotasRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ServiceQuotaV1AppliedQuotaList, *net_http.Response, error)

	calls struct {
		GetServiceQuotaV1AppliedQuota []struct {
			Ctx context.Context
			Id  string
		}
		GetServiceQuotaV1AppliedQuotaExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiGetServiceQuotaV1AppliedQuotaRequest
		}
		ListServiceQuotaV1AppliedQuotas []struct {
			Ctx context.Context
		}
		ListServiceQuotaV1AppliedQuotasExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiListServiceQuotaV1AppliedQuotasRequest
		}
	}
}

// GetServiceQuotaV1AppliedQuota mocks base method by wrapping the associated func.
func (m *AppliedQuotasServiceQuotaV1Api) GetServiceQuotaV1AppliedQuota(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiGetServiceQuotaV1AppliedQuotaRequest {
	m.lockGetServiceQuotaV1AppliedQuota.Lock()
	defer m.lockGetServiceQuotaV1AppliedQuota.Unlock()

	if m.GetServiceQuotaV1AppliedQuotaFunc == nil {
		panic("mocker: AppliedQuotasServiceQuotaV1Api.GetServiceQuotaV1AppliedQuotaFunc is nil but AppliedQuotasServiceQuotaV1Api.GetServiceQuotaV1AppliedQuota was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetServiceQuotaV1AppliedQuota = append(m.calls.GetServiceQuotaV1AppliedQuota, call)

	return m.GetServiceQuotaV1AppliedQuotaFunc(ctx, id)
}

// GetServiceQuotaV1AppliedQuotaCalled returns true if GetServiceQuotaV1AppliedQuota was called at least once.
func (m *AppliedQuotasServiceQuotaV1Api) GetServiceQuotaV1AppliedQuotaCalled() bool {
	m.lockGetServiceQuotaV1AppliedQuota.Lock()
	defer m.lockGetServiceQuotaV1AppliedQuota.Unlock()

	return len(m.calls.GetServiceQuotaV1AppliedQuota) > 0
}

// GetServiceQuotaV1AppliedQuotaCalls returns the calls made to GetServiceQuotaV1AppliedQuota.
func (m *AppliedQuotasServiceQuotaV1Api) GetServiceQuotaV1AppliedQuotaCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetServiceQuotaV1AppliedQuota.Lock()
	defer m.lockGetServiceQuotaV1AppliedQuota.Unlock()

	return m.calls.GetServiceQuotaV1AppliedQuota
}

// GetServiceQuotaV1AppliedQuotaExecute mocks base method by wrapping the associated func.
func (m *AppliedQuotasServiceQuotaV1Api) GetServiceQuotaV1AppliedQuotaExecute(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiGetServiceQuotaV1AppliedQuotaRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ServiceQuotaV1AppliedQuota, *net_http.Response, error) {
	m.lockGetServiceQuotaV1AppliedQuotaExecute.Lock()
	defer m.lockGetServiceQuotaV1AppliedQuotaExecute.Unlock()

	if m.GetServiceQuotaV1AppliedQuotaExecuteFunc == nil {
		panic("mocker: AppliedQuotasServiceQuotaV1Api.GetServiceQuotaV1AppliedQuotaExecuteFunc is nil but AppliedQuotasServiceQuotaV1Api.GetServiceQuotaV1AppliedQuotaExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiGetServiceQuotaV1AppliedQuotaRequest
	}{
		R: r,
	}

	m.calls.GetServiceQuotaV1AppliedQuotaExecute = append(m.calls.GetServiceQuotaV1AppliedQuotaExecute, call)

	return m.GetServiceQuotaV1AppliedQuotaExecuteFunc(r)
}

// GetServiceQuotaV1AppliedQuotaExecuteCalled returns true if GetServiceQuotaV1AppliedQuotaExecute was called at least once.
func (m *AppliedQuotasServiceQuotaV1Api) GetServiceQuotaV1AppliedQuotaExecuteCalled() bool {
	m.lockGetServiceQuotaV1AppliedQuotaExecute.Lock()
	defer m.lockGetServiceQuotaV1AppliedQuotaExecute.Unlock()

	return len(m.calls.GetServiceQuotaV1AppliedQuotaExecute) > 0
}

// GetServiceQuotaV1AppliedQuotaExecuteCalls returns the calls made to GetServiceQuotaV1AppliedQuotaExecute.
func (m *AppliedQuotasServiceQuotaV1Api) GetServiceQuotaV1AppliedQuotaExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiGetServiceQuotaV1AppliedQuotaRequest
} {
	m.lockGetServiceQuotaV1AppliedQuotaExecute.Lock()
	defer m.lockGetServiceQuotaV1AppliedQuotaExecute.Unlock()

	return m.calls.GetServiceQuotaV1AppliedQuotaExecute
}

// ListServiceQuotaV1AppliedQuotas mocks base method by wrapping the associated func.
func (m *AppliedQuotasServiceQuotaV1Api) ListServiceQuotaV1AppliedQuotas(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiListServiceQuotaV1AppliedQuotasRequest {
	m.lockListServiceQuotaV1AppliedQuotas.Lock()
	defer m.lockListServiceQuotaV1AppliedQuotas.Unlock()

	if m.ListServiceQuotaV1AppliedQuotasFunc == nil {
		panic("mocker: AppliedQuotasServiceQuotaV1Api.ListServiceQuotaV1AppliedQuotasFunc is nil but AppliedQuotasServiceQuotaV1Api.ListServiceQuotaV1AppliedQuotas was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListServiceQuotaV1AppliedQuotas = append(m.calls.ListServiceQuotaV1AppliedQuotas, call)

	return m.ListServiceQuotaV1AppliedQuotasFunc(ctx)
}

// ListServiceQuotaV1AppliedQuotasCalled returns true if ListServiceQuotaV1AppliedQuotas was called at least once.
func (m *AppliedQuotasServiceQuotaV1Api) ListServiceQuotaV1AppliedQuotasCalled() bool {
	m.lockListServiceQuotaV1AppliedQuotas.Lock()
	defer m.lockListServiceQuotaV1AppliedQuotas.Unlock()

	return len(m.calls.ListServiceQuotaV1AppliedQuotas) > 0
}

// ListServiceQuotaV1AppliedQuotasCalls returns the calls made to ListServiceQuotaV1AppliedQuotas.
func (m *AppliedQuotasServiceQuotaV1Api) ListServiceQuotaV1AppliedQuotasCalls() []struct {
	Ctx context.Context
} {
	m.lockListServiceQuotaV1AppliedQuotas.Lock()
	defer m.lockListServiceQuotaV1AppliedQuotas.Unlock()

	return m.calls.ListServiceQuotaV1AppliedQuotas
}

// ListServiceQuotaV1AppliedQuotasExecute mocks base method by wrapping the associated func.
func (m *AppliedQuotasServiceQuotaV1Api) ListServiceQuotaV1AppliedQuotasExecute(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiListServiceQuotaV1AppliedQuotasRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ServiceQuotaV1AppliedQuotaList, *net_http.Response, error) {
	m.lockListServiceQuotaV1AppliedQuotasExecute.Lock()
	defer m.lockListServiceQuotaV1AppliedQuotasExecute.Unlock()

	if m.ListServiceQuotaV1AppliedQuotasExecuteFunc == nil {
		panic("mocker: AppliedQuotasServiceQuotaV1Api.ListServiceQuotaV1AppliedQuotasExecuteFunc is nil but AppliedQuotasServiceQuotaV1Api.ListServiceQuotaV1AppliedQuotasExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiListServiceQuotaV1AppliedQuotasRequest
	}{
		R: r,
	}

	m.calls.ListServiceQuotaV1AppliedQuotasExecute = append(m.calls.ListServiceQuotaV1AppliedQuotasExecute, call)

	return m.ListServiceQuotaV1AppliedQuotasExecuteFunc(r)
}

// ListServiceQuotaV1AppliedQuotasExecuteCalled returns true if ListServiceQuotaV1AppliedQuotasExecute was called at least once.
func (m *AppliedQuotasServiceQuotaV1Api) ListServiceQuotaV1AppliedQuotasExecuteCalled() bool {
	m.lockListServiceQuotaV1AppliedQuotasExecute.Lock()
	defer m.lockListServiceQuotaV1AppliedQuotasExecute.Unlock()

	return len(m.calls.ListServiceQuotaV1AppliedQuotasExecute) > 0
}

// ListServiceQuotaV1AppliedQuotasExecuteCalls returns the calls made to ListServiceQuotaV1AppliedQuotasExecute.
func (m *AppliedQuotasServiceQuotaV1Api) ListServiceQuotaV1AppliedQuotasExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v1.ApiListServiceQuotaV1AppliedQuotasRequest
} {
	m.lockListServiceQuotaV1AppliedQuotasExecute.Lock()
	defer m.lockListServiceQuotaV1AppliedQuotasExecute.Unlock()

	return m.calls.ListServiceQuotaV1AppliedQuotasExecute
}

// Reset resets the calls made to the mocked methods.
func (m *AppliedQuotasServiceQuotaV1Api) Reset() {
	m.lockGetServiceQuotaV1AppliedQuota.Lock()
	m.calls.GetServiceQuotaV1AppliedQuota = nil
	m.lockGetServiceQuotaV1AppliedQuota.Unlock()
	m.lockGetServiceQuotaV1AppliedQuotaExecute.Lock()
	m.calls.GetServiceQuotaV1AppliedQuotaExecute = nil
	m.lockGetServiceQuotaV1AppliedQuotaExecute.Unlock()
	m.lockListServiceQuotaV1AppliedQuotas.Lock()
	m.calls.ListServiceQuotaV1AppliedQuotas = nil
	m.lockListServiceQuotaV1AppliedQuotas.Unlock()
	m.lockListServiceQuotaV1AppliedQuotasExecute.Lock()
	m.calls.ListServiceQuotaV1AppliedQuotasExecute = nil
	m.lockListServiceQuotaV1AppliedQuotasExecute.Unlock()
}
