// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_applied_quotas_service_quota_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2 "github.com/confluentinc/ccloud-sdk-go-v2/service-quota/v2"
)

// AppliedQuotasServiceQuotaV2Api is a mock of AppliedQuotasServiceQuotaV2Api interface
type AppliedQuotasServiceQuotaV2Api struct {
	lockGetServiceQuotaV2AppliedQuota sync.Mutex
	GetServiceQuotaV2AppliedQuotaFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2AppliedQuotaRequest

	lockGetServiceQuotaV2AppliedQuotaExecute sync.Mutex
	GetServiceQuotaV2AppliedQuotaExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2AppliedQuotaRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ServiceQuotaV2AppliedQuota, *net_http.Response, error)

	lockListServiceQuotaV2AppliedQuotas sync.Mutex
	ListServiceQuotaV2AppliedQuotasFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2AppliedQuotasRequest

	lockListServiceQuotaV2AppliedQuotasExecute sync.Mutex
	ListServiceQuotaV2AppliedQuotasExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2AppliedQuotasRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ServiceQuotaV2AppliedQuotaList, *net_http.Response, error)

	calls struct {
		GetServiceQuotaV2AppliedQuota []struct {
			Ctx context.Context
			Id  string
		}
		GetServiceQuotaV2AppliedQuotaExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2AppliedQuotaRequest
		}
		ListServiceQuotaV2AppliedQuotas []struct {
			Ctx context.Context
		}
		ListServiceQuotaV2AppliedQuotasExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2AppliedQuotasRequest
		}
	}
}

// GetServiceQuotaV2AppliedQuota mocks base method by wrapping the associated func.
func (m *AppliedQuotasServiceQuotaV2Api) GetServiceQuotaV2AppliedQuota(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2AppliedQuotaRequest {
	m.lockGetServiceQuotaV2AppliedQuota.Lock()
	defer m.lockGetServiceQuotaV2AppliedQuota.Unlock()

	if m.GetServiceQuotaV2AppliedQuotaFunc == nil {
		panic("mocker: AppliedQuotasServiceQuotaV2Api.GetServiceQuotaV2AppliedQuotaFunc is nil but AppliedQuotasServiceQuotaV2Api.GetServiceQuotaV2AppliedQuota was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetServiceQuotaV2AppliedQuota = append(m.calls.GetServiceQuotaV2AppliedQuota, call)

	return m.GetServiceQuotaV2AppliedQuotaFunc(ctx, id)
}

// GetServiceQuotaV2AppliedQuotaCalled returns true if GetServiceQuotaV2AppliedQuota was called at least once.
func (m *AppliedQuotasServiceQuotaV2Api) GetServiceQuotaV2AppliedQuotaCalled() bool {
	m.lockGetServiceQuotaV2AppliedQuota.Lock()
	defer m.lockGetServiceQuotaV2AppliedQuota.Unlock()

	return len(m.calls.GetServiceQuotaV2AppliedQuota) > 0
}

// GetServiceQuotaV2AppliedQuotaCalls returns the calls made to GetServiceQuotaV2AppliedQuota.
func (m *AppliedQuotasServiceQuotaV2Api) GetServiceQuotaV2AppliedQuotaCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetServiceQuotaV2AppliedQuota.Lock()
	defer m.lockGetServiceQuotaV2AppliedQuota.Unlock()

	return m.calls.GetServiceQuotaV2AppliedQuota
}

// GetServiceQuotaV2AppliedQuotaExecute mocks base method by wrapping the associated func.
func (m *AppliedQuotasServiceQuotaV2Api) GetServiceQuotaV2AppliedQuotaExecute(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2AppliedQuotaRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ServiceQuotaV2AppliedQuota, *net_http.Response, error) {
	m.lockGetServiceQuotaV2AppliedQuotaExecute.Lock()
	defer m.lockGetServiceQuotaV2AppliedQuotaExecute.Unlock()

	if m.GetServiceQuotaV2AppliedQuotaExecuteFunc == nil {
		panic("mocker: AppliedQuotasServiceQuotaV2Api.GetServiceQuotaV2AppliedQuotaExecuteFunc is nil but AppliedQuotasServiceQuotaV2Api.GetServiceQuotaV2AppliedQuotaExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2AppliedQuotaRequest
	}{
		R: r,
	}

	m.calls.GetServiceQuotaV2AppliedQuotaExecute = append(m.calls.GetServiceQuotaV2AppliedQuotaExecute, call)

	return m.GetServiceQuotaV2AppliedQuotaExecuteFunc(r)
}

// GetServiceQuotaV2AppliedQuotaExecuteCalled returns true if GetServiceQuotaV2AppliedQuotaExecute was called at least once.
func (m *AppliedQuotasServiceQuotaV2Api) GetServiceQuotaV2AppliedQuotaExecuteCalled() bool {
	m.lockGetServiceQuotaV2AppliedQuotaExecute.Lock()
	defer m.lockGetServiceQuotaV2AppliedQuotaExecute.Unlock()

	return len(m.calls.GetServiceQuotaV2AppliedQuotaExecute) > 0
}

// GetServiceQuotaV2AppliedQuotaExecuteCalls returns the calls made to GetServiceQuotaV2AppliedQuotaExecute.
func (m *AppliedQuotasServiceQuotaV2Api) GetServiceQuotaV2AppliedQuotaExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2AppliedQuotaRequest
} {
	m.lockGetServiceQuotaV2AppliedQuotaExecute.Lock()
	defer m.lockGetServiceQuotaV2AppliedQuotaExecute.Unlock()

	return m.calls.GetServiceQuotaV2AppliedQuotaExecute
}

// ListServiceQuotaV2AppliedQuotas mocks base method by wrapping the associated func.
func (m *AppliedQuotasServiceQuotaV2Api) ListServiceQuotaV2AppliedQuotas(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2AppliedQuotasRequest {
	m.lockListServiceQuotaV2AppliedQuotas.Lock()
	defer m.lockListServiceQuotaV2AppliedQuotas.Unlock()

	if m.ListServiceQuotaV2AppliedQuotasFunc == nil {
		panic("mocker: AppliedQuotasServiceQuotaV2Api.ListServiceQuotaV2AppliedQuotasFunc is nil but AppliedQuotasServiceQuotaV2Api.ListServiceQuotaV2AppliedQuotas was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListServiceQuotaV2AppliedQuotas = append(m.calls.ListServiceQuotaV2AppliedQuotas, call)

	return m.ListServiceQuotaV2AppliedQuotasFunc(ctx)
}

// ListServiceQuotaV2AppliedQuotasCalled returns true if ListServiceQuotaV2AppliedQuotas was called at least once.
func (m *AppliedQuotasServiceQuotaV2Api) ListServiceQuotaV2AppliedQuotasCalled() bool {
	m.lockListServiceQuotaV2AppliedQuotas.Lock()
	defer m.lockListServiceQuotaV2AppliedQuotas.Unlock()

	return len(m.calls.ListServiceQuotaV2AppliedQuotas) > 0
}

// ListServiceQuotaV2AppliedQuotasCalls returns the calls made to ListServiceQuotaV2AppliedQuotas.
func (m *AppliedQuotasServiceQuotaV2Api) ListServiceQuotaV2AppliedQuotasCalls() []struct {
	Ctx context.Context
} {
	m.lockListServiceQuotaV2AppliedQuotas.Lock()
	defer m.lockListServiceQuotaV2AppliedQuotas.Unlock()

	return m.calls.ListServiceQuotaV2AppliedQuotas
}

// ListServiceQuotaV2AppliedQuotasExecute mocks base method by wrapping the associated func.
func (m *AppliedQuotasServiceQuotaV2Api) ListServiceQuotaV2AppliedQuotasExecute(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2AppliedQuotasRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ServiceQuotaV2AppliedQuotaList, *net_http.Response, error) {
	m.lockListServiceQuotaV2AppliedQuotasExecute.Lock()
	defer m.lockListServiceQuotaV2AppliedQuotasExecute.Unlock()

	if m.ListServiceQuotaV2AppliedQuotasExecuteFunc == nil {
		panic("mocker: AppliedQuotasServiceQuotaV2Api.ListServiceQuotaV2AppliedQuotasExecuteFunc is nil but AppliedQuotasServiceQuotaV2Api.ListServiceQuotaV2AppliedQuotasExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2AppliedQuotasRequest
	}{
		R: r,
	}

	m.calls.ListServiceQuotaV2AppliedQuotasExecute = append(m.calls.ListServiceQuotaV2AppliedQuotasExecute, call)

	return m.ListServiceQuotaV2AppliedQuotasExecuteFunc(r)
}

// ListServiceQuotaV2AppliedQuotasExecuteCalled returns true if ListServiceQuotaV2AppliedQuotasExecute was called at least once.
func (m *AppliedQuotasServiceQuotaV2Api) ListServiceQuotaV2AppliedQuotasExecuteCalled() bool {
	m.lockListServiceQuotaV2AppliedQuotasExecute.Lock()
	defer m.lockListServiceQuotaV2AppliedQuotasExecute.Unlock()

	return len(m.calls.ListServiceQuotaV2AppliedQuotasExecute) > 0
}

// ListServiceQuotaV2AppliedQuotasExecuteCalls returns the calls made to ListServiceQuotaV2AppliedQuotasExecute.
func (m *AppliedQuotasServiceQuotaV2Api) ListServiceQuotaV2AppliedQuotasExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2AppliedQuotasRequest
} {
	m.lockListServiceQuotaV2AppliedQuotasExecute.Lock()
	defer m.lockListServiceQuotaV2AppliedQuotasExecute.Unlock()

	return m.calls.ListServiceQuotaV2AppliedQuotasExecute
}

// Reset resets the calls made to the mocked methods.
func (m *AppliedQuotasServiceQuotaV2Api) Reset() {
	m.lockGetServiceQuotaV2AppliedQuota.Lock()
	m.calls.GetServiceQuotaV2AppliedQuota = nil
	m.lockGetServiceQuotaV2AppliedQuota.Unlock()
	m.lockGetServiceQuotaV2AppliedQuotaExecute.Lock()
	m.calls.GetServiceQuotaV2AppliedQuotaExecute = nil
	m.lockGetServiceQuotaV2AppliedQuotaExecute.Unlock()
	m.lockListServiceQuotaV2AppliedQuotas.Lock()
	m.calls.ListServiceQuotaV2AppliedQuotas = nil
	m.lockListServiceQuotaV2AppliedQuotas.Unlock()
	m.lockListServiceQuotaV2AppliedQuotasExecute.Lock()
	m.calls.ListServiceQuotaV2AppliedQuotasExecute = nil
	m.lockListServiceQuotaV2AppliedQuotasExecute.Unlock()
}
