// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_scopes_service_quota_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2 "github.com/confluentinc/ccloud-sdk-go-v2/service-quota/v2"
)

// ScopesServiceQuotaV2Api is a mock of ScopesServiceQuotaV2Api interface
type ScopesServiceQuotaV2Api struct {
	lockGetServiceQuotaV2Scope sync.Mutex
	GetServiceQuotaV2ScopeFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2ScopeRequest

	lockGetServiceQuotaV2ScopeExecute sync.Mutex
	GetServiceQuotaV2ScopeExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2ScopeRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ServiceQuotaV2Scope, *net_http.Response, error)

	lockListServiceQuotaV2Scopes sync.Mutex
	ListServiceQuotaV2ScopesFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2ScopesRequest

	lockListServiceQuotaV2ScopesExecute sync.Mutex
	ListServiceQuotaV2ScopesExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2ScopesRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ServiceQuotaV2ScopeList, *net_http.Response, error)

	calls struct {
		GetServiceQuotaV2Scope []struct {
			Ctx context.Context
			Id  string
		}
		GetServiceQuotaV2ScopeExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2ScopeRequest
		}
		ListServiceQuotaV2Scopes []struct {
			Ctx context.Context
		}
		ListServiceQuotaV2ScopesExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2ScopesRequest
		}
	}
}

// GetServiceQuotaV2Scope mocks base method by wrapping the associated func.
func (m *ScopesServiceQuotaV2Api) GetServiceQuotaV2Scope(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2ScopeRequest {
	m.lockGetServiceQuotaV2Scope.Lock()
	defer m.lockGetServiceQuotaV2Scope.Unlock()

	if m.GetServiceQuotaV2ScopeFunc == nil {
		panic("mocker: ScopesServiceQuotaV2Api.GetServiceQuotaV2ScopeFunc is nil but ScopesServiceQuotaV2Api.GetServiceQuotaV2Scope was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetServiceQuotaV2Scope = append(m.calls.GetServiceQuotaV2Scope, call)

	return m.GetServiceQuotaV2ScopeFunc(ctx, id)
}

// GetServiceQuotaV2ScopeCalled returns true if GetServiceQuotaV2Scope was called at least once.
func (m *ScopesServiceQuotaV2Api) GetServiceQuotaV2ScopeCalled() bool {
	m.lockGetServiceQuotaV2Scope.Lock()
	defer m.lockGetServiceQuotaV2Scope.Unlock()

	return len(m.calls.GetServiceQuotaV2Scope) > 0
}

// GetServiceQuotaV2ScopeCalls returns the calls made to GetServiceQuotaV2Scope.
func (m *ScopesServiceQuotaV2Api) GetServiceQuotaV2ScopeCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetServiceQuotaV2Scope.Lock()
	defer m.lockGetServiceQuotaV2Scope.Unlock()

	return m.calls.GetServiceQuotaV2Scope
}

// GetServiceQuotaV2ScopeExecute mocks base method by wrapping the associated func.
func (m *ScopesServiceQuotaV2Api) GetServiceQuotaV2ScopeExecute(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2ScopeRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ServiceQuotaV2Scope, *net_http.Response, error) {
	m.lockGetServiceQuotaV2ScopeExecute.Lock()
	defer m.lockGetServiceQuotaV2ScopeExecute.Unlock()

	if m.GetServiceQuotaV2ScopeExecuteFunc == nil {
		panic("mocker: ScopesServiceQuotaV2Api.GetServiceQuotaV2ScopeExecuteFunc is nil but ScopesServiceQuotaV2Api.GetServiceQuotaV2ScopeExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2ScopeRequest
	}{
		R: r,
	}

	m.calls.GetServiceQuotaV2ScopeExecute = append(m.calls.GetServiceQuotaV2ScopeExecute, call)

	return m.GetServiceQuotaV2ScopeExecuteFunc(r)
}

// GetServiceQuotaV2ScopeExecuteCalled returns true if GetServiceQuotaV2ScopeExecute was called at least once.
func (m *ScopesServiceQuotaV2Api) GetServiceQuotaV2ScopeExecuteCalled() bool {
	m.lockGetServiceQuotaV2ScopeExecute.Lock()
	defer m.lockGetServiceQuotaV2ScopeExecute.Unlock()

	return len(m.calls.GetServiceQuotaV2ScopeExecute) > 0
}

// GetServiceQuotaV2ScopeExecuteCalls returns the calls made to GetServiceQuotaV2ScopeExecute.
func (m *ScopesServiceQuotaV2Api) GetServiceQuotaV2ScopeExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiGetServiceQuotaV2ScopeRequest
} {
	m.lockGetServiceQuotaV2ScopeExecute.Lock()
	defer m.lockGetServiceQuotaV2ScopeExecute.Unlock()

	return m.calls.GetServiceQuotaV2ScopeExecute
}

// ListServiceQuotaV2Scopes mocks base method by wrapping the associated func.
func (m *ScopesServiceQuotaV2Api) ListServiceQuotaV2Scopes(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2ScopesRequest {
	m.lockListServiceQuotaV2Scopes.Lock()
	defer m.lockListServiceQuotaV2Scopes.Unlock()

	if m.ListServiceQuotaV2ScopesFunc == nil {
		panic("mocker: ScopesServiceQuotaV2Api.ListServiceQuotaV2ScopesFunc is nil but ScopesServiceQuotaV2Api.ListServiceQuotaV2Scopes was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListServiceQuotaV2Scopes = append(m.calls.ListServiceQuotaV2Scopes, call)

	return m.ListServiceQuotaV2ScopesFunc(ctx)
}

// ListServiceQuotaV2ScopesCalled returns true if ListServiceQuotaV2Scopes was called at least once.
func (m *ScopesServiceQuotaV2Api) ListServiceQuotaV2ScopesCalled() bool {
	m.lockListServiceQuotaV2Scopes.Lock()
	defer m.lockListServiceQuotaV2Scopes.Unlock()

	return len(m.calls.ListServiceQuotaV2Scopes) > 0
}

// ListServiceQuotaV2ScopesCalls returns the calls made to ListServiceQuotaV2Scopes.
func (m *ScopesServiceQuotaV2Api) ListServiceQuotaV2ScopesCalls() []struct {
	Ctx context.Context
} {
	m.lockListServiceQuotaV2Scopes.Lock()
	defer m.lockListServiceQuotaV2Scopes.Unlock()

	return m.calls.ListServiceQuotaV2Scopes
}

// ListServiceQuotaV2ScopesExecute mocks base method by wrapping the associated func.
func (m *ScopesServiceQuotaV2Api) ListServiceQuotaV2ScopesExecute(r github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2ScopesRequest) (github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ServiceQuotaV2ScopeList, *net_http.Response, error) {
	m.lockListServiceQuotaV2ScopesExecute.Lock()
	defer m.lockListServiceQuotaV2ScopesExecute.Unlock()

	if m.ListServiceQuotaV2ScopesExecuteFunc == nil {
		panic("mocker: ScopesServiceQuotaV2Api.ListServiceQuotaV2ScopesExecuteFunc is nil but ScopesServiceQuotaV2Api.ListServiceQuotaV2ScopesExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2ScopesRequest
	}{
		R: r,
	}

	m.calls.ListServiceQuotaV2ScopesExecute = append(m.calls.ListServiceQuotaV2ScopesExecute, call)

	return m.ListServiceQuotaV2ScopesExecuteFunc(r)
}

// ListServiceQuotaV2ScopesExecuteCalled returns true if ListServiceQuotaV2ScopesExecute was called at least once.
func (m *ScopesServiceQuotaV2Api) ListServiceQuotaV2ScopesExecuteCalled() bool {
	m.lockListServiceQuotaV2ScopesExecute.Lock()
	defer m.lockListServiceQuotaV2ScopesExecute.Unlock()

	return len(m.calls.ListServiceQuotaV2ScopesExecute) > 0
}

// ListServiceQuotaV2ScopesExecuteCalls returns the calls made to ListServiceQuotaV2ScopesExecute.
func (m *ScopesServiceQuotaV2Api) ListServiceQuotaV2ScopesExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_service_quota_v2.ApiListServiceQuotaV2ScopesRequest
} {
	m.lockListServiceQuotaV2ScopesExecute.Lock()
	defer m.lockListServiceQuotaV2ScopesExecute.Unlock()

	return m.calls.ListServiceQuotaV2ScopesExecute
}

// Reset resets the calls made to the mocked methods.
func (m *ScopesServiceQuotaV2Api) Reset() {
	m.lockGetServiceQuotaV2Scope.Lock()
	m.calls.GetServiceQuotaV2Scope = nil
	m.lockGetServiceQuotaV2Scope.Unlock()
	m.lockGetServiceQuotaV2ScopeExecute.Lock()
	m.calls.GetServiceQuotaV2ScopeExecute = nil
	m.lockGetServiceQuotaV2ScopeExecute.Unlock()
	m.lockListServiceQuotaV2Scopes.Lock()
	m.calls.ListServiceQuotaV2Scopes = nil
	m.lockListServiceQuotaV2Scopes.Unlock()
	m.lockListServiceQuotaV2ScopesExecute.Lock()
	m.calls.ListServiceQuotaV2ScopesExecute = nil
	m.lockListServiceQuotaV2ScopesExecute.Unlock()
}
