// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network API

Network API

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// NetworkingV1AccessPointStatusConfigOneOf - struct for NetworkingV1AccessPointStatusConfigOneOf
type NetworkingV1AccessPointStatusConfigOneOf struct {
	NetworkingV1AwsEgressPrivateLinkEndpointStatus           *NetworkingV1AwsEgressPrivateLinkEndpointStatus
	NetworkingV1AzureEgressPrivateLinkEndpointStatus         *NetworkingV1AzureEgressPrivateLinkEndpointStatus
	NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus *NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus
}

// NetworkingV1AwsEgressPrivateLinkEndpointStatusAsNetworkingV1AccessPointStatusConfigOneOf is a convenience function that returns NetworkingV1AwsEgressPrivateLinkEndpointStatus wrapped in NetworkingV1AccessPointStatusConfigOneOf
func NetworkingV1AwsEgressPrivateLinkEndpointStatusAsNetworkingV1AccessPointStatusConfigOneOf(v *NetworkingV1AwsEgressPrivateLinkEndpointStatus) NetworkingV1AccessPointStatusConfigOneOf {
	return NetworkingV1AccessPointStatusConfigOneOf{NetworkingV1AwsEgressPrivateLinkEndpointStatus: v}
}

// NetworkingV1AzureEgressPrivateLinkEndpointStatusAsNetworkingV1AccessPointStatusConfigOneOf is a convenience function that returns NetworkingV1AzureEgressPrivateLinkEndpointStatus wrapped in NetworkingV1AccessPointStatusConfigOneOf
func NetworkingV1AzureEgressPrivateLinkEndpointStatusAsNetworkingV1AccessPointStatusConfigOneOf(v *NetworkingV1AzureEgressPrivateLinkEndpointStatus) NetworkingV1AccessPointStatusConfigOneOf {
	return NetworkingV1AccessPointStatusConfigOneOf{NetworkingV1AzureEgressPrivateLinkEndpointStatus: v}
}

// NetworkingV1GcpEgressPrivateServiceConnectEndpointStatusAsNetworkingV1AccessPointStatusConfigOneOf is a convenience function that returns NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus wrapped in NetworkingV1AccessPointStatusConfigOneOf
func NetworkingV1GcpEgressPrivateServiceConnectEndpointStatusAsNetworkingV1AccessPointStatusConfigOneOf(v *NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus) NetworkingV1AccessPointStatusConfigOneOf {
	return NetworkingV1AccessPointStatusConfigOneOf{NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkingV1AccessPointStatusConfigOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsEgressPrivateLinkEndpointStatus'
	if jsonDict["kind"] == "AwsEgressPrivateLinkEndpointStatus" {
		// try to unmarshal JSON data into NetworkingV1AwsEgressPrivateLinkEndpointStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AwsEgressPrivateLinkEndpointStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsEgressPrivateLinkEndpointStatus, return on the first match
		} else {
			dst.NetworkingV1AwsEgressPrivateLinkEndpointStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1AccessPointStatusConfigOneOf as NetworkingV1AwsEgressPrivateLinkEndpointStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureEgressPrivateLinkEndpointStatus'
	if jsonDict["kind"] == "AzureEgressPrivateLinkEndpointStatus" {
		// try to unmarshal JSON data into NetworkingV1AzureEgressPrivateLinkEndpointStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AzureEgressPrivateLinkEndpointStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzureEgressPrivateLinkEndpointStatus, return on the first match
		} else {
			dst.NetworkingV1AzureEgressPrivateLinkEndpointStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1AccessPointStatusConfigOneOf as NetworkingV1AzureEgressPrivateLinkEndpointStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpEgressPrivateServiceConnectEndpointStatus'
	if jsonDict["kind"] == "GcpEgressPrivateServiceConnectEndpointStatus" {
		// try to unmarshal JSON data into NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus
		err = json.Unmarshal(data, &dst.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus, return on the first match
		} else {
			dst.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1AccessPointStatusConfigOneOf as NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AwsEgressPrivateLinkEndpointStatus'
	if jsonDict["kind"] == "networking.v1.AwsEgressPrivateLinkEndpointStatus" {
		// try to unmarshal JSON data into NetworkingV1AwsEgressPrivateLinkEndpointStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AwsEgressPrivateLinkEndpointStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsEgressPrivateLinkEndpointStatus, return on the first match
		} else {
			dst.NetworkingV1AwsEgressPrivateLinkEndpointStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1AccessPointStatusConfigOneOf as NetworkingV1AwsEgressPrivateLinkEndpointStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AzureEgressPrivateLinkEndpointStatus'
	if jsonDict["kind"] == "networking.v1.AzureEgressPrivateLinkEndpointStatus" {
		// try to unmarshal JSON data into NetworkingV1AzureEgressPrivateLinkEndpointStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AzureEgressPrivateLinkEndpointStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzureEgressPrivateLinkEndpointStatus, return on the first match
		} else {
			dst.NetworkingV1AzureEgressPrivateLinkEndpointStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1AccessPointStatusConfigOneOf as NetworkingV1AzureEgressPrivateLinkEndpointStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.GcpEgressPrivateServiceConnectEndpointStatus'
	if jsonDict["kind"] == "networking.v1.GcpEgressPrivateServiceConnectEndpointStatus" {
		// try to unmarshal JSON data into NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus
		err = json.Unmarshal(data, &dst.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus, return on the first match
		} else {
			dst.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1AccessPointStatusConfigOneOf as NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkingV1AccessPointStatusConfigOneOf) MarshalJSON() ([]byte, error) {
	if src.NetworkingV1AwsEgressPrivateLinkEndpointStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AwsEgressPrivateLinkEndpointStatus)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1AzureEgressPrivateLinkEndpointStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AzureEgressPrivateLinkEndpointStatus)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkingV1AccessPointStatusConfigOneOf) GetActualInstance() interface{} {
	if obj.NetworkingV1AwsEgressPrivateLinkEndpointStatus != nil {
		return obj.NetworkingV1AwsEgressPrivateLinkEndpointStatus
	}

	if obj.NetworkingV1AzureEgressPrivateLinkEndpointStatus != nil {
		return obj.NetworkingV1AzureEgressPrivateLinkEndpointStatus
	}

	if obj.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus != nil {
		return obj.NetworkingV1GcpEgressPrivateServiceConnectEndpointStatus
	}

	// all schemas are nil
	return nil
}

type NullableNetworkingV1AccessPointStatusConfigOneOf struct {
	value *NetworkingV1AccessPointStatusConfigOneOf
	isSet bool
}

func (v NullableNetworkingV1AccessPointStatusConfigOneOf) Get() *NetworkingV1AccessPointStatusConfigOneOf {
	return v.value
}

func (v *NullableNetworkingV1AccessPointStatusConfigOneOf) Set(val *NetworkingV1AccessPointStatusConfigOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingV1AccessPointStatusConfigOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingV1AccessPointStatusConfigOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingV1AccessPointStatusConfigOneOf(val *NetworkingV1AccessPointStatusConfigOneOf) *NullableNetworkingV1AccessPointStatusConfigOneOf {
	return &NullableNetworkingV1AccessPointStatusConfigOneOf{value: val, isSet: true}
}

func (v NullableNetworkingV1AccessPointStatusConfigOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableNetworkingV1AccessPointStatusConfigOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
