// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Plugin Management API

This is Custom Plugin Management API.

API version: 1.0.0
Contact: compute-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CcpV1UploadSourcePresignedUrl Presigned url of uploaded custom plugin archive.
type CcpV1UploadSourcePresignedUrl struct {
	// Location of custom plugin source.
	Location string `json:"location,omitempty"`
	// Upload id returned by `/presigned-upload-url` API. This field returns empty string in all responses.
	UploadId string `json:"upload_id,omitempty"`
}

// NewCcpV1UploadSourcePresignedUrl instantiates a new CcpV1UploadSourcePresignedUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCcpV1UploadSourcePresignedUrl(location string, uploadId string) *CcpV1UploadSourcePresignedUrl {
	this := CcpV1UploadSourcePresignedUrl{}
	this.Location = location
	this.UploadId = uploadId
	return &this
}

// NewCcpV1UploadSourcePresignedUrlWithDefaults instantiates a new CcpV1UploadSourcePresignedUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCcpV1UploadSourcePresignedUrlWithDefaults() *CcpV1UploadSourcePresignedUrl {
	this := CcpV1UploadSourcePresignedUrl{}
	return &this
}

// GetLocation returns the Location field value
func (o *CcpV1UploadSourcePresignedUrl) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *CcpV1UploadSourcePresignedUrl) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *CcpV1UploadSourcePresignedUrl) SetLocation(v string) {
	o.Location = v
}

// GetUploadId returns the UploadId field value
func (o *CcpV1UploadSourcePresignedUrl) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *CcpV1UploadSourcePresignedUrl) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *CcpV1UploadSourcePresignedUrl) SetUploadId(v string) {
	o.UploadId = v
}

// Redact resets all sensitive fields to their zero value.
func (o *CcpV1UploadSourcePresignedUrl) Redact() {
	o.recurseRedact(&o.Location)
	o.recurseRedact(&o.UploadId)
}

func (o *CcpV1UploadSourcePresignedUrl) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CcpV1UploadSourcePresignedUrl) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CcpV1UploadSourcePresignedUrl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["upload_id"] = o.UploadId
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCcpV1UploadSourcePresignedUrl struct {
	value *CcpV1UploadSourcePresignedUrl
	isSet bool
}

func (v NullableCcpV1UploadSourcePresignedUrl) Get() *CcpV1UploadSourcePresignedUrl {
	return v.value
}

func (v *NullableCcpV1UploadSourcePresignedUrl) Set(val *CcpV1UploadSourcePresignedUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableCcpV1UploadSourcePresignedUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableCcpV1UploadSourcePresignedUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCcpV1UploadSourcePresignedUrl(val *CcpV1UploadSourcePresignedUrl) *NullableCcpV1UploadSourcePresignedUrl {
	return &NullableCcpV1UploadSourcePresignedUrl{value: val, isSet: true}
}

func (v NullableCcpV1UploadSourcePresignedUrl) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCcpV1UploadSourcePresignedUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
