// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Provider Integration Management API

REST API for the Provider Integration

API version: 0.1.0
Contact: identity-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PimV2IntegrationConfigOneOf - struct for PimV2IntegrationConfigOneOf
type PimV2IntegrationConfigOneOf struct {
	PimV2AwsIntegrationConfig   *PimV2AwsIntegrationConfig
	PimV2AzureIntegrationConfig *PimV2AzureIntegrationConfig
	PimV2GcpIntegrationConfig   *PimV2GcpIntegrationConfig
}

// PimV2AwsIntegrationConfigAsPimV2IntegrationConfigOneOf is a convenience function that returns PimV2AwsIntegrationConfig wrapped in PimV2IntegrationConfigOneOf
func PimV2AwsIntegrationConfigAsPimV2IntegrationConfigOneOf(v *PimV2AwsIntegrationConfig) PimV2IntegrationConfigOneOf {
	return PimV2IntegrationConfigOneOf{PimV2AwsIntegrationConfig: v}
}

// PimV2AzureIntegrationConfigAsPimV2IntegrationConfigOneOf is a convenience function that returns PimV2AzureIntegrationConfig wrapped in PimV2IntegrationConfigOneOf
func PimV2AzureIntegrationConfigAsPimV2IntegrationConfigOneOf(v *PimV2AzureIntegrationConfig) PimV2IntegrationConfigOneOf {
	return PimV2IntegrationConfigOneOf{PimV2AzureIntegrationConfig: v}
}

// PimV2GcpIntegrationConfigAsPimV2IntegrationConfigOneOf is a convenience function that returns PimV2GcpIntegrationConfig wrapped in PimV2IntegrationConfigOneOf
func PimV2GcpIntegrationConfigAsPimV2IntegrationConfigOneOf(v *PimV2GcpIntegrationConfig) PimV2IntegrationConfigOneOf {
	return PimV2IntegrationConfigOneOf{PimV2GcpIntegrationConfig: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PimV2IntegrationConfigOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsIntegrationConfig'
	if jsonDict["kind"] == "AwsIntegrationConfig" {
		// try to unmarshal JSON data into PimV2AwsIntegrationConfig
		err = json.Unmarshal(data, &dst.PimV2AwsIntegrationConfig)
		if err == nil {
			return nil // data stored in dst.PimV2AwsIntegrationConfig, return on the first match
		} else {
			dst.PimV2AwsIntegrationConfig = nil
			return fmt.Errorf("Failed to unmarshal PimV2IntegrationConfigOneOf as PimV2AwsIntegrationConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureIntegrationConfig'
	if jsonDict["kind"] == "AzureIntegrationConfig" {
		// try to unmarshal JSON data into PimV2AzureIntegrationConfig
		err = json.Unmarshal(data, &dst.PimV2AzureIntegrationConfig)
		if err == nil {
			return nil // data stored in dst.PimV2AzureIntegrationConfig, return on the first match
		} else {
			dst.PimV2AzureIntegrationConfig = nil
			return fmt.Errorf("Failed to unmarshal PimV2IntegrationConfigOneOf as PimV2AzureIntegrationConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpIntegrationConfig'
	if jsonDict["kind"] == "GcpIntegrationConfig" {
		// try to unmarshal JSON data into PimV2GcpIntegrationConfig
		err = json.Unmarshal(data, &dst.PimV2GcpIntegrationConfig)
		if err == nil {
			return nil // data stored in dst.PimV2GcpIntegrationConfig, return on the first match
		} else {
			dst.PimV2GcpIntegrationConfig = nil
			return fmt.Errorf("Failed to unmarshal PimV2IntegrationConfigOneOf as PimV2GcpIntegrationConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'pim.v2.AwsIntegrationConfig'
	if jsonDict["kind"] == "pim.v2.AwsIntegrationConfig" {
		// try to unmarshal JSON data into PimV2AwsIntegrationConfig
		err = json.Unmarshal(data, &dst.PimV2AwsIntegrationConfig)
		if err == nil {
			return nil // data stored in dst.PimV2AwsIntegrationConfig, return on the first match
		} else {
			dst.PimV2AwsIntegrationConfig = nil
			return fmt.Errorf("Failed to unmarshal PimV2IntegrationConfigOneOf as PimV2AwsIntegrationConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'pim.v2.AzureIntegrationConfig'
	if jsonDict["kind"] == "pim.v2.AzureIntegrationConfig" {
		// try to unmarshal JSON data into PimV2AzureIntegrationConfig
		err = json.Unmarshal(data, &dst.PimV2AzureIntegrationConfig)
		if err == nil {
			return nil // data stored in dst.PimV2AzureIntegrationConfig, return on the first match
		} else {
			dst.PimV2AzureIntegrationConfig = nil
			return fmt.Errorf("Failed to unmarshal PimV2IntegrationConfigOneOf as PimV2AzureIntegrationConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'pim.v2.GcpIntegrationConfig'
	if jsonDict["kind"] == "pim.v2.GcpIntegrationConfig" {
		// try to unmarshal JSON data into PimV2GcpIntegrationConfig
		err = json.Unmarshal(data, &dst.PimV2GcpIntegrationConfig)
		if err == nil {
			return nil // data stored in dst.PimV2GcpIntegrationConfig, return on the first match
		} else {
			dst.PimV2GcpIntegrationConfig = nil
			return fmt.Errorf("Failed to unmarshal PimV2IntegrationConfigOneOf as PimV2GcpIntegrationConfig: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PimV2IntegrationConfigOneOf) MarshalJSON() ([]byte, error) {
	if src.PimV2AwsIntegrationConfig != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.PimV2AwsIntegrationConfig)
		return buffer.Bytes(), err
	}

	if src.PimV2AzureIntegrationConfig != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.PimV2AzureIntegrationConfig)
		return buffer.Bytes(), err
	}

	if src.PimV2GcpIntegrationConfig != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.PimV2GcpIntegrationConfig)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PimV2IntegrationConfigOneOf) GetActualInstance() interface{} {
	if obj.PimV2AwsIntegrationConfig != nil {
		return obj.PimV2AwsIntegrationConfig
	}

	if obj.PimV2AzureIntegrationConfig != nil {
		return obj.PimV2AzureIntegrationConfig
	}

	if obj.PimV2GcpIntegrationConfig != nil {
		return obj.PimV2GcpIntegrationConfig
	}

	// all schemas are nil
	return nil
}

type NullablePimV2IntegrationConfigOneOf struct {
	value *PimV2IntegrationConfigOneOf
	isSet bool
}

func (v NullablePimV2IntegrationConfigOneOf) Get() *PimV2IntegrationConfigOneOf {
	return v.value
}

func (v *NullablePimV2IntegrationConfigOneOf) Set(val *PimV2IntegrationConfigOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePimV2IntegrationConfigOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePimV2IntegrationConfigOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePimV2IntegrationConfigOneOf(val *PimV2IntegrationConfigOneOf) *NullablePimV2IntegrationConfigOneOf {
	return &NullablePimV2IntegrationConfigOneOf{value: val, isSet: true}
}

func (v NullablePimV2IntegrationConfigOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullablePimV2IntegrationConfigOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
