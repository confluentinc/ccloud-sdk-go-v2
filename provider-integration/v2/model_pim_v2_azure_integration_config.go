// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Provider Integration Management API

REST API for the Provider Integration

API version: 0.1.0
Contact: identity-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// PimV2AzureIntegrationConfig config schema for Azure cloud service provider.
type PimV2AzureIntegrationConfig struct {
	// The ID of the Confluent Multi-Tenant App that Confluent Cloud uses to impersonate customer Azure App when it accesses resources in your Azure subscription.
	ConfluentMultiTenantAppId *string `json:"confluent_multi_tenant_app_id,omitempty"`
	// The ID of the customer's Azure Active Directory (Azure AD) tenant
	CustomerAzureTenantId *string `json:"customer_azure_tenant_id,omitempty"`
	// Cloud provider specific config to which access is provided through provider integration.
	Kind string `json:"kind,omitempty"`
}

// NewPimV2AzureIntegrationConfig instantiates a new PimV2AzureIntegrationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPimV2AzureIntegrationConfig(kind string) *PimV2AzureIntegrationConfig {
	this := PimV2AzureIntegrationConfig{}
	this.Kind = kind
	return &this
}

// NewPimV2AzureIntegrationConfigWithDefaults instantiates a new PimV2AzureIntegrationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPimV2AzureIntegrationConfigWithDefaults() *PimV2AzureIntegrationConfig {
	this := PimV2AzureIntegrationConfig{}
	return &this
}

// GetConfluentMultiTenantAppId returns the ConfluentMultiTenantAppId field value if set, zero value otherwise.
func (o *PimV2AzureIntegrationConfig) GetConfluentMultiTenantAppId() string {
	if o == nil || o.ConfluentMultiTenantAppId == nil {
		var ret string
		return ret
	}
	return *o.ConfluentMultiTenantAppId
}

// GetConfluentMultiTenantAppIdOk returns a tuple with the ConfluentMultiTenantAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimV2AzureIntegrationConfig) GetConfluentMultiTenantAppIdOk() (*string, bool) {
	if o == nil || o.ConfluentMultiTenantAppId == nil {
		return nil, false
	}
	return o.ConfluentMultiTenantAppId, true
}

// HasConfluentMultiTenantAppId returns a boolean if a field has been set.
func (o *PimV2AzureIntegrationConfig) HasConfluentMultiTenantAppId() bool {
	if o != nil && o.ConfluentMultiTenantAppId != nil {
		return true
	}

	return false
}

// SetConfluentMultiTenantAppId gets a reference to the given string and assigns it to the ConfluentMultiTenantAppId field.
func (o *PimV2AzureIntegrationConfig) SetConfluentMultiTenantAppId(v string) {
	o.ConfluentMultiTenantAppId = &v
}

// GetCustomerAzureTenantId returns the CustomerAzureTenantId field value if set, zero value otherwise.
func (o *PimV2AzureIntegrationConfig) GetCustomerAzureTenantId() string {
	if o == nil || o.CustomerAzureTenantId == nil {
		var ret string
		return ret
	}
	return *o.CustomerAzureTenantId
}

// GetCustomerAzureTenantIdOk returns a tuple with the CustomerAzureTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimV2AzureIntegrationConfig) GetCustomerAzureTenantIdOk() (*string, bool) {
	if o == nil || o.CustomerAzureTenantId == nil {
		return nil, false
	}
	return o.CustomerAzureTenantId, true
}

// HasCustomerAzureTenantId returns a boolean if a field has been set.
func (o *PimV2AzureIntegrationConfig) HasCustomerAzureTenantId() bool {
	if o != nil && o.CustomerAzureTenantId != nil {
		return true
	}

	return false
}

// SetCustomerAzureTenantId gets a reference to the given string and assigns it to the CustomerAzureTenantId field.
func (o *PimV2AzureIntegrationConfig) SetCustomerAzureTenantId(v string) {
	o.CustomerAzureTenantId = &v
}

// GetKind returns the Kind field value
func (o *PimV2AzureIntegrationConfig) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *PimV2AzureIntegrationConfig) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *PimV2AzureIntegrationConfig) SetKind(v string) {
	o.Kind = v
}

// Redact resets all sensitive fields to their zero value.
func (o *PimV2AzureIntegrationConfig) Redact() {
	o.recurseRedact(o.ConfluentMultiTenantAppId)
	o.recurseRedact(o.CustomerAzureTenantId)
	o.recurseRedact(&o.Kind)
}

func (o *PimV2AzureIntegrationConfig) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o PimV2AzureIntegrationConfig) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o PimV2AzureIntegrationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfluentMultiTenantAppId != nil {
		toSerialize["confluent_multi_tenant_app_id"] = o.ConfluentMultiTenantAppId
	}
	if o.CustomerAzureTenantId != nil {
		toSerialize["customer_azure_tenant_id"] = o.CustomerAzureTenantId
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullablePimV2AzureIntegrationConfig struct {
	value *PimV2AzureIntegrationConfig
	isSet bool
}

func (v NullablePimV2AzureIntegrationConfig) Get() *PimV2AzureIntegrationConfig {
	return v.value
}

func (v *NullablePimV2AzureIntegrationConfig) Set(val *PimV2AzureIntegrationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePimV2AzureIntegrationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePimV2AzureIntegrationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePimV2AzureIntegrationConfig(val *PimV2AzureIntegrationConfig) *NullablePimV2AzureIntegrationConfig {
	return &NullablePimV2AzureIntegrationConfig{value: val, isSet: true}
}

func (v NullablePimV2AzureIntegrationConfig) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullablePimV2AzureIntegrationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
