// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Connect Artifact Management API

This is the Connect Management API.

API version: 0.0.1
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CamV1ConnectArtifactSpec Connect Artifact objects represent Custom SMTs on Confluent Cloud.
type CamV1ConnectArtifactSpec struct {
	// Cloud provider where the Connect Artifact archive is uploaded.
	Cloud string `json:"cloud,omitempty"`
	// The Cloud provider region the Connect Artifact archive is uploaded.
	Region string `json:"region,omitempty"`
	// Environment the Connect Artifact belongs to.
	Environment string `json:"environment,omitempty"`
	// Unique name of the Connect Artifact archieve per cloud, region, environment scope.
	DisplayName string `json:"display_name,omitempty"`
	// Description of the Connect Artifact.
	Description *string `json:"description,omitempty"`
	// Archive format of the Connect Artifact.
	ContentFormat *string `json:"content_format,omitempty"`
	// Upload source of the Connect Artifact.
	UploadSource *CamV1ConnectArtifactSpecUploadSourceOneOf `json:"upload_source,omitempty"`
	// List of classes present in the Connect Artifact uploaded
	Plugins *[]CamV1Plugins `json:"plugins,omitempty"`
	// List of resource crns where this Connect artifact is being used.
	Usages *[]string `json:"usages,omitempty"`
}

// NewCamV1ConnectArtifactSpec instantiates a new CamV1ConnectArtifactSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCamV1ConnectArtifactSpec(cloud string, region string, environment string, displayName string) *CamV1ConnectArtifactSpec {
	this := CamV1ConnectArtifactSpec{}
	this.Cloud = cloud
	this.Region = region
	this.Environment = environment
	this.DisplayName = displayName
	return &this
}

// NewCamV1ConnectArtifactSpecWithDefaults instantiates a new CamV1ConnectArtifactSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCamV1ConnectArtifactSpecWithDefaults() *CamV1ConnectArtifactSpec {
	this := CamV1ConnectArtifactSpec{}
	return &this
}

// GetCloud returns the Cloud field value
func (o *CamV1ConnectArtifactSpec) GetCloud() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetCloudOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *CamV1ConnectArtifactSpec) SetCloud(v string) {
	o.Cloud = v
}

// GetRegion returns the Region field value
func (o *CamV1ConnectArtifactSpec) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CamV1ConnectArtifactSpec) SetRegion(v string) {
	o.Region = v
}

// GetEnvironment returns the Environment field value
func (o *CamV1ConnectArtifactSpec) GetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *CamV1ConnectArtifactSpec) SetEnvironment(v string) {
	o.Environment = v
}

// GetDisplayName returns the DisplayName field value
func (o *CamV1ConnectArtifactSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CamV1ConnectArtifactSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CamV1ConnectArtifactSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CamV1ConnectArtifactSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CamV1ConnectArtifactSpec) SetDescription(v string) {
	o.Description = &v
}

// GetContentFormat returns the ContentFormat field value if set, zero value otherwise.
func (o *CamV1ConnectArtifactSpec) GetContentFormat() string {
	if o == nil || o.ContentFormat == nil {
		var ret string
		return ret
	}
	return *o.ContentFormat
}

// GetContentFormatOk returns a tuple with the ContentFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetContentFormatOk() (*string, bool) {
	if o == nil || o.ContentFormat == nil {
		return nil, false
	}
	return o.ContentFormat, true
}

// HasContentFormat returns a boolean if a field has been set.
func (o *CamV1ConnectArtifactSpec) HasContentFormat() bool {
	if o != nil && o.ContentFormat != nil {
		return true
	}

	return false
}

// SetContentFormat gets a reference to the given string and assigns it to the ContentFormat field.
func (o *CamV1ConnectArtifactSpec) SetContentFormat(v string) {
	o.ContentFormat = &v
}

// GetUploadSource returns the UploadSource field value if set, zero value otherwise.
func (o *CamV1ConnectArtifactSpec) GetUploadSource() CamV1ConnectArtifactSpecUploadSourceOneOf {
	if o == nil || o.UploadSource == nil {
		var ret CamV1ConnectArtifactSpecUploadSourceOneOf
		return ret
	}
	return *o.UploadSource
}

// GetUploadSourceOk returns a tuple with the UploadSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetUploadSourceOk() (*CamV1ConnectArtifactSpecUploadSourceOneOf, bool) {
	if o == nil || o.UploadSource == nil {
		return nil, false
	}
	return o.UploadSource, true
}

// HasUploadSource returns a boolean if a field has been set.
func (o *CamV1ConnectArtifactSpec) HasUploadSource() bool {
	if o != nil && o.UploadSource != nil {
		return true
	}

	return false
}

// SetUploadSource gets a reference to the given CamV1ConnectArtifactSpecUploadSourceOneOf and assigns it to the UploadSource field.
func (o *CamV1ConnectArtifactSpec) SetUploadSource(v CamV1ConnectArtifactSpecUploadSourceOneOf) {
	o.UploadSource = &v
}

// GetPlugins returns the Plugins field value if set, zero value otherwise.
func (o *CamV1ConnectArtifactSpec) GetPlugins() []CamV1Plugins {
	if o == nil || o.Plugins == nil {
		var ret []CamV1Plugins
		return ret
	}
	return *o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetPluginsOk() (*[]CamV1Plugins, bool) {
	if o == nil || o.Plugins == nil {
		return nil, false
	}
	return o.Plugins, true
}

// HasPlugins returns a boolean if a field has been set.
func (o *CamV1ConnectArtifactSpec) HasPlugins() bool {
	if o != nil && o.Plugins != nil {
		return true
	}

	return false
}

// SetPlugins gets a reference to the given []CamV1Plugins and assigns it to the Plugins field.
func (o *CamV1ConnectArtifactSpec) SetPlugins(v []CamV1Plugins) {
	o.Plugins = &v
}

// GetUsages returns the Usages field value if set, zero value otherwise.
func (o *CamV1ConnectArtifactSpec) GetUsages() []string {
	if o == nil || o.Usages == nil {
		var ret []string
		return ret
	}
	return *o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CamV1ConnectArtifactSpec) GetUsagesOk() (*[]string, bool) {
	if o == nil || o.Usages == nil {
		return nil, false
	}
	return o.Usages, true
}

// HasUsages returns a boolean if a field has been set.
func (o *CamV1ConnectArtifactSpec) HasUsages() bool {
	if o != nil && o.Usages != nil {
		return true
	}

	return false
}

// SetUsages gets a reference to the given []string and assigns it to the Usages field.
func (o *CamV1ConnectArtifactSpec) SetUsages(v []string) {
	o.Usages = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CamV1ConnectArtifactSpec) Redact() {
	o.recurseRedact(&o.Cloud)
	o.recurseRedact(&o.Region)
	o.recurseRedact(&o.Environment)
	o.recurseRedact(&o.DisplayName)
	o.recurseRedact(o.Description)
	o.recurseRedact(o.ContentFormat)
	o.recurseRedact(o.UploadSource)
	o.recurseRedact(o.Plugins)
	o.recurseRedact(o.Usages)
}

func (o *CamV1ConnectArtifactSpec) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CamV1ConnectArtifactSpec) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CamV1ConnectArtifactSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cloud"] = o.Cloud
	}
	if true {
		toSerialize["region"] = o.Region
	}
	if true {
		toSerialize["environment"] = o.Environment
	}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ContentFormat != nil {
		toSerialize["content_format"] = o.ContentFormat
	}
	if o.UploadSource != nil {
		toSerialize["upload_source"] = o.UploadSource
	}
	if o.Plugins != nil {
		toSerialize["plugins"] = o.Plugins
	}
	if o.Usages != nil {
		toSerialize["usages"] = o.Usages
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCamV1ConnectArtifactSpec struct {
	value *CamV1ConnectArtifactSpec
	isSet bool
}

func (v NullableCamV1ConnectArtifactSpec) Get() *CamV1ConnectArtifactSpec {
	return v.value
}

func (v *NullableCamV1ConnectArtifactSpec) Set(val *CamV1ConnectArtifactSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCamV1ConnectArtifactSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCamV1ConnectArtifactSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCamV1ConnectArtifactSpec(val *CamV1ConnectArtifactSpec) *NullableCamV1ConnectArtifactSpec {
	return &NullableCamV1ConnectArtifactSpec{value: val, isSet: true}
}

func (v NullableCamV1ConnectArtifactSpec) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCamV1ConnectArtifactSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
