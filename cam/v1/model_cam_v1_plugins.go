// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Connect Artifact Management API

This is the Connect Management API.

API version: 0.0.1
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CamV1Plugins Metadata of the classes present in a Connect Artifact.
type CamV1Plugins struct {
	// Java class or alias for the artifact as provided by developer.
	Class *string `json:"class,omitempty"`
}

// NewCamV1Plugins instantiates a new CamV1Plugins object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCamV1Plugins() *CamV1Plugins {
	this := CamV1Plugins{}
	return &this
}

// NewCamV1PluginsWithDefaults instantiates a new CamV1Plugins object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCamV1PluginsWithDefaults() *CamV1Plugins {
	this := CamV1Plugins{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *CamV1Plugins) GetClass() string {
	if o == nil || o.Class == nil {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CamV1Plugins) GetClassOk() (*string, bool) {
	if o == nil || o.Class == nil {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *CamV1Plugins) HasClass() bool {
	if o != nil && o.Class != nil {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *CamV1Plugins) SetClass(v string) {
	o.Class = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CamV1Plugins) Redact() {
	o.recurseRedact(o.Class)
}

func (o *CamV1Plugins) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CamV1Plugins) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CamV1Plugins) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Class != nil {
		toSerialize["class"] = o.Class
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCamV1Plugins struct {
	value *CamV1Plugins
	isSet bool
}

func (v NullableCamV1Plugins) Get() *CamV1Plugins {
	return v.value
}

func (v *NullableCamV1Plugins) Set(val *CamV1Plugins) {
	v.value = val
	v.isSet = true
}

func (v NullableCamV1Plugins) IsSet() bool {
	return v.isSet
}

func (v *NullableCamV1Plugins) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCamV1Plugins(val *CamV1Plugins) *NullableCamV1Plugins {
	return &NullableCamV1Plugins{value: val, isSet: true}
}

func (v NullableCamV1Plugins) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCamV1Plugins) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
