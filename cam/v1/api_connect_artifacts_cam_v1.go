// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Connect Artifact Management API

This is the Connect Management API.

API version: 0.0.1
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ConnectArtifactsCamV1Api interface {

	/*
			CreateCamV1ConnectArtifact Create a new Connect Artifact.

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to create a connect artifact.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiCreateCamV1ConnectArtifactRequest
	*/
	CreateCamV1ConnectArtifact(ctx _context.Context) ApiCreateCamV1ConnectArtifactRequest

	// CreateCamV1ConnectArtifactExecute executes the request
	//  @return CamV1ConnectArtifact
	CreateCamV1ConnectArtifactExecute(r ApiCreateCamV1ConnectArtifactRequest) (CamV1ConnectArtifact, *_nethttp.Response, error)

	/*
			DeleteCamV1ConnectArtifact Delete a Connect Artifact

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to delete a connect artifact.

		This request fails if existing workloads are using this artifact.


			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param id The unique identifier for the connect artifact.
			 @return ApiDeleteCamV1ConnectArtifactRequest
	*/
	DeleteCamV1ConnectArtifact(ctx _context.Context, id string) ApiDeleteCamV1ConnectArtifactRequest

	// DeleteCamV1ConnectArtifactExecute executes the request
	DeleteCamV1ConnectArtifactExecute(r ApiDeleteCamV1ConnectArtifactRequest) (*_nethttp.Response, error)

	/*
			GetCamV1ConnectArtifact Read a Connect Artifact

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Make a request to read a connect artifact.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @param id The unique identifier for the connect artifact.
			 @return ApiGetCamV1ConnectArtifactRequest
	*/
	GetCamV1ConnectArtifact(ctx _context.Context, id string) ApiGetCamV1ConnectArtifactRequest

	// GetCamV1ConnectArtifactExecute executes the request
	//  @return CamV1ConnectArtifact
	GetCamV1ConnectArtifactExecute(r ApiGetCamV1ConnectArtifactRequest) (CamV1ConnectArtifact, *_nethttp.Response, error)

	/*
			ListCamV1ConnectArtifacts List of Connect Artifacts

			[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

		Retrieve a sorted, filtered, paginated list of all connect artifacts.

			 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 @return ApiListCamV1ConnectArtifactsRequest
	*/
	ListCamV1ConnectArtifacts(ctx _context.Context) ApiListCamV1ConnectArtifactsRequest

	// ListCamV1ConnectArtifactsExecute executes the request
	//  @return CamV1ConnectArtifactList
	ListCamV1ConnectArtifactsExecute(r ApiListCamV1ConnectArtifactsRequest) (CamV1ConnectArtifactList, *_nethttp.Response, error)
}

// ConnectArtifactsCamV1ApiService ConnectArtifactsCamV1Api service
type ConnectArtifactsCamV1ApiService service

type ApiCreateCamV1ConnectArtifactRequest struct {
	ctx                  _context.Context
	ApiService           ConnectArtifactsCamV1Api
	specCloud            *string
	specRegion           *string
	camV1ConnectArtifact *CamV1ConnectArtifact
}

// Scope the operation to the given spec.cloud.
func (r ApiCreateCamV1ConnectArtifactRequest) SpecCloud(specCloud string) ApiCreateCamV1ConnectArtifactRequest {
	r.specCloud = &specCloud
	return r
}

// Scope the operation to the given spec.region.
func (r ApiCreateCamV1ConnectArtifactRequest) SpecRegion(specRegion string) ApiCreateCamV1ConnectArtifactRequest {
	r.specRegion = &specRegion
	return r
}
func (r ApiCreateCamV1ConnectArtifactRequest) CamV1ConnectArtifact(camV1ConnectArtifact CamV1ConnectArtifact) ApiCreateCamV1ConnectArtifactRequest {
	r.camV1ConnectArtifact = &camV1ConnectArtifact
	return r
}

func (r ApiCreateCamV1ConnectArtifactRequest) Execute() (CamV1ConnectArtifact, *_nethttp.Response, error) {
	return r.ApiService.CreateCamV1ConnectArtifactExecute(r)
}

/*
CreateCamV1ConnectArtifact Create a new Connect Artifact.

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to create a connect artifact.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCamV1ConnectArtifactRequest
*/
func (a *ConnectArtifactsCamV1ApiService) CreateCamV1ConnectArtifact(ctx _context.Context) ApiCreateCamV1ConnectArtifactRequest {
	return ApiCreateCamV1ConnectArtifactRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CamV1ConnectArtifact
func (a *ConnectArtifactsCamV1ApiService) CreateCamV1ConnectArtifactExecute(r ApiCreateCamV1ConnectArtifactRequest) (CamV1ConnectArtifact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CamV1ConnectArtifact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectArtifactsCamV1ApiService.CreateCamV1ConnectArtifact")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cam/v1/connect-artifacts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.specCloud == nil {
		return localVarReturnValue, nil, reportError("specCloud is required and must be specified")
	}
	if r.specRegion == nil {
		return localVarReturnValue, nil, reportError("specRegion is required and must be specified")
	}

	localVarQueryParams.Add("spec.cloud", parameterToString(*r.specCloud, ""))
	localVarQueryParams.Add("spec.region", parameterToString(*r.specRegion, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.camV1ConnectArtifact
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCamV1ConnectArtifactRequest struct {
	ctx         _context.Context
	ApiService  ConnectArtifactsCamV1Api
	specCloud   *string
	specRegion  *string
	environment *string
	id          string
}

// Scope the operation to the given spec.cloud.
func (r ApiDeleteCamV1ConnectArtifactRequest) SpecCloud(specCloud string) ApiDeleteCamV1ConnectArtifactRequest {
	r.specCloud = &specCloud
	return r
}

// Scope the operation to the given spec.region.
func (r ApiDeleteCamV1ConnectArtifactRequest) SpecRegion(specRegion string) ApiDeleteCamV1ConnectArtifactRequest {
	r.specRegion = &specRegion
	return r
}

// Scope the operation to the given environment.
func (r ApiDeleteCamV1ConnectArtifactRequest) Environment(environment string) ApiDeleteCamV1ConnectArtifactRequest {
	r.environment = &environment
	return r
}

func (r ApiDeleteCamV1ConnectArtifactRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteCamV1ConnectArtifactExecute(r)
}

/*
DeleteCamV1ConnectArtifact Delete a Connect Artifact

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to delete a connect artifact.

This request fails if existing workloads are using this artifact.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The unique identifier for the connect artifact.
	@return ApiDeleteCamV1ConnectArtifactRequest
*/
func (a *ConnectArtifactsCamV1ApiService) DeleteCamV1ConnectArtifact(ctx _context.Context, id string) ApiDeleteCamV1ConnectArtifactRequest {
	return ApiDeleteCamV1ConnectArtifactRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ConnectArtifactsCamV1ApiService) DeleteCamV1ConnectArtifactExecute(r ApiDeleteCamV1ConnectArtifactRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectArtifactsCamV1ApiService.DeleteCamV1ConnectArtifact")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cam/v1/connect-artifacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.specCloud == nil {
		return nil, reportError("specCloud is required and must be specified")
	}
	if r.specRegion == nil {
		return nil, reportError("specRegion is required and must be specified")
	}
	if r.environment == nil {
		return nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("spec.cloud", parameterToString(*r.specCloud, ""))
	localVarQueryParams.Add("spec.region", parameterToString(*r.specRegion, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCamV1ConnectArtifactRequest struct {
	ctx         _context.Context
	ApiService  ConnectArtifactsCamV1Api
	specCloud   *string
	specRegion  *string
	environment *string
	id          string
}

// Scope the operation to the given spec.cloud.
func (r ApiGetCamV1ConnectArtifactRequest) SpecCloud(specCloud string) ApiGetCamV1ConnectArtifactRequest {
	r.specCloud = &specCloud
	return r
}

// Scope the operation to the given spec.region.
func (r ApiGetCamV1ConnectArtifactRequest) SpecRegion(specRegion string) ApiGetCamV1ConnectArtifactRequest {
	r.specRegion = &specRegion
	return r
}

// Scope the operation to the given environment.
func (r ApiGetCamV1ConnectArtifactRequest) Environment(environment string) ApiGetCamV1ConnectArtifactRequest {
	r.environment = &environment
	return r
}

func (r ApiGetCamV1ConnectArtifactRequest) Execute() (CamV1ConnectArtifact, *_nethttp.Response, error) {
	return r.ApiService.GetCamV1ConnectArtifactExecute(r)
}

/*
GetCamV1ConnectArtifact Read a Connect Artifact

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to read a connect artifact.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The unique identifier for the connect artifact.
	@return ApiGetCamV1ConnectArtifactRequest
*/
func (a *ConnectArtifactsCamV1ApiService) GetCamV1ConnectArtifact(ctx _context.Context, id string) ApiGetCamV1ConnectArtifactRequest {
	return ApiGetCamV1ConnectArtifactRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CamV1ConnectArtifact
func (a *ConnectArtifactsCamV1ApiService) GetCamV1ConnectArtifactExecute(r ApiGetCamV1ConnectArtifactRequest) (CamV1ConnectArtifact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CamV1ConnectArtifact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectArtifactsCamV1ApiService.GetCamV1ConnectArtifact")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cam/v1/connect-artifacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.specCloud == nil {
		return localVarReturnValue, nil, reportError("specCloud is required and must be specified")
	}
	if r.specRegion == nil {
		return localVarReturnValue, nil, reportError("specRegion is required and must be specified")
	}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("spec.cloud", parameterToString(*r.specCloud, ""))
	localVarQueryParams.Add("spec.region", parameterToString(*r.specRegion, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCamV1ConnectArtifactsRequest struct {
	ctx         _context.Context
	ApiService  ConnectArtifactsCamV1Api
	specCloud   *string
	specRegion  *string
	environment *string
	pageSize    *int32
	pageToken   *string
}

// Filter the results by exact match for spec.cloud.
func (r ApiListCamV1ConnectArtifactsRequest) SpecCloud(specCloud string) ApiListCamV1ConnectArtifactsRequest {
	r.specCloud = &specCloud
	return r
}

// Filter the results by exact match for spec.region.
func (r ApiListCamV1ConnectArtifactsRequest) SpecRegion(specRegion string) ApiListCamV1ConnectArtifactsRequest {
	r.specRegion = &specRegion
	return r
}

// Filter the results by exact match for environment.
func (r ApiListCamV1ConnectArtifactsRequest) Environment(environment string) ApiListCamV1ConnectArtifactsRequest {
	r.environment = &environment
	return r
}

// A pagination size for collection requests.
func (r ApiListCamV1ConnectArtifactsRequest) PageSize(pageSize int32) ApiListCamV1ConnectArtifactsRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListCamV1ConnectArtifactsRequest) PageToken(pageToken string) ApiListCamV1ConnectArtifactsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListCamV1ConnectArtifactsRequest) Execute() (CamV1ConnectArtifactList, *_nethttp.Response, error) {
	return r.ApiService.ListCamV1ConnectArtifactsExecute(r)
}

/*
ListCamV1ConnectArtifacts List of Connect Artifacts

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a sorted, filtered, paginated list of all connect artifacts.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListCamV1ConnectArtifactsRequest
*/
func (a *ConnectArtifactsCamV1ApiService) ListCamV1ConnectArtifacts(ctx _context.Context) ApiListCamV1ConnectArtifactsRequest {
	return ApiListCamV1ConnectArtifactsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CamV1ConnectArtifactList
func (a *ConnectArtifactsCamV1ApiService) ListCamV1ConnectArtifactsExecute(r ApiListCamV1ConnectArtifactsRequest) (CamV1ConnectArtifactList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CamV1ConnectArtifactList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectArtifactsCamV1ApiService.ListCamV1ConnectArtifacts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cam/v1/connect-artifacts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.specCloud == nil {
		return localVarReturnValue, nil, reportError("specCloud is required and must be specified")
	}
	if r.specRegion == nil {
		return localVarReturnValue, nil, reportError("specRegion is required and must be specified")
	}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("spec.cloud", parameterToString(*r.specCloud, ""))
	localVarQueryParams.Add("spec.region", parameterToString(*r.specRegion, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
