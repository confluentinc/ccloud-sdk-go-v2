// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Compute Pool Management API

This is the Flink Compute Pool management API.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type FlinkIdentityPoolEnvRegionBindingsFiamV2Api interface {

	/*
	CreateFiamV2FlinkIdentityPoolEnvRegionBinding Create a Flink Identity Pool Env Region Binding

	[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Make a request to create a flink identity pool env region binding.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest
	*/
	CreateFiamV2FlinkIdentityPoolEnvRegionBinding(ctx _context.Context) ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest

	// CreateFiamV2FlinkIdentityPoolEnvRegionBindingExecute executes the request
	//  @return FiamV2FlinkIdentityPoolEnvRegionBinding
	CreateFiamV2FlinkIdentityPoolEnvRegionBindingExecute(r ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest) (FiamV2FlinkIdentityPoolEnvRegionBinding, *_nethttp.Response, error)

	/*
	DeleteFiamV2FlinkIdentityPoolEnvRegionBinding Delete a Flink Identity Pool Env Region Binding

	[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Make a request to delete a flink identity pool env region binding.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param id The unique identifier for the flink identity pool env region binding.
	 @return ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest
	*/
	DeleteFiamV2FlinkIdentityPoolEnvRegionBinding(ctx _context.Context, id string) ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest

	// DeleteFiamV2FlinkIdentityPoolEnvRegionBindingExecute executes the request
	DeleteFiamV2FlinkIdentityPoolEnvRegionBindingExecute(r ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest) (*_nethttp.Response, error)

	/*
	ListFiamV2FlinkIdentityPoolEnvRegionBindings List of Flink Identity Pool Env Region Bindings

	[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a sorted, filtered, paginated list of all flink identity pool env region bindings.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest
	*/
	ListFiamV2FlinkIdentityPoolEnvRegionBindings(ctx _context.Context) ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest

	// ListFiamV2FlinkIdentityPoolEnvRegionBindingsExecute executes the request
	//  @return FiamV2FlinkIdentityPoolEnvRegionBindingList
	ListFiamV2FlinkIdentityPoolEnvRegionBindingsExecute(r ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest) (FiamV2FlinkIdentityPoolEnvRegionBindingList, *_nethttp.Response, error)
}

// FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService FlinkIdentityPoolEnvRegionBindingsFiamV2Api service
type FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService service

type ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest struct {
	ctx _context.Context
	ApiService FlinkIdentityPoolEnvRegionBindingsFiamV2Api
	identityPool *string
	environment *string
	fiamV2FlinkIdentityPoolEnvRegionBinding *FiamV2FlinkIdentityPoolEnvRegionBinding
}

// Scope the operation to the given identity_pool.
func (r ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest) IdentityPool(identityPool string) ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest {
	r.identityPool = &identityPool
	return r
}
// Scope the operation to the given environment.
func (r ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest) Environment(environment string) ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest {
	r.environment = &environment
	return r
}
func (r ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest) FiamV2FlinkIdentityPoolEnvRegionBinding(fiamV2FlinkIdentityPoolEnvRegionBinding FiamV2FlinkIdentityPoolEnvRegionBinding) ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest {
	r.fiamV2FlinkIdentityPoolEnvRegionBinding = &fiamV2FlinkIdentityPoolEnvRegionBinding
	return r
}

func (r ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest) Execute() (FiamV2FlinkIdentityPoolEnvRegionBinding, *_nethttp.Response, error) {
	return r.ApiService.CreateFiamV2FlinkIdentityPoolEnvRegionBindingExecute(r)
}

/*
CreateFiamV2FlinkIdentityPoolEnvRegionBinding Create a Flink Identity Pool Env Region Binding

[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Make a request to create a flink identity pool env region binding.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest
*/
func (a *FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService) CreateFiamV2FlinkIdentityPoolEnvRegionBinding(ctx _context.Context) ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest {
	return ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FiamV2FlinkIdentityPoolEnvRegionBinding
func (a *FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService) CreateFiamV2FlinkIdentityPoolEnvRegionBindingExecute(r ApiCreateFiamV2FlinkIdentityPoolEnvRegionBindingRequest) (FiamV2FlinkIdentityPoolEnvRegionBinding, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FiamV2FlinkIdentityPoolEnvRegionBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService.CreateFiamV2FlinkIdentityPoolEnvRegionBinding")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fiam/v2/iam-bindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.identityPool == nil {
		return localVarReturnValue, nil, reportError("identityPool is required and must be specified")
	}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("identity_pool", parameterToString(*r.identityPool, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fiamV2FlinkIdentityPoolEnvRegionBinding
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest struct {
	ctx _context.Context
	ApiService FlinkIdentityPoolEnvRegionBindingsFiamV2Api
	identityPool *string
	environment *string
	id string
}

// Scope the operation to the given identity_pool.
func (r ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest) IdentityPool(identityPool string) ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest {
	r.identityPool = &identityPool
	return r
}
// Scope the operation to the given environment.
func (r ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest) Environment(environment string) ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest {
	r.environment = &environment
	return r
}

func (r ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteFiamV2FlinkIdentityPoolEnvRegionBindingExecute(r)
}

/*
DeleteFiamV2FlinkIdentityPoolEnvRegionBinding Delete a Flink Identity Pool Env Region Binding

[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Make a request to delete a flink identity pool env region binding.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the flink identity pool env region binding.
 @return ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest
*/
func (a *FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService) DeleteFiamV2FlinkIdentityPoolEnvRegionBinding(ctx _context.Context, id string) ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest {
	return ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService) DeleteFiamV2FlinkIdentityPoolEnvRegionBindingExecute(r ApiDeleteFiamV2FlinkIdentityPoolEnvRegionBindingRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService.DeleteFiamV2FlinkIdentityPoolEnvRegionBinding")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fiam/v2/iam-bindings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.identityPool == nil {
		return nil, reportError("identityPool is required and must be specified")
	}
	if r.environment == nil {
		return nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("identity_pool", parameterToString(*r.identityPool, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest struct {
	ctx _context.Context
	ApiService FlinkIdentityPoolEnvRegionBindingsFiamV2Api
	region *string
	identityPool *string
	environment *string
	pageSize *int32
	pageToken *string
}

// Filter the results by exact match for region.
func (r ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest) Region(region string) ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest {
	r.region = &region
	return r
}
// Filter the results by exact match for identity_pool.
func (r ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest) IdentityPool(identityPool string) ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest {
	r.identityPool = &identityPool
	return r
}
// Filter the results by exact match for environment.
func (r ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest) Environment(environment string) ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest {
	r.environment = &environment
	return r
}
// A pagination size for collection requests.
func (r ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest) PageSize(pageSize int32) ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest {
	r.pageSize = &pageSize
	return r
}
// An opaque pagination token for collection requests.
func (r ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest) PageToken(pageToken string) ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest) Execute() (FiamV2FlinkIdentityPoolEnvRegionBindingList, *_nethttp.Response, error) {
	return r.ApiService.ListFiamV2FlinkIdentityPoolEnvRegionBindingsExecute(r)
}

/*
ListFiamV2FlinkIdentityPoolEnvRegionBindings List of Flink Identity Pool Env Region Bindings

[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a sorted, filtered, paginated list of all flink identity pool env region bindings.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest
*/
func (a *FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService) ListFiamV2FlinkIdentityPoolEnvRegionBindings(ctx _context.Context) ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest {
	return ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FiamV2FlinkIdentityPoolEnvRegionBindingList
func (a *FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService) ListFiamV2FlinkIdentityPoolEnvRegionBindingsExecute(r ApiListFiamV2FlinkIdentityPoolEnvRegionBindingsRequest) (FiamV2FlinkIdentityPoolEnvRegionBindingList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FiamV2FlinkIdentityPoolEnvRegionBindingList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlinkIdentityPoolEnvRegionBindingsFiamV2ApiService.ListFiamV2FlinkIdentityPoolEnvRegionBindings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fiam/v2/iam-bindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.region == nil {
		return localVarReturnValue, nil, reportError("region is required and must be specified")
	}
	if r.identityPool == nil {
		return localVarReturnValue, nil, reportError("identityPool is required and must be specified")
	}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	localVarQueryParams.Add("identity_pool", parameterToString(*r.identityPool, ""))
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
