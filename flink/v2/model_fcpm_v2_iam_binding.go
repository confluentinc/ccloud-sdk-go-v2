// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Compute Pool Management API

This is the Flink Compute Pool management API.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// FcpmV2IamBinding An IamBinding represents the binding of identity pools to all Flink compute pools in an environment, cloud and region. This is needed for authentication purposes.   ## The Iam Bindings Model <SchemaDefinition schemaRef=\"#/components/schemas/fcpm.v2.IamBinding\" />
type FcpmV2IamBinding struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id       *string     `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// Flink compute pools in the region provided will be able to use this identity pool.
	Region *string `json:"region,omitempty"`
	// The cloud service provider that hosts the region.
	Cloud *string `json:"cloud,omitempty"`
	// The environment to which this belongs.
	Environment *GlobalObjectReference `json:"environment,omitempty"`
	// The identity_pool to which this belongs.
	IdentityPool *GlobalObjectReference `json:"identity_pool,omitempty"`
}

// NewFcpmV2IamBinding instantiates a new FcpmV2IamBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFcpmV2IamBinding() *FcpmV2IamBinding {
	this := FcpmV2IamBinding{}
	return &this
}

// NewFcpmV2IamBindingWithDefaults instantiates a new FcpmV2IamBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFcpmV2IamBindingWithDefaults() *FcpmV2IamBinding {
	this := FcpmV2IamBinding{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *FcpmV2IamBinding) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2IamBinding) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *FcpmV2IamBinding) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *FcpmV2IamBinding) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *FcpmV2IamBinding) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2IamBinding) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *FcpmV2IamBinding) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *FcpmV2IamBinding) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FcpmV2IamBinding) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2IamBinding) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FcpmV2IamBinding) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FcpmV2IamBinding) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FcpmV2IamBinding) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2IamBinding) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FcpmV2IamBinding) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *FcpmV2IamBinding) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *FcpmV2IamBinding) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2IamBinding) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *FcpmV2IamBinding) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *FcpmV2IamBinding) SetRegion(v string) {
	o.Region = &v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *FcpmV2IamBinding) GetCloud() string {
	if o == nil || o.Cloud == nil {
		var ret string
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2IamBinding) GetCloudOk() (*string, bool) {
	if o == nil || o.Cloud == nil {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *FcpmV2IamBinding) HasCloud() bool {
	if o != nil && o.Cloud != nil {
		return true
	}

	return false
}

// SetCloud gets a reference to the given string and assigns it to the Cloud field.
func (o *FcpmV2IamBinding) SetCloud(v string) {
	o.Cloud = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *FcpmV2IamBinding) GetEnvironment() GlobalObjectReference {
	if o == nil || o.Environment == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2IamBinding) GetEnvironmentOk() (*GlobalObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *FcpmV2IamBinding) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given GlobalObjectReference and assigns it to the Environment field.
func (o *FcpmV2IamBinding) SetEnvironment(v GlobalObjectReference) {
	o.Environment = &v
}

// GetIdentityPool returns the IdentityPool field value if set, zero value otherwise.
func (o *FcpmV2IamBinding) GetIdentityPool() GlobalObjectReference {
	if o == nil || o.IdentityPool == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.IdentityPool
}

// GetIdentityPoolOk returns a tuple with the IdentityPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2IamBinding) GetIdentityPoolOk() (*GlobalObjectReference, bool) {
	if o == nil || o.IdentityPool == nil {
		return nil, false
	}
	return o.IdentityPool, true
}

// HasIdentityPool returns a boolean if a field has been set.
func (o *FcpmV2IamBinding) HasIdentityPool() bool {
	if o != nil && o.IdentityPool != nil {
		return true
	}

	return false
}

// SetIdentityPool gets a reference to the given GlobalObjectReference and assigns it to the IdentityPool field.
func (o *FcpmV2IamBinding) SetIdentityPool(v GlobalObjectReference) {
	o.IdentityPool = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *FcpmV2IamBinding) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.Region)
	o.recurseRedact(o.Cloud)
	o.recurseRedact(o.Environment)
	o.recurseRedact(o.IdentityPool)
}

func (o *FcpmV2IamBinding) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o FcpmV2IamBinding) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o FcpmV2IamBinding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Cloud != nil {
		toSerialize["cloud"] = o.Cloud
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.IdentityPool != nil {
		toSerialize["identity_pool"] = o.IdentityPool
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableFcpmV2IamBinding struct {
	value *FcpmV2IamBinding
	isSet bool
}

func (v NullableFcpmV2IamBinding) Get() *FcpmV2IamBinding {
	return v.value
}

func (v *NullableFcpmV2IamBinding) Set(val *FcpmV2IamBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableFcpmV2IamBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableFcpmV2IamBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcpmV2IamBinding(val *FcpmV2IamBinding) *NullableFcpmV2IamBinding {
	return &NullableFcpmV2IamBinding{value: val, isSet: true}
}

func (v NullableFcpmV2IamBinding) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableFcpmV2IamBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
