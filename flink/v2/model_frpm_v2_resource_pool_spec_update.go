// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Resource Pool Management API

This is the Flink Resource Pool management API.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

import (
	"reflect"
)

// FrpmV2ResourcePoolSpecUpdate The desired state of the Resource Pool
type FrpmV2ResourcePoolSpecUpdate struct {
	// The API endpoint of the Flink resource pool.
	HttpEndpoint *string `json:"http_endpoint,omitempty"`
	// The number of CSUs (Confluent Streaming Units) currently allocated to this Flink resource pool.
	CurrentCsu *int32 `json:"current_csu,omitempty"`
	// Maximum number of Confluent Streaming Units (CSUs) that the Flink resource pool should auto-scale to. If not specified, the value defaults to 8.
	MaxCsu *int32 `json:"max_csu,omitempty"`
	// The type of of the Flink resource pool. Note: Clusters can be upgraded from Basic to Standard, but cannot be downgraded from Standard to Basic.
	Config *FrpmV2ResourcePoolSpecUpdateConfigOneOf `json:"config,omitempty"`
}

// NewFrpmV2ResourcePoolSpecUpdate instantiates a new FrpmV2ResourcePoolSpecUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrpmV2ResourcePoolSpecUpdate() *FrpmV2ResourcePoolSpecUpdate {
	this := FrpmV2ResourcePoolSpecUpdate{}
	return &this
}

// NewFrpmV2ResourcePoolSpecUpdateWithDefaults instantiates a new FrpmV2ResourcePoolSpecUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrpmV2ResourcePoolSpecUpdateWithDefaults() *FrpmV2ResourcePoolSpecUpdate {
	this := FrpmV2ResourcePoolSpecUpdate{}
	return &this
}

// GetHttpEndpoint returns the HttpEndpoint field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpecUpdate) GetHttpEndpoint() string {
	if o == nil || o.HttpEndpoint == nil {
		var ret string
		return ret
	}
	return *o.HttpEndpoint
}

// GetHttpEndpointOk returns a tuple with the HttpEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpecUpdate) GetHttpEndpointOk() (*string, bool) {
	if o == nil || o.HttpEndpoint == nil {
		return nil, false
	}
	return o.HttpEndpoint, true
}

// HasHttpEndpoint returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpecUpdate) HasHttpEndpoint() bool {
	if o != nil && o.HttpEndpoint != nil {
		return true
	}

	return false
}

// SetHttpEndpoint gets a reference to the given string and assigns it to the HttpEndpoint field.
func (o *FrpmV2ResourcePoolSpecUpdate) SetHttpEndpoint(v string) {
	o.HttpEndpoint = &v
}

// GetCurrentCsu returns the CurrentCsu field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpecUpdate) GetCurrentCsu() int32 {
	if o == nil || o.CurrentCsu == nil {
		var ret int32
		return ret
	}
	return *o.CurrentCsu
}

// GetCurrentCsuOk returns a tuple with the CurrentCsu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpecUpdate) GetCurrentCsuOk() (*int32, bool) {
	if o == nil || o.CurrentCsu == nil {
		return nil, false
	}
	return o.CurrentCsu, true
}

// HasCurrentCsu returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpecUpdate) HasCurrentCsu() bool {
	if o != nil && o.CurrentCsu != nil {
		return true
	}

	return false
}

// SetCurrentCsu gets a reference to the given int32 and assigns it to the CurrentCsu field.
func (o *FrpmV2ResourcePoolSpecUpdate) SetCurrentCsu(v int32) {
	o.CurrentCsu = &v
}

// GetMaxCsu returns the MaxCsu field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpecUpdate) GetMaxCsu() int32 {
	if o == nil || o.MaxCsu == nil {
		var ret int32
		return ret
	}
	return *o.MaxCsu
}

// GetMaxCsuOk returns a tuple with the MaxCsu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpecUpdate) GetMaxCsuOk() (*int32, bool) {
	if o == nil || o.MaxCsu == nil {
		return nil, false
	}
	return o.MaxCsu, true
}

// HasMaxCsu returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpecUpdate) HasMaxCsu() bool {
	if o != nil && o.MaxCsu != nil {
		return true
	}

	return false
}

// SetMaxCsu gets a reference to the given int32 and assigns it to the MaxCsu field.
func (o *FrpmV2ResourcePoolSpecUpdate) SetMaxCsu(v int32) {
	o.MaxCsu = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpecUpdate) GetConfig() FrpmV2ResourcePoolSpecUpdateConfigOneOf {
	if o == nil || o.Config == nil {
		var ret FrpmV2ResourcePoolSpecUpdateConfigOneOf
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpecUpdate) GetConfigOk() (*FrpmV2ResourcePoolSpecUpdateConfigOneOf, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpecUpdate) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given FrpmV2ResourcePoolSpecUpdateConfigOneOf and assigns it to the Config field.
func (o *FrpmV2ResourcePoolSpecUpdate) SetConfig(v FrpmV2ResourcePoolSpecUpdateConfigOneOf) {
	o.Config = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *FrpmV2ResourcePoolSpecUpdate) Redact() {
	o.recurseRedact(o.HttpEndpoint)
	o.recurseRedact(o.CurrentCsu)
	o.recurseRedact(o.MaxCsu)
	o.recurseRedact(o.Config)
}

func (o *FrpmV2ResourcePoolSpecUpdate) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o FrpmV2ResourcePoolSpecUpdate) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o FrpmV2ResourcePoolSpecUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HttpEndpoint != nil {
		toSerialize["http_endpoint"] = o.HttpEndpoint
	}
	if o.CurrentCsu != nil {
		toSerialize["current_csu"] = o.CurrentCsu
	}
	if o.MaxCsu != nil {
		toSerialize["max_csu"] = o.MaxCsu
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableFrpmV2ResourcePoolSpecUpdate struct {
	value *FrpmV2ResourcePoolSpecUpdate
	isSet bool
}

func (v NullableFrpmV2ResourcePoolSpecUpdate) Get() *FrpmV2ResourcePoolSpecUpdate {
	return v.value
}

func (v *NullableFrpmV2ResourcePoolSpecUpdate) Set(val *FrpmV2ResourcePoolSpecUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFrpmV2ResourcePoolSpecUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFrpmV2ResourcePoolSpecUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrpmV2ResourcePoolSpecUpdate(val *FrpmV2ResourcePoolSpecUpdate) *NullableFrpmV2ResourcePoolSpecUpdate {
	return &NullableFrpmV2ResourcePoolSpecUpdate{value: val, isSet: true}
}

func (v NullableFrpmV2ResourcePoolSpecUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrpmV2ResourcePoolSpecUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
