// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Resource Pool Management API

This is the Flink Resource Pool management API.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

import (
	"reflect"
)

// FrpmV2ResourcePoolSpec The desired state of the Resource Pool
type FrpmV2ResourcePoolSpec struct {
	// The name of the Flink resource pool.
	DisplayName *string `json:"display_name,omitempty"`
	// The cloud service provider that runs the resource pool.
	Cloud *string `json:"cloud,omitempty"`
	// The API endpoint of the Flink resource pool.
	HttpEndpoint *string `json:"http_endpoint,omitempty"`
	// The cloud service provider region that hosts the Flink resource pool.
	Region *string `json:"region,omitempty"`
	// The number of CSUs (Confluent Streaming Units) currently allocated to this Flink resource pool.
	CurrentCsu *int32 `json:"current_csu,omitempty"`
	// Maximum number of Confluent Streaming Units (CSUs) that the Flink resource pool should auto-scale to. If not specified, the value defaults to 8. 
	MaxCsu *int32 `json:"max_csu,omitempty"`
	// The type of of the Flink resource pool. Note: Clusters can be upgraded from Basic to Standard, but cannot be downgraded from Standard to Basic. 
	Config *FrpmV2ResourcePoolSpecConfigOneOf `json:"config,omitempty"`
	// The environment to which this belongs.
	Environment *GlobalObjectReference `json:"environment,omitempty"`
	// The network to which this belongs.
	Network *EnvScopedObjectReference `json:"network,omitempty"`
}

// NewFrpmV2ResourcePoolSpec instantiates a new FrpmV2ResourcePoolSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrpmV2ResourcePoolSpec() *FrpmV2ResourcePoolSpec {
	this := FrpmV2ResourcePoolSpec{}
	return &this
}

// NewFrpmV2ResourcePoolSpecWithDefaults instantiates a new FrpmV2ResourcePoolSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrpmV2ResourcePoolSpecWithDefaults() *FrpmV2ResourcePoolSpec {
	this := FrpmV2ResourcePoolSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FrpmV2ResourcePoolSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetCloud() string {
	if o == nil || o.Cloud == nil {
		var ret string
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetCloudOk() (*string, bool) {
	if o == nil || o.Cloud == nil {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasCloud() bool {
	if o != nil && o.Cloud != nil {
		return true
	}

	return false
}

// SetCloud gets a reference to the given string and assigns it to the Cloud field.
func (o *FrpmV2ResourcePoolSpec) SetCloud(v string) {
	o.Cloud = &v
}

// GetHttpEndpoint returns the HttpEndpoint field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetHttpEndpoint() string {
	if o == nil || o.HttpEndpoint == nil {
		var ret string
		return ret
	}
	return *o.HttpEndpoint
}

// GetHttpEndpointOk returns a tuple with the HttpEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetHttpEndpointOk() (*string, bool) {
	if o == nil || o.HttpEndpoint == nil {
		return nil, false
	}
	return o.HttpEndpoint, true
}

// HasHttpEndpoint returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasHttpEndpoint() bool {
	if o != nil && o.HttpEndpoint != nil {
		return true
	}

	return false
}

// SetHttpEndpoint gets a reference to the given string and assigns it to the HttpEndpoint field.
func (o *FrpmV2ResourcePoolSpec) SetHttpEndpoint(v string) {
	o.HttpEndpoint = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *FrpmV2ResourcePoolSpec) SetRegion(v string) {
	o.Region = &v
}

// GetCurrentCsu returns the CurrentCsu field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetCurrentCsu() int32 {
	if o == nil || o.CurrentCsu == nil {
		var ret int32
		return ret
	}
	return *o.CurrentCsu
}

// GetCurrentCsuOk returns a tuple with the CurrentCsu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetCurrentCsuOk() (*int32, bool) {
	if o == nil || o.CurrentCsu == nil {
		return nil, false
	}
	return o.CurrentCsu, true
}

// HasCurrentCsu returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasCurrentCsu() bool {
	if o != nil && o.CurrentCsu != nil {
		return true
	}

	return false
}

// SetCurrentCsu gets a reference to the given int32 and assigns it to the CurrentCsu field.
func (o *FrpmV2ResourcePoolSpec) SetCurrentCsu(v int32) {
	o.CurrentCsu = &v
}

// GetMaxCsu returns the MaxCsu field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetMaxCsu() int32 {
	if o == nil || o.MaxCsu == nil {
		var ret int32
		return ret
	}
	return *o.MaxCsu
}

// GetMaxCsuOk returns a tuple with the MaxCsu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetMaxCsuOk() (*int32, bool) {
	if o == nil || o.MaxCsu == nil {
		return nil, false
	}
	return o.MaxCsu, true
}

// HasMaxCsu returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasMaxCsu() bool {
	if o != nil && o.MaxCsu != nil {
		return true
	}

	return false
}

// SetMaxCsu gets a reference to the given int32 and assigns it to the MaxCsu field.
func (o *FrpmV2ResourcePoolSpec) SetMaxCsu(v int32) {
	o.MaxCsu = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetConfig() FrpmV2ResourcePoolSpecConfigOneOf {
	if o == nil || o.Config == nil {
		var ret FrpmV2ResourcePoolSpecConfigOneOf
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetConfigOk() (*FrpmV2ResourcePoolSpecConfigOneOf, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given FrpmV2ResourcePoolSpecConfigOneOf and assigns it to the Config field.
func (o *FrpmV2ResourcePoolSpec) SetConfig(v FrpmV2ResourcePoolSpecConfigOneOf) {
	o.Config = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetEnvironment() GlobalObjectReference {
	if o == nil || o.Environment == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetEnvironmentOk() (*GlobalObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given GlobalObjectReference and assigns it to the Environment field.
func (o *FrpmV2ResourcePoolSpec) SetEnvironment(v GlobalObjectReference) {
	o.Environment = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *FrpmV2ResourcePoolSpec) GetNetwork() EnvScopedObjectReference {
	if o == nil || o.Network == nil {
		var ret EnvScopedObjectReference
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrpmV2ResourcePoolSpec) GetNetworkOk() (*EnvScopedObjectReference, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *FrpmV2ResourcePoolSpec) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given EnvScopedObjectReference and assigns it to the Network field.
func (o *FrpmV2ResourcePoolSpec) SetNetwork(v EnvScopedObjectReference) {
	o.Network = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *FrpmV2ResourcePoolSpec) Redact() {
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.Cloud)
    o.recurseRedact(o.HttpEndpoint)
    o.recurseRedact(o.Region)
    o.recurseRedact(o.CurrentCsu)
    o.recurseRedact(o.MaxCsu)
    o.recurseRedact(o.Config)
    o.recurseRedact(o.Environment)
    o.recurseRedact(o.Network)
}

func (o *FrpmV2ResourcePoolSpec) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o FrpmV2ResourcePoolSpec) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o FrpmV2ResourcePoolSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Cloud != nil {
		toSerialize["cloud"] = o.Cloud
	}
	if o.HttpEndpoint != nil {
		toSerialize["http_endpoint"] = o.HttpEndpoint
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.CurrentCsu != nil {
		toSerialize["current_csu"] = o.CurrentCsu
	}
	if o.MaxCsu != nil {
		toSerialize["max_csu"] = o.MaxCsu
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	return json.Marshal(toSerialize)
}

type NullableFrpmV2ResourcePoolSpec struct {
	value *FrpmV2ResourcePoolSpec
	isSet bool
}

func (v NullableFrpmV2ResourcePoolSpec) Get() *FrpmV2ResourcePoolSpec {
	return v.value
}

func (v *NullableFrpmV2ResourcePoolSpec) Set(val *FrpmV2ResourcePoolSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableFrpmV2ResourcePoolSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFrpmV2ResourcePoolSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrpmV2ResourcePoolSpec(val *FrpmV2ResourcePoolSpec) *NullableFrpmV2ResourcePoolSpec {
	return &NullableFrpmV2ResourcePoolSpec{value: val, isSet: true}
}

func (v NullableFrpmV2ResourcePoolSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrpmV2ResourcePoolSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


