// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Cluster Management API

This is the new Flink cluster management API.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

import (
	"reflect"
)

// FlinkcmV2ClusterSpecUpdate The desired state of the Cluster
type FlinkcmV2ClusterSpecUpdate struct {
	// The cloud provider that the Flink cluster is in.
	CloudProvider *string `json:"cloud_provider,omitempty"`
	// The region that the Flink cluster is in.
	Region *string `json:"region,omitempty"`
	// The number of CSUs (Confluent Streaming Units) in a Flink cluster.
	Csu *int32 `json:"csu,omitempty"`
	// The Type of network to use.
	NetworkType *string `json:"network_type,omitempty"`
}

// NewFlinkcmV2ClusterSpecUpdate instantiates a new FlinkcmV2ClusterSpecUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlinkcmV2ClusterSpecUpdate() *FlinkcmV2ClusterSpecUpdate {
	this := FlinkcmV2ClusterSpecUpdate{}
	return &this
}

// NewFlinkcmV2ClusterSpecUpdateWithDefaults instantiates a new FlinkcmV2ClusterSpecUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlinkcmV2ClusterSpecUpdateWithDefaults() *FlinkcmV2ClusterSpecUpdate {
	this := FlinkcmV2ClusterSpecUpdate{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *FlinkcmV2ClusterSpecUpdate) GetCloudProvider() string {
	if o == nil || o.CloudProvider == nil {
		var ret string
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlinkcmV2ClusterSpecUpdate) GetCloudProviderOk() (*string, bool) {
	if o == nil || o.CloudProvider == nil {
		return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *FlinkcmV2ClusterSpecUpdate) HasCloudProvider() bool {
	if o != nil && o.CloudProvider != nil {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given string and assigns it to the CloudProvider field.
func (o *FlinkcmV2ClusterSpecUpdate) SetCloudProvider(v string) {
	o.CloudProvider = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *FlinkcmV2ClusterSpecUpdate) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlinkcmV2ClusterSpecUpdate) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *FlinkcmV2ClusterSpecUpdate) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *FlinkcmV2ClusterSpecUpdate) SetRegion(v string) {
	o.Region = &v
}

// GetCsu returns the Csu field value if set, zero value otherwise.
func (o *FlinkcmV2ClusterSpecUpdate) GetCsu() int32 {
	if o == nil || o.Csu == nil {
		var ret int32
		return ret
	}
	return *o.Csu
}

// GetCsuOk returns a tuple with the Csu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlinkcmV2ClusterSpecUpdate) GetCsuOk() (*int32, bool) {
	if o == nil || o.Csu == nil {
		return nil, false
	}
	return o.Csu, true
}

// HasCsu returns a boolean if a field has been set.
func (o *FlinkcmV2ClusterSpecUpdate) HasCsu() bool {
	if o != nil && o.Csu != nil {
		return true
	}

	return false
}

// SetCsu gets a reference to the given int32 and assigns it to the Csu field.
func (o *FlinkcmV2ClusterSpecUpdate) SetCsu(v int32) {
	o.Csu = &v
}

// GetNetworkType returns the NetworkType field value if set, zero value otherwise.
func (o *FlinkcmV2ClusterSpecUpdate) GetNetworkType() string {
	if o == nil || o.NetworkType == nil {
		var ret string
		return ret
	}
	return *o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlinkcmV2ClusterSpecUpdate) GetNetworkTypeOk() (*string, bool) {
	if o == nil || o.NetworkType == nil {
		return nil, false
	}
	return o.NetworkType, true
}

// HasNetworkType returns a boolean if a field has been set.
func (o *FlinkcmV2ClusterSpecUpdate) HasNetworkType() bool {
	if o != nil && o.NetworkType != nil {
		return true
	}

	return false
}

// SetNetworkType gets a reference to the given string and assigns it to the NetworkType field.
func (o *FlinkcmV2ClusterSpecUpdate) SetNetworkType(v string) {
	o.NetworkType = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *FlinkcmV2ClusterSpecUpdate) Redact() {
    o.recurseRedact(o.CloudProvider)
    o.recurseRedact(o.Region)
    o.recurseRedact(o.Csu)
    o.recurseRedact(o.NetworkType)
}

func (o *FlinkcmV2ClusterSpecUpdate) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o FlinkcmV2ClusterSpecUpdate) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o FlinkcmV2ClusterSpecUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CloudProvider != nil {
		toSerialize["cloud_provider"] = o.CloudProvider
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Csu != nil {
		toSerialize["csu"] = o.Csu
	}
	if o.NetworkType != nil {
		toSerialize["network_type"] = o.NetworkType
	}
	return json.Marshal(toSerialize)
}

type NullableFlinkcmV2ClusterSpecUpdate struct {
	value *FlinkcmV2ClusterSpecUpdate
	isSet bool
}

func (v NullableFlinkcmV2ClusterSpecUpdate) Get() *FlinkcmV2ClusterSpecUpdate {
	return v.value
}

func (v *NullableFlinkcmV2ClusterSpecUpdate) Set(val *FlinkcmV2ClusterSpecUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFlinkcmV2ClusterSpecUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFlinkcmV2ClusterSpecUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlinkcmV2ClusterSpecUpdate(val *FlinkcmV2ClusterSpecUpdate) *NullableFlinkcmV2ClusterSpecUpdate {
	return &NullableFlinkcmV2ClusterSpecUpdate{value: val, isSet: true}
}

func (v NullableFlinkcmV2ClusterSpecUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlinkcmV2ClusterSpecUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


