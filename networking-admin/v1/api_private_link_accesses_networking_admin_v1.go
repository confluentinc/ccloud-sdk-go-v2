// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network Admin APIs

# Introduction  Networking Admin API provides resources/APIs which are not applicable for broader user access. Currently, they are cater to scenarios required by the Confluent Cloud Admin Dashboard. 

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type PrivateLinkAccessesNetworkingAdminV1Api interface {

	/*
	GetNetworkingAdminV1PrivateLinkAccess Read a Private Link Access

	Make a request to read a private link access.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param id The unique identifier for the private link access.
	 @return ApiGetNetworkingAdminV1PrivateLinkAccessRequest
	*/
	GetNetworkingAdminV1PrivateLinkAccess(ctx _context.Context, id string) ApiGetNetworkingAdminV1PrivateLinkAccessRequest

	// GetNetworkingAdminV1PrivateLinkAccessExecute executes the request
	//  @return NetworkingAdminV1PrivateLinkAccess
	GetNetworkingAdminV1PrivateLinkAccessExecute(r ApiGetNetworkingAdminV1PrivateLinkAccessRequest) (NetworkingAdminV1PrivateLinkAccess, *_nethttp.Response, error)

	/*
	ListNetworkingAdminV1PrivateLinkAccesses List of Private Link Accesses

	Retrieve a sorted, filtered, paginated list of all private link accesses.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiListNetworkingAdminV1PrivateLinkAccessesRequest
	*/
	ListNetworkingAdminV1PrivateLinkAccesses(ctx _context.Context) ApiListNetworkingAdminV1PrivateLinkAccessesRequest

	// ListNetworkingAdminV1PrivateLinkAccessesExecute executes the request
	//  @return NetworkingAdminV1PrivateLinkAccessList
	ListNetworkingAdminV1PrivateLinkAccessesExecute(r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) (NetworkingAdminV1PrivateLinkAccessList, *_nethttp.Response, error)
}

// PrivateLinkAccessesNetworkingAdminV1ApiService PrivateLinkAccessesNetworkingAdminV1Api service
type PrivateLinkAccessesNetworkingAdminV1ApiService service

type ApiGetNetworkingAdminV1PrivateLinkAccessRequest struct {
	ctx _context.Context
	ApiService PrivateLinkAccessesNetworkingAdminV1Api
	environment *string
	id string
}

// Scope the operation to the given environment.
func (r ApiGetNetworkingAdminV1PrivateLinkAccessRequest) Environment(environment string) ApiGetNetworkingAdminV1PrivateLinkAccessRequest {
	r.environment = &environment
	return r
}

func (r ApiGetNetworkingAdminV1PrivateLinkAccessRequest) Execute() (NetworkingAdminV1PrivateLinkAccess, *_nethttp.Response, error) {
	return r.ApiService.GetNetworkingAdminV1PrivateLinkAccessExecute(r)
}

/*
GetNetworkingAdminV1PrivateLinkAccess Read a Private Link Access

Make a request to read a private link access.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the private link access.
 @return ApiGetNetworkingAdminV1PrivateLinkAccessRequest
*/
func (a *PrivateLinkAccessesNetworkingAdminV1ApiService) GetNetworkingAdminV1PrivateLinkAccess(ctx _context.Context, id string) ApiGetNetworkingAdminV1PrivateLinkAccessRequest {
	return ApiGetNetworkingAdminV1PrivateLinkAccessRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NetworkingAdminV1PrivateLinkAccess
func (a *PrivateLinkAccessesNetworkingAdminV1ApiService) GetNetworkingAdminV1PrivateLinkAccessExecute(r ApiGetNetworkingAdminV1PrivateLinkAccessRequest) (NetworkingAdminV1PrivateLinkAccess, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkingAdminV1PrivateLinkAccess
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateLinkAccessesNetworkingAdminV1ApiService.GetNetworkingAdminV1PrivateLinkAccess")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networking-admin/v1/private-link-accesses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNetworkingAdminV1PrivateLinkAccessesRequest struct {
	ctx _context.Context
	ApiService PrivateLinkAccessesNetworkingAdminV1Api
	environment *string
	specDisplayName *MultipleSearchFilter
	statusPhase *MultipleSearchFilter
	specNetwork *MultipleSearchFilter
	pageSize *int32
	pageToken *string
}

// Filter the results by exact match for environment.
func (r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) Environment(environment string) ApiListNetworkingAdminV1PrivateLinkAccessesRequest {
	r.environment = &environment
	return r
}
// Filter the results by exact match for spec.display_name. Pass multiple times to see results matching any of the values.
func (r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) SpecDisplayName(specDisplayName MultipleSearchFilter) ApiListNetworkingAdminV1PrivateLinkAccessesRequest {
	r.specDisplayName = &specDisplayName
	return r
}
// Filter the results by exact match for status.phase. Pass multiple times to see results matching any of the values.
func (r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) StatusPhase(statusPhase MultipleSearchFilter) ApiListNetworkingAdminV1PrivateLinkAccessesRequest {
	r.statusPhase = &statusPhase
	return r
}
// Filter the results by exact match for spec.network. Pass multiple times to see results matching any of the values.
func (r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) SpecNetwork(specNetwork MultipleSearchFilter) ApiListNetworkingAdminV1PrivateLinkAccessesRequest {
	r.specNetwork = &specNetwork
	return r
}
// A pagination size for collection requests.
func (r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) PageSize(pageSize int32) ApiListNetworkingAdminV1PrivateLinkAccessesRequest {
	r.pageSize = &pageSize
	return r
}
// An opaque pagination token for collection requests.
func (r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) PageToken(pageToken string) ApiListNetworkingAdminV1PrivateLinkAccessesRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) Execute() (NetworkingAdminV1PrivateLinkAccessList, *_nethttp.Response, error) {
	return r.ApiService.ListNetworkingAdminV1PrivateLinkAccessesExecute(r)
}

/*
ListNetworkingAdminV1PrivateLinkAccesses List of Private Link Accesses

Retrieve a sorted, filtered, paginated list of all private link accesses.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNetworkingAdminV1PrivateLinkAccessesRequest
*/
func (a *PrivateLinkAccessesNetworkingAdminV1ApiService) ListNetworkingAdminV1PrivateLinkAccesses(ctx _context.Context) ApiListNetworkingAdminV1PrivateLinkAccessesRequest {
	return ApiListNetworkingAdminV1PrivateLinkAccessesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetworkingAdminV1PrivateLinkAccessList
func (a *PrivateLinkAccessesNetworkingAdminV1ApiService) ListNetworkingAdminV1PrivateLinkAccessesExecute(r ApiListNetworkingAdminV1PrivateLinkAccessesRequest) (NetworkingAdminV1PrivateLinkAccessList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkingAdminV1PrivateLinkAccessList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateLinkAccessesNetworkingAdminV1ApiService.ListNetworkingAdminV1PrivateLinkAccesses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networking-admin/v1/private-link-accesses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	if r.specDisplayName != nil {
		localVarQueryParams.Add("spec.display_name", parameterToString(*r.specDisplayName, ""))
	}
	if r.statusPhase != nil {
		localVarQueryParams.Add("status.phase", parameterToString(*r.statusPhase, ""))
	}
	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	if r.specNetwork != nil {
		localVarQueryParams.Add("spec.network", parameterToString(*r.specNetwork, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
