// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network Admin APIs

# Introduction  Networking Admin API provides resources/APIs which are not applicable for broader user access. Currently, they are cater to scenarios required by the Confluent Cloud Admin Dashboard. 

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// NetworkingAdminV1PrivateLinkAccessSpec The desired state of the Private Link Access
type NetworkingAdminV1PrivateLinkAccessSpec struct {
	// The name of the PrivateLink access
	DisplayName *string `json:"display_name,omitempty"`
	// The cloud-specific PrivateLink details.
	Cloud *NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf `json:"cloud,omitempty"`
	// The environment to which this belongs.
	Environment *GlobalObjectReference `json:"environment,omitempty"`
	// The network to which this belongs.
	Network *EnvScopedObjectReference `json:"network,omitempty"`
}

// NewNetworkingAdminV1PrivateLinkAccessSpec instantiates a new NetworkingAdminV1PrivateLinkAccessSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkingAdminV1PrivateLinkAccessSpec() *NetworkingAdminV1PrivateLinkAccessSpec {
	this := NetworkingAdminV1PrivateLinkAccessSpec{}
	return &this
}

// NewNetworkingAdminV1PrivateLinkAccessSpecWithDefaults instantiates a new NetworkingAdminV1PrivateLinkAccessSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkingAdminV1PrivateLinkAccessSpecWithDefaults() *NetworkingAdminV1PrivateLinkAccessSpec {
	this := NetworkingAdminV1PrivateLinkAccessSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) GetCloud() NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf {
	if o == nil || o.Cloud == nil {
		var ret NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) GetCloudOk() (*NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf, bool) {
	if o == nil || o.Cloud == nil {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) HasCloud() bool {
	if o != nil && o.Cloud != nil {
		return true
	}

	return false
}

// SetCloud gets a reference to the given NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf and assigns it to the Cloud field.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) SetCloud(v NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) {
	o.Cloud = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) GetEnvironment() GlobalObjectReference {
	if o == nil || o.Environment == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) GetEnvironmentOk() (*GlobalObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given GlobalObjectReference and assigns it to the Environment field.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) SetEnvironment(v GlobalObjectReference) {
	o.Environment = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) GetNetwork() EnvScopedObjectReference {
	if o == nil || o.Network == nil {
		var ret EnvScopedObjectReference
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) GetNetworkOk() (*EnvScopedObjectReference, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given EnvScopedObjectReference and assigns it to the Network field.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) SetNetwork(v EnvScopedObjectReference) {
	o.Network = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *NetworkingAdminV1PrivateLinkAccessSpec) Redact() {
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.Cloud)
    o.recurseRedact(o.Environment)
    o.recurseRedact(o.Network)
}

func (o *NetworkingAdminV1PrivateLinkAccessSpec) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o NetworkingAdminV1PrivateLinkAccessSpec) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o NetworkingAdminV1PrivateLinkAccessSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Cloud != nil {
		toSerialize["cloud"] = o.Cloud
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkingAdminV1PrivateLinkAccessSpec struct {
	value *NetworkingAdminV1PrivateLinkAccessSpec
	isSet bool
}

func (v NullableNetworkingAdminV1PrivateLinkAccessSpec) Get() *NetworkingAdminV1PrivateLinkAccessSpec {
	return v.value
}

func (v *NullableNetworkingAdminV1PrivateLinkAccessSpec) Set(val *NetworkingAdminV1PrivateLinkAccessSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingAdminV1PrivateLinkAccessSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingAdminV1PrivateLinkAccessSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingAdminV1PrivateLinkAccessSpec(val *NetworkingAdminV1PrivateLinkAccessSpec) *NullableNetworkingAdminV1PrivateLinkAccessSpec {
	return &NullableNetworkingAdminV1PrivateLinkAccessSpec{value: val, isSet: true}
}

func (v NullableNetworkingAdminV1PrivateLinkAccessSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkingAdminV1PrivateLinkAccessSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


