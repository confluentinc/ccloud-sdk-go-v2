// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network Admin APIs

# Introduction  Networking Admin API provides resources/APIs which are not applicable for broader user access. Currently, they are cater to scenarios required by the Confluent Cloud Admin Dashboard. 

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf - struct for NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf
type NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf struct {
	NetworkingAdminV1AwsPrivateLinkAccess *NetworkingAdminV1AwsPrivateLinkAccess
	NetworkingAdminV1AzurePrivateLinkAccess *NetworkingAdminV1AzurePrivateLinkAccess
	NetworkingAdminV1GcpPrivateLinkAccess *NetworkingAdminV1GcpPrivateLinkAccess
}

// NetworkingAdminV1AwsPrivateLinkAccessAsNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf is a convenience function that returns NetworkingAdminV1AwsPrivateLinkAccess wrapped in NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf
func NetworkingAdminV1AwsPrivateLinkAccessAsNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf(v *NetworkingAdminV1AwsPrivateLinkAccess) NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf {
	return NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf{ NetworkingAdminV1AwsPrivateLinkAccess: v}
}

// NetworkingAdminV1AzurePrivateLinkAccessAsNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf is a convenience function that returns NetworkingAdminV1AzurePrivateLinkAccess wrapped in NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf
func NetworkingAdminV1AzurePrivateLinkAccessAsNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf(v *NetworkingAdminV1AzurePrivateLinkAccess) NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf {
	return NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf{ NetworkingAdminV1AzurePrivateLinkAccess: v}
}

// NetworkingAdminV1GcpPrivateLinkAccessAsNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf is a convenience function that returns NetworkingAdminV1GcpPrivateLinkAccess wrapped in NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf
func NetworkingAdminV1GcpPrivateLinkAccessAsNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf(v *NetworkingAdminV1GcpPrivateLinkAccess) NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf {
	return NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf{ NetworkingAdminV1GcpPrivateLinkAccess: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsPrivateLinkAccess'
	if jsonDict["kind"] == "AwsPrivateLinkAccess" {
		// try to unmarshal JSON data into NetworkingAdminV1AwsPrivateLinkAccess
		err = json.Unmarshal(data, &dst.NetworkingAdminV1AwsPrivateLinkAccess)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1AwsPrivateLinkAccess, return on the first match
		} else {
			dst.NetworkingAdminV1AwsPrivateLinkAccess = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf as NetworkingAdminV1AwsPrivateLinkAccess: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePrivateLinkAccess'
	if jsonDict["kind"] == "AzurePrivateLinkAccess" {
		// try to unmarshal JSON data into NetworkingAdminV1AzurePrivateLinkAccess
		err = json.Unmarshal(data, &dst.NetworkingAdminV1AzurePrivateLinkAccess)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1AzurePrivateLinkAccess, return on the first match
		} else {
			dst.NetworkingAdminV1AzurePrivateLinkAccess = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf as NetworkingAdminV1AzurePrivateLinkAccess: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpPrivateLinkAccess'
	if jsonDict["kind"] == "GcpPrivateLinkAccess" {
		// try to unmarshal JSON data into NetworkingAdminV1GcpPrivateLinkAccess
		err = json.Unmarshal(data, &dst.NetworkingAdminV1GcpPrivateLinkAccess)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1GcpPrivateLinkAccess, return on the first match
		} else {
			dst.NetworkingAdminV1GcpPrivateLinkAccess = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf as NetworkingAdminV1GcpPrivateLinkAccess: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking-admin.v1.AwsPrivateLinkAccess'
	if jsonDict["kind"] == "networking-admin.v1.AwsPrivateLinkAccess" {
		// try to unmarshal JSON data into NetworkingAdminV1AwsPrivateLinkAccess
		err = json.Unmarshal(data, &dst.NetworkingAdminV1AwsPrivateLinkAccess)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1AwsPrivateLinkAccess, return on the first match
		} else {
			dst.NetworkingAdminV1AwsPrivateLinkAccess = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf as NetworkingAdminV1AwsPrivateLinkAccess: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking-admin.v1.AzurePrivateLinkAccess'
	if jsonDict["kind"] == "networking-admin.v1.AzurePrivateLinkAccess" {
		// try to unmarshal JSON data into NetworkingAdminV1AzurePrivateLinkAccess
		err = json.Unmarshal(data, &dst.NetworkingAdminV1AzurePrivateLinkAccess)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1AzurePrivateLinkAccess, return on the first match
		} else {
			dst.NetworkingAdminV1AzurePrivateLinkAccess = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf as NetworkingAdminV1AzurePrivateLinkAccess: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking-admin.v1.GcpPrivateLinkAccess'
	if jsonDict["kind"] == "networking-admin.v1.GcpPrivateLinkAccess" {
		// try to unmarshal JSON data into NetworkingAdminV1GcpPrivateLinkAccess
		err = json.Unmarshal(data, &dst.NetworkingAdminV1GcpPrivateLinkAccess)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1GcpPrivateLinkAccess, return on the first match
		} else {
			dst.NetworkingAdminV1GcpPrivateLinkAccess = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf as NetworkingAdminV1GcpPrivateLinkAccess: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) MarshalJSON() ([]byte, error) {
	if src.NetworkingAdminV1AwsPrivateLinkAccess != nil {
		return json.Marshal(&src.NetworkingAdminV1AwsPrivateLinkAccess)
	}

	if src.NetworkingAdminV1AzurePrivateLinkAccess != nil {
		return json.Marshal(&src.NetworkingAdminV1AzurePrivateLinkAccess)
	}

	if src.NetworkingAdminV1GcpPrivateLinkAccess != nil {
		return json.Marshal(&src.NetworkingAdminV1GcpPrivateLinkAccess)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) GetActualInstance() (interface{}) {
	if obj.NetworkingAdminV1AwsPrivateLinkAccess != nil {
		return obj.NetworkingAdminV1AwsPrivateLinkAccess
	}

	if obj.NetworkingAdminV1AzurePrivateLinkAccess != nil {
		return obj.NetworkingAdminV1AzurePrivateLinkAccess
	}

	if obj.NetworkingAdminV1GcpPrivateLinkAccess != nil {
		return obj.NetworkingAdminV1GcpPrivateLinkAccess
	}

	// all schemas are nil
	return nil
}

type NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf struct {
	value *NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf
	isSet bool
}

func (v NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) Get() *NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf {
	return v.value
}

func (v *NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) Set(val *NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf(val *NetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) *NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf {
	return &NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf{value: val, isSet: true}
}

func (v NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkingAdminV1PrivateLinkAccessSpecCloudOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


