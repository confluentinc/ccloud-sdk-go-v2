// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network Admin APIs

# Introduction  Networking Admin API provides resources/APIs which are not applicable for broader user access. Currently, they are cater to scenarios required by the Confluent Cloud Admin Dashboard. 

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// NetworkingAdminV1ConnectionTypes The connection types requested for use with the network.
type NetworkingAdminV1ConnectionTypes struct {
	Items []string
}

// NewNetworkingAdminV1ConnectionTypes instantiates a new NetworkingAdminV1ConnectionTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkingAdminV1ConnectionTypes() *NetworkingAdminV1ConnectionTypes {
	this := NetworkingAdminV1ConnectionTypes{}
	return &this
}

// NewNetworkingAdminV1ConnectionTypesWithDefaults instantiates a new NetworkingAdminV1ConnectionTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkingAdminV1ConnectionTypesWithDefaults() *NetworkingAdminV1ConnectionTypes {
	this := NetworkingAdminV1ConnectionTypes{}
	return &this
}

// Redact resets all sensitive fields to their zero value.
func (o *NetworkingAdminV1ConnectionTypes) Redact() {
}

func (o *NetworkingAdminV1ConnectionTypes) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o NetworkingAdminV1ConnectionTypes) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o NetworkingAdminV1ConnectionTypes) MarshalJSON() ([]byte, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return json.Marshal(toSerialize)
}

func (o *NetworkingAdminV1ConnectionTypes) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableNetworkingAdminV1ConnectionTypes struct {
	value *NetworkingAdminV1ConnectionTypes
	isSet bool
}

func (v NullableNetworkingAdminV1ConnectionTypes) Get() *NetworkingAdminV1ConnectionTypes {
	return v.value
}

func (v *NullableNetworkingAdminV1ConnectionTypes) Set(val *NetworkingAdminV1ConnectionTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingAdminV1ConnectionTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingAdminV1ConnectionTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingAdminV1ConnectionTypes(val *NetworkingAdminV1ConnectionTypes) *NullableNetworkingAdminV1ConnectionTypes {
	return &NullableNetworkingAdminV1ConnectionTypes{value: val, isSet: true}
}

func (v NullableNetworkingAdminV1ConnectionTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkingAdminV1ConnectionTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


