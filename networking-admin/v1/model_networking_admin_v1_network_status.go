// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network Admin APIs

# Introduction  Networking Admin API provides resources/APIs which are not applicable for broader user access. Currently, they are cater to scenarios required by the Confluent Cloud Admin Dashboard. 

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// NetworkingAdminV1NetworkStatus The status of the Network
type NetworkingAdminV1NetworkStatus struct {
	// The lifecyle phase of the network:  PROVISIONING:  network provisioning is in progress;  READY:  network is ready;  FAILED: provisioning failed;  DEPROVISIONING: network deprovisioning is in progress; 
	Phase string `json:"phase"`
	SupportedConnectionTypes NetworkingAdminV1StatusConnectionTypes `json:"supported_connection_types"`
	// Error code if network is in a failed state. May be used for programmatic error checking.
	ErrorCode *string `json:"error_code,omitempty"`
	// Displayable error message if network is in a failed state
	ErrorMessage *string `json:"error_message,omitempty"`
	// The root DNS domain for the network if applicable. Present on networks that support PrivateLink.
	DnsDomain *string `json:"dns_domain,omitempty"`
	// The DNS subdomain for each zone. Present on networks that support PrivateLink. Keys are zones and values are DNS domains. 
	ZonalSubdomains *map[string]string `json:"zonal_subdomains,omitempty"`
	// The cloud-specific network details. These will be populated when the network reaches the READY state.
	Cloud *NetworkingAdminV1NetworkStatusCloudOneOf `json:"cloud,omitempty"`
}

// NewNetworkingAdminV1NetworkStatus instantiates a new NetworkingAdminV1NetworkStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkingAdminV1NetworkStatus(phase string, supportedConnectionTypes NetworkingAdminV1StatusConnectionTypes) *NetworkingAdminV1NetworkStatus {
	this := NetworkingAdminV1NetworkStatus{}
	this.Phase = phase
	this.SupportedConnectionTypes = supportedConnectionTypes
	return &this
}

// NewNetworkingAdminV1NetworkStatusWithDefaults instantiates a new NetworkingAdminV1NetworkStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkingAdminV1NetworkStatusWithDefaults() *NetworkingAdminV1NetworkStatus {
	this := NetworkingAdminV1NetworkStatus{}
	return &this
}

// GetPhase returns the Phase field value
func (o *NetworkingAdminV1NetworkStatus) GetPhase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1NetworkStatus) GetPhaseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *NetworkingAdminV1NetworkStatus) SetPhase(v string) {
	o.Phase = v
}

// GetSupportedConnectionTypes returns the SupportedConnectionTypes field value
func (o *NetworkingAdminV1NetworkStatus) GetSupportedConnectionTypes() NetworkingAdminV1StatusConnectionTypes {
	if o == nil {
		var ret NetworkingAdminV1StatusConnectionTypes
		return ret
	}

	return o.SupportedConnectionTypes
}

// GetSupportedConnectionTypesOk returns a tuple with the SupportedConnectionTypes field value
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1NetworkStatus) GetSupportedConnectionTypesOk() (*NetworkingAdminV1StatusConnectionTypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupportedConnectionTypes, true
}

// SetSupportedConnectionTypes sets field value
func (o *NetworkingAdminV1NetworkStatus) SetSupportedConnectionTypes(v NetworkingAdminV1StatusConnectionTypes) {
	o.SupportedConnectionTypes = v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *NetworkingAdminV1NetworkStatus) GetErrorCode() string {
	if o == nil || o.ErrorCode == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1NetworkStatus) GetErrorCodeOk() (*string, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *NetworkingAdminV1NetworkStatus) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *NetworkingAdminV1NetworkStatus) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *NetworkingAdminV1NetworkStatus) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1NetworkStatus) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *NetworkingAdminV1NetworkStatus) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *NetworkingAdminV1NetworkStatus) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetDnsDomain returns the DnsDomain field value if set, zero value otherwise.
func (o *NetworkingAdminV1NetworkStatus) GetDnsDomain() string {
	if o == nil || o.DnsDomain == nil {
		var ret string
		return ret
	}
	return *o.DnsDomain
}

// GetDnsDomainOk returns a tuple with the DnsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1NetworkStatus) GetDnsDomainOk() (*string, bool) {
	if o == nil || o.DnsDomain == nil {
		return nil, false
	}
	return o.DnsDomain, true
}

// HasDnsDomain returns a boolean if a field has been set.
func (o *NetworkingAdminV1NetworkStatus) HasDnsDomain() bool {
	if o != nil && o.DnsDomain != nil {
		return true
	}

	return false
}

// SetDnsDomain gets a reference to the given string and assigns it to the DnsDomain field.
func (o *NetworkingAdminV1NetworkStatus) SetDnsDomain(v string) {
	o.DnsDomain = &v
}

// GetZonalSubdomains returns the ZonalSubdomains field value if set, zero value otherwise.
func (o *NetworkingAdminV1NetworkStatus) GetZonalSubdomains() map[string]string {
	if o == nil || o.ZonalSubdomains == nil {
		var ret map[string]string
		return ret
	}
	return *o.ZonalSubdomains
}

// GetZonalSubdomainsOk returns a tuple with the ZonalSubdomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1NetworkStatus) GetZonalSubdomainsOk() (*map[string]string, bool) {
	if o == nil || o.ZonalSubdomains == nil {
		return nil, false
	}
	return o.ZonalSubdomains, true
}

// HasZonalSubdomains returns a boolean if a field has been set.
func (o *NetworkingAdminV1NetworkStatus) HasZonalSubdomains() bool {
	if o != nil && o.ZonalSubdomains != nil {
		return true
	}

	return false
}

// SetZonalSubdomains gets a reference to the given map[string]string and assigns it to the ZonalSubdomains field.
func (o *NetworkingAdminV1NetworkStatus) SetZonalSubdomains(v map[string]string) {
	o.ZonalSubdomains = &v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *NetworkingAdminV1NetworkStatus) GetCloud() NetworkingAdminV1NetworkStatusCloudOneOf {
	if o == nil || o.Cloud == nil {
		var ret NetworkingAdminV1NetworkStatusCloudOneOf
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingAdminV1NetworkStatus) GetCloudOk() (*NetworkingAdminV1NetworkStatusCloudOneOf, bool) {
	if o == nil || o.Cloud == nil {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *NetworkingAdminV1NetworkStatus) HasCloud() bool {
	if o != nil && o.Cloud != nil {
		return true
	}

	return false
}

// SetCloud gets a reference to the given NetworkingAdminV1NetworkStatusCloudOneOf and assigns it to the Cloud field.
func (o *NetworkingAdminV1NetworkStatus) SetCloud(v NetworkingAdminV1NetworkStatusCloudOneOf) {
	o.Cloud = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *NetworkingAdminV1NetworkStatus) Redact() {
    o.recurseRedact(&o.Phase)
    o.recurseRedact(&o.SupportedConnectionTypes)
    o.recurseRedact(o.ErrorCode)
    o.recurseRedact(o.ErrorMessage)
    o.recurseRedact(o.DnsDomain)
    o.recurseRedact(o.ZonalSubdomains)
    o.recurseRedact(o.Cloud)
}

func (o *NetworkingAdminV1NetworkStatus) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o NetworkingAdminV1NetworkStatus) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o NetworkingAdminV1NetworkStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["phase"] = o.Phase
	}
	if true {
		toSerialize["supported_connection_types"] = o.SupportedConnectionTypes
	}
	if o.ErrorCode != nil {
		toSerialize["error_code"] = o.ErrorCode
	}
	if o.ErrorMessage != nil {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if o.DnsDomain != nil {
		toSerialize["dns_domain"] = o.DnsDomain
	}
	if o.ZonalSubdomains != nil {
		toSerialize["zonal_subdomains"] = o.ZonalSubdomains
	}
	if o.Cloud != nil {
		toSerialize["cloud"] = o.Cloud
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkingAdminV1NetworkStatus struct {
	value *NetworkingAdminV1NetworkStatus
	isSet bool
}

func (v NullableNetworkingAdminV1NetworkStatus) Get() *NetworkingAdminV1NetworkStatus {
	return v.value
}

func (v *NullableNetworkingAdminV1NetworkStatus) Set(val *NetworkingAdminV1NetworkStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingAdminV1NetworkStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingAdminV1NetworkStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingAdminV1NetworkStatus(val *NetworkingAdminV1NetworkStatus) *NullableNetworkingAdminV1NetworkStatus {
	return &NullableNetworkingAdminV1NetworkStatus{value: val, isSet: true}
}

func (v NullableNetworkingAdminV1NetworkStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkingAdminV1NetworkStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


