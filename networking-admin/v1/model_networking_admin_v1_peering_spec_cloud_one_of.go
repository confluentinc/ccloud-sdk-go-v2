// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network Admin APIs

# Introduction  Networking Admin API provides resources/APIs which are not applicable for broader user access. Currently, they are cater to scenarios required by the Confluent Cloud Admin Dashboard. 

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// NetworkingAdminV1PeeringSpecCloudOneOf - struct for NetworkingAdminV1PeeringSpecCloudOneOf
type NetworkingAdminV1PeeringSpecCloudOneOf struct {
	NetworkingAdminV1AwsPeering *NetworkingAdminV1AwsPeering
	NetworkingAdminV1AzurePeering *NetworkingAdminV1AzurePeering
	NetworkingAdminV1GcpPeering *NetworkingAdminV1GcpPeering
}

// NetworkingAdminV1AwsPeeringAsNetworkingAdminV1PeeringSpecCloudOneOf is a convenience function that returns NetworkingAdminV1AwsPeering wrapped in NetworkingAdminV1PeeringSpecCloudOneOf
func NetworkingAdminV1AwsPeeringAsNetworkingAdminV1PeeringSpecCloudOneOf(v *NetworkingAdminV1AwsPeering) NetworkingAdminV1PeeringSpecCloudOneOf {
	return NetworkingAdminV1PeeringSpecCloudOneOf{ NetworkingAdminV1AwsPeering: v}
}

// NetworkingAdminV1AzurePeeringAsNetworkingAdminV1PeeringSpecCloudOneOf is a convenience function that returns NetworkingAdminV1AzurePeering wrapped in NetworkingAdminV1PeeringSpecCloudOneOf
func NetworkingAdminV1AzurePeeringAsNetworkingAdminV1PeeringSpecCloudOneOf(v *NetworkingAdminV1AzurePeering) NetworkingAdminV1PeeringSpecCloudOneOf {
	return NetworkingAdminV1PeeringSpecCloudOneOf{ NetworkingAdminV1AzurePeering: v}
}

// NetworkingAdminV1GcpPeeringAsNetworkingAdminV1PeeringSpecCloudOneOf is a convenience function that returns NetworkingAdminV1GcpPeering wrapped in NetworkingAdminV1PeeringSpecCloudOneOf
func NetworkingAdminV1GcpPeeringAsNetworkingAdminV1PeeringSpecCloudOneOf(v *NetworkingAdminV1GcpPeering) NetworkingAdminV1PeeringSpecCloudOneOf {
	return NetworkingAdminV1PeeringSpecCloudOneOf{ NetworkingAdminV1GcpPeering: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkingAdminV1PeeringSpecCloudOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsPeering'
	if jsonDict["kind"] == "AwsPeering" {
		// try to unmarshal JSON data into NetworkingAdminV1AwsPeering
		err = json.Unmarshal(data, &dst.NetworkingAdminV1AwsPeering)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1AwsPeering, return on the first match
		} else {
			dst.NetworkingAdminV1AwsPeering = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PeeringSpecCloudOneOf as NetworkingAdminV1AwsPeering: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePeering'
	if jsonDict["kind"] == "AzurePeering" {
		// try to unmarshal JSON data into NetworkingAdminV1AzurePeering
		err = json.Unmarshal(data, &dst.NetworkingAdminV1AzurePeering)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1AzurePeering, return on the first match
		} else {
			dst.NetworkingAdminV1AzurePeering = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PeeringSpecCloudOneOf as NetworkingAdminV1AzurePeering: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpPeering'
	if jsonDict["kind"] == "GcpPeering" {
		// try to unmarshal JSON data into NetworkingAdminV1GcpPeering
		err = json.Unmarshal(data, &dst.NetworkingAdminV1GcpPeering)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1GcpPeering, return on the first match
		} else {
			dst.NetworkingAdminV1GcpPeering = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PeeringSpecCloudOneOf as NetworkingAdminV1GcpPeering: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking-admin.v1.AwsPeering'
	if jsonDict["kind"] == "networking-admin.v1.AwsPeering" {
		// try to unmarshal JSON data into NetworkingAdminV1AwsPeering
		err = json.Unmarshal(data, &dst.NetworkingAdminV1AwsPeering)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1AwsPeering, return on the first match
		} else {
			dst.NetworkingAdminV1AwsPeering = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PeeringSpecCloudOneOf as NetworkingAdminV1AwsPeering: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking-admin.v1.AzurePeering'
	if jsonDict["kind"] == "networking-admin.v1.AzurePeering" {
		// try to unmarshal JSON data into NetworkingAdminV1AzurePeering
		err = json.Unmarshal(data, &dst.NetworkingAdminV1AzurePeering)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1AzurePeering, return on the first match
		} else {
			dst.NetworkingAdminV1AzurePeering = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PeeringSpecCloudOneOf as NetworkingAdminV1AzurePeering: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking-admin.v1.GcpPeering'
	if jsonDict["kind"] == "networking-admin.v1.GcpPeering" {
		// try to unmarshal JSON data into NetworkingAdminV1GcpPeering
		err = json.Unmarshal(data, &dst.NetworkingAdminV1GcpPeering)
		if err == nil {
			return nil // data stored in dst.NetworkingAdminV1GcpPeering, return on the first match
		} else {
			dst.NetworkingAdminV1GcpPeering = nil
			return fmt.Errorf("Failed to unmarshal NetworkingAdminV1PeeringSpecCloudOneOf as NetworkingAdminV1GcpPeering: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkingAdminV1PeeringSpecCloudOneOf) MarshalJSON() ([]byte, error) {
	if src.NetworkingAdminV1AwsPeering != nil {
		return json.Marshal(&src.NetworkingAdminV1AwsPeering)
	}

	if src.NetworkingAdminV1AzurePeering != nil {
		return json.Marshal(&src.NetworkingAdminV1AzurePeering)
	}

	if src.NetworkingAdminV1GcpPeering != nil {
		return json.Marshal(&src.NetworkingAdminV1GcpPeering)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkingAdminV1PeeringSpecCloudOneOf) GetActualInstance() (interface{}) {
	if obj.NetworkingAdminV1AwsPeering != nil {
		return obj.NetworkingAdminV1AwsPeering
	}

	if obj.NetworkingAdminV1AzurePeering != nil {
		return obj.NetworkingAdminV1AzurePeering
	}

	if obj.NetworkingAdminV1GcpPeering != nil {
		return obj.NetworkingAdminV1GcpPeering
	}

	// all schemas are nil
	return nil
}

type NullableNetworkingAdminV1PeeringSpecCloudOneOf struct {
	value *NetworkingAdminV1PeeringSpecCloudOneOf
	isSet bool
}

func (v NullableNetworkingAdminV1PeeringSpecCloudOneOf) Get() *NetworkingAdminV1PeeringSpecCloudOneOf {
	return v.value
}

func (v *NullableNetworkingAdminV1PeeringSpecCloudOneOf) Set(val *NetworkingAdminV1PeeringSpecCloudOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingAdminV1PeeringSpecCloudOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingAdminV1PeeringSpecCloudOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingAdminV1PeeringSpecCloudOneOf(val *NetworkingAdminV1PeeringSpecCloudOneOf) *NullableNetworkingAdminV1PeeringSpecCloudOneOf {
	return &NullableNetworkingAdminV1PeeringSpecCloudOneOf{value: val, isSet: true}
}

func (v NullableNetworkingAdminV1PeeringSpecCloudOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkingAdminV1PeeringSpecCloudOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


