// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1alpha1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

import (
	"reflect"
)

// MapType struct for MapType
type MapType struct {
	// Indicates whether values in this column can be null.
	Nullable bool `json:"nullable,omitempty"`
	// The data type of the column.
	Type string `json:"type,omitempty"`
	// The type of the key in the map.
	KeyType DataType `json:"key_type,omitempty"`
	// The type of the value in the map.
	ValueType DataType `json:"value_type,omitempty"`
}

// NewMapType instantiates a new MapType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapType(nullable bool, type_ string, keyType DataType, valueType DataType) *MapType {
	this := MapType{}
	this.Nullable = nullable
	this.Type = type_
	this.KeyType = keyType
	this.ValueType = valueType
	return &this
}

// NewMapTypeWithDefaults instantiates a new MapType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapTypeWithDefaults() *MapType {
	this := MapType{}
	return &this
}

// GetNullable returns the Nullable field value
func (o *MapType) GetNullable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Nullable
}

// GetNullableOk returns a tuple with the Nullable field value
// and a boolean to check if the value has been set.
func (o *MapType) GetNullableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nullable, true
}

// SetNullable sets field value
func (o *MapType) SetNullable(v bool) {
	o.Nullable = v
}

// GetType returns the Type field value
func (o *MapType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MapType) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MapType) SetType(v string) {
	o.Type = v
}

// GetKeyType returns the KeyType field value
func (o *MapType) GetKeyType() DataType {
	if o == nil {
		var ret DataType
		return ret
	}

	return o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value
// and a boolean to check if the value has been set.
func (o *MapType) GetKeyTypeOk() (*DataType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KeyType, true
}

// SetKeyType sets field value
func (o *MapType) SetKeyType(v DataType) {
	o.KeyType = v
}

// GetValueType returns the ValueType field value
func (o *MapType) GetValueType() DataType {
	if o == nil {
		var ret DataType
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *MapType) GetValueTypeOk() (*DataType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *MapType) SetValueType(v DataType) {
	o.ValueType = v
}

// Redact resets all sensitive fields to their zero value.
func (o *MapType) Redact() {
    o.recurseRedact(&o.Nullable)
    o.recurseRedact(&o.Type)
    o.recurseRedact(&o.KeyType)
    o.recurseRedact(&o.ValueType)
}

func (o *MapType) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o MapType) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o MapType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nullable"] = o.Nullable
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["key_type"] = o.KeyType
	}
	if true {
		toSerialize["value_type"] = o.ValueType
	}
	return json.Marshal(toSerialize)
}

type NullableMapType struct {
	value *MapType
	isSet bool
}

func (v NullableMapType) Get() *MapType {
	return v.value
}

func (v *NullableMapType) Set(val *MapType) {
	v.value = val
	v.isSet = true
}

func (v NullableMapType) IsSet() bool {
	return v.isSet
}

func (v *NullableMapType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapType(val *MapType) *NullableMapType {
	return &NullableMapType{value: val, isSet: true}
}

func (v NullableMapType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


