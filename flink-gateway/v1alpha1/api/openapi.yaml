openapi: 3.0.0
info:
  contact:
    email: flink-control-plane@confluent.io
    name: Flink
    url: https://confluent.slack.com/app_redirect?channel=flink-ccloud
  title: SQL API v1alpha1
  version: 0.0.1
  x-api-id: a19bfe13-af66-493b-930a-5b7664bf52b7
  x-audience: external-public
  x-tag-group: SQL API (%s)
  x-api-group: sql/v1alpha1
servers:
- description: Flink Compute Pool Endpoint
  url: https://flink.region.provider.confluent.cloud
tags:
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To SQL API v1alpha1](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Gateway%20API-%23bc8540)](mailto:ccloud-api-access+sql-v1alpha1-early-access@confluent.io?subject=Request%20to%20join%20sql/v1alpha1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20sql/v1alpha1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)
    `Statement` represents a core resource used to model SQL statements for execution.
    A statement generalizes DDL, DML, DQL, etc., but doesnâ€™t attempt to handle session
    management or any higher-level functionality.
    The API allows you to list, create, read, and delete your statements.
    ## The Statements Model
    <SchemaDefinition schemaRef="#/components/schemas/sql.v1alpha1.Statement" />
  name: Statements (sql/v1alpha1)
paths:
  /sql/v1alpha1/environments/{environment_id}/statements/{statement_name}/results:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To SQL API v1alpha1](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Gateway%20API-%23bc8540)](mailto:ccloud-api-access+sql-v1alpha1-early-access@confluent.io?subject=Request%20to%20join%20sql/v1alpha1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20sql/v1alpha1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Read Statement Result.
      operationId: getSqlV1alpha1StatementResult
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: header
        name: Org-Id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the statement.
        explode: false
        in: path
        name: statement_name
        required: true
        schema:
          type: string
        style: simple
      - description: It contains the field offset in the CollectSinkFunction protocol.
          On the first request, it should be unset. The offset is assumed to start
          at 0.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/sql.v1alpha1.StatementResult'
                - properties:
                    results:
                      required:
                      - data
                      type: object
                  required:
                  - api_version
                  - kind
                  - metadata
                  - results
                  type: object
          description: Statement Result.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read Statement Result
      tags:
      - Statement Result (sql/v1alpha1)
      x-request-access-name: SQL API v1alpha1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/results \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'Org-Id: SOME_STRING_VALUE'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/results")
            .get()
            .addHeader("Org-Id", "SOME_STRING_VALUE")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/results\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Org-Id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"\
          Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\
          \tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("flink.region.provider.confluent.cloud")

          headers = {
              'Org-Id': "SOME_STRING_VALUE",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("GET", "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/results", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "flink.region.provider.confluent.cloud",
            "port": null,
            "path": "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/results",
            "headers": {
              "Org-Id": "SOME_STRING_VALUE",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/results");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Org-Id: SOME_STRING_VALUE");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/results");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Org-Id", "SOME_STRING_VALUE");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-request-access-name: SQL API v1alpha1
  /sql/v1alpha1/environments/{environment_id}/statements:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To SQL API v1alpha1](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Gateway%20API-%23bc8540)](mailto:ccloud-api-access+sql-v1alpha1-early-access@confluent.io?subject=Request%20to%20join%20sql/v1alpha1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20sql/v1alpha1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)
        Retrieve a sorted, filtered, paginated list of all statements.
      operationId: listSqlV1alpha1Statements
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: header
        name: Org-Id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: Filter the results by exact match for spec.compute_pool_id.
        example: fcp-00000
        explode: true
        in: query
        name: compute_pool_id
        required: false
        schema:
          type: string
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          maxLength: 255
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sql.v1alpha1.StatementList'
          description: Statements.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Statements
      tags:
      - Statements (sql/v1alpha1)
      x-request-access-name: SQL API v1alpha1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'Org-Id: SOME_STRING_VALUE'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements")
            .get()
            .addHeader("Org-Id", "SOME_STRING_VALUE")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Org-Id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"\
          Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\
          \tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("flink.region.provider.confluent.cloud")

          headers = {
              'Org-Id': "SOME_STRING_VALUE",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("GET", "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "flink.region.provider.confluent.cloud",
            "port": null,
            "path": "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements",
            "headers": {
              "Org-Id": "SOME_STRING_VALUE",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Org-Id: SOME_STRING_VALUE");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Org-Id", "SOME_STRING_VALUE");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To SQL API v1alpha1](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Gateway%20API-%23bc8540)](mailto:ccloud-api-access+sql-v1alpha1-early-access@confluent.io?subject=Request%20to%20join%20sql/v1alpha1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20sql/v1alpha1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)
        Make a request to create a statement.
      operationId: createSqlV1alpha1Statement
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: header
        name: Org-Id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/sql.v1alpha1.Statement'
              - properties:
                  spec:
                    required:
                    - compute_pool_id
                    - identity_pool_id
                    - statement
                    - statement_name
                    type: object
                required:
                - spec
                type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/sql.v1alpha1.Statement'
                - properties:
                    spec:
                      required:
                      - compute_pool_id
                      - statement
                      - statement_name
                      type: object
                  required:
                  - spec
                  - status
                  type: object
          description: A Statement is being created.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Statement resource uri
              explode: false
              schema:
                example: https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/{environment_id}/statements/{statement_name}
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: https://api.confluent.cloud/{object}/{id}
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "422":
          content:
            application/json:
              example:
                errors:
                - status: "422"
                  code: invalid_configuration
                  id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  title: Validation Failed
                  detail: 'The property ''/cluster/storage_size'' of type string did
                    not match the following type: integer'
                  source:
                    pointer: /cluster/storage_size
              schema:
                $ref: '#/components/schemas/Failure'
          description: Validation Failed
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Create a Statement
      tags:
      - Statements (sql/v1alpha1)
      x-request-access-name: SQL API v1alpha1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'Org-Id: SOME_STRING_VALUE' \
            --header 'content-type: application/json' \
            --data '{"spec":{"statement_name":"sql123","statement":"SELECT * FROM TABLE WHERE VALUE1 = VALUE2;","properties":{"key1":"value1","key2":"value2"},"compute_pool_id":"fcp-00000","identity_pool_id":"pool-abc123"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"spec\":{\"statement_name\":\"sql123\",\"statement\":\"SELECT * FROM TABLE WHERE VALUE1 = VALUE2;\",\"properties\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"compute_pool_id\":\"fcp-00000\",\"identity_pool_id\":\"pool-abc123\"}}");
          Request request = new Request.Builder()
            .url("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Org-Id", "SOME_STRING_VALUE")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"spec\\\":{\\\"statement_name\\\
          \":\\\"sql123\\\",\\\"statement\\\":\\\"SELECT * FROM TABLE WHERE VALUE1\
          \ = VALUE2;\\\",\\\"properties\\\":{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\
          \":\\\"value2\\\"},\\\"compute_pool_id\\\":\\\"fcp-00000\\\",\\\"identity_pool_id\\\
          \":\\\"pool-abc123\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url,\
          \ payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\
          \treq.Header.Add(\"Org-Id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("flink.region.provider.confluent.cloud")

          payload = "{\"spec\":{\"statement_name\":\"sql123\",\"statement\":\"SELECT * FROM TABLE WHERE VALUE1 = VALUE2;\",\"properties\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"compute_pool_id\":\"fcp-00000\",\"identity_pool_id\":\"pool-abc123\"}}"

          headers = {
              'content-type': "application/json",
              'Org-Id': "SOME_STRING_VALUE",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "flink.region.provider.confluent.cloud",
            "port": null,
            "path": "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements",
            "headers": {
              "content-type": "application/json",
              "Org-Id": "SOME_STRING_VALUE",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            spec: {
              statement_name: 'sql123',
              statement: 'SELECT * FROM TABLE WHERE VALUE1 = VALUE2;',
              properties: {key1: 'value1', key2: 'value2'},
              compute_pool_id: 'fcp-00000',
              identity_pool_id: 'pool-abc123'
            }
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Org-Id: SOME_STRING_VALUE");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"spec\":{\"statement_name\":\"sql123\",\"statement\":\"SELECT * FROM TABLE WHERE VALUE1 = VALUE2;\",\"properties\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"compute_pool_id\":\"fcp-00000\",\"identity_pool_id\":\"pool-abc123\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Org-Id", "SOME_STRING_VALUE");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"spec\":{\"statement_name\":\"sql123\",\"statement\":\"SELECT * FROM TABLE WHERE VALUE1 = VALUE2;\",\"properties\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"compute_pool_id\":\"fcp-00000\",\"identity_pool_id\":\"pool-abc123\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-request-access-name: SQL API v1alpha1
  /sql/v1alpha1/environments/{environment_id}/statements/{statement_name}:
    delete:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To SQL API v1alpha1](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Gateway%20API-%23bc8540)](mailto:ccloud-api-access+sql-v1alpha1-early-access@confluent.io?subject=Request%20to%20join%20sql/v1alpha1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20sql/v1alpha1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)
        Make a request to delete a statement.
      operationId: deleteSqlV1alpha1Statement
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: header
        name: Org-Id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the statement.
        explode: false
        in: path
        name: statement_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: A Statement is being deleted.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Delete a Statement
      tags:
      - Statements (sql/v1alpha1)
      x-request-access-name: SQL API v1alpha1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'Org-Id: SOME_STRING_VALUE'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D")
            .delete(null)
            .addHeader("Org-Id", "SOME_STRING_VALUE")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Org-Id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"\
          Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\
          \tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("flink.region.provider.confluent.cloud")

          headers = {
              'Org-Id': "SOME_STRING_VALUE",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("DELETE", "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "flink.region.provider.confluent.cloud",
            "port": null,
            "path": "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D",
            "headers": {
              "Org-Id": "SOME_STRING_VALUE",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Org-Id: SOME_STRING_VALUE");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Org-Id", "SOME_STRING_VALUE");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To SQL API v1alpha1](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Gateway%20API-%23bc8540)](mailto:ccloud-api-access+sql-v1alpha1-early-access@confluent.io?subject=Request%20to%20join%20sql/v1alpha1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20sql/v1alpha1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)
        Make a request to read a statement.
      operationId: getSqlV1alpha1Statement
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: header
        name: Org-Id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the statement.
        explode: false
        in: path
        name: statement_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/sql.v1alpha1.Statement'
                - properties:
                    spec:
                      required:
                      - compute_pool_id
                      - statement
                      - statement_name
                      type: object
                  required:
                  - api_version
                  - kind
                  - metadata
                  - spec
                  - status
                  type: object
          description: Statement.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: Read a Statement
      tags:
      - Statements (sql/v1alpha1)
      x-request-access-name: SQL API v1alpha1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'Org-Id: SOME_STRING_VALUE'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D")
            .get()
            .addHeader("Org-Id", "SOME_STRING_VALUE")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Org-Id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"\
          Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\
          \tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("flink.region.provider.confluent.cloud")

          headers = {
              'Org-Id': "SOME_STRING_VALUE",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("GET", "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "flink.region.provider.confluent.cloud",
            "port": null,
            "path": "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D",
            "headers": {
              "Org-Id": "SOME_STRING_VALUE",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Org-Id: SOME_STRING_VALUE");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Org-Id", "SOME_STRING_VALUE");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-request-access-name: SQL API v1alpha1
  /sql/v1alpha1/environments/{environment_id}/statements/{statement_name}/exceptions:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To SQL API v1alpha1](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Gateway%20API-%23bc8540)](mailto:ccloud-api-access+sql-v1alpha1-early-access@confluent.io?subject=Request%20to%20join%20sql/v1alpha1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20sql/v1alpha1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)
        Retrieve a list of the 10 most recent statement exceptions.
      operationId: getSqlV1alpha1StatementExceptions
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: header
        name: Org-Id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the statement.
        explode: false
        in: path
        name: statement_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sql.v1alpha1.StatementExceptionList'
          description: Statement Exceptions.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "429":
          description: Rate Limit Exceeded
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
          headers:
            X-Request-Id:
              description: The unique identifier for the API request.
              explode: false
              schema:
                type: string
              style: simple
      security:
      - api-key: []
      summary: List of Statement Exceptions
      tags:
      - StatementExceptions (sql/v1alpha1)
      x-request-access-name: SQL API v1alpha1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/exceptions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'Org-Id: SOME_STRING_VALUE'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/exceptions")
            .get()
            .addHeader("Org-Id", "SOME_STRING_VALUE")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/exceptions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Org-Id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"\
          Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\
          \tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("flink.region.provider.confluent.cloud")

          headers = {
              'Org-Id': "SOME_STRING_VALUE",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("GET", "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/exceptions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "flink.region.provider.confluent.cloud",
            "port": null,
            "path": "/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/exceptions",
            "headers": {
              "Org-Id": "SOME_STRING_VALUE",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/exceptions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Org-Id: SOME_STRING_VALUE");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://flink.region.provider.confluent.cloud/sql/v1alpha1/environments/%7Benvironment_id%7D/statements/%7Bstatement_name%7D/exceptions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Org-Id", "SOME_STRING_VALUE");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-request-access-name: SQL API v1alpha1
components:
  responses:
    BadRequestError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "400"
              code: invalid_filter
              title: Invalid Filter
              detail: The 'delorean' resource can't be filtered by 'num_doors'
              source:
                parameter: num_doors
          schema:
            $ref: '#/components/schemas/Failure'
      description: Bad Request
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    UnauthenticatedError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "401"
              code: user_unauthenticated
              title: Authentication Required
              detail: Valid authentication credentials must be provided
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request lacks valid authentication credentials for this resource.
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
        WWW-Authenticate:
          description: The unique identifier for the API request.
          example: Basic error="invalid_key", error_description="The API Key is invalid"
          explode: false
          schema:
            type: string
          style: simple
      x-summary: Unauthorized
    OverQuotaError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "402"
              code: quota_exceeded
              title: Kafka Clusters Per Org Quota Exceeded
              detail: 'The request would exceed the quota: kafka_clusters_per_environment'
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request would exceed one or more quotas.
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
      x-summary: Over Quota
    UnauthorizedError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "403"
              code: user_unauthorized
              title: User Access Unauthorized
              detail: The user 'mcfly' is not allowed to access the 'delorean' resource
                without the 'plutonium' role.
          schema:
            $ref: '#/components/schemas/Failure'
      description: The access credentials were considered insufficient to grant access
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
      x-summary: Forbidden
    ConflictError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "409"
              code: resource_already_exists
              title: Resource Already exists
              detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                exists.
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request is in conflict with the current server state
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
        Location:
          description: Resource URI of conflicting resource
          explode: false
          schema:
            example: https://api.confluent.cloud/{object}/{id}
            format: uri
            type: string
          style: simple
      x-summary: Conflict
    NotFoundError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "404"
              title: Not Found
          schema:
            $ref: '#/components/schemas/Failure'
      description: Not Found
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    ValidationError:
      content:
        application/json:
          example:
            errors:
            - status: "422"
              code: invalid_configuration
              id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              title: Validation Failed
              detail: 'The property ''/cluster/storage_size'' of type string did not
                match the following type: integer'
              source:
                pointer: /cluster/storage_size
          schema:
            $ref: '#/components/schemas/Failure'
      description: Validation Failed
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    RateLimitError:
      description: Rate Limit Exceeded
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
    DefaultSystemError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "500"
              code: out_of_gas
              title: DeLorean Out Of Gas
              detail: The DeLorean has run out of gas, but Doc Brown will fill 'er
                up for you asap
          schema:
            $ref: '#/components/schemas/Failure'
      description: Oops, something went wrong!
      headers:
        X-Request-Id:
          description: The unique identifier for the API request.
          explode: false
          schema:
            type: string
          style: simple
  schemas:
    sql.v1alpha1.Statement:
      description: |-
        `Statement` represents a core resource used to model SQL statements for execution.
        A statement generalizes DDL, DML, DQL, etc., but doesnâ€™t attempt to handle session
        management or any higher-level functionality.
        The API allows you to list, create, read, and delete your statements.
        ## The Statements Model
        <SchemaDefinition schemaRef="#/components/schemas/sql.v1alpha1.Statement" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - sql/v1alpha1
          example: sql/v1alpha1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Statement
          readOnly: true
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/sql.v1alpha1.StatementSpec'
        status:
          $ref: '#/components/schemas/sql.v1alpha1.StatementStatus'
      type: object
    sql.v1alpha1.StatementStatus:
      description: The status of the Statement
      properties:
        phase:
          description: |
            The lifecycle phase of the submitted SQL statement:
            PENDING: SQL statement is pending execution;
            RUNNING: SQL statement execution is in progress;
            COMPLETED: SQL statement is completed;
            DELETING: SQL statement deletion is in progress;
            FAILING: SQL statement is failing;
            FAILED: SQL statement execution has failed;
          example: RUNNING
          readOnly: true
          type: string
          x-extensible-enum:
          - PENDING
          - RUNNING
          - COMPLETED
          - DELETING
          - FAILING
          - FAILED
        result_schema:
          $ref: '#/components/schemas/sql.v1alpha1.ResultSchema'
        detail:
          description: Description of a SQL statement phase.
          example: 'COMPLETED: SQL statement is completed'
          readOnly: true
          type: string
      readOnly: true
      required:
      - phase
      type: object
    MultipleSearchFilter:
      description: Filter a collection by a string search for one or more values
      items:
        type: string
      type: array
    SearchFilter:
      description: Filter a collection by a string search
      type: string
    sql.v1alpha1.StatementList:
      description: |-
        `Statement` represents a core resource used to model SQL statements for execution.
        A statement generalizes DDL, DML, DQL, etc., but doesnâ€™t attempt to handle session
        management or any higher-level functionality.
        The API allows you to list, create, read, and delete your statements.
        ## The Statements Model
        <SchemaDefinition schemaRef="#/components/schemas/sql.v1alpha1.Statement" />
      example:
        metadata: ""
        data:
        - ""
        - ""
        kind: StatementList
        api_version: sql/v1alpha1
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - sql/v1alpha1
          example: sql/v1alpha1
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - StatementList
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/ListMeta'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            allOf:
            - $ref: '#/components/schemas/sql.v1alpha1.Statement'
            - properties:
                spec:
                  required:
                  - compute_pool_id
                  - statement
                  - statement_name
                  type: object
              required:
              - api_version
              - kind
              - metadata
              - spec
              - status
              type: object
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    sql.v1alpha1.StatementResult:
      description: |-
        `Statement Result` represents a resource used to model results of SQL statements.
        The API allows you to read your SQL statement result.
        ## The Statement Result Model
        <SchemaDefinition schemaRef="#/components/schemas/sql.v1alpha1.StatementResult" />
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - sql/v1alpha1
          example: sql/v1alpha1
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - StatementResult
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/ResultListMeta'
        results:
          allOf:
          - $ref: '#/components/schemas/sql.v1alpha1.StatementResultResults'
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    sql.v1alpha1.StatementResultResults:
      description: A results property that contains a data property that contains
        an array of results.
      properties:
        data:
          description: "A data property that contains an array of results. Each entry\
            \ in the array is a separate result.\n\nThe value of `op` attribute (if\
            \ present) represents the kind of change that a row can describe in a\
            \ changelog:\n\n`0`: represents `INSERT` (`+I`), i.e. insertion operation;\n\
            \n`1`: represents `UPDATE_BEFORE` (`-U`), i.e. update operation with the\
            \ previous content of the updated row.\nThis kind should occur together\
            \ with `UPDATE_AFTER` for modelling an update that needs to retract\n\
            the previous row first. It is useful in cases of a non-idempotent update,\
            \ i.e., an update of a row that is not \nuniquely identifiable by a key;\n\
            \n`2`: represents `UPDATE_AFTER` (`+U`), i.e. update operation with new\
            \ content of the updated row;\nThis kind CAN occur together with `UPDATE_BEFORE`\
            \ for modelling an update that\nneeds to retract the previous row first\
            \ or it describes an idempotent update, i.e., an\nupdate of a row that\
            \ is uniquely identifiable by a key;\n\n`3`: represents `DELETE` (`-D`),\
            \ i.e. deletion operation;\n\nDefaults to `0`.\n"
          example:
          - op: 0
            row:
            - "101"
            - Jay
            - - null
              - abc
            - - null
              - "456"
            - 1990-01-12 12:00.12
            - - - null
                - Alice
              - - "42"
                - Bob
          items: {}
          type: array
      type: object
    sql.v1alpha1.StatementSpec:
      description: The specs of the Statement
      properties:
        statement_name:
          description: The name of the resource, unique within this environment.
          example: sql123
          maxLength: 255
          type: string
          x-immutable: true
        statement:
          description: The raw SQL text statement.
          example: SELECT * FROM TABLE WHERE VALUE1 = VALUE2;
          maxLength: 131072
          type: string
          x-immutable: true
        properties:
          additionalProperties:
            type: string
          description: A map (key-value pairs) of statement properties.
          example:
            key1: value1
            key2: value2
          maximum: 8192
          type: object
        compute_pool_id:
          description: The id associated with the compute pool in context.
          example: fcp-00000
          maxLength: 255
          type: string
        identity_pool_id:
          description: The id associated with the identity pool in context.
          example: pool-abc123
          maxLength: 255
          type: string
      type: object
      x-enable-listmeta: true
      x-enable-objectmeta: true
    ObjectMeta:
      description: The metadata of the statement.
      properties:
        self:
          description: Self is a Uniform Resource Locator (URL) at which an object
            can be addressed. This URL encodes the service location, API version,
            and other particulars necessary to locate the resource at a point in time
          example: https://flink.us-west1.aws.confluent.cloud/sql/v1alpha1/environments/env-123/statements/my-statement
          format: uri
          type: string
        created_at:
          description: The date and time at which this object was created. It is represented
            in RFC3339 format and is in UTC.
          example: 1996-03-19T01:02:03-04:05
          format: date-time
          type: string
        updated_at:
          description: The date and time at which this object was last updated. It
            is represented in RFC3339 format and is in UTC.
          example: 2023-03-31T00:00:00Z
          format: date-time
          type: string
      readOnly: true
      required:
      - self
    ListMeta:
      description: ListMeta describes metadata that resource collections may have
      properties:
        self:
          description: Self is a Uniform Resource Locator (URL) at which an object
            can be addressed. This URL encodes the service location, API version,
            and other particulars necessary to locate the resource at a point in time
          example: https://flink.us-west1.aws.confluent.cloud/sql/v1alpha1/environments/env-123/statements
          type: string
        next:
          description: A URL that can be followed to get the next batch of results.
          example: https://flink.us-west1.aws.confluent.cloud/sql/v1alpha1/environments/env-abc123/statements?page_token=UvmDWOB1iwfAIBPj6EYb
          type: string
      type: object
    ResultListMeta:
      description: ListMeta describes metadata that resource collections may have
      properties:
        self:
          description: Self is a Uniform Resource Locator (URL) at which an object
            can be addressed. This URL encodes the service location, API version,
            and other particulars necessary to locate the resource at a point in time
          example: https://flink.us-west1.aws.confluent.cloud/sql/v1alpha1/environments/env-123/statements
          type: string
        next:
          description: A URL that can be followed to get the next batch of results.
          example: https://flink.us-west1.aws.confluent.cloud/sql/v1alpha1/environments/env-abc123/statements?page_token=UvmDWOB1iwfAIBPj6EYb
          type: string
        created_at:
          description: The date and time at which this object was created. It is represented
            in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
      type: object
    sql.v1alpha1.ResultSchema:
      description: The table columns of the results schema.
      properties:
        columns:
          description: The properties of each SQL column in the schema.
          items:
            $ref: '#/components/schemas/ColumnDetails'
          type: array
      type: object
    ColumnDetails:
      description: A column in the results schema.
      properties:
        name:
          description: The name of the SQL table column.
          example: Column_Name
          type: string
        type:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: JSON object in TableSchema format; describes the data returned
            by the results serving API.
          example:
            type: CHAR
            nullable: true
            length: 8
      required:
      - name
      - type
      type: object
    DataType:
      properties:
        type:
          description: The data type of the column.
          type: string
        nullable:
          description: Indicates whether values in this column can be null.
          type: boolean
        length:
          description: The length of the data type.
          format: int32
          type: integer
        precision:
          description: The precision of the data type.
          format: int32
          type: integer
        scale:
          description: The scale of the data type.
          format: int32
          type: integer
        key_type:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: The type of the key in the data type (if applicable).
        value_type:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: The type of the value in the data type (if applicable).
        element_type:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: The type of the element in the data type (if applicable).
        fields:
          description: The fields of the element in the data type (if applicable).
          items:
            $ref: '#/components/schemas/RowFieldType'
          type: array
        resolution:
          description: The resolution of the data type (if applicable).
          type: string
        fractional_precision:
          description: The fractional precision of the data type (if applicable).
          format: int32
          type: integer
      required:
      - nullable
      - type
      type: object
    RowFieldType:
      properties:
        name:
          description: The name of the field.
          type: string
        field_type:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: The data type of the field.
        description:
          description: The description of the field.
          type: string
      required:
      - field_type
      - name
      type: object
    Failure:
      description: Provides information about problems encountered while performing
        an operation.
      properties:
        errors:
          description: List of errors which caused this operation to fail
          items:
            $ref: '#/components/schemas/Error'
          type: array
          uniqueItems: true
      required:
      - errors
      type: object
    Error:
      description: Describes a particular error encountered while performing an operation.
      properties:
        id:
          description: A unique identifier for this particular occurrence of the problem.
          maxLength: 255
          type: string
        status:
          description: The HTTP status code applicable to this problem, expressed
            as a string value.
          type: string
        code:
          description: An application-specific error code, expressed as a string value.
          type: string
        title:
          description: A short, human-readable summary of the problem. It **SHOULD
            NOT** change from occurrence to occurrence of the problem, except for
            purposes of localization.
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        source:
          $ref: '#/components/schemas/Error_source'
      type: object
    ExceptionListMeta:
      description: ListMeta describes metadata that resource collections may have
      properties:
        self:
          description: Self is a Uniform Resource Locator (URL) at which an object
            can be addressed. This URL encodes the service location, API version,
            and other particulars necessary to locate the resource at a point in time
          example: https://flink.us-west1.aws.confluent.cloud/sql/v1alpha1/environments/env-123/statements/sql123/exceptions
          type: string
      type: object
    sql.v1alpha1.StatementExceptionList:
      description: |-
        StatementExceptionList is a list of exceptions coming from FAILED or FAILING Statements created by
        the SQL Statements API.
      example:
        metadata: ""
        data:
        - stacktrace: "java.lang.RuntimeException: An error occurred\n\tat org.apache.flink.streaming.runtime.tasks.SourceStreamTask.run(SourceStreamTask.java:84)\n\
            \tat org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:374)\n\
            \tat org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:784)\n\t\
            at org.apache.flink.runtime.taskmanager.Task.run(Task.java:571)\n\tat\
            \ java.lang.Thread.run(Thread.java:748)\n"
          name: java.lang.RuntimeException
          timestamp: 2023-03-31T00:00:00Z
        - stacktrace: "java.lang.RuntimeException: An error occurred\n\tat org.apache.flink.streaming.runtime.tasks.SourceStreamTask.run(SourceStreamTask.java:84)\n\
            \tat org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:374)\n\
            \tat org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:784)\n\t\
            at org.apache.flink.runtime.taskmanager.Task.run(Task.java:571)\n\tat\
            \ java.lang.Thread.run(Thread.java:748)\n"
          name: java.lang.RuntimeException
          timestamp: 2023-03-31T00:00:00Z
        kind: StatementExceptionList
        api_version: sql/v1alpha1
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - sql/v1alpha1
          example: sql/v1alpha1
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - StatementExceptionList
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/ExceptionListMeta'
        data:
          description: A data property that contains an array of resource items. Each
            entry in the array is a separate resource.
          items:
            $ref: '#/components/schemas/sql.v1alpha1.StatementException'
          type: array
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    sql.v1alpha1.StatementException:
      example:
        stacktrace: "java.lang.RuntimeException: An error occurred\n\tat org.apache.flink.streaming.runtime.tasks.SourceStreamTask.run(SourceStreamTask.java:84)\n\
          \tat org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:374)\n\
          \tat org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:784)\n\t\
          at org.apache.flink.runtime.taskmanager.Task.run(Task.java:571)\n\tat java.lang.Thread.run(Thread.java:748)\n"
        name: java.lang.RuntimeException
        timestamp: 2023-03-31T00:00:00Z
      properties:
        name:
          description: Name of the SQL statement exception.
          example: java.lang.RuntimeException
          readOnly: true
          type: string
        stacktrace:
          description: Stack trace of the statement exception.
          example: "java.lang.RuntimeException: An error occurred\n\tat org.apache.flink.streaming.runtime.tasks.SourceStreamTask.run(SourceStreamTask.java:84)\n\
            \tat org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:374)\n\
            \tat org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:784)\n\t\
            at org.apache.flink.runtime.taskmanager.Task.run(Task.java:571)\n\tat\
            \ java.lang.Thread.run(Thread.java:748)\n"
          readOnly: true
          type: string
        timestamp:
          description: The date and time at which the exception occurred. It is represented
            in RFC3339 format and is in UTC.
          example: 2023-03-31T00:00:00Z
          format: date-time
          readOnly: true
          type: string
      type: object
    Error_source:
      description: If this error was caused by a particular part of the API request,
        the source will point to the query string parameter or request body property
        that caused it.
      properties:
        pointer:
          description: A JSON Pointer [RFC6901] to the associated entity in the request
            document [e.g. "/spec" for a spec object, or "/spec/title" for a specific
            field].
          type: string
        parameter:
          description: A string indicating which query parameter caused the error.
          type: string
      type: object
  securitySchemes:
    api-key:
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API
        Key ID as the username and API Key Secret as the password.
      scheme: basic
      type: http
