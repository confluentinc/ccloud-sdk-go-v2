// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1alpha1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
	"fmt"
)

// SqlV1alpha1ResultItemRowElement - An element of the `ResultItemRow` attribute.
type SqlV1alpha1ResultItemRowElement struct {
	ArrayElement *ArrayElement
	string *string
}

// ArrayElementAsSqlV1alpha1ResultItemRowElement is a convenience function that returns ArrayElement wrapped in SqlV1alpha1ResultItemRowElement
func ArrayElementAsSqlV1alpha1ResultItemRowElement(v *ArrayElement) SqlV1alpha1ResultItemRowElement {
	return SqlV1alpha1ResultItemRowElement{ ArrayElement: v}
}

// stringAsSqlV1alpha1ResultItemRowElement is a convenience function that returns string wrapped in SqlV1alpha1ResultItemRowElement
func stringAsSqlV1alpha1ResultItemRowElement(v *string) SqlV1alpha1ResultItemRowElement {
	return SqlV1alpha1ResultItemRowElement{ string: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SqlV1alpha1ResultItemRowElement) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ArrayElement
	err = json.Unmarshal(data, &dst.ArrayElement)
	if err == nil {
		jsonArrayElement, _ := json.Marshal(dst.ArrayElement)
		if string(jsonArrayElement) == "{}" { // empty struct
			dst.ArrayElement = nil
		} else {
			match++
		}
	} else {
		dst.ArrayElement = nil
	}

	// try to unmarshal data into string
	err = json.Unmarshal(data, &dst.string)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			match++
		}
	} else {
		dst.string = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayElement = nil
		dst.string = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SqlV1alpha1ResultItemRowElement)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SqlV1alpha1ResultItemRowElement)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SqlV1alpha1ResultItemRowElement) MarshalJSON() ([]byte, error) {
	if src.ArrayElement != nil {
		return json.Marshal(&src.ArrayElement)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SqlV1alpha1ResultItemRowElement) GetActualInstance() (interface{}) {
	if obj.ArrayElement != nil {
		return obj.ArrayElement
	}

	if obj.string != nil {
		return obj.string
	}

	// all schemas are nil
	return nil
}

type NullableSqlV1alpha1ResultItemRowElement struct {
	value *SqlV1alpha1ResultItemRowElement
	isSet bool
}

func (v NullableSqlV1alpha1ResultItemRowElement) Get() *SqlV1alpha1ResultItemRowElement {
	return v.value
}

func (v *NullableSqlV1alpha1ResultItemRowElement) Set(val *SqlV1alpha1ResultItemRowElement) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1alpha1ResultItemRowElement) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1alpha1ResultItemRowElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1alpha1ResultItemRowElement(val *SqlV1alpha1ResultItemRowElement) *NullableSqlV1alpha1ResultItemRowElement {
	return &NullableSqlV1alpha1ResultItemRowElement{value: val, isSet: true}
}

func (v NullableSqlV1alpha1ResultItemRowElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlV1alpha1ResultItemRowElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


