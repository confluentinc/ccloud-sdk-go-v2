// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1alpha1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1alpha1ResultItem A data property that contains an array of results. Each entry in the array is a separate result.
type SqlV1alpha1ResultItem struct {
	// The kind of change that a row can describe in a changelog:  `0`: represents `INSERT` (`+I`), i.e. insertion operation;  `1`: represents `UPDATE_BEFORE` (`-U`), i.e. update operation with the previous content of the updated row. This kind should occur together with `UPDATE_AFTER` for modelling an update that needs to retract the previous row first. It is useful in cases of a non-idempotent update, i.e., an update of a row that is not  uniquely identifiable by a key;  `2`: represents `UPDATE_AFTER` (`+U`), i.e. update operation with new content of the updated row; This kind CAN occur together with `UPDATE_BEFORE` for modelling an update that needs to retract the previous row first or it describes an idempotent update, i.e., an update of a row that is uniquely identifiable by a key;  `3`: represents `DELETE` (`-D`), i.e. deletion operation;  Defaults to `0`. 
	Op *int32 `json:"op,omitempty"`
	Row SqlV1alpha1ResultItemRow `json:"row,omitempty"`
}

// NewSqlV1alpha1ResultItem instantiates a new SqlV1alpha1ResultItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1alpha1ResultItem(row SqlV1alpha1ResultItemRow) *SqlV1alpha1ResultItem {
	this := SqlV1alpha1ResultItem{}
	var op int32 = 0
	this.Op = &op
	this.Row = row
	return &this
}

// NewSqlV1alpha1ResultItemWithDefaults instantiates a new SqlV1alpha1ResultItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1alpha1ResultItemWithDefaults() *SqlV1alpha1ResultItem {
	this := SqlV1alpha1ResultItem{}
	var op int32 = 0
	this.Op = &op
	return &this
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *SqlV1alpha1ResultItem) GetOp() int32 {
	if o == nil || o.Op == nil {
		var ret int32
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1ResultItem) GetOpOk() (*int32, bool) {
	if o == nil || o.Op == nil {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *SqlV1alpha1ResultItem) HasOp() bool {
	if o != nil && o.Op != nil {
		return true
	}

	return false
}

// SetOp gets a reference to the given int32 and assigns it to the Op field.
func (o *SqlV1alpha1ResultItem) SetOp(v int32) {
	o.Op = &v
}

// GetRow returns the Row field value
func (o *SqlV1alpha1ResultItem) GetRow() SqlV1alpha1ResultItemRow {
	if o == nil {
		var ret SqlV1alpha1ResultItemRow
		return ret
	}

	return o.Row
}

// GetRowOk returns a tuple with the Row field value
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1ResultItem) GetRowOk() (*SqlV1alpha1ResultItemRow, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Row, true
}

// SetRow sets field value
func (o *SqlV1alpha1ResultItem) SetRow(v SqlV1alpha1ResultItemRow) {
	o.Row = v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1alpha1ResultItem) Redact() {
    o.recurseRedact(o.Op)
    o.recurseRedact(&o.Row)
}

func (o *SqlV1alpha1ResultItem) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o SqlV1alpha1ResultItem) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1alpha1ResultItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Op != nil {
		toSerialize["op"] = o.Op
	}
	if true {
		toSerialize["row"] = o.Row
	}
	return json.Marshal(toSerialize)
}

type NullableSqlV1alpha1ResultItem struct {
	value *SqlV1alpha1ResultItem
	isSet bool
}

func (v NullableSqlV1alpha1ResultItem) Get() *SqlV1alpha1ResultItem {
	return v.value
}

func (v *NullableSqlV1alpha1ResultItem) Set(val *SqlV1alpha1ResultItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1alpha1ResultItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1alpha1ResultItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1alpha1ResultItem(val *SqlV1alpha1ResultItem) *NullableSqlV1alpha1ResultItem {
	return &NullableSqlV1alpha1ResultItem{value: val, isSet: true}
}

func (v NullableSqlV1alpha1ResultItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlV1alpha1ResultItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


