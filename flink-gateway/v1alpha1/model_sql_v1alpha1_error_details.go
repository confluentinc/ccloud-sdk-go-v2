// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1alpha1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1alpha1ErrorDetails Describes a particular error encountered while performing an operation.
type SqlV1alpha1ErrorDetails struct {
	// A unique identifier for this particular occurrence of the problem.
	Id *string `json:"id,omitempty"`
	// The HTTP status code applicable to this problem, expressed as a string value.
	Status *string `json:"status,omitempty"`
	// A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`
	// Instructions for the end-user for correcting the error.
	Resolution *string `json:"resolution,omitempty"`
}

// NewSqlV1alpha1ErrorDetails instantiates a new SqlV1alpha1ErrorDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1alpha1ErrorDetails() *SqlV1alpha1ErrorDetails {
	this := SqlV1alpha1ErrorDetails{}
	return &this
}

// NewSqlV1alpha1ErrorDetailsWithDefaults instantiates a new SqlV1alpha1ErrorDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1alpha1ErrorDetailsWithDefaults() *SqlV1alpha1ErrorDetails {
	this := SqlV1alpha1ErrorDetails{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SqlV1alpha1ErrorDetails) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1ErrorDetails) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SqlV1alpha1ErrorDetails) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SqlV1alpha1ErrorDetails) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SqlV1alpha1ErrorDetails) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1ErrorDetails) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SqlV1alpha1ErrorDetails) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SqlV1alpha1ErrorDetails) SetStatus(v string) {
	o.Status = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SqlV1alpha1ErrorDetails) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1ErrorDetails) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SqlV1alpha1ErrorDetails) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SqlV1alpha1ErrorDetails) SetTitle(v string) {
	o.Title = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *SqlV1alpha1ErrorDetails) GetDetail() string {
	if o == nil || o.Detail == nil {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1ErrorDetails) GetDetailOk() (*string, bool) {
	if o == nil || o.Detail == nil {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *SqlV1alpha1ErrorDetails) HasDetail() bool {
	if o != nil && o.Detail != nil {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *SqlV1alpha1ErrorDetails) SetDetail(v string) {
	o.Detail = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *SqlV1alpha1ErrorDetails) GetResolution() string {
	if o == nil || o.Resolution == nil {
		var ret string
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1ErrorDetails) GetResolutionOk() (*string, bool) {
	if o == nil || o.Resolution == nil {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *SqlV1alpha1ErrorDetails) HasResolution() bool {
	if o != nil && o.Resolution != nil {
		return true
	}

	return false
}

// SetResolution gets a reference to the given string and assigns it to the Resolution field.
func (o *SqlV1alpha1ErrorDetails) SetResolution(v string) {
	o.Resolution = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1alpha1ErrorDetails) Redact() {
    o.recurseRedact(o.Id)
    o.recurseRedact(o.Status)
    o.recurseRedact(o.Title)
    o.recurseRedact(o.Detail)
    o.recurseRedact(o.Resolution)
}

func (o *SqlV1alpha1ErrorDetails) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o SqlV1alpha1ErrorDetails) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1alpha1ErrorDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if o.Resolution != nil {
		toSerialize["resolution"] = o.Resolution
	}
	return json.Marshal(toSerialize)
}

type NullableSqlV1alpha1ErrorDetails struct {
	value *SqlV1alpha1ErrorDetails
	isSet bool
}

func (v NullableSqlV1alpha1ErrorDetails) Get() *SqlV1alpha1ErrorDetails {
	return v.value
}

func (v *NullableSqlV1alpha1ErrorDetails) Set(val *SqlV1alpha1ErrorDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1alpha1ErrorDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1alpha1ErrorDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1alpha1ErrorDetails(val *SqlV1alpha1ErrorDetails) *NullableSqlV1alpha1ErrorDetails {
	return &NullableSqlV1alpha1ErrorDetails{value: val, isSet: true}
}

func (v NullableSqlV1alpha1ErrorDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlV1alpha1ErrorDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


