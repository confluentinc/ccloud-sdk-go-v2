// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1alpha1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

import (
	"reflect"
)

// TinyIntTypeAllOf struct for TinyIntTypeAllOf
type TinyIntTypeAllOf struct {
	// The data type of the column.
	Type *string `json:"type,omitempty"`
}

// NewTinyIntTypeAllOf instantiates a new TinyIntTypeAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTinyIntTypeAllOf() *TinyIntTypeAllOf {
	this := TinyIntTypeAllOf{}
	return &this
}

// NewTinyIntTypeAllOfWithDefaults instantiates a new TinyIntTypeAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTinyIntTypeAllOfWithDefaults() *TinyIntTypeAllOf {
	this := TinyIntTypeAllOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TinyIntTypeAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TinyIntTypeAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TinyIntTypeAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TinyIntTypeAllOf) SetType(v string) {
	o.Type = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *TinyIntTypeAllOf) Redact() {
    o.recurseRedact(o.Type)
}

func (o *TinyIntTypeAllOf) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o TinyIntTypeAllOf) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o TinyIntTypeAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTinyIntTypeAllOf struct {
	value *TinyIntTypeAllOf
	isSet bool
}

func (v NullableTinyIntTypeAllOf) Get() *TinyIntTypeAllOf {
	return v.value
}

func (v *NullableTinyIntTypeAllOf) Set(val *TinyIntTypeAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTinyIntTypeAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTinyIntTypeAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTinyIntTypeAllOf(val *TinyIntTypeAllOf) *NullableTinyIntTypeAllOf {
	return &NullableTinyIntTypeAllOf{value: val, isSet: true}
}

func (v NullableTinyIntTypeAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTinyIntTypeAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


