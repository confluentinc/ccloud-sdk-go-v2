// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1Connection `Connection` models a reusable endpoint and auth token to authenticate the caller to use that endpoint. Only `OrgAdmins` and `EnvAdmins` will have the permissions to create, update and delete `Connections`.  `FlinkDevelopers` and `ModelResourceOwners` can later reference a `Connection` resource within their Model  creation statements.  The API allows you to list, create, read, and delete your connections. ## The Connections Model <SchemaDefinition schemaRef=\"#/components/schemas/sql.v1.Connection\" />
type SqlV1Connection struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind     *string     `json:"kind,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The user provided name of the resource, unique within this environment.
	Name   *string                `json:"name,omitempty"`
	Spec   *SqlV1ConnectionSpec   `json:"spec,omitempty"`
	Status *SqlV1ConnectionStatus `json:"status,omitempty"`
}

// NewSqlV1Connection instantiates a new SqlV1Connection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1Connection() *SqlV1Connection {
	this := SqlV1Connection{}
	return &this
}

// NewSqlV1ConnectionWithDefaults instantiates a new SqlV1Connection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1ConnectionWithDefaults() *SqlV1Connection {
	this := SqlV1Connection{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *SqlV1Connection) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1Connection) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *SqlV1Connection) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *SqlV1Connection) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *SqlV1Connection) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1Connection) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *SqlV1Connection) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *SqlV1Connection) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SqlV1Connection) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1Connection) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SqlV1Connection) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *SqlV1Connection) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SqlV1Connection) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1Connection) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SqlV1Connection) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SqlV1Connection) SetName(v string) {
	o.Name = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *SqlV1Connection) GetSpec() SqlV1ConnectionSpec {
	if o == nil || o.Spec == nil {
		var ret SqlV1ConnectionSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1Connection) GetSpecOk() (*SqlV1ConnectionSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *SqlV1Connection) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given SqlV1ConnectionSpec and assigns it to the Spec field.
func (o *SqlV1Connection) SetSpec(v SqlV1ConnectionSpec) {
	o.Spec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SqlV1Connection) GetStatus() SqlV1ConnectionStatus {
	if o == nil || o.Status == nil {
		var ret SqlV1ConnectionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1Connection) GetStatusOk() (*SqlV1ConnectionStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SqlV1Connection) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SqlV1ConnectionStatus and assigns it to the Status field.
func (o *SqlV1Connection) SetStatus(v SqlV1ConnectionStatus) {
	o.Status = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1Connection) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.Name)
	o.recurseRedact(o.Spec)
	o.recurseRedact(o.Status)
}

func (o *SqlV1Connection) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1Connection) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1Connection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSqlV1Connection struct {
	value *SqlV1Connection
	isSet bool
}

func (v NullableSqlV1Connection) Get() *SqlV1Connection {
	return v.value
}

func (v *NullableSqlV1Connection) Set(val *SqlV1Connection) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1Connection) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1Connection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1Connection(val *SqlV1Connection) *NullableSqlV1Connection {
	return &NullableSqlV1Connection{value: val, isSet: true}
}

func (v NullableSqlV1Connection) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1Connection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
