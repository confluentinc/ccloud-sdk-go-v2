// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1alpha1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1alpha1Property Key/value pair.
type SqlV1alpha1Property struct {
	// Property key.
	Key *string `json:"key,omitempty"`
	// Property value.
	Value *string `json:"value,omitempty"`
}

// NewSqlV1alpha1Property instantiates a new SqlV1alpha1Property object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1alpha1Property() *SqlV1alpha1Property {
	this := SqlV1alpha1Property{}
	return &this
}

// NewSqlV1alpha1PropertyWithDefaults instantiates a new SqlV1alpha1Property object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1alpha1PropertyWithDefaults() *SqlV1alpha1Property {
	this := SqlV1alpha1Property{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SqlV1alpha1Property) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1Property) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SqlV1alpha1Property) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SqlV1alpha1Property) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SqlV1alpha1Property) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1Property) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SqlV1alpha1Property) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SqlV1alpha1Property) SetValue(v string) {
	o.Value = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1alpha1Property) Redact() {
    o.recurseRedact(o.Key)
    o.recurseRedact(o.Value)
}

func (o *SqlV1alpha1Property) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o SqlV1alpha1Property) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1alpha1Property) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSqlV1alpha1Property struct {
	value *SqlV1alpha1Property
	isSet bool
}

func (v NullableSqlV1alpha1Property) Get() *SqlV1alpha1Property {
	return v.value
}

func (v *NullableSqlV1alpha1Property) Set(val *SqlV1alpha1Property) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1alpha1Property) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1alpha1Property) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1alpha1Property(val *SqlV1alpha1Property) *NullableSqlV1alpha1Property {
	return &NullableSqlV1alpha1Property{value: val, isSet: true}
}

func (v NullableSqlV1alpha1Property) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlV1alpha1Property) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


