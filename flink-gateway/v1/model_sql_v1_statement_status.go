// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1StatementStatus The status of the Statement
type SqlV1StatementStatus struct {
	// The lifecycle phase of the submitted SQL statement:  PENDING: SQL statement is pending execution;  RUNNING: SQL statement execution is in progress;  COMPLETED: SQL statement is completed;  DELETING: SQL statement deletion is in progress;  FAILING: SQL statement is failing;  FAILED: SQL statement execution has failed;  STOPPED: SQL statement execution has successfully been stopped;
	Phase         string              `json:"phase,omitempty"`
	ScalingStatus *SqlV1ScalingStatus `json:"scaling_status,omitempty"`
	// Details about the execution status of this statement.
	Detail *string               `json:"detail,omitempty"`
	Traits *SqlV1StatementTraits `json:"traits,omitempty"`
	// The networking type used by the submitted SQL statement:  PUBLIC: SQL statement is using public networking;  PRIVATE: SQL statement is using private networking;
	NetworkKind *string `json:"network_kind,omitempty"`
}

// NewSqlV1StatementStatus instantiates a new SqlV1StatementStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1StatementStatus(phase string) *SqlV1StatementStatus {
	this := SqlV1StatementStatus{}
	this.Phase = phase
	return &this
}

// NewSqlV1StatementStatusWithDefaults instantiates a new SqlV1StatementStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1StatementStatusWithDefaults() *SqlV1StatementStatus {
	this := SqlV1StatementStatus{}
	return &this
}

// GetPhase returns the Phase field value
func (o *SqlV1StatementStatus) GetPhase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *SqlV1StatementStatus) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *SqlV1StatementStatus) SetPhase(v string) {
	o.Phase = v
}

// GetScalingStatus returns the ScalingStatus field value if set, zero value otherwise.
func (o *SqlV1StatementStatus) GetScalingStatus() SqlV1ScalingStatus {
	if o == nil || o.ScalingStatus == nil {
		var ret SqlV1ScalingStatus
		return ret
	}
	return *o.ScalingStatus
}

// GetScalingStatusOk returns a tuple with the ScalingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementStatus) GetScalingStatusOk() (*SqlV1ScalingStatus, bool) {
	if o == nil || o.ScalingStatus == nil {
		return nil, false
	}
	return o.ScalingStatus, true
}

// HasScalingStatus returns a boolean if a field has been set.
func (o *SqlV1StatementStatus) HasScalingStatus() bool {
	if o != nil && o.ScalingStatus != nil {
		return true
	}

	return false
}

// SetScalingStatus gets a reference to the given SqlV1ScalingStatus and assigns it to the ScalingStatus field.
func (o *SqlV1StatementStatus) SetScalingStatus(v SqlV1ScalingStatus) {
	o.ScalingStatus = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *SqlV1StatementStatus) GetDetail() string {
	if o == nil || o.Detail == nil {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementStatus) GetDetailOk() (*string, bool) {
	if o == nil || o.Detail == nil {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *SqlV1StatementStatus) HasDetail() bool {
	if o != nil && o.Detail != nil {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *SqlV1StatementStatus) SetDetail(v string) {
	o.Detail = &v
}

// GetTraits returns the Traits field value if set, zero value otherwise.
func (o *SqlV1StatementStatus) GetTraits() SqlV1StatementTraits {
	if o == nil || o.Traits == nil {
		var ret SqlV1StatementTraits
		return ret
	}
	return *o.Traits
}

// GetTraitsOk returns a tuple with the Traits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementStatus) GetTraitsOk() (*SqlV1StatementTraits, bool) {
	if o == nil || o.Traits == nil {
		return nil, false
	}
	return o.Traits, true
}

// HasTraits returns a boolean if a field has been set.
func (o *SqlV1StatementStatus) HasTraits() bool {
	if o != nil && o.Traits != nil {
		return true
	}

	return false
}

// SetTraits gets a reference to the given SqlV1StatementTraits and assigns it to the Traits field.
func (o *SqlV1StatementStatus) SetTraits(v SqlV1StatementTraits) {
	o.Traits = &v
}

// GetNetworkKind returns the NetworkKind field value if set, zero value otherwise.
func (o *SqlV1StatementStatus) GetNetworkKind() string {
	if o == nil || o.NetworkKind == nil {
		var ret string
		return ret
	}
	return *o.NetworkKind
}

// GetNetworkKindOk returns a tuple with the NetworkKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementStatus) GetNetworkKindOk() (*string, bool) {
	if o == nil || o.NetworkKind == nil {
		return nil, false
	}
	return o.NetworkKind, true
}

// HasNetworkKind returns a boolean if a field has been set.
func (o *SqlV1StatementStatus) HasNetworkKind() bool {
	if o != nil && o.NetworkKind != nil {
		return true
	}

	return false
}

// SetNetworkKind gets a reference to the given string and assigns it to the NetworkKind field.
func (o *SqlV1StatementStatus) SetNetworkKind(v string) {
	o.NetworkKind = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1StatementStatus) Redact() {
	o.recurseRedact(&o.Phase)
	o.recurseRedact(o.ScalingStatus)
	o.recurseRedact(o.Detail)
	o.recurseRedact(o.Traits)
	o.recurseRedact(o.NetworkKind)
}

func (o *SqlV1StatementStatus) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1StatementStatus) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1StatementStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["phase"] = o.Phase
	}
	if o.ScalingStatus != nil {
		toSerialize["scaling_status"] = o.ScalingStatus
	}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if o.Traits != nil {
		toSerialize["traits"] = o.Traits
	}
	if o.NetworkKind != nil {
		toSerialize["network_kind"] = o.NetworkKind
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSqlV1StatementStatus struct {
	value *SqlV1StatementStatus
	isSet bool
}

func (v NullableSqlV1StatementStatus) Get() *SqlV1StatementStatus {
	return v.value
}

func (v *NullableSqlV1StatementStatus) Set(val *SqlV1StatementStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1StatementStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1StatementStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1StatementStatus(val *SqlV1StatementStatus) *NullableSqlV1StatementStatus {
	return &NullableSqlV1StatementStatus{value: val, isSet: true}
}

func (v NullableSqlV1StatementStatus) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1StatementStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
