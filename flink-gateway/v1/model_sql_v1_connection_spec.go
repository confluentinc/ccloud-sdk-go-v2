// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1ConnectionSpec Encapsulates the model provider access details
type SqlV1ConnectionSpec struct {
	// The type of this connection.
	ConnectionType *string `json:"connection_type,omitempty"`
	// The endpoint that is used to run model inferencing.
	Endpoint *string `json:"endpoint,omitempty"`
	// The vendor specific authentication token details  The contents are stored as opaque bytes given in plaintext by an EnvAdmin.  In future, we would support more secure methods for distributing authentication tokens.
	AuthData *SqlV1ConnectionSpecAuthDataOneOf `json:"auth_data,omitempty"`
}

// NewSqlV1ConnectionSpec instantiates a new SqlV1ConnectionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1ConnectionSpec() *SqlV1ConnectionSpec {
	this := SqlV1ConnectionSpec{}
	return &this
}

// NewSqlV1ConnectionSpecWithDefaults instantiates a new SqlV1ConnectionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1ConnectionSpecWithDefaults() *SqlV1ConnectionSpec {
	this := SqlV1ConnectionSpec{}
	return &this
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *SqlV1ConnectionSpec) GetConnectionType() string {
	if o == nil || o.ConnectionType == nil {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1ConnectionSpec) GetConnectionTypeOk() (*string, bool) {
	if o == nil || o.ConnectionType == nil {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *SqlV1ConnectionSpec) HasConnectionType() bool {
	if o != nil && o.ConnectionType != nil {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *SqlV1ConnectionSpec) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *SqlV1ConnectionSpec) GetEndpoint() string {
	if o == nil || o.Endpoint == nil {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1ConnectionSpec) GetEndpointOk() (*string, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *SqlV1ConnectionSpec) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *SqlV1ConnectionSpec) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetAuthData returns the AuthData field value if set, zero value otherwise.
func (o *SqlV1ConnectionSpec) GetAuthData() SqlV1ConnectionSpecAuthDataOneOf {
	if o == nil || o.AuthData == nil {
		var ret SqlV1ConnectionSpecAuthDataOneOf
		return ret
	}
	return *o.AuthData
}

// GetAuthDataOk returns a tuple with the AuthData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1ConnectionSpec) GetAuthDataOk() (*SqlV1ConnectionSpecAuthDataOneOf, bool) {
	if o == nil || o.AuthData == nil {
		return nil, false
	}
	return o.AuthData, true
}

// HasAuthData returns a boolean if a field has been set.
func (o *SqlV1ConnectionSpec) HasAuthData() bool {
	if o != nil && o.AuthData != nil {
		return true
	}

	return false
}

// SetAuthData gets a reference to the given SqlV1ConnectionSpecAuthDataOneOf and assigns it to the AuthData field.
func (o *SqlV1ConnectionSpec) SetAuthData(v SqlV1ConnectionSpecAuthDataOneOf) {
	o.AuthData = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1ConnectionSpec) Redact() {
	o.recurseRedact(o.ConnectionType)
	o.recurseRedact(o.Endpoint)
	o.recurseRedact(o.AuthData)
}

func (o *SqlV1ConnectionSpec) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1ConnectionSpec) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1ConnectionSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionType != nil {
		toSerialize["connection_type"] = o.ConnectionType
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	if o.AuthData != nil {
		toSerialize["auth_data"] = o.AuthData
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSqlV1ConnectionSpec struct {
	value *SqlV1ConnectionSpec
	isSet bool
}

func (v NullableSqlV1ConnectionSpec) Get() *SqlV1ConnectionSpec {
	return v.value
}

func (v *NullableSqlV1ConnectionSpec) Set(val *SqlV1ConnectionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1ConnectionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1ConnectionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1ConnectionSpec(val *SqlV1ConnectionSpec) *NullableSqlV1ConnectionSpec {
	return &NullableSqlV1ConnectionSpec{value: val, isSet: true}
}

func (v NullableSqlV1ConnectionSpec) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1ConnectionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
