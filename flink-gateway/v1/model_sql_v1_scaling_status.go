// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// SqlV1ScalingStatus Scaling status for this statement.
type SqlV1ScalingStatus struct {
	// OK: The statement runs at the right scale.  PENDING_SCALE_DOWN: The statement requires less resources, and will be scaled down in the near future.  PENDING_SCALE_UP: The statement requires more resources, and will be scaled up in the near future.  POOL_EXHAUSTED: The statement requires more resources, but not enough resources are available.
	ScalingState *string `json:"scaling_state,omitempty"`
	// The last time the scaling status was updated.
	LastUpdated *time.Time `json:"last_updated,omitempty"`
}

// NewSqlV1ScalingStatus instantiates a new SqlV1ScalingStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1ScalingStatus() *SqlV1ScalingStatus {
	this := SqlV1ScalingStatus{}
	return &this
}

// NewSqlV1ScalingStatusWithDefaults instantiates a new SqlV1ScalingStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1ScalingStatusWithDefaults() *SqlV1ScalingStatus {
	this := SqlV1ScalingStatus{}
	return &this
}

// GetScalingState returns the ScalingState field value if set, zero value otherwise.
func (o *SqlV1ScalingStatus) GetScalingState() string {
	if o == nil || o.ScalingState == nil {
		var ret string
		return ret
	}
	return *o.ScalingState
}

// GetScalingStateOk returns a tuple with the ScalingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1ScalingStatus) GetScalingStateOk() (*string, bool) {
	if o == nil || o.ScalingState == nil {
		return nil, false
	}
	return o.ScalingState, true
}

// HasScalingState returns a boolean if a field has been set.
func (o *SqlV1ScalingStatus) HasScalingState() bool {
	if o != nil && o.ScalingState != nil {
		return true
	}

	return false
}

// SetScalingState gets a reference to the given string and assigns it to the ScalingState field.
func (o *SqlV1ScalingStatus) SetScalingState(v string) {
	o.ScalingState = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *SqlV1ScalingStatus) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1ScalingStatus) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *SqlV1ScalingStatus) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *SqlV1ScalingStatus) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1ScalingStatus) Redact() {
	o.recurseRedact(o.ScalingState)
	o.recurseRedact(o.LastUpdated)
}

func (o *SqlV1ScalingStatus) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1ScalingStatus) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1ScalingStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScalingState != nil {
		toSerialize["scaling_state"] = o.ScalingState
	}
	if o.LastUpdated != nil {
		toSerialize["last_updated"] = o.LastUpdated
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSqlV1ScalingStatus struct {
	value *SqlV1ScalingStatus
	isSet bool
}

func (v NullableSqlV1ScalingStatus) Get() *SqlV1ScalingStatus {
	return v.value
}

func (v *NullableSqlV1ScalingStatus) Set(val *SqlV1ScalingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1ScalingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1ScalingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1ScalingStatus(val *SqlV1ScalingStatus) *NullableSqlV1ScalingStatus {
	return &NullableSqlV1ScalingStatus{value: val, isSet: true}
}

func (v NullableSqlV1ScalingStatus) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1ScalingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
