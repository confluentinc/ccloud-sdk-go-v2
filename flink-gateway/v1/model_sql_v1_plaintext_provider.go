// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1PlaintextProvider Describes a sensitive piece of information passed in plaintext.  Confluent only accepts authentication tokens of supported model providers from OrgAdmins and EnvAdmins. For now, only 'PlainText' provider is supported. It stores authentication token details as opaque bytes in an encrypted form. This option offers limited security as it only provides a single level of encryption.
type SqlV1PlaintextProvider struct {
	// Plaintext Provider Kind Type
	Kind *string `json:"kind,omitempty"`
	// Base64 encoded opaque piece of sensitive information.  Scoped to an endpoint of a `Connection` resource.
	Data *string `json:"data,omitempty"`
}

// NewSqlV1PlaintextProvider instantiates a new SqlV1PlaintextProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1PlaintextProvider() *SqlV1PlaintextProvider {
	this := SqlV1PlaintextProvider{}
	return &this
}

// NewSqlV1PlaintextProviderWithDefaults instantiates a new SqlV1PlaintextProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1PlaintextProviderWithDefaults() *SqlV1PlaintextProvider {
	this := SqlV1PlaintextProvider{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *SqlV1PlaintextProvider) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1PlaintextProvider) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *SqlV1PlaintextProvider) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *SqlV1PlaintextProvider) SetKind(v string) {
	o.Kind = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SqlV1PlaintextProvider) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1PlaintextProvider) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SqlV1PlaintextProvider) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *SqlV1PlaintextProvider) SetData(v string) {
	o.Data = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1PlaintextProvider) Redact() {
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Data)
}

func (o *SqlV1PlaintextProvider) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1PlaintextProvider) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1PlaintextProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSqlV1PlaintextProvider struct {
	value *SqlV1PlaintextProvider
	isSet bool
}

func (v NullableSqlV1PlaintextProvider) Get() *SqlV1PlaintextProvider {
	return v.value
}

func (v *NullableSqlV1PlaintextProvider) Set(val *SqlV1PlaintextProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1PlaintextProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1PlaintextProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1PlaintextProvider(val *SqlV1PlaintextProvider) *NullableSqlV1PlaintextProvider {
	return &NullableSqlV1PlaintextProvider{value: val, isSet: true}
}

func (v NullableSqlV1PlaintextProvider) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1PlaintextProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
