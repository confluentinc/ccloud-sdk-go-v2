// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// SqlV1ConnectionSpecAuthDataOneOf - struct for SqlV1ConnectionSpecAuthDataOneOf
type SqlV1ConnectionSpecAuthDataOneOf struct {
	SqlV1PlaintextProvider *SqlV1PlaintextProvider
}

// SqlV1PlaintextProviderAsSqlV1ConnectionSpecAuthDataOneOf is a convenience function that returns SqlV1PlaintextProvider wrapped in SqlV1ConnectionSpecAuthDataOneOf
func SqlV1PlaintextProviderAsSqlV1ConnectionSpecAuthDataOneOf(v *SqlV1PlaintextProvider) SqlV1ConnectionSpecAuthDataOneOf {
	return SqlV1ConnectionSpecAuthDataOneOf{SqlV1PlaintextProvider: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SqlV1ConnectionSpecAuthDataOneOf) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SqlV1PlaintextProvider
	err = json.Unmarshal(data, &dst.SqlV1PlaintextProvider)
	if err == nil {
		jsonSqlV1PlaintextProvider, _ := json.Marshal(dst.SqlV1PlaintextProvider)
		if string(jsonSqlV1PlaintextProvider) == "{}" { // empty struct
			dst.SqlV1PlaintextProvider = nil
		} else {
			match++
		}
	} else {
		dst.SqlV1PlaintextProvider = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SqlV1PlaintextProvider = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SqlV1ConnectionSpecAuthDataOneOf)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SqlV1ConnectionSpecAuthDataOneOf)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SqlV1ConnectionSpecAuthDataOneOf) MarshalJSON() ([]byte, error) {
	if src.SqlV1PlaintextProvider != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.SqlV1PlaintextProvider)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SqlV1ConnectionSpecAuthDataOneOf) GetActualInstance() interface{} {
	if obj.SqlV1PlaintextProvider != nil {
		return obj.SqlV1PlaintextProvider
	}

	// all schemas are nil
	return nil
}

type NullableSqlV1ConnectionSpecAuthDataOneOf struct {
	value *SqlV1ConnectionSpecAuthDataOneOf
	isSet bool
}

func (v NullableSqlV1ConnectionSpecAuthDataOneOf) Get() *SqlV1ConnectionSpecAuthDataOneOf {
	return v.value
}

func (v *NullableSqlV1ConnectionSpecAuthDataOneOf) Set(val *SqlV1ConnectionSpecAuthDataOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1ConnectionSpecAuthDataOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1ConnectionSpecAuthDataOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1ConnectionSpecAuthDataOneOf(val *SqlV1ConnectionSpecAuthDataOneOf) *NullableSqlV1ConnectionSpecAuthDataOneOf {
	return &NullableSqlV1ConnectionSpecAuthDataOneOf{value: val, isSet: true}
}

func (v NullableSqlV1ConnectionSpecAuthDataOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1ConnectionSpecAuthDataOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
