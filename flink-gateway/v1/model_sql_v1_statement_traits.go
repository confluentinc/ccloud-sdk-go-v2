// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1StatementTraits StatementTraits contains detailed information about the properties of a Statement
type SqlV1StatementTraits struct {
	// Categorizes the SQL statement. The result is Confluent-specific but inspired by SQL. It uses underscores for separating concepts e.g. \"CREATE_TABLE\".
	SqlKind *string `json:"sql_kind,omitempty"`
	// Indicates the special case where results of a statement are bounded.
	IsBounded *bool `json:"is_bounded,omitempty"`
	// Indicates the special case where results of a statement are insert/append only.
	IsAppendOnly *bool `json:"is_append_only,omitempty"`
	// Defines the column indices clients can use as upsert keys.
	UpsertColumns *[]int32           `json:"upsert_columns,omitempty"`
	Schema        *SqlV1ResultSchema `json:"schema,omitempty"`
}

// NewSqlV1StatementTraits instantiates a new SqlV1StatementTraits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1StatementTraits() *SqlV1StatementTraits {
	this := SqlV1StatementTraits{}
	return &this
}

// NewSqlV1StatementTraitsWithDefaults instantiates a new SqlV1StatementTraits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1StatementTraitsWithDefaults() *SqlV1StatementTraits {
	this := SqlV1StatementTraits{}
	return &this
}

// GetSqlKind returns the SqlKind field value if set, zero value otherwise.
func (o *SqlV1StatementTraits) GetSqlKind() string {
	if o == nil || o.SqlKind == nil {
		var ret string
		return ret
	}
	return *o.SqlKind
}

// GetSqlKindOk returns a tuple with the SqlKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementTraits) GetSqlKindOk() (*string, bool) {
	if o == nil || o.SqlKind == nil {
		return nil, false
	}
	return o.SqlKind, true
}

// HasSqlKind returns a boolean if a field has been set.
func (o *SqlV1StatementTraits) HasSqlKind() bool {
	if o != nil && o.SqlKind != nil {
		return true
	}

	return false
}

// SetSqlKind gets a reference to the given string and assigns it to the SqlKind field.
func (o *SqlV1StatementTraits) SetSqlKind(v string) {
	o.SqlKind = &v
}

// GetIsBounded returns the IsBounded field value if set, zero value otherwise.
func (o *SqlV1StatementTraits) GetIsBounded() bool {
	if o == nil || o.IsBounded == nil {
		var ret bool
		return ret
	}
	return *o.IsBounded
}

// GetIsBoundedOk returns a tuple with the IsBounded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementTraits) GetIsBoundedOk() (*bool, bool) {
	if o == nil || o.IsBounded == nil {
		return nil, false
	}
	return o.IsBounded, true
}

// HasIsBounded returns a boolean if a field has been set.
func (o *SqlV1StatementTraits) HasIsBounded() bool {
	if o != nil && o.IsBounded != nil {
		return true
	}

	return false
}

// SetIsBounded gets a reference to the given bool and assigns it to the IsBounded field.
func (o *SqlV1StatementTraits) SetIsBounded(v bool) {
	o.IsBounded = &v
}

// GetIsAppendOnly returns the IsAppendOnly field value if set, zero value otherwise.
func (o *SqlV1StatementTraits) GetIsAppendOnly() bool {
	if o == nil || o.IsAppendOnly == nil {
		var ret bool
		return ret
	}
	return *o.IsAppendOnly
}

// GetIsAppendOnlyOk returns a tuple with the IsAppendOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementTraits) GetIsAppendOnlyOk() (*bool, bool) {
	if o == nil || o.IsAppendOnly == nil {
		return nil, false
	}
	return o.IsAppendOnly, true
}

// HasIsAppendOnly returns a boolean if a field has been set.
func (o *SqlV1StatementTraits) HasIsAppendOnly() bool {
	if o != nil && o.IsAppendOnly != nil {
		return true
	}

	return false
}

// SetIsAppendOnly gets a reference to the given bool and assigns it to the IsAppendOnly field.
func (o *SqlV1StatementTraits) SetIsAppendOnly(v bool) {
	o.IsAppendOnly = &v
}

// GetUpsertColumns returns the UpsertColumns field value if set, zero value otherwise.
func (o *SqlV1StatementTraits) GetUpsertColumns() []int32 {
	if o == nil || o.UpsertColumns == nil {
		var ret []int32
		return ret
	}
	return *o.UpsertColumns
}

// GetUpsertColumnsOk returns a tuple with the UpsertColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementTraits) GetUpsertColumnsOk() (*[]int32, bool) {
	if o == nil || o.UpsertColumns == nil {
		return nil, false
	}
	return o.UpsertColumns, true
}

// HasUpsertColumns returns a boolean if a field has been set.
func (o *SqlV1StatementTraits) HasUpsertColumns() bool {
	if o != nil && o.UpsertColumns != nil {
		return true
	}

	return false
}

// SetUpsertColumns gets a reference to the given []int32 and assigns it to the UpsertColumns field.
func (o *SqlV1StatementTraits) SetUpsertColumns(v []int32) {
	o.UpsertColumns = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *SqlV1StatementTraits) GetSchema() SqlV1ResultSchema {
	if o == nil || o.Schema == nil {
		var ret SqlV1ResultSchema
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1StatementTraits) GetSchemaOk() (*SqlV1ResultSchema, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *SqlV1StatementTraits) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given SqlV1ResultSchema and assigns it to the Schema field.
func (o *SqlV1StatementTraits) SetSchema(v SqlV1ResultSchema) {
	o.Schema = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1StatementTraits) Redact() {
	o.recurseRedact(o.SqlKind)
	o.recurseRedact(o.IsBounded)
	o.recurseRedact(o.IsAppendOnly)
	o.recurseRedact(o.UpsertColumns)
	o.recurseRedact(o.Schema)
}

func (o *SqlV1StatementTraits) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1StatementTraits) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1StatementTraits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SqlKind != nil {
		toSerialize["sql_kind"] = o.SqlKind
	}
	if o.IsBounded != nil {
		toSerialize["is_bounded"] = o.IsBounded
	}
	if o.IsAppendOnly != nil {
		toSerialize["is_append_only"] = o.IsAppendOnly
	}
	if o.UpsertColumns != nil {
		toSerialize["upsert_columns"] = o.UpsertColumns
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSqlV1StatementTraits struct {
	value *SqlV1StatementTraits
	isSet bool
}

func (v NullableSqlV1StatementTraits) Get() *SqlV1StatementTraits {
	return v.value
}

func (v *NullableSqlV1StatementTraits) Set(val *SqlV1StatementTraits) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1StatementTraits) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1StatementTraits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1StatementTraits(val *SqlV1StatementTraits) *NullableSqlV1StatementTraits {
	return &NullableSqlV1StatementTraits{value: val, isSet: true}
}

func (v NullableSqlV1StatementTraits) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1StatementTraits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
