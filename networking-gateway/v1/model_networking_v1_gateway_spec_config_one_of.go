// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network API

Network Gateway API

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// NetworkingV1GatewaySpecConfigOneOf - struct for NetworkingV1GatewaySpecConfigOneOf
type NetworkingV1GatewaySpecConfigOneOf struct {
	NetworkingV1AwsEgressPrivateLinkGatewaySpec           *NetworkingV1AwsEgressPrivateLinkGatewaySpec
	NetworkingV1AwsPeeringGatewaySpec                     *NetworkingV1AwsPeeringGatewaySpec
	NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec     *NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec
	NetworkingV1AzureEgressPrivateLinkGatewaySpec         *NetworkingV1AzureEgressPrivateLinkGatewaySpec
	NetworkingV1AzurePeeringGatewaySpec                   *NetworkingV1AzurePeeringGatewaySpec
	NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec *NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec
	NetworkingV1GcpPeeringGatewaySpec                     *NetworkingV1GcpPeeringGatewaySpec
}

// NetworkingV1AwsEgressPrivateLinkGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf is a convenience function that returns NetworkingV1AwsEgressPrivateLinkGatewaySpec wrapped in NetworkingV1GatewaySpecConfigOneOf
func NetworkingV1AwsEgressPrivateLinkGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf(v *NetworkingV1AwsEgressPrivateLinkGatewaySpec) NetworkingV1GatewaySpecConfigOneOf {
	return NetworkingV1GatewaySpecConfigOneOf{NetworkingV1AwsEgressPrivateLinkGatewaySpec: v}
}

// NetworkingV1AwsPeeringGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf is a convenience function that returns NetworkingV1AwsPeeringGatewaySpec wrapped in NetworkingV1GatewaySpecConfigOneOf
func NetworkingV1AwsPeeringGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf(v *NetworkingV1AwsPeeringGatewaySpec) NetworkingV1GatewaySpecConfigOneOf {
	return NetworkingV1GatewaySpecConfigOneOf{NetworkingV1AwsPeeringGatewaySpec: v}
}

// NetworkingV1AwsPrivateNetworkInterfaceGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf is a convenience function that returns NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec wrapped in NetworkingV1GatewaySpecConfigOneOf
func NetworkingV1AwsPrivateNetworkInterfaceGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf(v *NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec) NetworkingV1GatewaySpecConfigOneOf {
	return NetworkingV1GatewaySpecConfigOneOf{NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec: v}
}

// NetworkingV1AzureEgressPrivateLinkGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf is a convenience function that returns NetworkingV1AzureEgressPrivateLinkGatewaySpec wrapped in NetworkingV1GatewaySpecConfigOneOf
func NetworkingV1AzureEgressPrivateLinkGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf(v *NetworkingV1AzureEgressPrivateLinkGatewaySpec) NetworkingV1GatewaySpecConfigOneOf {
	return NetworkingV1GatewaySpecConfigOneOf{NetworkingV1AzureEgressPrivateLinkGatewaySpec: v}
}

// NetworkingV1AzurePeeringGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf is a convenience function that returns NetworkingV1AzurePeeringGatewaySpec wrapped in NetworkingV1GatewaySpecConfigOneOf
func NetworkingV1AzurePeeringGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf(v *NetworkingV1AzurePeeringGatewaySpec) NetworkingV1GatewaySpecConfigOneOf {
	return NetworkingV1GatewaySpecConfigOneOf{NetworkingV1AzurePeeringGatewaySpec: v}
}

// NetworkingV1GcpEgressPrivateServiceConnectGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf is a convenience function that returns NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec wrapped in NetworkingV1GatewaySpecConfigOneOf
func NetworkingV1GcpEgressPrivateServiceConnectGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf(v *NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec) NetworkingV1GatewaySpecConfigOneOf {
	return NetworkingV1GatewaySpecConfigOneOf{NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec: v}
}

// NetworkingV1GcpPeeringGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf is a convenience function that returns NetworkingV1GcpPeeringGatewaySpec wrapped in NetworkingV1GatewaySpecConfigOneOf
func NetworkingV1GcpPeeringGatewaySpecAsNetworkingV1GatewaySpecConfigOneOf(v *NetworkingV1GcpPeeringGatewaySpec) NetworkingV1GatewaySpecConfigOneOf {
	return NetworkingV1GatewaySpecConfigOneOf{NetworkingV1GcpPeeringGatewaySpec: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkingV1GatewaySpecConfigOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsEgressPrivateLinkGatewaySpec'
	if jsonDict["kind"] == "AwsEgressPrivateLinkGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AwsEgressPrivateLinkGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AwsEgressPrivateLinkGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsEgressPrivateLinkGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AwsEgressPrivateLinkGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AwsEgressPrivateLinkGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AwsPeeringGatewaySpec'
	if jsonDict["kind"] == "AwsPeeringGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AwsPeeringGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPeeringGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPeeringGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AwsPeeringGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AwsPeeringGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AwsPrivateNetworkInterfaceGatewaySpec'
	if jsonDict["kind"] == "AwsPrivateNetworkInterfaceGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureEgressPrivateLinkGatewaySpec'
	if jsonDict["kind"] == "AzureEgressPrivateLinkGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AzureEgressPrivateLinkGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AzureEgressPrivateLinkGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzureEgressPrivateLinkGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AzureEgressPrivateLinkGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AzureEgressPrivateLinkGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePeeringGatewaySpec'
	if jsonDict["kind"] == "AzurePeeringGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AzurePeeringGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AzurePeeringGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzurePeeringGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AzurePeeringGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AzurePeeringGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpEgressPrivateServiceConnectGatewaySpec'
	if jsonDict["kind"] == "GcpEgressPrivateServiceConnectGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpPeeringGatewaySpec'
	if jsonDict["kind"] == "GcpPeeringGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1GcpPeeringGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1GcpPeeringGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpPeeringGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1GcpPeeringGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1GcpPeeringGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AwsEgressPrivateLinkGatewaySpec'
	if jsonDict["kind"] == "networking.v1.AwsEgressPrivateLinkGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AwsEgressPrivateLinkGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AwsEgressPrivateLinkGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsEgressPrivateLinkGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AwsEgressPrivateLinkGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AwsEgressPrivateLinkGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AwsPeeringGatewaySpec'
	if jsonDict["kind"] == "networking.v1.AwsPeeringGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AwsPeeringGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPeeringGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPeeringGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AwsPeeringGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AwsPeeringGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AwsPrivateNetworkInterfaceGatewaySpec'
	if jsonDict["kind"] == "networking.v1.AwsPrivateNetworkInterfaceGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AzureEgressPrivateLinkGatewaySpec'
	if jsonDict["kind"] == "networking.v1.AzureEgressPrivateLinkGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AzureEgressPrivateLinkGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AzureEgressPrivateLinkGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzureEgressPrivateLinkGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AzureEgressPrivateLinkGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AzureEgressPrivateLinkGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AzurePeeringGatewaySpec'
	if jsonDict["kind"] == "networking.v1.AzurePeeringGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1AzurePeeringGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1AzurePeeringGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzurePeeringGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1AzurePeeringGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1AzurePeeringGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.GcpEgressPrivateServiceConnectGatewaySpec'
	if jsonDict["kind"] == "networking.v1.GcpEgressPrivateServiceConnectGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.GcpPeeringGatewaySpec'
	if jsonDict["kind"] == "networking.v1.GcpPeeringGatewaySpec" {
		// try to unmarshal JSON data into NetworkingV1GcpPeeringGatewaySpec
		err = json.Unmarshal(data, &dst.NetworkingV1GcpPeeringGatewaySpec)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpPeeringGatewaySpec, return on the first match
		} else {
			dst.NetworkingV1GcpPeeringGatewaySpec = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1GatewaySpecConfigOneOf as NetworkingV1GcpPeeringGatewaySpec: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkingV1GatewaySpecConfigOneOf) MarshalJSON() ([]byte, error) {
	if src.NetworkingV1AwsEgressPrivateLinkGatewaySpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AwsEgressPrivateLinkGatewaySpec)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1AwsPeeringGatewaySpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AwsPeeringGatewaySpec)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1AzureEgressPrivateLinkGatewaySpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AzureEgressPrivateLinkGatewaySpec)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1AzurePeeringGatewaySpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AzurePeeringGatewaySpec)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1GcpPeeringGatewaySpec != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1GcpPeeringGatewaySpec)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkingV1GatewaySpecConfigOneOf) GetActualInstance() interface{} {
	if obj.NetworkingV1AwsEgressPrivateLinkGatewaySpec != nil {
		return obj.NetworkingV1AwsEgressPrivateLinkGatewaySpec
	}

	if obj.NetworkingV1AwsPeeringGatewaySpec != nil {
		return obj.NetworkingV1AwsPeeringGatewaySpec
	}

	if obj.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec != nil {
		return obj.NetworkingV1AwsPrivateNetworkInterfaceGatewaySpec
	}

	if obj.NetworkingV1AzureEgressPrivateLinkGatewaySpec != nil {
		return obj.NetworkingV1AzureEgressPrivateLinkGatewaySpec
	}

	if obj.NetworkingV1AzurePeeringGatewaySpec != nil {
		return obj.NetworkingV1AzurePeeringGatewaySpec
	}

	if obj.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec != nil {
		return obj.NetworkingV1GcpEgressPrivateServiceConnectGatewaySpec
	}

	if obj.NetworkingV1GcpPeeringGatewaySpec != nil {
		return obj.NetworkingV1GcpPeeringGatewaySpec
	}

	// all schemas are nil
	return nil
}

type NullableNetworkingV1GatewaySpecConfigOneOf struct {
	value *NetworkingV1GatewaySpecConfigOneOf
	isSet bool
}

func (v NullableNetworkingV1GatewaySpecConfigOneOf) Get() *NetworkingV1GatewaySpecConfigOneOf {
	return v.value
}

func (v *NullableNetworkingV1GatewaySpecConfigOneOf) Set(val *NetworkingV1GatewaySpecConfigOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingV1GatewaySpecConfigOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingV1GatewaySpecConfigOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingV1GatewaySpecConfigOneOf(val *NetworkingV1GatewaySpecConfigOneOf) *NullableNetworkingV1GatewaySpecConfigOneOf {
	return &NullableNetworkingV1GatewaySpecConfigOneOf{value: val, isSet: true}
}

func (v NullableNetworkingV1GatewaySpecConfigOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableNetworkingV1GatewaySpecConfigOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
