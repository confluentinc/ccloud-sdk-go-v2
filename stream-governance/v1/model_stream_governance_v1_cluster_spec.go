// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Cluster Management for Stream Governance API

Cluster Management for Stream Governance API

API version: 0.0.1-alpha1
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// StreamGovernanceV1ClusterSpec The desired state of the Cluster
type StreamGovernanceV1ClusterSpec struct {
	// The cluster name.
	DisplayName *string `json:"display_name,omitempty"`
	// The billing package.
	Package *string `json:"package,omitempty"`
	// The cluster HTTP request URL.
	HttpEndpoint *string `json:"http_endpoint,omitempty"`
	// The cloud service provider in which the cluster is running.
	Cloud *string `json:"cloud,omitempty"`
	// The cloud region where the cluster is running.
	Region *string `json:"region,omitempty"`
	// The environment to which this belongs.
	Environment *ObjectReference `json:"environment,omitempty"`
}

// NewStreamGovernanceV1ClusterSpec instantiates a new StreamGovernanceV1ClusterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamGovernanceV1ClusterSpec() *StreamGovernanceV1ClusterSpec {
	this := StreamGovernanceV1ClusterSpec{}
	return &this
}

// NewStreamGovernanceV1ClusterSpecWithDefaults instantiates a new StreamGovernanceV1ClusterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamGovernanceV1ClusterSpecWithDefaults() *StreamGovernanceV1ClusterSpec {
	this := StreamGovernanceV1ClusterSpec{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *StreamGovernanceV1ClusterSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamGovernanceV1ClusterSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *StreamGovernanceV1ClusterSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *StreamGovernanceV1ClusterSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *StreamGovernanceV1ClusterSpec) GetPackage() string {
	if o == nil || o.Package == nil {
		var ret string
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamGovernanceV1ClusterSpec) GetPackageOk() (*string, bool) {
	if o == nil || o.Package == nil {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *StreamGovernanceV1ClusterSpec) HasPackage() bool {
	if o != nil && o.Package != nil {
		return true
	}

	return false
}

// SetPackage gets a reference to the given string and assigns it to the Package field.
func (o *StreamGovernanceV1ClusterSpec) SetPackage(v string) {
	o.Package = &v
}

// GetHttpEndpoint returns the HttpEndpoint field value if set, zero value otherwise.
func (o *StreamGovernanceV1ClusterSpec) GetHttpEndpoint() string {
	if o == nil || o.HttpEndpoint == nil {
		var ret string
		return ret
	}
	return *o.HttpEndpoint
}

// GetHttpEndpointOk returns a tuple with the HttpEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamGovernanceV1ClusterSpec) GetHttpEndpointOk() (*string, bool) {
	if o == nil || o.HttpEndpoint == nil {
		return nil, false
	}
	return o.HttpEndpoint, true
}

// HasHttpEndpoint returns a boolean if a field has been set.
func (o *StreamGovernanceV1ClusterSpec) HasHttpEndpoint() bool {
	if o != nil && o.HttpEndpoint != nil {
		return true
	}

	return false
}

// SetHttpEndpoint gets a reference to the given string and assigns it to the HttpEndpoint field.
func (o *StreamGovernanceV1ClusterSpec) SetHttpEndpoint(v string) {
	o.HttpEndpoint = &v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *StreamGovernanceV1ClusterSpec) GetCloud() string {
	if o == nil || o.Cloud == nil {
		var ret string
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamGovernanceV1ClusterSpec) GetCloudOk() (*string, bool) {
	if o == nil || o.Cloud == nil {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *StreamGovernanceV1ClusterSpec) HasCloud() bool {
	if o != nil && o.Cloud != nil {
		return true
	}

	return false
}

// SetCloud gets a reference to the given string and assigns it to the Cloud field.
func (o *StreamGovernanceV1ClusterSpec) SetCloud(v string) {
	o.Cloud = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *StreamGovernanceV1ClusterSpec) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamGovernanceV1ClusterSpec) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *StreamGovernanceV1ClusterSpec) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *StreamGovernanceV1ClusterSpec) SetRegion(v string) {
	o.Region = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *StreamGovernanceV1ClusterSpec) GetEnvironment() ObjectReference {
	if o == nil || o.Environment == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamGovernanceV1ClusterSpec) GetEnvironmentOk() (*ObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *StreamGovernanceV1ClusterSpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectReference and assigns it to the Environment field.
func (o *StreamGovernanceV1ClusterSpec) SetEnvironment(v ObjectReference) {
	o.Environment = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *StreamGovernanceV1ClusterSpec) Redact() {
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.Package)
    o.recurseRedact(o.HttpEndpoint)
    o.recurseRedact(o.Cloud)
    o.recurseRedact(o.Region)
    o.recurseRedact(o.Environment)
}

func (o *StreamGovernanceV1ClusterSpec) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o StreamGovernanceV1ClusterSpec) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o StreamGovernanceV1ClusterSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Package != nil {
		toSerialize["package"] = o.Package
	}
	if o.HttpEndpoint != nil {
		toSerialize["http_endpoint"] = o.HttpEndpoint
	}
	if o.Cloud != nil {
		toSerialize["cloud"] = o.Cloud
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	return json.Marshal(toSerialize)
}

type NullableStreamGovernanceV1ClusterSpec struct {
	value *StreamGovernanceV1ClusterSpec
	isSet bool
}

func (v NullableStreamGovernanceV1ClusterSpec) Get() *StreamGovernanceV1ClusterSpec {
	return v.value
}

func (v *NullableStreamGovernanceV1ClusterSpec) Set(val *StreamGovernanceV1ClusterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamGovernanceV1ClusterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamGovernanceV1ClusterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamGovernanceV1ClusterSpec(val *StreamGovernanceV1ClusterSpec) *NullableStreamGovernanceV1ClusterSpec {
	return &NullableStreamGovernanceV1ClusterSpec{value: val, isSet: true}
}

func (v NullableStreamGovernanceV1ClusterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamGovernanceV1ClusterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


