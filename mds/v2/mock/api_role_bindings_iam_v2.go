// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_role_bindings_iam_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_mds_v2 "github.com/confluentinc/ccloud-sdk-go-v2/mds/v2"
)

// RoleBindingsIamV2Api is a mock of RoleBindingsIamV2Api interface
type RoleBindingsIamV2Api struct {
	lockCreateIamV2RoleBinding sync.Mutex
	CreateIamV2RoleBindingFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiCreateIamV2RoleBindingRequest

	lockCreateIamV2RoleBindingExecute sync.Mutex
	CreateIamV2RoleBindingExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiCreateIamV2RoleBindingRequest) (github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.IamV2RoleBinding, *net_http.Response, error)

	lockDeleteIamV2RoleBinding sync.Mutex
	DeleteIamV2RoleBindingFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiDeleteIamV2RoleBindingRequest

	lockDeleteIamV2RoleBindingExecute sync.Mutex
	DeleteIamV2RoleBindingExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiDeleteIamV2RoleBindingRequest) (github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.IamV2RoleBinding, *net_http.Response, error)

	lockGetIamV2RoleBinding sync.Mutex
	GetIamV2RoleBindingFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiGetIamV2RoleBindingRequest

	lockGetIamV2RoleBindingExecute sync.Mutex
	GetIamV2RoleBindingExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiGetIamV2RoleBindingRequest) (github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.IamV2RoleBinding, *net_http.Response, error)

	lockListIamV2RoleBindings sync.Mutex
	ListIamV2RoleBindingsFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiListIamV2RoleBindingsRequest

	lockListIamV2RoleBindingsExecute sync.Mutex
	ListIamV2RoleBindingsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiListIamV2RoleBindingsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.IamV2RoleBindingList, *net_http.Response, error)

	calls struct {
		CreateIamV2RoleBinding []struct {
			Ctx context.Context
		}
		CreateIamV2RoleBindingExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiCreateIamV2RoleBindingRequest
		}
		DeleteIamV2RoleBinding []struct {
			Ctx context.Context
			Id  string
		}
		DeleteIamV2RoleBindingExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiDeleteIamV2RoleBindingRequest
		}
		GetIamV2RoleBinding []struct {
			Ctx context.Context
			Id  string
		}
		GetIamV2RoleBindingExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiGetIamV2RoleBindingRequest
		}
		ListIamV2RoleBindings []struct {
			Ctx context.Context
		}
		ListIamV2RoleBindingsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiListIamV2RoleBindingsRequest
		}
	}
}

// CreateIamV2RoleBinding mocks base method by wrapping the associated func.
func (m *RoleBindingsIamV2Api) CreateIamV2RoleBinding(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiCreateIamV2RoleBindingRequest {
	m.lockCreateIamV2RoleBinding.Lock()
	defer m.lockCreateIamV2RoleBinding.Unlock()

	if m.CreateIamV2RoleBindingFunc == nil {
		panic("mocker: RoleBindingsIamV2Api.CreateIamV2RoleBindingFunc is nil but RoleBindingsIamV2Api.CreateIamV2RoleBinding was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.CreateIamV2RoleBinding = append(m.calls.CreateIamV2RoleBinding, call)

	return m.CreateIamV2RoleBindingFunc(ctx)
}

// CreateIamV2RoleBindingCalled returns true if CreateIamV2RoleBinding was called at least once.
func (m *RoleBindingsIamV2Api) CreateIamV2RoleBindingCalled() bool {
	m.lockCreateIamV2RoleBinding.Lock()
	defer m.lockCreateIamV2RoleBinding.Unlock()

	return len(m.calls.CreateIamV2RoleBinding) > 0
}

// CreateIamV2RoleBindingCalls returns the calls made to CreateIamV2RoleBinding.
func (m *RoleBindingsIamV2Api) CreateIamV2RoleBindingCalls() []struct {
	Ctx context.Context
} {
	m.lockCreateIamV2RoleBinding.Lock()
	defer m.lockCreateIamV2RoleBinding.Unlock()

	return m.calls.CreateIamV2RoleBinding
}

// CreateIamV2RoleBindingExecute mocks base method by wrapping the associated func.
func (m *RoleBindingsIamV2Api) CreateIamV2RoleBindingExecute(r github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiCreateIamV2RoleBindingRequest) (github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.IamV2RoleBinding, *net_http.Response, error) {
	m.lockCreateIamV2RoleBindingExecute.Lock()
	defer m.lockCreateIamV2RoleBindingExecute.Unlock()

	if m.CreateIamV2RoleBindingExecuteFunc == nil {
		panic("mocker: RoleBindingsIamV2Api.CreateIamV2RoleBindingExecuteFunc is nil but RoleBindingsIamV2Api.CreateIamV2RoleBindingExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiCreateIamV2RoleBindingRequest
	}{
		R: r,
	}

	m.calls.CreateIamV2RoleBindingExecute = append(m.calls.CreateIamV2RoleBindingExecute, call)

	return m.CreateIamV2RoleBindingExecuteFunc(r)
}

// CreateIamV2RoleBindingExecuteCalled returns true if CreateIamV2RoleBindingExecute was called at least once.
func (m *RoleBindingsIamV2Api) CreateIamV2RoleBindingExecuteCalled() bool {
	m.lockCreateIamV2RoleBindingExecute.Lock()
	defer m.lockCreateIamV2RoleBindingExecute.Unlock()

	return len(m.calls.CreateIamV2RoleBindingExecute) > 0
}

// CreateIamV2RoleBindingExecuteCalls returns the calls made to CreateIamV2RoleBindingExecute.
func (m *RoleBindingsIamV2Api) CreateIamV2RoleBindingExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiCreateIamV2RoleBindingRequest
} {
	m.lockCreateIamV2RoleBindingExecute.Lock()
	defer m.lockCreateIamV2RoleBindingExecute.Unlock()

	return m.calls.CreateIamV2RoleBindingExecute
}

// DeleteIamV2RoleBinding mocks base method by wrapping the associated func.
func (m *RoleBindingsIamV2Api) DeleteIamV2RoleBinding(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiDeleteIamV2RoleBindingRequest {
	m.lockDeleteIamV2RoleBinding.Lock()
	defer m.lockDeleteIamV2RoleBinding.Unlock()

	if m.DeleteIamV2RoleBindingFunc == nil {
		panic("mocker: RoleBindingsIamV2Api.DeleteIamV2RoleBindingFunc is nil but RoleBindingsIamV2Api.DeleteIamV2RoleBinding was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.DeleteIamV2RoleBinding = append(m.calls.DeleteIamV2RoleBinding, call)

	return m.DeleteIamV2RoleBindingFunc(ctx, id)
}

// DeleteIamV2RoleBindingCalled returns true if DeleteIamV2RoleBinding was called at least once.
func (m *RoleBindingsIamV2Api) DeleteIamV2RoleBindingCalled() bool {
	m.lockDeleteIamV2RoleBinding.Lock()
	defer m.lockDeleteIamV2RoleBinding.Unlock()

	return len(m.calls.DeleteIamV2RoleBinding) > 0
}

// DeleteIamV2RoleBindingCalls returns the calls made to DeleteIamV2RoleBinding.
func (m *RoleBindingsIamV2Api) DeleteIamV2RoleBindingCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockDeleteIamV2RoleBinding.Lock()
	defer m.lockDeleteIamV2RoleBinding.Unlock()

	return m.calls.DeleteIamV2RoleBinding
}

// DeleteIamV2RoleBindingExecute mocks base method by wrapping the associated func.
func (m *RoleBindingsIamV2Api) DeleteIamV2RoleBindingExecute(r github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiDeleteIamV2RoleBindingRequest) (github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.IamV2RoleBinding, *net_http.Response, error) {
	m.lockDeleteIamV2RoleBindingExecute.Lock()
	defer m.lockDeleteIamV2RoleBindingExecute.Unlock()

	if m.DeleteIamV2RoleBindingExecuteFunc == nil {
		panic("mocker: RoleBindingsIamV2Api.DeleteIamV2RoleBindingExecuteFunc is nil but RoleBindingsIamV2Api.DeleteIamV2RoleBindingExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiDeleteIamV2RoleBindingRequest
	}{
		R: r,
	}

	m.calls.DeleteIamV2RoleBindingExecute = append(m.calls.DeleteIamV2RoleBindingExecute, call)

	return m.DeleteIamV2RoleBindingExecuteFunc(r)
}

// DeleteIamV2RoleBindingExecuteCalled returns true if DeleteIamV2RoleBindingExecute was called at least once.
func (m *RoleBindingsIamV2Api) DeleteIamV2RoleBindingExecuteCalled() bool {
	m.lockDeleteIamV2RoleBindingExecute.Lock()
	defer m.lockDeleteIamV2RoleBindingExecute.Unlock()

	return len(m.calls.DeleteIamV2RoleBindingExecute) > 0
}

// DeleteIamV2RoleBindingExecuteCalls returns the calls made to DeleteIamV2RoleBindingExecute.
func (m *RoleBindingsIamV2Api) DeleteIamV2RoleBindingExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiDeleteIamV2RoleBindingRequest
} {
	m.lockDeleteIamV2RoleBindingExecute.Lock()
	defer m.lockDeleteIamV2RoleBindingExecute.Unlock()

	return m.calls.DeleteIamV2RoleBindingExecute
}

// GetIamV2RoleBinding mocks base method by wrapping the associated func.
func (m *RoleBindingsIamV2Api) GetIamV2RoleBinding(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiGetIamV2RoleBindingRequest {
	m.lockGetIamV2RoleBinding.Lock()
	defer m.lockGetIamV2RoleBinding.Unlock()

	if m.GetIamV2RoleBindingFunc == nil {
		panic("mocker: RoleBindingsIamV2Api.GetIamV2RoleBindingFunc is nil but RoleBindingsIamV2Api.GetIamV2RoleBinding was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetIamV2RoleBinding = append(m.calls.GetIamV2RoleBinding, call)

	return m.GetIamV2RoleBindingFunc(ctx, id)
}

// GetIamV2RoleBindingCalled returns true if GetIamV2RoleBinding was called at least once.
func (m *RoleBindingsIamV2Api) GetIamV2RoleBindingCalled() bool {
	m.lockGetIamV2RoleBinding.Lock()
	defer m.lockGetIamV2RoleBinding.Unlock()

	return len(m.calls.GetIamV2RoleBinding) > 0
}

// GetIamV2RoleBindingCalls returns the calls made to GetIamV2RoleBinding.
func (m *RoleBindingsIamV2Api) GetIamV2RoleBindingCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetIamV2RoleBinding.Lock()
	defer m.lockGetIamV2RoleBinding.Unlock()

	return m.calls.GetIamV2RoleBinding
}

// GetIamV2RoleBindingExecute mocks base method by wrapping the associated func.
func (m *RoleBindingsIamV2Api) GetIamV2RoleBindingExecute(r github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiGetIamV2RoleBindingRequest) (github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.IamV2RoleBinding, *net_http.Response, error) {
	m.lockGetIamV2RoleBindingExecute.Lock()
	defer m.lockGetIamV2RoleBindingExecute.Unlock()

	if m.GetIamV2RoleBindingExecuteFunc == nil {
		panic("mocker: RoleBindingsIamV2Api.GetIamV2RoleBindingExecuteFunc is nil but RoleBindingsIamV2Api.GetIamV2RoleBindingExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiGetIamV2RoleBindingRequest
	}{
		R: r,
	}

	m.calls.GetIamV2RoleBindingExecute = append(m.calls.GetIamV2RoleBindingExecute, call)

	return m.GetIamV2RoleBindingExecuteFunc(r)
}

// GetIamV2RoleBindingExecuteCalled returns true if GetIamV2RoleBindingExecute was called at least once.
func (m *RoleBindingsIamV2Api) GetIamV2RoleBindingExecuteCalled() bool {
	m.lockGetIamV2RoleBindingExecute.Lock()
	defer m.lockGetIamV2RoleBindingExecute.Unlock()

	return len(m.calls.GetIamV2RoleBindingExecute) > 0
}

// GetIamV2RoleBindingExecuteCalls returns the calls made to GetIamV2RoleBindingExecute.
func (m *RoleBindingsIamV2Api) GetIamV2RoleBindingExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiGetIamV2RoleBindingRequest
} {
	m.lockGetIamV2RoleBindingExecute.Lock()
	defer m.lockGetIamV2RoleBindingExecute.Unlock()

	return m.calls.GetIamV2RoleBindingExecute
}

// ListIamV2RoleBindings mocks base method by wrapping the associated func.
func (m *RoleBindingsIamV2Api) ListIamV2RoleBindings(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiListIamV2RoleBindingsRequest {
	m.lockListIamV2RoleBindings.Lock()
	defer m.lockListIamV2RoleBindings.Unlock()

	if m.ListIamV2RoleBindingsFunc == nil {
		panic("mocker: RoleBindingsIamV2Api.ListIamV2RoleBindingsFunc is nil but RoleBindingsIamV2Api.ListIamV2RoleBindings was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListIamV2RoleBindings = append(m.calls.ListIamV2RoleBindings, call)

	return m.ListIamV2RoleBindingsFunc(ctx)
}

// ListIamV2RoleBindingsCalled returns true if ListIamV2RoleBindings was called at least once.
func (m *RoleBindingsIamV2Api) ListIamV2RoleBindingsCalled() bool {
	m.lockListIamV2RoleBindings.Lock()
	defer m.lockListIamV2RoleBindings.Unlock()

	return len(m.calls.ListIamV2RoleBindings) > 0
}

// ListIamV2RoleBindingsCalls returns the calls made to ListIamV2RoleBindings.
func (m *RoleBindingsIamV2Api) ListIamV2RoleBindingsCalls() []struct {
	Ctx context.Context
} {
	m.lockListIamV2RoleBindings.Lock()
	defer m.lockListIamV2RoleBindings.Unlock()

	return m.calls.ListIamV2RoleBindings
}

// ListIamV2RoleBindingsExecute mocks base method by wrapping the associated func.
func (m *RoleBindingsIamV2Api) ListIamV2RoleBindingsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiListIamV2RoleBindingsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.IamV2RoleBindingList, *net_http.Response, error) {
	m.lockListIamV2RoleBindingsExecute.Lock()
	defer m.lockListIamV2RoleBindingsExecute.Unlock()

	if m.ListIamV2RoleBindingsExecuteFunc == nil {
		panic("mocker: RoleBindingsIamV2Api.ListIamV2RoleBindingsExecuteFunc is nil but RoleBindingsIamV2Api.ListIamV2RoleBindingsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiListIamV2RoleBindingsRequest
	}{
		R: r,
	}

	m.calls.ListIamV2RoleBindingsExecute = append(m.calls.ListIamV2RoleBindingsExecute, call)

	return m.ListIamV2RoleBindingsExecuteFunc(r)
}

// ListIamV2RoleBindingsExecuteCalled returns true if ListIamV2RoleBindingsExecute was called at least once.
func (m *RoleBindingsIamV2Api) ListIamV2RoleBindingsExecuteCalled() bool {
	m.lockListIamV2RoleBindingsExecute.Lock()
	defer m.lockListIamV2RoleBindingsExecute.Unlock()

	return len(m.calls.ListIamV2RoleBindingsExecute) > 0
}

// ListIamV2RoleBindingsExecuteCalls returns the calls made to ListIamV2RoleBindingsExecute.
func (m *RoleBindingsIamV2Api) ListIamV2RoleBindingsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_mds_v2.ApiListIamV2RoleBindingsRequest
} {
	m.lockListIamV2RoleBindingsExecute.Lock()
	defer m.lockListIamV2RoleBindingsExecute.Unlock()

	return m.calls.ListIamV2RoleBindingsExecute
}

// Reset resets the calls made to the mocked methods.
func (m *RoleBindingsIamV2Api) Reset() {
	m.lockCreateIamV2RoleBinding.Lock()
	m.calls.CreateIamV2RoleBinding = nil
	m.lockCreateIamV2RoleBinding.Unlock()
	m.lockCreateIamV2RoleBindingExecute.Lock()
	m.calls.CreateIamV2RoleBindingExecute = nil
	m.lockCreateIamV2RoleBindingExecute.Unlock()
	m.lockDeleteIamV2RoleBinding.Lock()
	m.calls.DeleteIamV2RoleBinding = nil
	m.lockDeleteIamV2RoleBinding.Unlock()
	m.lockDeleteIamV2RoleBindingExecute.Lock()
	m.calls.DeleteIamV2RoleBindingExecute = nil
	m.lockDeleteIamV2RoleBindingExecute.Unlock()
	m.lockGetIamV2RoleBinding.Lock()
	m.calls.GetIamV2RoleBinding = nil
	m.lockGetIamV2RoleBinding.Unlock()
	m.lockGetIamV2RoleBindingExecute.Lock()
	m.calls.GetIamV2RoleBindingExecute = nil
	m.lockGetIamV2RoleBindingExecute.Unlock()
	m.lockListIamV2RoleBindings.Lock()
	m.calls.ListIamV2RoleBindings = nil
	m.lockListIamV2RoleBindings.Unlock()
	m.lockListIamV2RoleBindingsExecute.Lock()
	m.calls.ListIamV2RoleBindingsExecute = nil
	m.lockListIamV2RoleBindingsExecute.Unlock()
}
