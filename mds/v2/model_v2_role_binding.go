// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Metadata Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
Contact: cloud-rbac-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// V2RoleBinding A role binding grants a Principal a role on resources that match a pattern.  The API allows you to perform create, delete, and list operations on role bindings. 
type V2RoleBinding struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id *string `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The principal User or Group to bind the role to
	Principal *string `json:"principal,omitempty"`
	// The name of the role to bind to the principal
	RoleName *string `json:"role_name,omitempty"`
	// A CRN that specifies the scope and resource patterns necessary for the role to bind
	CrnPattern *string `json:"crn_pattern,omitempty"`
}

// NewV2RoleBinding instantiates a new V2RoleBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2RoleBinding() *V2RoleBinding {
	this := V2RoleBinding{}
	return &this
}

// NewV2RoleBindingWithDefaults instantiates a new V2RoleBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2RoleBindingWithDefaults() *V2RoleBinding {
	this := V2RoleBinding{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V2RoleBinding) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RoleBinding) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V2RoleBinding) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V2RoleBinding) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V2RoleBinding) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RoleBinding) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V2RoleBinding) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V2RoleBinding) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V2RoleBinding) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RoleBinding) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V2RoleBinding) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V2RoleBinding) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V2RoleBinding) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RoleBinding) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V2RoleBinding) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *V2RoleBinding) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *V2RoleBinding) GetPrincipal() string {
	if o == nil || o.Principal == nil {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RoleBinding) GetPrincipalOk() (*string, bool) {
	if o == nil || o.Principal == nil {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *V2RoleBinding) HasPrincipal() bool {
	if o != nil && o.Principal != nil {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *V2RoleBinding) SetPrincipal(v string) {
	o.Principal = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *V2RoleBinding) GetRoleName() string {
	if o == nil || o.RoleName == nil {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RoleBinding) GetRoleNameOk() (*string, bool) {
	if o == nil || o.RoleName == nil {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *V2RoleBinding) HasRoleName() bool {
	if o != nil && o.RoleName != nil {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *V2RoleBinding) SetRoleName(v string) {
	o.RoleName = &v
}

// GetCrnPattern returns the CrnPattern field value if set, zero value otherwise.
func (o *V2RoleBinding) GetCrnPattern() string {
	if o == nil || o.CrnPattern == nil {
		var ret string
		return ret
	}
	return *o.CrnPattern
}

// GetCrnPatternOk returns a tuple with the CrnPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2RoleBinding) GetCrnPatternOk() (*string, bool) {
	if o == nil || o.CrnPattern == nil {
		return nil, false
	}
	return o.CrnPattern, true
}

// HasCrnPattern returns a boolean if a field has been set.
func (o *V2RoleBinding) HasCrnPattern() bool {
	if o != nil && o.CrnPattern != nil {
		return true
	}

	return false
}

// SetCrnPattern gets a reference to the given string and assigns it to the CrnPattern field.
func (o *V2RoleBinding) SetCrnPattern(v string) {
	o.CrnPattern = &v
}

func (o V2RoleBinding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Principal != nil {
		toSerialize["principal"] = o.Principal
	}
	if o.RoleName != nil {
		toSerialize["role_name"] = o.RoleName
	}
	if o.CrnPattern != nil {
		toSerialize["crn_pattern"] = o.CrnPattern
	}
	return json.Marshal(toSerialize)
}

type NullableV2RoleBinding struct {
	value *V2RoleBinding
	isSet bool
}

func (v NullableV2RoleBinding) Get() *V2RoleBinding {
	return v.value
}

func (v *NullableV2RoleBinding) Set(val *V2RoleBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableV2RoleBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableV2RoleBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2RoleBinding(val *V2RoleBinding) *NullableV2RoleBinding {
	return &NullableV2RoleBinding{value: val, isSet: true}
}

func (v NullableV2RoleBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2RoleBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


