// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Metadata Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
Contact: cloud-rbac-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// V2ResourceOperation struct for V2ResourceOperation
type V2ResourceOperation struct {
	// What type of resource these operations are allowed on (\"Cluster\", \"Topic\", \"Group\", \"Subject\", etc.)
	ResourceType *string `json:"resource_type,omitempty"`
	// List of allowed operations on this resourceType
	Operations *[]string `json:"operations,omitempty"`
}

// NewV2ResourceOperation instantiates a new V2ResourceOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2ResourceOperation() *V2ResourceOperation {
	this := V2ResourceOperation{}
	return &this
}

// NewV2ResourceOperationWithDefaults instantiates a new V2ResourceOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2ResourceOperationWithDefaults() *V2ResourceOperation {
	this := V2ResourceOperation{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *V2ResourceOperation) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ResourceOperation) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *V2ResourceOperation) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *V2ResourceOperation) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *V2ResourceOperation) GetOperations() []string {
	if o == nil || o.Operations == nil {
		var ret []string
		return ret
	}
	return *o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2ResourceOperation) GetOperationsOk() (*[]string, bool) {
	if o == nil || o.Operations == nil {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *V2ResourceOperation) HasOperations() bool {
	if o != nil && o.Operations != nil {
		return true
	}

	return false
}

// SetOperations gets a reference to the given []string and assigns it to the Operations field.
func (o *V2ResourceOperation) SetOperations(v []string) {
	o.Operations = &v
}

func (o V2ResourceOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceType != nil {
		toSerialize["resource_type"] = o.ResourceType
	}
	if o.Operations != nil {
		toSerialize["operations"] = o.Operations
	}
	return json.Marshal(toSerialize)
}

type NullableV2ResourceOperation struct {
	value *V2ResourceOperation
	isSet bool
}

func (v NullableV2ResourceOperation) Get() *V2ResourceOperation {
	return v.value
}

func (v *NullableV2ResourceOperation) Set(val *V2ResourceOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableV2ResourceOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableV2ResourceOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2ResourceOperation(val *V2ResourceOperation) *NullableV2ResourceOperation {
	return &NullableV2ResourceOperation{value: val, isSet: true}
}

func (v NullableV2ResourceOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2ResourceOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


