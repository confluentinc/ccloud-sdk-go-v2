// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Data Catalog Management API

Data Catalog Management API

API version: 0.0.1-alpha1
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type NotificationTopicConfigsStreamCatalogV2Api interface {

	/*
		DisableNotificationsStreamCatalogV2NotificationTopicConfig Delete the catalog notifications topic configuration

		[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Data Catalog v2](https://img.shields.io/badge/-Request%20Access%20To%20Data%20Catalog%20v2-%23bc8540)](mailto:ccloud-api-access+stream-catalog-v2-early-access@confluent.io?subject=Request%20to%20join%20stream-catalog/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20stream-catalog/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

	Disable the data catalog notifications

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param catalogClusterId The Catalog Cluster
		 @return ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest
	*/
	DisableNotificationsStreamCatalogV2NotificationTopicConfig(ctx _context.Context, catalogClusterId string) ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest

	// DisableNotificationsStreamCatalogV2NotificationTopicConfigExecute executes the request
	DisableNotificationsStreamCatalogV2NotificationTopicConfigExecute(r ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest) (*_nethttp.Response, error)

	/*
		EnableNotificationsStreamCatalogV2NotificationTopicConfig Enable stream catalog notifications

		[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Data Catalog v2](https://img.shields.io/badge/-Request%20Access%20To%20Data%20Catalog%20v2-%23bc8540)](mailto:ccloud-api-access+stream-catalog-v2-early-access@confluent.io?subject=Request%20to%20join%20stream-catalog/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20stream-catalog/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

	Enable stream catalog notifications with config settings

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param catalogClusterId The Catalog Cluster
		 @return ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest
	*/
	EnableNotificationsStreamCatalogV2NotificationTopicConfig(ctx _context.Context, catalogClusterId string) ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest

	// EnableNotificationsStreamCatalogV2NotificationTopicConfigExecute executes the request
	//  @return StreamCatalogV2NotificationTopicConfig
	EnableNotificationsStreamCatalogV2NotificationTopicConfigExecute(r ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest) (StreamCatalogV2NotificationTopicConfig, *_nethttp.Response, error)

	/*
		GetNotificationsStreamCatalogV2NotificationTopicConfig Get catalog notifications settings

		[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Data Catalog v2](https://img.shields.io/badge/-Request%20Access%20To%20Data%20Catalog%20v2-%23bc8540)](mailto:ccloud-api-access+stream-catalog-v2-early-access@confluent.io?subject=Request%20to%20join%20stream-catalog/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20stream-catalog/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

	Returns the configuration settings for catalog notifications

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param catalogClusterId The Catalog Cluster
		 @return ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest
	*/
	GetNotificationsStreamCatalogV2NotificationTopicConfig(ctx _context.Context, catalogClusterId string) ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest

	// GetNotificationsStreamCatalogV2NotificationTopicConfigExecute executes the request
	//  @return StreamCatalogV2NotificationTopicConfig
	GetNotificationsStreamCatalogV2NotificationTopicConfigExecute(r ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest) (StreamCatalogV2NotificationTopicConfig, *_nethttp.Response, error)
}

// NotificationTopicConfigsStreamCatalogV2ApiService NotificationTopicConfigsStreamCatalogV2Api service
type NotificationTopicConfigsStreamCatalogV2ApiService service

type ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest struct {
	ctx              _context.Context
	ApiService       NotificationTopicConfigsStreamCatalogV2Api
	environment      *string
	catalogClusterId string
}

// Scope the operation to the given environment.
func (r ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest) Environment(environment string) ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest {
	r.environment = &environment
	return r
}

func (r ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DisableNotificationsStreamCatalogV2NotificationTopicConfigExecute(r)
}

/*
DisableNotificationsStreamCatalogV2NotificationTopicConfig Delete the catalog notifications topic configuration

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Data Catalog v2](https://img.shields.io/badge/-Request%20Access%20To%20Data%20Catalog%20v2-%23bc8540)](mailto:ccloud-api-access+stream-catalog-v2-early-access@confluent.io?subject=Request%20to%20join%20stream-catalog/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20stream-catalog/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Disable the data catalog notifications

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogClusterId The Catalog Cluster
 @return ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest
*/
func (a *NotificationTopicConfigsStreamCatalogV2ApiService) DisableNotificationsStreamCatalogV2NotificationTopicConfig(ctx _context.Context, catalogClusterId string) ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest {
	return ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest{
		ApiService:       a,
		ctx:              ctx,
		catalogClusterId: catalogClusterId,
	}
}

// Execute executes the request
func (a *NotificationTopicConfigsStreamCatalogV2ApiService) DisableNotificationsStreamCatalogV2NotificationTopicConfigExecute(r ApiDisableNotificationsStreamCatalogV2NotificationTopicConfigRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTopicConfigsStreamCatalogV2ApiService.DisableNotificationsStreamCatalogV2NotificationTopicConfig")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stream-catalog/v2/clusters/{catalog_cluster_id}/notification-topic-configs"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.catalogClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest struct {
	ctx                                    _context.Context
	ApiService                             NotificationTopicConfigsStreamCatalogV2Api
	environment                            *string
	catalogClusterId                       string
	streamCatalogV2NotificationTopicConfig *StreamCatalogV2NotificationTopicConfig
}

// Scope the operation to the given environment.
func (r ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest) Environment(environment string) ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest {
	r.environment = &environment
	return r
}
func (r ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest) StreamCatalogV2NotificationTopicConfig(streamCatalogV2NotificationTopicConfig StreamCatalogV2NotificationTopicConfig) ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest {
	r.streamCatalogV2NotificationTopicConfig = &streamCatalogV2NotificationTopicConfig
	return r
}

func (r ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest) Execute() (StreamCatalogV2NotificationTopicConfig, *_nethttp.Response, error) {
	return r.ApiService.EnableNotificationsStreamCatalogV2NotificationTopicConfigExecute(r)
}

/*
EnableNotificationsStreamCatalogV2NotificationTopicConfig Enable stream catalog notifications

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Data Catalog v2](https://img.shields.io/badge/-Request%20Access%20To%20Data%20Catalog%20v2-%23bc8540)](mailto:ccloud-api-access+stream-catalog-v2-early-access@confluent.io?subject=Request%20to%20join%20stream-catalog/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20stream-catalog/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Enable stream catalog notifications with config settings

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogClusterId The Catalog Cluster
 @return ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest
*/
func (a *NotificationTopicConfigsStreamCatalogV2ApiService) EnableNotificationsStreamCatalogV2NotificationTopicConfig(ctx _context.Context, catalogClusterId string) ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest {
	return ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest{
		ApiService:       a,
		ctx:              ctx,
		catalogClusterId: catalogClusterId,
	}
}

// Execute executes the request
//  @return StreamCatalogV2NotificationTopicConfig
func (a *NotificationTopicConfigsStreamCatalogV2ApiService) EnableNotificationsStreamCatalogV2NotificationTopicConfigExecute(r ApiEnableNotificationsStreamCatalogV2NotificationTopicConfigRequest) (StreamCatalogV2NotificationTopicConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StreamCatalogV2NotificationTopicConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTopicConfigsStreamCatalogV2ApiService.EnableNotificationsStreamCatalogV2NotificationTopicConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stream-catalog/v2/clusters/{catalog_cluster_id}/notification-topic-configs"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.catalogClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.streamCatalogV2NotificationTopicConfig
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest struct {
	ctx              _context.Context
	ApiService       NotificationTopicConfigsStreamCatalogV2Api
	environment      *string
	catalogClusterId string
}

// Scope the operation to the given environment.
func (r ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest) Environment(environment string) ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest {
	r.environment = &environment
	return r
}

func (r ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest) Execute() (StreamCatalogV2NotificationTopicConfig, *_nethttp.Response, error) {
	return r.ApiService.GetNotificationsStreamCatalogV2NotificationTopicConfigExecute(r)
}

/*
GetNotificationsStreamCatalogV2NotificationTopicConfig Get catalog notifications settings

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Data Catalog v2](https://img.shields.io/badge/-Request%20Access%20To%20Data%20Catalog%20v2-%23bc8540)](mailto:ccloud-api-access+stream-catalog-v2-early-access@confluent.io?subject=Request%20to%20join%20stream-catalog/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20stream-catalog/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Returns the configuration settings for catalog notifications

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param catalogClusterId The Catalog Cluster
 @return ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest
*/
func (a *NotificationTopicConfigsStreamCatalogV2ApiService) GetNotificationsStreamCatalogV2NotificationTopicConfig(ctx _context.Context, catalogClusterId string) ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest {
	return ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest{
		ApiService:       a,
		ctx:              ctx,
		catalogClusterId: catalogClusterId,
	}
}

// Execute executes the request
//  @return StreamCatalogV2NotificationTopicConfig
func (a *NotificationTopicConfigsStreamCatalogV2ApiService) GetNotificationsStreamCatalogV2NotificationTopicConfigExecute(r ApiGetNotificationsStreamCatalogV2NotificationTopicConfigRequest) (StreamCatalogV2NotificationTopicConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StreamCatalogV2NotificationTopicConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationTopicConfigsStreamCatalogV2ApiService.GetNotificationsStreamCatalogV2NotificationTopicConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stream-catalog/v2/clusters/{catalog_cluster_id}/notification-topic-configs"
	localVarPath = strings.Replace(localVarPath, "{"+"catalog_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.catalogClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
