// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Notification System Admin APIs

# Introduction  Notifications Admin API provides resources/API which are generally not applicable for normal users, in order to access these API user must have super user access for your access token  # Authorization Currently only confluent okta uses are only able to access these API.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  The broad categories of Admin API for notification-service are categorises in below sections. * **Templates** -    Internal users like billing team will be able to add/modify the templates for notifications    in self service manner. Individual API will describe these operations in more details. * **Manual Notifications** -    To allow internal users to manually send out a notification to a given list of orgs. 

API version: 0.1.0-alpha0
Contact: observability-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// InlineObject struct for InlineObject
type InlineObject struct {
	// Message to be shown in the notification to the customer.
	Message string `json:"message"`
	OrgIds []int32 `json:"org_ids"`
	// Indicates the intent of caller whether to send the notification to actual customers (if it's false) or to just see the output shown to the customers (if it's true). 
	DryRun bool `json:"dry_run"`
}

// NewInlineObject instantiates a new InlineObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject(message string, orgIds []int32, dryRun bool) *InlineObject {
	this := InlineObject{}
	this.Message = message
	this.OrgIds = orgIds
	this.DryRun = dryRun
	return &this
}

// NewInlineObjectWithDefaults instantiates a new InlineObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObjectWithDefaults() *InlineObject {
	this := InlineObject{}
	return &this
}

// GetMessage returns the Message field value
func (o *InlineObject) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *InlineObject) SetMessage(v string) {
	o.Message = v
}

// GetOrgIds returns the OrgIds field value
func (o *InlineObject) GetOrgIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.OrgIds
}

// GetOrgIdsOk returns a tuple with the OrgIds field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetOrgIdsOk() (*[]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrgIds, true
}

// SetOrgIds sets field value
func (o *InlineObject) SetOrgIds(v []int32) {
	o.OrgIds = v
}

// GetDryRun returns the DryRun field value
func (o *InlineObject) GetDryRun() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value
// and a boolean to check if the value has been set.
func (o *InlineObject) GetDryRunOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DryRun, true
}

// SetDryRun sets field value
func (o *InlineObject) SetDryRun(v bool) {
	o.DryRun = v
}

func (o InlineObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["org_ids"] = o.OrgIds
	}
	if true {
		toSerialize["dry_run"] = o.DryRun
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject struct {
	value *InlineObject
	isSet bool
}

func (v NullableInlineObject) Get() *InlineObject {
	return v.value
}

func (v *NullableInlineObject) Set(val *InlineObject) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject(val *InlineObject) *NullableInlineObject {
	return &NullableInlineObject{value: val, isSet: true}
}

func (v NullableInlineObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


