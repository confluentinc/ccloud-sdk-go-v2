// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Notification System Admin APIs

# Introduction  Notifications Admin API provides resources/API which are generally not applicable for normal users, in order to access these API user must have super user access for your access token  # Authorization Currently only confluent okta uses are only able to access these API.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  The broad categories of Admin API for notification-service are categorises in below sections. * **Templates** -    Internal users like billing team will be able to add/modify the templates for notifications    in self service manner. Individual API will describe these operations in more details. * **Manual Notifications** -    To allow internal users to manually send out a notification to a given list of orgs. 

API version: 0.1.0-alpha0
Contact: observability-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// NotificationsAdminV1TemplateSource Contains message and title template for the notification with placeholders
type NotificationsAdminV1TemplateSource struct {
	// The template for notification message or email body
	Message string `json:"message"`
	// The template for notification message title or email subject
	Title *string `json:"title,omitempty"`
}

// NewNotificationsAdminV1TemplateSource instantiates a new NotificationsAdminV1TemplateSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationsAdminV1TemplateSource(message string) *NotificationsAdminV1TemplateSource {
	this := NotificationsAdminV1TemplateSource{}
	this.Message = message
	return &this
}

// NewNotificationsAdminV1TemplateSourceWithDefaults instantiates a new NotificationsAdminV1TemplateSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsAdminV1TemplateSourceWithDefaults() *NotificationsAdminV1TemplateSource {
	this := NotificationsAdminV1TemplateSource{}
	return &this
}

// GetMessage returns the Message field value
func (o *NotificationsAdminV1TemplateSource) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1TemplateSource) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *NotificationsAdminV1TemplateSource) SetMessage(v string) {
	o.Message = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NotificationsAdminV1TemplateSource) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1TemplateSource) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NotificationsAdminV1TemplateSource) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NotificationsAdminV1TemplateSource) SetTitle(v string) {
	o.Title = &v
}

func (o NotificationsAdminV1TemplateSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationsAdminV1TemplateSource struct {
	value *NotificationsAdminV1TemplateSource
	isSet bool
}

func (v NullableNotificationsAdminV1TemplateSource) Get() *NotificationsAdminV1TemplateSource {
	return v.value
}

func (v *NullableNotificationsAdminV1TemplateSource) Set(val *NotificationsAdminV1TemplateSource) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsAdminV1TemplateSource) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsAdminV1TemplateSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsAdminV1TemplateSource(val *NotificationsAdminV1TemplateSource) *NullableNotificationsAdminV1TemplateSource {
	return &NullableNotificationsAdminV1TemplateSource{value: val, isSet: true}
}

func (v NullableNotificationsAdminV1TemplateSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsAdminV1TemplateSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


