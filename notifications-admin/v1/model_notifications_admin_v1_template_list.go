// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Notification System Admin APIs

# Introduction  Notifications Admin API provides resources/API which are generally not applicable for normal users, in order to access these API user must have super user access for your access token  # Authorization Currently only confluent okta uses are only able to access these API.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  The broad categories of Admin API for notification-service are categorises in below sections. * **Templates** -    Internal users like billing team will be able to add/modify the templates for notifications    in self service manner. Individual API will describe these operations in more details. * **Manual Notifications** -    To allow internal users to manually send out a notification to a given list of orgs. 

API version: 0.1.0-alpha0
Contact: observability-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// NotificationsAdminV1TemplateList You can add/modify a `template` for a given unique pair of `notification_type` and `integration_type`, example: upload a template for `notification_type=notification.credit_card.expired` and `integration_type=EMAIL`, so that when ever notification-service get's the Notification of type `notification_type` and EMAIL will be sent using this template rather than default template 
type NotificationsAdminV1TemplateList struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion string `json:"api_version"`
	// Kind defines the object this REST resource represents.
	Kind string `json:"kind"`
	Metadata ListMeta `json:"metadata"`
	Data []NotificationsAdminV1Template `json:"data"`
}

// NewNotificationsAdminV1TemplateList instantiates a new NotificationsAdminV1TemplateList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationsAdminV1TemplateList(apiVersion string, kind string, metadata ListMeta, data []NotificationsAdminV1Template) *NotificationsAdminV1TemplateList {
	this := NotificationsAdminV1TemplateList{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	this.Metadata = metadata
	this.Data = data
	return &this
}

// NewNotificationsAdminV1TemplateListWithDefaults instantiates a new NotificationsAdminV1TemplateList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsAdminV1TemplateListWithDefaults() *NotificationsAdminV1TemplateList {
	this := NotificationsAdminV1TemplateList{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *NotificationsAdminV1TemplateList) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1TemplateList) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *NotificationsAdminV1TemplateList) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *NotificationsAdminV1TemplateList) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1TemplateList) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *NotificationsAdminV1TemplateList) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *NotificationsAdminV1TemplateList) GetMetadata() ListMeta {
	if o == nil {
		var ret ListMeta
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1TemplateList) GetMetadataOk() (*ListMeta, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *NotificationsAdminV1TemplateList) SetMetadata(v ListMeta) {
	o.Metadata = v
}

// GetData returns the Data field value
func (o *NotificationsAdminV1TemplateList) GetData() []NotificationsAdminV1Template {
	if o == nil {
		var ret []NotificationsAdminV1Template
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1TemplateList) GetDataOk() (*[]NotificationsAdminV1Template, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *NotificationsAdminV1TemplateList) SetData(v []NotificationsAdminV1Template) {
	o.Data = v
}

func (o NotificationsAdminV1TemplateList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["api_version"] = o.ApiVersion
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationsAdminV1TemplateList struct {
	value *NotificationsAdminV1TemplateList
	isSet bool
}

func (v NullableNotificationsAdminV1TemplateList) Get() *NotificationsAdminV1TemplateList {
	return v.value
}

func (v *NullableNotificationsAdminV1TemplateList) Set(val *NotificationsAdminV1TemplateList) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsAdminV1TemplateList) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsAdminV1TemplateList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsAdminV1TemplateList(val *NotificationsAdminV1TemplateList) *NullableNotificationsAdminV1TemplateList {
	return &NullableNotificationsAdminV1TemplateList{value: val, isSet: true}
}

func (v NullableNotificationsAdminV1TemplateList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsAdminV1TemplateList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


