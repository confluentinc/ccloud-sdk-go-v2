// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Notification System Admin APIs

# Introduction  Notifications Admin API provides resources/API which are generally not applicable for normal users, in order to access these API user must have super user access for your access token  # Authorization Currently only confluent okta uses are only able to access these API.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  The broad categories of Admin API for notification-service are categorises in below sections. * **Templates** -    Internal users like billing team will be able to add/modify the templates for notifications    in self service manner. Individual API will describe these operations in more details. * **Manual Notifications** -    To allow internal users to manually send out a notification to a given list of orgs. 

API version: 0.1.0-alpha0
Contact: observability-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// NotificationsAdminV1Template You can add/modify a `template` for a given unique pair of `notification_type` and `integration_type`, example: upload a template for `notification_type=notification.credit_card.expired` and `integration_type=EMAIL`, so that when ever notification-service get's the Notification of type `notification_type` and EMAIL will be sent using this template rather than default template 
type NotificationsAdminV1Template struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id *string `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// Contains message and title template for the notification with placeholders
	TemplateSource *NotificationsAdminV1TemplateSource `json:"template_source,omitempty"`
	// Type of the notification - Similar to the type in cloud event sent to the notification service while triggering notification. 
	NotificationType *string `json:"notification_type,omitempty"`
	// The type of the target system where alerts and notifications need to be delivered 
	IntegrationType *string `json:"integration_type,omitempty"`
}

// NewNotificationsAdminV1Template instantiates a new NotificationsAdminV1Template object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationsAdminV1Template() *NotificationsAdminV1Template {
	this := NotificationsAdminV1Template{}
	return &this
}

// NewNotificationsAdminV1TemplateWithDefaults instantiates a new NotificationsAdminV1Template object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsAdminV1TemplateWithDefaults() *NotificationsAdminV1Template {
	this := NotificationsAdminV1Template{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *NotificationsAdminV1Template) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1Template) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *NotificationsAdminV1Template) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *NotificationsAdminV1Template) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *NotificationsAdminV1Template) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1Template) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *NotificationsAdminV1Template) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *NotificationsAdminV1Template) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationsAdminV1Template) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1Template) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationsAdminV1Template) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationsAdminV1Template) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *NotificationsAdminV1Template) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1Template) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *NotificationsAdminV1Template) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *NotificationsAdminV1Template) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetTemplateSource returns the TemplateSource field value if set, zero value otherwise.
func (o *NotificationsAdminV1Template) GetTemplateSource() NotificationsAdminV1TemplateSource {
	if o == nil || o.TemplateSource == nil {
		var ret NotificationsAdminV1TemplateSource
		return ret
	}
	return *o.TemplateSource
}

// GetTemplateSourceOk returns a tuple with the TemplateSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1Template) GetTemplateSourceOk() (*NotificationsAdminV1TemplateSource, bool) {
	if o == nil || o.TemplateSource == nil {
		return nil, false
	}
	return o.TemplateSource, true
}

// HasTemplateSource returns a boolean if a field has been set.
func (o *NotificationsAdminV1Template) HasTemplateSource() bool {
	if o != nil && o.TemplateSource != nil {
		return true
	}

	return false
}

// SetTemplateSource gets a reference to the given NotificationsAdminV1TemplateSource and assigns it to the TemplateSource field.
func (o *NotificationsAdminV1Template) SetTemplateSource(v NotificationsAdminV1TemplateSource) {
	o.TemplateSource = &v
}

// GetNotificationType returns the NotificationType field value if set, zero value otherwise.
func (o *NotificationsAdminV1Template) GetNotificationType() string {
	if o == nil || o.NotificationType == nil {
		var ret string
		return ret
	}
	return *o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1Template) GetNotificationTypeOk() (*string, bool) {
	if o == nil || o.NotificationType == nil {
		return nil, false
	}
	return o.NotificationType, true
}

// HasNotificationType returns a boolean if a field has been set.
func (o *NotificationsAdminV1Template) HasNotificationType() bool {
	if o != nil && o.NotificationType != nil {
		return true
	}

	return false
}

// SetNotificationType gets a reference to the given string and assigns it to the NotificationType field.
func (o *NotificationsAdminV1Template) SetNotificationType(v string) {
	o.NotificationType = &v
}

// GetIntegrationType returns the IntegrationType field value if set, zero value otherwise.
func (o *NotificationsAdminV1Template) GetIntegrationType() string {
	if o == nil || o.IntegrationType == nil {
		var ret string
		return ret
	}
	return *o.IntegrationType
}

// GetIntegrationTypeOk returns a tuple with the IntegrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsAdminV1Template) GetIntegrationTypeOk() (*string, bool) {
	if o == nil || o.IntegrationType == nil {
		return nil, false
	}
	return o.IntegrationType, true
}

// HasIntegrationType returns a boolean if a field has been set.
func (o *NotificationsAdminV1Template) HasIntegrationType() bool {
	if o != nil && o.IntegrationType != nil {
		return true
	}

	return false
}

// SetIntegrationType gets a reference to the given string and assigns it to the IntegrationType field.
func (o *NotificationsAdminV1Template) SetIntegrationType(v string) {
	o.IntegrationType = &v
}

func (o NotificationsAdminV1Template) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.TemplateSource != nil {
		toSerialize["template_source"] = o.TemplateSource
	}
	if o.NotificationType != nil {
		toSerialize["notification_type"] = o.NotificationType
	}
	if o.IntegrationType != nil {
		toSerialize["integration_type"] = o.IntegrationType
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationsAdminV1Template struct {
	value *NotificationsAdminV1Template
	isSet bool
}

func (v NullableNotificationsAdminV1Template) Get() *NotificationsAdminV1Template {
	return v.value
}

func (v *NullableNotificationsAdminV1Template) Set(val *NotificationsAdminV1Template) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsAdminV1Template) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsAdminV1Template) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsAdminV1Template(val *NotificationsAdminV1Template) *NullableNotificationsAdminV1Template {
	return &NullableNotificationsAdminV1Template{value: val, isSet: true}
}

func (v NullableNotificationsAdminV1Template) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsAdminV1Template) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


