// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Notification System Admin APIs

# Introduction  Notifications Admin API provides resources/API which are generally not applicable for normal users, in order to access these API user must have super user access for your access token  # Authorization Currently only confluent okta uses are only able to access these API.  All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.  The broad categories of Admin API for notification-service are categorises in below sections. * **Templates** -    Internal users like billing team will be able to add/modify the templates for notifications    in self service manner. Individual API will describe these operations in more details. * **Manual Notifications** -    To allow internal users to manually send out a notification to a given list of orgs. 

API version: 0.1.0-alpha0
Contact: observability-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// InlineResponse207Metadata Metadata of the overall status of multi status response with information like success count, failure count and total. 
type InlineResponse207Metadata struct {
	// The number of notifications sent successfully.
	Success *int32 `json:"success,omitempty"`
	// The number of notifications failed to send.
	Failure *int32 `json:"failure,omitempty"`
	// Total number of notifications attempted to send.
	Total *int32 `json:"total,omitempty"`
}

// NewInlineResponse207Metadata instantiates a new InlineResponse207Metadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse207Metadata() *InlineResponse207Metadata {
	this := InlineResponse207Metadata{}
	return &this
}

// NewInlineResponse207MetadataWithDefaults instantiates a new InlineResponse207Metadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse207MetadataWithDefaults() *InlineResponse207Metadata {
	this := InlineResponse207Metadata{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *InlineResponse207Metadata) GetSuccess() int32 {
	if o == nil || o.Success == nil {
		var ret int32
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse207Metadata) GetSuccessOk() (*int32, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *InlineResponse207Metadata) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given int32 and assigns it to the Success field.
func (o *InlineResponse207Metadata) SetSuccess(v int32) {
	o.Success = &v
}

// GetFailure returns the Failure field value if set, zero value otherwise.
func (o *InlineResponse207Metadata) GetFailure() int32 {
	if o == nil || o.Failure == nil {
		var ret int32
		return ret
	}
	return *o.Failure
}

// GetFailureOk returns a tuple with the Failure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse207Metadata) GetFailureOk() (*int32, bool) {
	if o == nil || o.Failure == nil {
		return nil, false
	}
	return o.Failure, true
}

// HasFailure returns a boolean if a field has been set.
func (o *InlineResponse207Metadata) HasFailure() bool {
	if o != nil && o.Failure != nil {
		return true
	}

	return false
}

// SetFailure gets a reference to the given int32 and assigns it to the Failure field.
func (o *InlineResponse207Metadata) SetFailure(v int32) {
	o.Failure = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *InlineResponse207Metadata) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse207Metadata) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *InlineResponse207Metadata) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *InlineResponse207Metadata) SetTotal(v int32) {
	o.Total = &v
}

func (o InlineResponse207Metadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Failure != nil {
		toSerialize["failure"] = o.Failure
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse207Metadata struct {
	value *InlineResponse207Metadata
	isSet bool
}

func (v NullableInlineResponse207Metadata) Get() *InlineResponse207Metadata {
	return v.value
}

func (v *NullableInlineResponse207Metadata) Set(val *InlineResponse207Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse207Metadata) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse207Metadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse207Metadata(val *InlineResponse207Metadata) *NullableInlineResponse207Metadata {
	return &NullableInlineResponse207Metadata{value: val, isSet: true}
}

func (v NullableInlineResponse207Metadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse207Metadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


