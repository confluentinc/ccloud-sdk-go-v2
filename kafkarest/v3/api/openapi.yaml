openapi: 3.0.0
info:
  contact:
    email: kafka-clients-proxy-team@confluent.io
    name: Kafka REST Team
    url: https://confluent.slack.com/app_redirect?channel=kafka-rest-eng
  title: REST Admin API
  version: 3.0.0
  x-api-id: 499e3476-71e0-4d6f-b4f9-6776cec6df27
  x-api-group: v3
  x-audience: external-public
  x-tag-group: Kafka API (%s)
servers:
- description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
  url: https://pkc-00000.region.provider.confluent.cloud
  x-audience: business-unit-internal
tags:
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Cluster (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Configs (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: ACL (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Consumer Group (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Partition (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Topic (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Records (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Cluster Linking (v3)
paths:
  /kafka/v3/clusters/{cluster_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the Kafka cluster with the specified ``cluster_id``.
      operationId: getKafkaCluster
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaCluster
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
                  resource_name: crn:///kafka=cluster-1
                cluster_id: cluster-1
                controller:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                acls:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
                brokers:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
                broker_configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
                consumer_groups:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
                topics:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              schema:
                $ref: '#/components/schemas/ClusterData'
          description: The Kafka cluster.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Cluster
      tags:
      - Cluster (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/acls:batch:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create ACLs.
      operationId: batchCreateKafkaAcls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/BatchCreateAclRequest'
      responses:
        "201":
          description: Created
        "400":
          content:
            application/json:
              examples:
                create_acls_cluster_name_invalid:
                  description: Thrown when creating an ACL for a CLUSTER resource
                    specifying the wrong resource name.
                  value:
                    error_code: 40002
                    message: The only valid name for the CLUSTER resource is kafka-cluster"
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Batch Create ACLs
      tags:
      - ACL (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"data":[{"resource_type":"UNKNOWN","resource_name":"string","pattern_type":"string","principal":"string","host":"string","operation":"string","permission":"string"}]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"resource_type\\\
          \":\\\"UNKNOWN\\\",\\\"resource_name\\\":\\\"string\\\",\\\"pattern_type\\\
          \":\\\"string\\\",\\\"principal\\\":\\\"string\\\",\\\"host\\\":\\\"string\\\
          \",\\\"operation\\\":\\\"string\\\",\\\"permission\\\":\\\"string\\\"}]}\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/acls:batch", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/acls:batch",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            data: [
              {
                resource_type: 'UNKNOWN',
                resource_name: 'string',
                pattern_type: 'string',
                principal: 'string',
                host: 'string',
                operation: 'string',
                permission: 'string'
              }
            ]
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/acls:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete the ACLs that match the search criteria.
      operationId: deleteKafkaAcls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ACL resource type.
        explode: true
        in: query
        name: resource_type
        required: true
        schema:
          $ref: '#/components/schemas/AclResourceType'
        style: form
      - description: The ACL resource name.
        explode: true
        in: query
        name: resource_name
        required: false
        schema:
          type: string
        style: form
      - description: The ACL pattern type.
        explode: true
        in: query
        name: pattern_type
        required: true
        schema:
          $ref: '#/components/schemas/AclPatternType'
        style: form
      - description: The ACL principal. This is the Service Account name or user name.
        explode: true
        in: query
        name: principal
        required: false
        schema:
          type: string
        style: form
      - description: The ACL host.
        explode: true
        in: query
        name: host
        required: false
        schema:
          type: string
        style: form
      - description: The ACL operation.
        explode: true
        in: query
        name: operation
        required: true
        schema:
          $ref: '#/components/schemas/AclOperation'
        style: form
      - description: The ACL permission.
        explode: true
        in: query
        name: permission
        required: true
        schema:
          $ref: '#/components/schemas/AclPermission'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=User%3Aalice&host=*&operation=ALL&permission=ALLOW
                  cluster_id: cluster-1
                  resource_type: TOPIC
                  resource_name: topic-
                  pattern_type: PREFIXED
                  principal: User:alice
                  host: '*'
                  operation: ALL
                  permission: ALLOW
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=kafka-cluster&pattern_type=LITERAL&principal=User%3Aalice&host=*&operation=DESCRIBE&permission=DENY
                  cluster_id: cluster-1
                  resource_type: CLUSTER
                  resource_name: kafka-cluster
                  pattern_type: LITERAL
                  principal: User:alice
                  host: '*'
                  operation: DESCRIBE
                  permission: DENY
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: The list of deleted ACLs.
        "400":
          content:
            application/json:
              examples:
                delete_acls_unspecified_resource_type:
                  description: Thrown when trying to delete ACLs without specifying
                    a valid resource type.
                  value:
                    error_code: 400
                    message: resource_type cannot be unspecified or UNKNOWN
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete ACLs
      tags:
      - ACL (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return a list of ACLs that match the search criteria.
      operationId: getKafkaAcls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ACL resource type.
        explode: true
        in: query
        name: resource_type
        required: false
        schema:
          $ref: '#/components/schemas/AclResourceType'
        style: form
      - description: The ACL resource name.
        explode: true
        in: query
        name: resource_name
        required: false
        schema:
          type: string
        style: form
      - description: The ACL pattern type.
        explode: true
        in: query
        name: pattern_type
        required: false
        schema:
          $ref: '#/components/schemas/AclPatternType'
        style: form
      - description: The ACL principal. This is the Service Account name or user name.
        explode: true
        in: query
        name: principal
        required: false
        schema:
          type: string
        style: form
      - description: The ACL host.
        explode: true
        in: query
        name: host
        required: false
        schema:
          type: string
        style: form
      - description: The ACL operation.
        explode: true
        in: query
        name: operation
        required: false
        schema:
          $ref: '#/components/schemas/AclOperation'
        style: form
      - description: The ACL permission.
        explode: true
        in: query
        name: permission
        required: false
        schema:
          $ref: '#/components/schemas/AclPermission'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaAclList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?principal=User%3Aalice
                data:
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=User%3Aalice&host=*&operation=ALL&permission=ALLOW
                  cluster_id: cluster-1
                  resource_type: TOPIC
                  resource_name: topic-
                  pattern_type: PREFIXED
                  principal: User:alice
                  host: '*'
                  operation: ALL
                  permission: ALLOW
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=kafka-cluster&pattern_type=LITERAL&principal=User%3Aalice&host=*&operation=DESCRIBE&permission=DENY
                  cluster_id: cluster-1
                  resource_type: CLUSTER
                  resource_name: kafka-cluster
                  pattern_type: LITERAL
                  principal: User:alice
                  host: '*'
                  operation: DESCRIBE
                  permission: DENY
              schema:
                $ref: '#/components/schemas/AclDataList'
          description: The list of ACLs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List ACLs
      tags:
      - ACL (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create an ACL.
      operationId: createKafkaAcls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateAclRequest'
      responses:
        "201":
          description: Created
        "400":
          content:
            application/json:
              examples:
                create_acls_cluster_name_invalid:
                  description: Thrown when creating an ACL for a CLUSTER resource
                    specifying the wrong resource name.
                  value:
                    error_code: 40002
                    message: The only valid name for the CLUSTER resource is kafka-cluster"
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create an ACL
      tags:
      - ACL (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"resource_type":"UNKNOWN","resource_name":"string","pattern_type":"string","principal":"string","host":"string","operation":"string","permission":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"resource_type\\\":\\\"UNKNOWN\\\
          \",\\\"resource_name\\\":\\\"string\\\",\\\"pattern_type\\\":\\\"string\\\
          \",\\\"principal\\\":\\\"string\\\",\\\"host\\\":\\\"string\\\",\\\"operation\\\
          \":\\\"string\\\",\\\"permission\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/acls", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/acls",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            resource_type: 'UNKNOWN',
            resource_name: 'string',
            pattern_type: 'string',
            principal: 'string',
            host: 'string',
            operation: 'string',
            permission: 'string'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/broker-configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return a list of dynamic cluster-wide broker configuration parameters for the specified Kafka
        cluster. Returns an empty list if there are no dynamic cluster-wide broker configuration parameters.
      operationId: listKafkaClusterConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaClusterConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
                  next: null
                data:
                - kind: KafkaClusterConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/max.connections
                    resource_name: crn:///kafka=cluster-1/broker-config=max.connections
                  cluster_id: cluster-1
                  config_type: BROKER
                  name: max.connections
                  value: "1000"
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  synonyms:
                  - name: max.connections
                    value: "1000"
                    source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  - name: max.connections
                    value: "2147483647"
                    source: DEFAULT_CONFIG
                - kind: KafkaClusterConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                    resource_name: crn:///kafka=cluster-1/broker-config=compression.type
                  cluster_id: cluster-1
                  config_type: BROKER
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/ClusterConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Dynamic Broker Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/broker-configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/broker-configs:alter:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Update or delete a set of dynamic cluster-wide broker configuration parameters.
      operationId: updateKafkaClusterConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AlterClusterConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Batch Alter Dynamic Broker Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"\
          validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url,\
          \ payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/broker-configs:alter", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs:alter",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            data: [{name: 'string', value: 'string', operation: 'string'}],
            validate_only: true
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/broker-configs/{name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Reset the configuration parameter specified by ``name`` to its
        default value by deleting a dynamic cluster-wide configuration.
      operationId: deleteKafkaClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Reset Dynamic Broker Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the dynamic cluster-wide broker configuration parameter specified by ``name``.
      operationId: getKafkaClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaClusterConfig
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                  resource_name: crn:///kafka=cluster-1/broker-config=compression.type
                cluster_id: cluster-1
                config_type: BROKER
                name: compression.type
                value: gzip
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
                synonyms:
                - name: compression.type
                  value: gzip
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                - name: compression.type
                  value: producer
                  source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/ClusterConfigData'
          description: The cluster configuration parameter.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Dynamic Broker Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Update the dynamic cluster-wide broker configuration parameter specified by ``name``.
      operationId: updateKafkaClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateClusterConfigRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update Dynamic Broker Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"value":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
            .put(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\
          \n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"value\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({value: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/consumer-groups:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of consumer groups that belong to the specified
        Kafka cluster.
      operationId: listKafkaConsumerGroups
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroupList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
                  next: null
                data:
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
                  state: STABLE
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-2
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.StickyAssignor
                  state: PREPARING_REBALANCE
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/lag-summary
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-3
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-3
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.RangeAssignor
                  state: DEAD
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/lag-summary
              schema:
                $ref: '#/components/schemas/ConsumerGroupDataList'
          description: The list of consumer groups.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Consumer Groups
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the consumer group specified by the ``consumer_group_id``.
      operationId: getKafkaConsumerGroup
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroup
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                is_simple: false
                partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
                state: STABLE
                coordinator:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                consumers:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                lag_summary:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
              schema:
                $ref: '#/components/schemas/ConsumerGroupData'
          description: The consumer group.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Consumer Group
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return a list of consumers that belong to the specified consumer
        group.
      operationId: listKafkaConsumers
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                  next: null
                data:
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-1
                  instance_id: consumer-instance-1
                  client_id: client-1
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
              schema:
                $ref: '#/components/schemas/ConsumerDataList'
          description: The list of consumers.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Consumers
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lag-summary:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Return the maximum and total lag of the consumers belonging to the
        specified consumer group.
      operationId: getKafkaConsumerGroupLagSummary
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroupLagSummary
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
                  resource_name: crn:///kafka=cluster-1/consumer-groups=consumer-group-1/lag-summary
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                max_lag_consumer_id: consumer-1
                max_lag_instance_id: consumer-instance-1
                max_lag_client_id: client-1
                max_lag_topic_name: topic-1
                max_lag_partition_id: 1
                max_lag: 100
                total_lag: 110
                max_lag_consumer:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                max_lag_partition:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              schema:
                $ref: '#/components/schemas/ConsumerGroupLagSummaryData'
          description: The max and total consumer lag in a consumer group.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Consumer Group Lag Summary
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Return a list of consumer lags of the consumers belonging to the
        specified consumer group.
      operationId: listKafkaConsumerLags
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerLagList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags
                  next: null
                data:
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 1
                  consumer_id: consumer-1
                  instance_id: consumer-instance-1
                  client_id: client-1
                  current_offset: 1
                  log_end_offset: 101
                  lag: 100
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 2
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  current_offset: 1
                  log_end_offset: 11
                  lag: 10
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/3
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=3
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 3
                  consumer_id: consumer-3
                  instance_id: consumer-instance-3
                  client_id: client-3
                  current_offset: 1
                  log_end_offset: 1
                  lag: 0
              schema:
                $ref: '#/components/schemas/ConsumerLagDataList'
          description: The list of consumer lags.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Consumer Lags
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags/{topic_name}/partitions/{partition_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Return the consumer lag on a partition with the given `partition_id`.
      operationId: getKafkaConsumerLag
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The partition ID.
        example: 0
        explode: false
        in: path
        name: partition_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerLag
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                topic_name: topic-1
                partition_id: 1
                consumer_id: consumer-1
                instance_id: consumer-instance-1
                client_id: client-1
                current_offset: 1
                log_end_offset: 101
                lag: 100
              schema:
                $ref: '#/components/schemas/ConsumerLagData'
          description: The consumer lag.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Consumer Lag
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers/{consumer_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the consumer specified by the ``consumer_id``.
      operationId: getKafkaConsumer
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer ID.
        example: consumer-1
        explode: false
        in: path
        name: consumer_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumer
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                consumer_id: consumer-1
                instance_id: consumer-instance-1
                client_id: client-1
                assignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
              schema:
                $ref: '#/components/schemas/ConsumerData'
          description: The consumer.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Consumer
      tags:
      - Consumer Group (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of topics that belong to the specified Kafka cluster.
      operationId: listKafkaTopics
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
                  next: null
                data:
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                    resource_name: crn:///kafka=cluster-1/topic=topic-1
                  cluster_id: cluster-1
                  topic_name: topic-1
                  is_internal: false
                  replication_factor: 3
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2
                    resource_name: crn:///kafka=cluster-1/topic=topic-2
                  cluster_id: cluster-1
                  topic_name: topic-2
                  is_internal: true
                  replication_factor: 4
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/-/reassignments
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3
                    resource_name: crn:///kafka=cluster-1/topic=topic-3
                  cluster_id: cluster-1
                  topic_name: topic-3
                  is_internal: false
                  replication_factor: 5
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicDataList'
          description: The list of topics.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Topics
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create a topic.
        Also supports a dry-run mode that only validates whether the topic creation would succeed
        if the ``validate_only`` request property is explicitly specified and set to true. Note that
        when dry-run mode is being used the response status would be 200 OK instead of 201 Created.
      operationId: createKafkaTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateTopicRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X
                  resource_name: crn:///kafka=cluster-1/topic=topic-X
                cluster_id: cluster-1
                topic_name: topic-X
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The created topic.
        "201":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X
                  resource_name: crn:///kafka=cluster-1/topic=topic-X
                cluster_id: cluster-1
                topic_name: topic-X
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The created topic.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                create_topic_replication_factor_too_large:
                  description: Thrown when trying to create a topic with a replication
                    factor larger than the number of brokers.
                  value:
                    error_code: 40002
                    message: 'Replication factor: 2 larger than available brokers:
                      1.'
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create Topic
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"topic_name":"string","partitions_count":0,"replication_factor":0,"configs":[{"name":"string","value":"string"}],"validate_only":true}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"topic_name\\\":\\\"string\\\"\
          ,\\\"partitions_count\\\":0,\\\"replication_factor\\\":0,\\\"configs\\\"\
          :[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"validate_only\\\
          \":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\t\
          req.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres,\
          \ _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _\
          \ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/topics", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            topic_name: 'string',
            partitions_count: 0,
            replication_factor: 0,
            configs: [{name: 'string', value: 'string'}],
            validate_only: true
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete the topic with the given `topic_name`.
      operationId: deleteKafkaTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete Topic
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/topics/topic-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the topic with the given `topic_name`.
      operationId: getKafkaTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: Specify if authorized operations should be included in the response.
        explode: true
        in: query
        name: include_authorized_operations
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                  resource_name: crn:///kafka=cluster-1/topic=topic-1
                cluster_id: cluster-1
                topic_name: topic-1
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The topic.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Topic
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Increase the number of partitions for a topic.
      operationId: updatePartitionCountKafkaTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionCountRequestData'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                  resource_name: crn:///kafka=cluster-1/topic=topic-1
                cluster_id: cluster-1
                topic_name: topic-1
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The topic.
        "400":
          content:
            application/json:
              examples:
                topic_update_partitions_invalid:
                  description: Thrown when trying to update the number of partitions
                    incorrectly.
                  value:
                    error_code: 40002
                    message: Topic already has 1 partitions.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update Partition Count
      tags:
      - Topic (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"partitions_count":0}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"partitions_count\":0}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"partitions_count\\\":0}\")\n\n\
          \treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"partitions_count\":0}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/kafka/v3/clusters/cluster-1/topics/topic-1", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({partitions_count: 0}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"partitions_count\":0}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"partitions_count\":0}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of configuration parameters that belong to the specified topic.
      operationId: listKafkaTopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Topic Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs:alter:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Update or delete a set of topic configuration parameters.
        Also supports a dry-run mode that only validates whether the operation would succeed if the
        ``validate_only`` request property is explicitly specified and set to true.
      operationId: updateKafkaTopicConfigBatch
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AlterTopicConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Batch Alter Topic Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"\
          validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url,\
          \ payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            data: [{name: 'string', value: 'string', operation: 'string'}],
            validate_only: true
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs/{name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Reset the configuration parameter with given `name` to its default value.
      operationId: deleteKafkaTopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Reset Topic Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the configuration parameter with the given `name`.
      operationId: getKafkaTopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfig
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/compression.type
                  resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                cluster_id: cluster-1
                topic_name: topic-1
                name: compression.type
                value: gzip
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_TOPIC_CONFIG
                synonyms:
                - name: compression.type
                  value: gzip
                  source: DYNAMIC_TOPIC_CONFIG
                - name: compression.type
                  value: producer
                  source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigData'
          description: The topic configuration parameter.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Topic Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Update the configuration parameter with given `name`.
      operationId: updateKafkaTopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateTopicConfigRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Update Topic Config
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"value":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
            .put(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\
          \n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"value\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({value: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/partitions:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of partitions that belong to the specified topic.
      operationId: listKafkaPartitions
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPartitionList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                  next: null
                data:
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 1
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 2
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/2
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 3
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas/3
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
              schema:
                $ref: '#/components/schemas/PartitionDataList'
          description: The list of partitions.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List Partitions
      tags:
      - Partition (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/partitions/{partition_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the partition with the given `partition_id`.
      operationId: getKafkaPartition
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The partition ID.
        example: 0
        explode: false
        in: path
        name: partition_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPartition
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                  resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 1
                leader:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                replicas:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
                reassignment:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
              schema:
                $ref: '#/components/schemas/PartitionData'
          description: The partition
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Get Partition
      tags:
      - Partition (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/-/configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of configuration parameters for all topics hosted by the specified
        cluster.
      operationId: listKafkaAllTopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List All Topic Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/-/configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/-/configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/records:
    post:
      description: "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\
        \nProduce records to the given topic, returning delivery reports for each\n\
        \            record produced. This API can be used in streaming mode by setting\
        \ \"Transfer-Encoding:\n            chunked\" header. For as long as the connection\
        \ is kept open, the server will\n            keep accepting records. Records\
        \ are streamed to and from the server as Concatenated \n            JSON.\
        \ For each record sent to the server, the server will\n            asynchronously\
        \ send back a delivery report, in the same order, each with its own\n    \
        \        error_code. An error_code of 200 indicates success. The HTTP status\
        \ code will be HTTP \n            200 OK as long as the connection is successfully\
        \ established. To identify records\n            that have encountered an error,\
        \ check the error_code of each delivery report."
      operationId: produceRecord
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ProduceRequest'
      responses:
        "200":
          content:
            application/json:
              examples:
                produce_record_success:
                  description: The record was successfully produced to the topic.
                  value:
                    error_code: 200
                    cluster_id: cluster-1
                    topic_name: topic-1
                    partition_id: 1
                    offset: 0
                    timestamp: 2021-02-05T19:14:42Z
                    key:
                      type: BINARY
                      size: 7
                    value:
                      type: JSON
                      size: 15
                produce_record_bad_binary_data:
                  description: Thrown when sending a BINARY value which is not a base64-encoded
                    string.
                  value:
                    error_code: 400
                    message: 'Bad Request: data=1 is not a base64 string.'
              schema:
                $ref: '#/components/schemas/ProduceResponse'
          description: |-
            The response containing a delivery report for a record produced to a topic. In streaming mode,
            for each record sent, a separate delivery report will be returned, in the same order,
            each with its own error_code.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "403":
          content:
            application/json:
              examples:
                kafka_authorization_failed:
                  description: Thrown when the caller is not authorized to perform
                    the underlying operation.
                  value:
                    error_code: 40301
                    message: Request is not authorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authorization error. Kafka authorization
            failures will contain error code 40301 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "422":
          content:
            application/json:
              examples:
                produce_record_empty_request_body:
                  description: Thrown when the request body is empty.
                  value:
                    error_code: 422
                    message: Payload error. Request body is empty. Data is required.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Produce Records
      tags:
      - Records (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"partition_id":0,"headers":[{"name":"string","value":"string"}],"key":{"type":"string","data":null},"value":{"type":"string","data":null},"timestamp":"2019-08-24T14:15:22Z"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"partition_id\\\":0,\\\"headers\\\
          \":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"key\\\
          \":{\\\"type\\\":\\\"string\\\",\\\"data\\\":null},\\\"value\\\":{\\\"type\\\
          \":\\\"string\\\",\\\"data\\\":null},\\\"timestamp\\\":\\\"2019-08-24T14:15:22Z\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/topics/topic-1/records", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/records",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            partition_id: 0,
            headers: [{name: 'string', value: 'string'}],
            key: {type: 'string', data: null},
            value: {type: 'string', data: null},
            timestamp: '2019-08-24T14:15:22Z'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        ``link_id`` in ``ListLinksResponseData`` is deprecated and may be removed in a future release. Use the new ``cluster_link_id`` instead.
      operationId: listKafkaLinks
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links
                  next: null
                data:
                - kind: KafkaLinkData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-1
                    resource_name: null
                  remote_cluster_id: src-cluster-id
                  destination_cluster_id: null
                  link_name: my-new-link-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                  cluster_link_id: eEBkTffYSESld6EO898x3w
                  topic_names:
                  - topic-sb-1
                  - topic-sb-2
                  link_state: ACTIVE
                - kind: KafkaLinkData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-2
                    resource_name: null
                  remote_cluster_id: src-cluster-id
                  destination_cluster_id: null
                  link_name: my-new-link-2
                  link_id: f749116e-f847-4bd2-b1f6-5c4e518a0678
                  cluster_link_id: 90kRbvhHS9Kx9lxOUYoGeA
                  topic_names:
                  - topic-db-1
                  - topic-db-2
                  link_state: UNAVAILABLE
                  link_error: AUTHENTICATION_ERROR
                  link_error_message: Please check your api key and secret
                - kind: KafkaLinkData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-3
                    resource_name: null
                  remote_cluster_id: null
                  destination_cluster_id: dest-cluster-id
                  link_name: my-new-link-3
                  link_id: 9cd1711e-a4ef-4390-a35e-dfd758d97a82
                  cluster_link_id: nNFxHqTvQ5CjXt_XWNl6gg
                  topic_names: []
                  link_state: ACTIVE
              schema:
                $ref: '#/components/schemas/ListLinksResponseDataList'
          description: A list of link names and properties
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List all cluster links in the dest cluster
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: createKafkaLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: true
        in: query
        name: link_name
        required: true
        schema:
          type: string
        style: form
      - description: 'To validate the action can be performed successfully or not.
          Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      - description: 'To synchronously validate that the source cluster ID is expected
          and the dest cluster has the permission to read topics in the source cluster.
          Default: true'
        example: false
        explode: true
        in: query
        name: validate_link
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/CreateLinkRequest'
      responses:
        "204":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"source_cluster_id":"string","destination_cluster_id":"string","remote_cluster_id":"string","cluster_link_id":"string","configs":[{"name":"name","value":"value"}]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"remote_cluster_id\":\"string\",\"cluster_link_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"source_cluster_id\\\":\\\"string\\\
          \",\\\"destination_cluster_id\\\":\\\"string\\\",\\\"remote_cluster_id\\\
          \":\\\"string\\\",\\\"cluster_link_id\\\":\\\"string\\\",\\\"configs\\\"\
          :[{\\\"name\\\":\\\"name\\\",\\\"value\\\":\\\"value\\\"}]}\")\n\n\treq,\
          \ _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"remote_cluster_id\":\"string\",\"cluster_link_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            source_cluster_id: 'string',
            destination_cluster_id: 'string',
            remote_cluster_id: 'string',
            cluster_link_id: 'string',
            configs: [{name: 'name', value: 'value'}]
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"remote_cluster_id\":\"string\",\"cluster_link_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"remote_cluster_id\":\"string\",\"cluster_link_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}:
    delete:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: deleteKafkaLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'Force the action. Default: false'
        example: false
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      - description: 'To validate the action can be performed successfully or not.
          Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Delete the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/links/link-sb1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        ``link_id`` in ``ListLinksResponseData`` is deprecated and may be removed in a future release. Use the new ``cluster_link_id`` instead.
      operationId: getKafkaLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                link_at_destination_cluster:
                  description: Link at destination cluster
                  value:
                    kind: KafkaLinkData
                    metadata:
                      self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                    resource_name: null
                    remote_cluster_id: src-cluster-id
                    destination_cluster_id: null
                    link_name: my-new-link-1
                    link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                    cluster_link_id: eEBkTffYSESld6EO898x3w
                    topic_names:
                    - topic-db-1
                    - topic-db-2
                link_at_source_cluster:
                  description: Link at source cluster
                  value:
                    kind: KafkaLinkData
                    metadata:
                      self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                    resource_name: null
                    remote_cluster_id: null
                    destination_cluster_id: dst-cluster-id
                    link_name: my-new-link-1
                    link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                    cluster_link_id: eEBkTffYSESld6EO898x3w
                    topic_names: []
              schema:
                $ref: '#/components/schemas/ListLinksResponseData'
          description: Single link name and properties
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Describe the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/default-configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List the default configuration parameters used if the topic were to be newly created.
      operationId: listKafkaDefaultTopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List New Topic Default Configs
      tags:
      - Configs (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs:
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: listKafkaLinkConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkConfigDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/v-0Ce-CkTyKQol9v46LaCQ/links/link-nb-1/configs
                  next: null
                data:
                - kind: KafkaLinkConfigData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                    resource_name: null
                  cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                  name: consumer.offset.sync.ms
                  value: "3825940"
                  default: false
                  read_only: false
                  sensitive: false
                  source: DYNAMIC_CLUSTER_LINK_CONFIG
                  synonyms:
                  - cosm
                  link_name: link-db-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                - kind: KafkaLinkConfigData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                    resource_name: null
                  cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                  name: acl.sync.ms
                  value: "5000"
                  default: false
                  read_only: false
                  sensitive: false
                  source: DYNAMIC_CLUSTER_LINK_CONFIG
                  synonyms:
                  - asm
                  link_name: link-db-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
              schema:
                $ref: '#/components/schemas/ListLinkConfigsResponseDataList'
          description: Config name and value
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List all configs of the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs/{config_name}:
    delete:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: deleteKafkaLinkConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Reset the given config to default value
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: getKafkaLinkConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkConfigData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                  resource_name: null
                cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                name: consumer.offset.sync.ms
                value: "3825940"
                default: false
                read_only: false
                sensitive: false
                source: DYNAMIC_CLUSTER_LINK_CONFIG
                synonyms:
                - cosm
                link_name: link-db-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                topics:
                - topic-db-1
                - topic-db-2
              schema:
                $ref: '#/components/schemas/ListLinkConfigsResponseData'
          description: Config name and value
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Describe the config under the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    put:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaLinkConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateLinkConfigRequest'
      responses:
        "204":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Alter the config under the cluster link
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"value":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
            .put(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\
          \n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"value\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({value: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs:alter:
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Batch Alter Cluster Link Configs
      operationId: updateKafkaLinkConfigBatch
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate the action can be performed successfully or not.
          Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterLinkConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Batch Alter Cluster Link Configs
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PUT \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter")
            .put(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\
          \",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"\
          validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url,\
          \ payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("PUT", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PUT",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            data: [{name: 'string', value: 'string', operation: 'string'}],
            validate_only: true
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List all mirror topics under the link
      operationId: listKafkaMirrorTopicsUnderLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The status of the mirror topic. If not specified, all mirror
          topics will be returned.
        example: ACTIVE
        explode: true
        in: query
        name: mirror_status
        required: false
        schema:
          $ref: '#/components/schemas/MirrorTopicStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                  next: null
                data:
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-1
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-1
                  source_topic_name: topic-1
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_status: ACTIVE
                  state_time_ms: 1612550939300
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-2
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  source_topic_name: topic-2
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_status: STOPPED
                  state_time_ms: 1612551353640
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
          description: Metadata of mirror topics
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create a topic in the destination cluster mirroring a topic in
        the source cluster
      operationId: createKafkaMirrorTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateMirrorTopicRequest'
      responses:
        "204":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Create a mirror topic
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"source_topic_name":"string","mirror_topic_name":"string","replication_factor":0,"configs":[{"name":"name","value":"value"}]}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"source_topic_name\\\":\\\"string\\\
          \",\\\"mirror_topic_name\\\":\\\"string\\\",\\\"replication_factor\\\":0,\\\
          \"configs\\\":[{\\\"name\\\":\\\"name\\\",\\\"value\\\":\\\"value\\\"}]}\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            source_topic_name: 'string',
            mirror_topic_name: 'string',
            replication_factor: 0,
            configs: [{name: 'name', value: 'value'}]
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/-/mirrors:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List all mirror topics in the cluster
      operationId: listKafkaMirrorTopics
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The status of the mirror topic. If not specified, all mirror
          topics will be returned.
        example: ACTIVE
        explode: true
        in: query
        name: mirror_status
        required: false
        schema:
          $ref: '#/components/schemas/MirrorTopicStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                  next: null
                data:
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-1
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-1
                  source_topic_name: topic-1
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_status: ACTIVE
                  state_time_ms: 1612550939300
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-2
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  source_topic_name: topic-2
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_status: STOPPED
                  state_time_ms: 1612551353640
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
          description: Metadata of mirror topics
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: List mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/-/mirrors", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/-/mirrors",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors/{mirror_topic_name}:
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: readKafkaMirrorTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: Cluster Linking mirror topic name
        example: topic-1
        explode: false
        in: path
        name: mirror_topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors/topic-1
                  resource_name: crn:///kafka=cluster-1
                link_name: link-sb-1
                mirror_topic_name: topic-1
                source_topic_name: topic-1
                num_partitions: 3
                mirror_lags:
                - partition: 0
                  lag: 0
                  last_source_fetch_offset: 0
                - partition: 1
                  lag: 10000
                  last_source_fetch_offset: 1000
                - partition: 2
                  lag: 40000
                  last_source_fetch_offset: 12030
                mirror_status: ACTIVE
                state_time_ms: 1612550939300
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseData'
          description: Metadata of the mirror topic
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Describe the mirror topic
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:promote:
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaMirrorTopicsPromote
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate the action can be performed successfully or not.
          Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Promote the mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\
          \"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ :=\
          \ http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:failover:
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaMirrorTopicsFailover
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate the action can be performed successfully or not.
          Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Failover the mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\
          \"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ :=\
          \ http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:pause:
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaMirrorTopicsPause
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate the action can be performed successfully or not.
          Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Pause the mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\
          \"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ :=\
          \ http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:resume:
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaMirrorTopicsResume
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate the action can be performed successfully or not.
          Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                bad_request_cannot_deserialize:
                  description: Thrown when trying to deserialize an integer from non-integer
                    data.
                  value:
                    error_code: 400
                    message: 'Cannot deserialize value of type `java.lang.Integer`
                      from String "A": not a valid `java.lang.Integer` value'
                unsupported_version_exception:
                  description: Thrown when the version of this API is not supported
                    in the underlying Kafka cluster.
                  value:
                    error_code: 40035
                    message: The version of this API is not supported in the underlying
                      Kafka cluster.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      security:
      - api-key: []
      - confluent-sts-access-token: []
      summary: Resume the mirror topics
      tags:
      - Cluster Linking (v3)
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
          Request request = new Request.Builder()
            .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume")
            .post(body)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\
          \"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ :=\
          \ http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

          payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "pkc-00000.region.provider.confluent.cloud",
            "port": null,
            "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume");
          var request = new RestRequest(Method.POST);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
components:
  parameters:
    AclHost:
      description: The ACL host.
      explode: true
      in: query
      name: host
      required: false
      schema:
        type: string
      style: form
    AclOperation:
      description: The ACL operation.
      explode: true
      in: query
      name: operation
      required: false
      schema:
        $ref: '#/components/schemas/AclOperation'
      style: form
    AclOperationRequired:
      description: The ACL operation.
      explode: true
      in: query
      name: operation
      required: true
      schema:
        $ref: '#/components/schemas/AclOperation'
      style: form
    AclPatternType:
      description: The ACL pattern type.
      explode: true
      in: query
      name: pattern_type
      required: false
      schema:
        $ref: '#/components/schemas/AclPatternType'
      style: form
    AclPatternTypeRequired:
      description: The ACL pattern type.
      explode: true
      in: query
      name: pattern_type
      required: true
      schema:
        $ref: '#/components/schemas/AclPatternType'
      style: form
    AclPermission:
      description: The ACL permission.
      explode: true
      in: query
      name: permission
      required: false
      schema:
        $ref: '#/components/schemas/AclPermission'
      style: form
    AclPermissionRequired:
      description: The ACL permission.
      explode: true
      in: query
      name: permission
      required: true
      schema:
        $ref: '#/components/schemas/AclPermission'
      style: form
    AclPrincipal:
      description: The ACL principal. This is the Service Account name or user name.
      explode: true
      in: query
      name: principal
      required: false
      schema:
        type: string
      style: form
    AclResourceName:
      description: The ACL resource name.
      explode: true
      in: query
      name: resource_name
      required: false
      schema:
        type: string
      style: form
    AclResourceType:
      description: The ACL resource type.
      explode: true
      in: query
      name: resource_type
      required: false
      schema:
        $ref: '#/components/schemas/AclResourceType'
      style: form
    AclResourceTypeRequired:
      description: The ACL resource type.
      explode: true
      in: query
      name: resource_type
      required: true
      schema:
        $ref: '#/components/schemas/AclResourceType'
      style: form
    BrokerId:
      description: The Kafka broker ID.
      example: 1
      explode: false
      in: path
      name: broker_id
      required: true
      schema:
        type: integer
      style: simple
    ClusterId:
      description: The Kafka cluster ID.
      example: cluster-1
      explode: false
      in: path
      name: cluster_id
      required: true
      schema:
        type: string
      style: simple
    ConfigName:
      description: The configuration parameter name.
      example: compression.type
      explode: false
      in: path
      name: name
      required: true
      schema:
        type: string
      style: simple
    ConsumerGroupId:
      description: The consumer group ID.
      example: consumer-group-1
      explode: false
      in: path
      name: consumer_group_id
      required: true
      schema:
        type: string
      style: simple
    ConsumerId:
      description: The consumer ID.
      example: consumer-1
      explode: false
      in: path
      name: consumer_id
      required: true
      schema:
        type: string
      style: simple
    IncludeAuthorizedOperations:
      description: Specify if authorized operations should be included in the response.
      explode: true
      in: query
      name: include_authorized_operations
      required: false
      schema:
        type: boolean
      style: form
    PartitionId:
      description: The partition ID.
      example: 0
      explode: false
      in: path
      name: partition_id
      required: true
      schema:
        type: integer
      style: simple
    TopicName:
      description: The topic name.
      example: topic-1
      explode: false
      in: path
      name: topic_name
      required: true
      schema:
        type: string
      style: simple
    BrokerTaskType:
      description: The Kafka broker task type.
      example: remove-broker
      explode: false
      in: path
      name: task_type
      required: true
      schema:
        $ref: '#/components/schemas/BrokerTaskType'
      style: simple
    ShouldShutdown:
      description: 'To shutdown the broker or not, Default: true'
      example: true
      explode: true
      in: query
      name: should_shutdown
      required: false
      schema:
        type: boolean
      style: form
    ValidateOnly:
      description: 'To validate the action can be performed successfully or not. Default:
        false'
      example: false
      explode: true
      in: query
      name: validate_only
      required: false
      schema:
        type: boolean
      style: form
    ValidateLink:
      description: 'To synchronously validate that the source cluster ID is expected
        and the dest cluster has the permission to read topics in the source cluster.
        Default: true'
      example: false
      explode: true
      in: query
      name: validate_link
      required: false
      schema:
        type: boolean
      style: form
    Force:
      description: 'Force the action. Default: false'
      example: false
      explode: true
      in: query
      name: force
      required: false
      schema:
        type: boolean
      style: form
    LinkName:
      description: The link name
      example: link-sb1
      explode: false
      in: path
      name: link_name
      required: true
      schema:
        type: string
      style: simple
    LinkConfigName:
      description: The link config name
      example: consumer.offset.sync.enable
      explode: false
      in: path
      name: config_name
      required: true
      schema:
        type: string
      style: simple
    MirrorTopicStatus:
      description: The status of the mirror topic. If not specified, all mirror topics
        will be returned.
      example: ACTIVE
      explode: true
      in: query
      name: mirror_status
      required: false
      schema:
        $ref: '#/components/schemas/MirrorTopicStatus'
      style: form
    MirrorTopicName:
      description: Cluster Linking mirror topic name
      example: topic-1
      explode: false
      in: path
      name: mirror_topic_name
      required: true
      schema:
        type: string
      style: simple
    QueryParamLinkName:
      description: The link name
      example: link-sb1
      explode: true
      in: query
      name: link_name
      required: true
      schema:
        type: string
      style: form
  requestBodies:
    AlterBrokerConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: max.connections
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter broker configuration parameter batch request.
    AlterClusterConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: max.connections
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter cluster configuration parameter batch request.
    AlterTopicConfigBatchRequest:
      content:
        application/json:
          examples:
            batch_alter_topic_configs:
              value:
                data:
                - name: cleanup.policy
                  operation: DELETE
                - name: compression.type
                  value: gzip
            validate_only_batch_alter_topic_configs:
              value:
                data:
                - name: cleanup.policy
                  operation: DELETE
                - name: compression.type
                  value: gzip
                validate_only: true
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter topic configuration parameter batch request.
    CreateAclRequest:
      content:
        application/json:
          example:
            resource_type: CLUSTER
            resource_name: kafka-cluster
            pattern_type: LITERAL
            principal: principalType:principalName
            host: '*'
            operation: DESCRIBE
            permission: DENY
          schema:
            $ref: '#/components/schemas/CreateAclRequestData'
      description: The ACL creation request.
    BatchCreateAclRequest:
      content:
        application/json:
          example:
            data:
            - resource_type: CLUSTER
              resource_name: kafka-cluster
              pattern_type: LITERAL
              principal: principalType:principalName
              host: '*'
              operation: DESCRIBE
              permission: DENY
            - resource_type: TOPIC
              resource_name: kafka-cluster
              pattern_type: LITERAL
              principal: principalType:principalName
              host: '*'
              operation: READ
              permission: ALLOW
          schema:
            $ref: '#/components/schemas/CreateAclRequestDataList'
      description: The batch ACL creation request.
    CreateTopicRequest:
      content:
        application/json:
          examples:
            uniform_replication:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                configs:
                - name: cleanup.policy
                  value: compact
                - name: compression.type
                  value: gzip
            dry_run_create_topic:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                validate_only: true
          schema:
            $ref: '#/components/schemas/CreateTopicRequestData'
      description: The topic creation request. Note that Confluent Cloud allows only
        specific replication factor values. Because of that the replication factor
        field should either be omitted or it should use one of the allowed values
        (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).
    ProduceRequest:
      content:
        application/json:
          examples:
            binary_and_json:
              description: If using type, one of "BINARY", "JSON" or "STRING" is required.
              value:
                partition_id: 1
                headers:
                - name: Header-1
                  value: SGVhZGVyLTE=
                - name: Header-2
                  value: SGVhZGVyLTI=
                key:
                  type: BINARY
                  data: Zm9vYmFy
                value:
                  type: JSON
                  data:
                    foo: bar
                timestamp: 2021-02-05T19:14:42Z
            string:
              description: If using type, one of "BINARY", "JSON" or "STRING" is required.
              value:
                value:
                  type: STRING
                  data: My message
            empty_value:
              description: key or value can be omitted entirely.
              value:
                key:
                  data: 1000
          schema:
            $ref: '#/components/schemas/ProduceRequest'
      description: A single record to be produced to Kafka. To produce multiple records
        in the same request, simply concatenate the records. The delivery reports
        are concatenated in the same order as the records are sent.
    UpdateBrokerConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The broker configuration parameter update request.
    UpdateClusterConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The cluster configuration parameter update request.
    UpdateTopicConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The topic configuration parameter update request.
    CreateLinkRequest:
      content:
        application/json:
          examples:
            destination_initiated_link:
              description: Create a destination initiated cluster link
              value:
                remote_cluster_id: cluster-1
                configs:
                - name: bootstrap.servers
                  value: cluster-1-bootstrap-server
                - name: acl.sync.enable
                  value: "false"
                - name: consumer.offset.sync.ms
                  value: "30000"
            source_initiated_link_at_source_cluster:
              description: Create a source initiated cluster link at source cluster
              value:
                destination_cluster_id: cluster-2
                configs:
                - name: bootstrap.servers
                  value: cluster-2-bootstrap-server
                - name: link.mode
                  value: SOURCE
            source_initiated_link_at_destination_cluster:
              description: Create a source initiated cluster link at destination cluster
              value:
                remote_cluster_id: cluster-1
                configs:
                - name: bootstrap.servers
                  value: cluster-1-bootstrap-server
                - name: link.mode
                  value: DESTINATION
                - name: connection.mode
                  value: INBOUND
                - name: acl.sync.enable
                  value: "false"
            bidirectional_link_east:
              description: Create a bidirectional cluster link in east
              value:
                remote_cluster_id: cluster-west
                configs:
                - name: bootstrap.servers
                  value: cluster-west-bootstrap-server
                - name: link.mode
                  value: BIDIRECTIONAL
                - name: cluster.link.prefix
                  value: west.
            bidirectional_link_west:
              description: Create a bidirectional cluster link in west
              value:
                remote_cluster_id: cluster-east
                cluster_link_id: eEBkTffYSESld6EO898x3w
                configs:
                - name: bootstrap.servers
                  value: cluster-east-bootstrap-server
                - name: link.mode
                  value: BIDIRECTIONAL
                - name: cluster.link.prefix
                  value: east.
          schema:
            $ref: '#/components/schemas/CreateLinkRequestData'
      description: Create a cluster link
    UpdateLinkConfigRequest:
      content:
        application/json:
          example:
            value: "300000"
          schema:
            $ref: '#/components/schemas/UpdateLinkConfigRequestData'
      description: Link config value to update
    AlterLinkConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: cleanup.policy
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
    CreateMirrorTopicRequest:
      content:
        application/json:
          examples:
            generic_example:
              description: Generic example of creating a mirror topic
              value:
                source_topic_name: topic-1
                configs:
                - name: unclean.leader.election.enable
                  value: "true"
                replication_factor: 1
            example_with_mirror_topic_name:
              description: Example using optional mirror_topic_name flag
              value:
                source_topic_name: topic-1
                mirror_topic_name: link1_topic-1
                configs:
                - name: unclean.leader.election.enable
                  value: "true"
                replication_factor: 3
          schema:
            $ref: '#/components/schemas/CreateMirrorTopicRequestData'
      description: Name and configs of the topics mirroring from and mirroring to.
        Note that Confluent Cloud allows only specific replication factor values.
        Because of that the replication factor field should either be omitted or it
        should use one of the allowed values (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).
    AlterMirrorsRequest:
      content:
        application/json:
          examples:
            mirror_topic_names:
              description: Example using mirror topic names
              value:
                mirror_topic_names:
                - topic-1
                - topic-2
            mirror_topic_name_pattern:
              description: Example using mirror topic name pattern
              value:
                mirror_topic_name_pattern: .*
          schema:
            $ref: '#/components/schemas/AlterMirrorsRequestData'
      description: Mirror topics to be altered.
    RemoveBrokersRequest:
      content:
        application/json:
          example:
            broker_ids:
            - 1
            - 2
            - 3
          schema:
            $ref: '#/components/schemas/RemoveBrokersRequestData'
      description: Broker ids to remove
    BrokerReplicaExclusionBatchRequest:
      content:
        application/json:
          example:
            data:
            - broker_id: 1
              reason: The broker is to be removed.
            - broker_id: 2
              reason: The broker is to be removed.
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionBatchRequestData'
      description: Alter Broker Replica Exclusions.
  responses:
    CreateTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaTopic
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X
              resource_name: crn:///kafka=cluster-1/topic=topic-X
            cluster_id: cluster-1
            topic_name: topic-X
            is_internal: false
            replication_factor: 3
            partitions_count: 1
            partitions:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicData'
      description: The created topic.
    DeleteAclsResponse:
      content:
        application/json:
          example:
            data:
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=User%3Aalice&host=*&operation=ALL&permission=ALLOW
              cluster_id: cluster-1
              resource_type: TOPIC
              resource_name: topic-
              pattern_type: PREFIXED
              principal: User:alice
              host: '*'
              operation: ALL
              permission: ALLOW
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=kafka-cluster&pattern_type=LITERAL&principal=User%3Aalice&host=*&operation=DESCRIBE&permission=DENY
              cluster_id: cluster-1
              resource_type: CLUSTER
              resource_name: kafka-cluster
              pattern_type: LITERAL
              principal: User:alice
              host: '*'
              operation: DESCRIBE
              permission: DENY
          schema:
            $ref: '#/components/schemas/inline_response_200'
      description: The list of deleted ACLs.
    GetBrokerConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/compression.type
              resource_name: crn:///kafka=cluster-1/broker=1/config=compression.type
            cluster_id: cluster-1
            broker_id: 1
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_BROKER_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_BROKER_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/BrokerConfigData'
      description: The broker configuration parameter.
    GetBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaBroker
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              resource_name: crn:///kafka=cluster-1/broker=1
            cluster_id: cluster-1
            broker_id: 1
            host: localhost
            port: 9291
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
            partition_replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
          schema:
            $ref: '#/components/schemas/BrokerData'
      description: The broker.
    GetClusterConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
              resource_name: crn:///kafka=cluster-1/broker-config=compression.type
            cluster_id: cluster-1
            config_type: BROKER
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_DEFAULT_BROKER_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/ClusterConfigData'
      description: The cluster configuration parameter.
    GetClusterResponse:
      content:
        application/json:
          example:
            kind: KafkaCluster
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
              resource_name: crn:///kafka=cluster-1
            cluster_id: cluster-1
            controller:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            acls:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
            brokers:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
            broker_configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
            consumer_groups:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
            topics:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
          schema:
            $ref: '#/components/schemas/ClusterData'
      description: The Kafka cluster.
    GetConsumerAssignmentResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerAssignment
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=1/partition=1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            consumer_id: consumer-1
            topic_name: topic-1
            partition_id: 1
            partition:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
            lag:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
          schema:
            $ref: '#/components/schemas/ConsumerAssignmentData'
      description: The consumer group assignment.
    GetConsumerGroupResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroup
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            is_simple: false
            partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
            state: STABLE
            coordinator:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            consumers:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
            lag_summary:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
          schema:
            $ref: '#/components/schemas/ConsumerGroupData'
      description: The consumer group.
    GetConsumerGroupLagSummaryResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroupLagSummary
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
              resource_name: crn:///kafka=cluster-1/consumer-groups=consumer-group-1/lag-summary
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            max_lag_consumer_id: consumer-1
            max_lag_instance_id: consumer-instance-1
            max_lag_client_id: client-1
            max_lag_topic_name: topic-1
            max_lag_partition_id: 1
            max_lag: 100
            total_lag: 110
            max_lag_consumer:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
            max_lag_partition:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
          schema:
            $ref: '#/components/schemas/ConsumerGroupLagSummaryData'
      description: The max and total consumer lag in a consumer group.
    GetConsumerLagResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerLag
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            topic_name: topic-1
            partition_id: 1
            consumer_id: consumer-1
            instance_id: consumer-instance-1
            client_id: client-1
            current_offset: 1
            log_end_offset: 101
            lag: 100
          schema:
            $ref: '#/components/schemas/ConsumerLagData'
      description: The consumer lag.
    GetConsumerResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumer
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            consumer_id: consumer-1
            instance_id: consumer-instance-1
            client_id: client-1
            assignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
          schema:
            $ref: '#/components/schemas/ConsumerData'
      description: The consumer.
    GetPartitionResponse:
      content:
        application/json:
          example:
            kind: KafkaPartition
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            leader:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
            replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            reassignment:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
          schema:
            $ref: '#/components/schemas/PartitionData'
      description: The partition
    GetReassignmentResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignment
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            adding_replicas:
            - 1
            - 2
            removing_replicas:
            - 3
            replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentData'
      description: The ongoing replicas reassignments.
    GetReplicaResponse:
      content:
        application/json:
          example:
            kind: KafkaReplica
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=1
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            broker_id: 1
            is_leader: true
            is_in_sync: true
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/ReplicaData'
      description: The replica.
    GetTopicConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/compression.type
              resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
            cluster_id: cluster-1
            topic_name: topic-1
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_TOPIC_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_TOPIC_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/TopicConfigData'
      description: The topic configuration parameter.
    GetTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaTopic
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
              resource_name: crn:///kafka=cluster-1/topic=topic-1
            cluster_id: cluster-1
            topic_name: topic-1
            is_internal: false
            replication_factor: 3
            partitions_count: 1
            partitions:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicData'
      description: The topic.
    ListAllReassignmentsResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              next: null
            data:
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              adding_replicas:
              - 1
              - 2
              removing_replicas:
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-2/partition=2/reassignment
              cluster_id: cluster-1
              topic_name: topic-2
              partition_id: 2
              adding_replicas:
              - 1
              removing_replicas:
              - 2
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=3/reassignment
              cluster_id: cluster-1
              topic_name: topic-3
              partition_id: 3
              adding_replicas:
              - 3
              removing_replicas:
              - 1
              - 2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentDataList'
      description: The ongoing replicas reassignments.
    ListBrokerConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
              next: null
            data:
            - kind: KafkaBrokerConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/max.connections
                resource_name: crn:///kafka=cluster-1/broker=1/config=max.connections
              cluster_id: cluster-1
              broker_id: 1
              name: max.connections
              value: "1000"
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_BROKER_CONFIG
              synonyms:
              - name: max.connections
                value: "1000"
                source: DYNAMIC_BROKER_CONFIG
              - name: max.connections
                value: "2147483647"
                source: DEFAULT_CONFIG
            - kind: KafkaBrokerConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/compression.type
                resource_name: crn:///kafka=cluster-1/broker=1/config=compression.type
              cluster_id: cluster-1
              broker_id: 1
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_BROKER_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_BROKER_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/BrokerConfigDataList'
      description: The list of broker configs.
    ListBrokersResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
              next: null
            data:
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1
              cluster_id: cluster-1
              broker_id: 1
              host: localhost
              port: 9291
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
                resource_name: crn:///kafka=cluster-1/broker=2
              cluster_id: cluster-1
              broker_id: 2
              host: localhost
              port: 9292
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/partition-replicas
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
                resource_name: crn:///kafka=cluster-1/broker=3
              cluster_id: cluster-1
              broker_id: 3
              host: localhost
              port: 9293
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3/partition-replicas
          schema:
            $ref: '#/components/schemas/BrokerDataList'
      description: The list of brokers.
    ListClusterConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
              next: null
            data:
            - kind: KafkaClusterConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/max.connections
                resource_name: crn:///kafka=cluster-1/broker-config=max.connections
              cluster_id: cluster-1
              config_type: BROKER
              name: max.connections
              value: "1000"
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
              synonyms:
              - name: max.connections
                value: "1000"
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
              - name: max.connections
                value: "2147483647"
                source: DEFAULT_CONFIG
            - kind: KafkaClusterConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                resource_name: crn:///kafka=cluster-1/broker-config=compression.type
              cluster_id: cluster-1
              config_type: BROKER
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/ClusterConfigDataList'
      description: The list of cluster configs.
    ListClustersResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters
              next: null
            data:
            - kind: KafkaCluster
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
                resource_name: crn:///kafka=cluster-1
              cluster_id: cluster-1
              controller:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              acls:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
              brokers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
              broker_configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
              consumer_groups:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
              topics:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
          schema:
            $ref: '#/components/schemas/ClusterDataList'
      description: The list of Kafka clusters.
    ListConsumerAssignmentsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerAssignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
              next: null
            data:
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=1/partition=1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-1
              partition_id: 1
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-2/partitions/2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=2/partition=2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-2
              partition_id: 2
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-2/partitions/2
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-3/partitions/3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=3/partition=3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-3
              partition_id: 3
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-3/partitions/3
          schema:
            $ref: '#/components/schemas/ConsumerAssignmentDataList'
      description: The list of consumer group assignments.
    ListConsumerGroupsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroupList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
              next: null
            data:
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
              state: STABLE
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-2
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.StickyAssignor
              state: PREPARING_REBALANCE
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/lag-summary
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-3
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.RangeAssignor
              state: DEAD
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/lag-summary
          schema:
            $ref: '#/components/schemas/ConsumerGroupDataList'
      description: The list of consumer groups.
    ListConsumerLagsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerLagList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags
              next: null
            data:
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 1
              consumer_id: consumer-1
              instance_id: consumer-instance-1
              client_id: client-1
              current_offset: 1
              log_end_offset: 101
              lag: 100
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 2
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              current_offset: 1
              log_end_offset: 11
              lag: 10
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 3
              consumer_id: consumer-3
              instance_id: consumer-instance-3
              client_id: client-3
              current_offset: 1
              log_end_offset: 1
              lag: 0
          schema:
            $ref: '#/components/schemas/ConsumerLagDataList'
      description: The list of consumer lags.
    ListConsumersResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
              next: null
            data:
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              instance_id: consumer-instance-1
              client_id: client-1
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
          schema:
            $ref: '#/components/schemas/ConsumerDataList'
      description: The list of consumers.
    ListPartitionsResponse:
      content:
        application/json:
          example:
            kind: KafkaPartitionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
              next: null
            data:
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 3
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas/3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
          schema:
            $ref: '#/components/schemas/PartitionDataList'
      description: The list of partitions.
    ListReplicasResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
              next: null
            data:
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 1
              is_leader: true
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/2
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=2
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 2
              is_leader: false
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/3
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=3
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 3
              is_leader: false
              is_in_sync: false
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
          schema:
            $ref: '#/components/schemas/ReplicaDataList'
      description: The list of replicas.
    ListTopicConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
              next: null
            data:
            - kind: KafkaTopicConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
              cluster_id: cluster-1
              topic_name: topic-1
              name: cleanup.policy
              value: compact
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_TOPIC_CONFIG
              synonyms:
              - name: cleanup.policy
                value: compact
                source: DYNAMIC_TOPIC_CONFIG
              - name: cleanup.policy
                value: delete
                source: DEFAULT_CONFIG
            - kind: KafkaTopicConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
              cluster_id: cluster-1
              topic_name: topic-1
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_TOPIC_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_TOPIC_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/TopicConfigDataList'
      description: The list of cluster configs.
    ListTopicsResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
              next: null
            data:
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                resource_name: crn:///kafka=cluster-1/topic=topic-1
              cluster_id: cluster-1
              topic_name: topic-1
              is_internal: false
              replication_factor: 3
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2
                resource_name: crn:///kafka=cluster-1/topic=topic-2
              cluster_id: cluster-1
              topic_name: topic-2
              is_internal: true
              replication_factor: 4
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/-/reassignments
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3
                resource_name: crn:///kafka=cluster-1/topic=topic-3
              cluster_id: cluster-1
              topic_name: topic-3
              is_internal: false
              replication_factor: 5
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicDataList'
      description: The list of topics.
    ProduceResponse:
      content:
        application/json:
          examples:
            produce_record_success:
              description: The record was successfully produced to the topic.
              value:
                error_code: 200
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 1
                offset: 0
                timestamp: 2021-02-05T19:14:42Z
                key:
                  type: BINARY
                  size: 7
                value:
                  type: JSON
                  size: 15
            produce_record_bad_binary_data:
              description: Thrown when sending a BINARY value which is not a base64-encoded
                string.
              value:
                error_code: 400
                message: 'Bad Request: data=1 is not a base64 string.'
          schema:
            $ref: '#/components/schemas/ProduceResponse'
      description: |-
        The response containing a delivery report for a record produced to a topic. In streaming mode,
        for each record sent, a separate delivery report will be returned, in the same order,
        each with its own error_code.
    SearchAclsResponse:
      content:
        application/json:
          example:
            kind: KafkaAclList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?principal=User%3Aalice
            data:
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=User%3Aalice&host=*&operation=ALL&permission=ALLOW
              cluster_id: cluster-1
              resource_type: TOPIC
              resource_name: topic-
              pattern_type: PREFIXED
              principal: User:alice
              host: '*'
              operation: ALL
              permission: ALLOW
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=kafka-cluster&pattern_type=LITERAL&principal=User%3Aalice&host=*&operation=DESCRIBE&permission=DENY
              cluster_id: cluster-1
              resource_type: CLUSTER
              resource_name: kafka-cluster
              pattern_type: LITERAL
              principal: User:alice
              host: '*'
              operation: DESCRIBE
              permission: DENY
          schema:
            $ref: '#/components/schemas/AclDataList'
      description: The list of ACLs.
    SearchReassignmentsByTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              next: null
            data:
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              adding_replicas:
              - 1
              - 2
              removing_replicas:
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              adding_replicas:
              - 1
              removing_replicas:
              - 2
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 3
              adding_replicas:
              - 3
              removing_replicas:
              - 1
              - 2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentDataList'
      description: The ongoing replicas reassignments.
    SearchReplicasByBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
              next: null
            data:
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2/replica=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              broker_id: 1
              is_leader: true
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/3/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=3/replica=1
              cluster_id: cluster-1
              topic_name: topic-2
              partition_id: 3
              broker_id: 1
              is_leader: false
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/1/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=1/replica=1
              cluster_id: cluster-1
              topic_name: topic-3
              partition_id: 1
              broker_id: 1
              is_leader: false
              is_in_sync: false
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/ReplicaDataList'
      description: The list of replicas.
    BadRequestErrorResponse:
      content:
        application/json:
          examples:
            bad_request_cannot_deserialize:
              description: Thrown when trying to deserialize an integer from non-integer
                data.
              value:
                error_code: 400
                message: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "A": not a valid `java.lang.Integer` value'
            unsupported_version_exception:
              description: Thrown when the version of this API is not supported in
                the underlying Kafka cluster.
              value:
                error_code: 40035
                message: The version of this API is not supported in the underlying
                  Kafka cluster.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    BadRequestErrorResponse_CreateAcls:
      content:
        application/json:
          examples:
            create_acls_cluster_name_invalid:
              description: Thrown when creating an ACL for a CLUSTER resource specifying
                the wrong resource name.
              value:
                error_code: 40002
                message: The only valid name for the CLUSTER resource is kafka-cluster"
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    BadRequestErrorResponse_CreateTopic:
      content:
        application/json:
          examples:
            create_topic_already_exists:
              description: Thrown when trying to create a topic with a name already
                used by an existing topic.
              value:
                error_code: 40002
                message: Topic 'my-topic' already exists.
            create_topic_replication_factor_too_large:
              description: Thrown when trying to create a topic with a replication
                factor larger than the number of brokers.
              value:
                error_code: 40002
                message: 'Replication factor: 2 larger than available brokers: 1.'
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    BadRequestErrorResponse_DeleteAcls:
      content:
        application/json:
          examples:
            delete_acls_unspecified_resource_type:
              description: Thrown when trying to delete ACLs without specifying a
                valid resource type.
              value:
                error_code: 400
                message: resource_type cannot be unspecified or UNKNOWN
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    UnprocessableEntity_ProduceRecord:
      content:
        application/json:
          examples:
            produce_record_empty_request_body:
              description: Thrown when the request body is empty.
              value:
                error_code: 422
                message: Payload error. Request body is empty. Data is required.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    BadRequestErrorResponse_UpdatePartitionCountTopic:
      content:
        application/json:
          examples:
            topic_update_partitions_invalid:
              description: Thrown when trying to update the number of partitions incorrectly.
              value:
                error_code: 40002
                message: Topic already has 1 partitions.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure.
    UnauthorizedErrorResponse:
      content:
        application/json:
          examples:
            kafka_authentication_failed:
              description: Thrown when using Basic authentication with wrong Kafka
                credentials.
              value:
                error_code: 40101
                message: Authentication failed
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a client authentication error. Kafka authentication failures
        will contain error code 40101 in the response body.
    ForbiddenErrorResponse:
      content:
        application/json:
          examples:
            kafka_authorization_failed:
              description: Thrown when the caller is not authorized to perform the
                underlying operation.
              value:
                error_code: 40301
                message: Request is not authorized
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a client authorization error. Kafka authorization failures
        will contain error code 40301 in the response body.
    NotFoundErrorResponse:
      content:
        application/json:
          examples:
            endpoint_not_found:
              description: Thrown for generic HTTP 404 errors.
              value:
                error_code: 404
                message: HTTP 404 Not Found
            cluster_not_found:
              description: Thrown when using a non-existing cluster ID.
              value:
                error_code: 404
                message: Cluster my-cluster cannot be found.
            unknown_topic_or_partition:
              description: Thrown when using a non-existing topic name or partition
                ID.
              value:
                error_code: 40403
                message: This server does not host this topic-partition.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates attempted access to an unreachable or non-existing resource
        like e.g. an unknown topic or partition. GET requests to endpoints not allowed
        in the accesslists will also result in this response.
    TooManyRequestsErrorResponse:
      content:
        text/html:
          example:
            description: A sample response from Jetty's DoSFilter.
            value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
              <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP ERROR
              429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
              </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
              <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
              </tr> </table> </body> </html>
          schema:
            type: string
      description: Indicates that a rate limit threshold has been reached, and the
        client should retry again later.
    ServerErrorResponse:
      content:
        application/json:
          examples:
            generic_internal_server_error:
              description: Thrown for generic HTTP 500 errors.
              value:
                error_code: 500
                message: Internal Server Error
          schema:
            $ref: '#/components/schemas/Error'
      description: A server-side problem that might not be addressable from the client
        side. Retriable Kafka errors will contain error code 50003 in the response
        body.
    ListReplicaStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaStatusList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic_1/partitions/0/replica-status
              resource_name: null
            data:
            - kind: KafkaReplicaStatus
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic-1/partitions/0/brokers/1/replica-status
              cluster_id: cluster-1
              topic_name: topic-1
              broker_id: 1
              partition_id: 0
              is_leader: true
              is_observer: false
              is_isr_eligible: true
              is_in_isr: true
              is_caught_up: true
              log_start_offset: 0
              log_end_offset: 0
              last_caught_up_time_ms: 100
              last_fetch_time_ms: 200
              link_name: test-link
            - kind: KafkaReplicaStatus
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic-1/partitions/0/brokers/2/replica-status
              cluster_id: cluster-1
              topic_name: topic-1
              broker_id: 2
              partition_id: 0
              is_leader: false
              is_observer: false
              is_isr_eligible: true
              is_in_isr: true
              is_caught_up: true
              log_start_offset: 0
              log_end_offset: 0
              last_caught_up_time_ms: 100
              last_fetch_time_ms: 200
              link_name: test-link
          schema:
            $ref: '#/components/schemas/ReplicaStatusDataList'
      description: The list of Replica Statuses.
    GetAnyUnevenLoadResponse:
      content:
        application/json:
          example:
            kind: KafkaAnyUnevenLoad
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/any-uneven-load
              resource_name: crn:///kafka=cluster-1/any-uneven-load
            cluster_id: cluster-1
            status: BALANCING
            previous_status: BALANCING_FAILED
            status_updated_at: 2019-10-12T07:20:50Z
            previous_status_updated_at: 2019-10-12T07:20:35Z
            error_code: 10013
            error_message: The Confluent Balancer operation was overridden by a higher
              priority operation.
            broker_tasks:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
          schema:
            $ref: '#/components/schemas/AnyUnevenLoadData'
      description: The AnyUnevenLoad status
    GetBalancerStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaBalancerStatus
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/balancer
              resource_name: crn:///kafka=cluster-1/balancer
            cluster_id: cluster-1
            status: ERROR
            error_code: 10014
            error_message: The Confluent Balancer failed to start as JBOD is enabled
              for the cluster.
            any_uneven_load:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/even-cluster-load
            broker_tasks:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
          schema:
            $ref: '#/components/schemas/BalancerStatusData'
      description: The balancer status
    GetBrokerRemovalResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerRemoval
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              resource_name: crn:///kafka=cluster-1/broker=1/
            cluster_id: cluster-1
            broker_id: 1
            broker_task:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerRemovalData'
      description: The single broker removal response
    ListBrokerRemovalResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerRemovalList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers:delete
              next: null
            data:
            - kind: KafkaBrokerRemoval
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1/
              cluster_id: cluster-1
              broker_id: 1
              broker_task:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerRemoval
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1/
              cluster_id: cluster-1
              broker_id: 1
              broker_task:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerRemovalDataList'
      description: The multiple broker removal response
    GetBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTask
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
              resource_name: crn:///kafka=cluster-1/broker=1/task=1
            cluster_id: cluster-1
            broker_id: 1
            task_type: add-broker
            task_status: FAILED
            sub_task_statuses:
              partition_reassignment_status: ERROR
            created_at: 2019-10-12T07:20:50Z
            updated_at: 2019-10-12T07:20:55Z
            error_code: 10013
            error_message: The Confluent Balancer operation was overridden by a higher
              priority operation
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerTaskData'
      description: The broker task
    ListBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: SUCCESS
              sub_task_statuses:
                partition_reassignment_status: COMPLETED
              created_at: 2019-10-12T10:20:40Z
              updated_at: 2019-10-12T10:20:45Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/tasks/remove-broker
                resource_name: crn:///kafka=cluster-1/broker=2/task=remove-broker
              cluster_id: cluster_id
              broker_id: 2
              task_type: remove-broker
              task_status: FAILED
              shutdown_scheduled: true
              sub_task_statuses:
                broker_replica_exclusion_status: COMPLETED
                partition_reassignment_status: ERROR
                broker_shutdown_status: CANCELED
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: Error while computing the initial remove broker plan
                for brokers [2] prior to shutdown.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerTaskByBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: IN_PROGRESS
              sub_task_statuses:
                partition_reassignment_status: IN_PROGRESS
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/remove-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=remove-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: remove-broker
              task_status: FAILED
              shutdown_scheduled: false
              sub_task_statuses:
                broker_replica_exclusion_status: EXCLUDED
                partition_reassignment_status: ERROR
                broker_shutdown_status: CANCELED
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: Error while computing the initial remove broker plan
                for brokers [1] prior to shutdown.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerTaskByTaskTypeResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: IN_PROGRESS
              sub_task_statuses:
                partition_reassignment_status: IN_PROGRESS
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=2/task=add-broker
              cluster_id: cluster_id
              broker_id: 2
              task_type: add-broker
              task_status: FAILED
              sub_task_statuses:
                partition_reassignment_status: ERROR
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: Error while computing the initial add broker plan for
                brokers [2]
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              reason: Broker is to be removed.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              reason: Broker is to be removed.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionDataList'
      description: The list of broker replica exclusions.
    GetBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerReplicaExclusion
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
              next: null
            cluster_id: cluster-1
            broker_id: 1
            reason: Broker is to be removed.
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionData'
      description: A Broker Replica Exclusion.
    ListCreateBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: SET
              reason: Broker is to be removed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: SET
              reason: Broker is to be removed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    ListDeleteBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    ListDeleteBrokerReplicaExclusionErrorResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: 404
              error_message: No replica exclusion for broker 1 was present.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    GetRemoveBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaRemoveBrokerTask
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/1
              resource_name: crn:///kafka=cluster-1/remove-broker-task=1
            cluster_id: cluster-1
            broker_id: 1
            shutdown_scheduled: false
            broker_replica_exclusion_status: COMPLETED
            partition_reassignment_status: FAILED
            broker_shutdown_status: CANCELED
            error_code: 10006
            error_message: Error while computing the initial remove broker plan for
              brokers [1] prior to shutdown.
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/RemoveBrokerTaskData'
      description: The remove broker task.
    ListRemoveBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaRemoveBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks
              next: null
            data:
            - kind: KafkaRemoveBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/1
                resource_name: crn:///kafka=cluster-1/remove-broker-task=1
              cluster_id: cluster-1
              broker_id: 1
              shutdown_scheduled: true
              broker_replica_exclusion_status: COMPLETED
              partition_reassignment_status: FAILED
              broker_shutdown_status: CANCELED
              error_code: 10006
              error_message: Error while computing the initial remove broker plan
                for brokers [1] prior to shutdown.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaRemoveBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/2
                resource_name: crn:///kafka=cluster-1/remove-broker-task=2
              cluster_id: cluster-1
              broker_id: 2
              shutdown_scheduled: true
              broker_replica_exclusion_status: EXCLUDED
              partition_reassignment_status: FAILED
              broker_shutdown_status: CANCELED
              error_code: 10006
              error_message: Error while computing the initial remove broker plan
                for brokers [2] prior to shutdown.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/RemoveBrokerTaskDataList'
      description: The list of remove broker tasks.
    NoContentResponse:
      description: Operation succeeded, no content in the response
    ListLinksResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links
              next: null
            data:
            - kind: KafkaLinkData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-1
                resource_name: null
              remote_cluster_id: src-cluster-id
              destination_cluster_id: null
              link_name: my-new-link-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
              cluster_link_id: eEBkTffYSESld6EO898x3w
              topic_names:
              - topic-sb-1
              - topic-sb-2
              link_state: ACTIVE
            - kind: KafkaLinkData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-2
                resource_name: null
              remote_cluster_id: src-cluster-id
              destination_cluster_id: null
              link_name: my-new-link-2
              link_id: f749116e-f847-4bd2-b1f6-5c4e518a0678
              cluster_link_id: 90kRbvhHS9Kx9lxOUYoGeA
              topic_names:
              - topic-db-1
              - topic-db-2
              link_state: UNAVAILABLE
              link_error: AUTHENTICATION_ERROR
              link_error_message: Please check your api key and secret
            - kind: KafkaLinkData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-3
                resource_name: null
              remote_cluster_id: null
              destination_cluster_id: dest-cluster-id
              link_name: my-new-link-3
              link_id: 9cd1711e-a4ef-4390-a35e-dfd758d97a82
              cluster_link_id: nNFxHqTvQ5CjXt_XWNl6gg
              topic_names: []
              link_state: ACTIVE
          schema:
            $ref: '#/components/schemas/ListLinksResponseDataList'
      description: A list of link names and properties
    GetLinkResponse:
      content:
        application/json:
          examples:
            link_at_destination_cluster:
              description: Link at destination cluster
              value:
                kind: KafkaLinkData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                resource_name: null
                remote_cluster_id: src-cluster-id
                destination_cluster_id: null
                link_name: my-new-link-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                cluster_link_id: eEBkTffYSESld6EO898x3w
                topic_names:
                - topic-db-1
                - topic-db-2
            link_at_source_cluster:
              description: Link at source cluster
              value:
                kind: KafkaLinkData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                resource_name: null
                remote_cluster_id: null
                destination_cluster_id: dst-cluster-id
                link_name: my-new-link-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                cluster_link_id: eEBkTffYSESld6EO898x3w
                topic_names: []
          schema:
            $ref: '#/components/schemas/ListLinksResponseData'
      description: Single link name and properties
    ListLinkConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkConfigDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/v-0Ce-CkTyKQol9v46LaCQ/links/link-nb-1/configs
              next: null
            data:
            - kind: KafkaLinkConfigData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                resource_name: null
              cluster_id: 1Rh_4htxSuen7RYGvGmgNw
              name: consumer.offset.sync.ms
              value: "3825940"
              default: false
              read_only: false
              sensitive: false
              source: DYNAMIC_CLUSTER_LINK_CONFIG
              synonyms:
              - cosm
              link_name: link-db-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
            - kind: KafkaLinkConfigData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                resource_name: null
              cluster_id: 1Rh_4htxSuen7RYGvGmgNw
              name: acl.sync.ms
              value: "5000"
              default: false
              read_only: false
              sensitive: false
              source: DYNAMIC_CLUSTER_LINK_CONFIG
              synonyms:
              - asm
              link_name: link-db-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
          schema:
            $ref: '#/components/schemas/ListLinkConfigsResponseDataList'
      description: Config name and value
    GetLinkConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkConfigData
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
              resource_name: null
            cluster_id: 1Rh_4htxSuen7RYGvGmgNw
            name: consumer.offset.sync.ms
            value: "3825940"
            default: false
            read_only: false
            sensitive: false
            source: DYNAMIC_CLUSTER_LINK_CONFIG
            synonyms:
            - cosm
            link_name: link-db-1
            link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
            topics:
            - topic-db-1
            - topic-db-2
          schema:
            $ref: '#/components/schemas/ListLinkConfigsResponseData'
      description: Config name and value
    ListMirrorTopicsResponse:
      content:
        application/json:
          example:
            kind: KafkaMirrorDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
              resource_name: crn:///kafka=cluster-1
              next: null
            data:
            - kind: KafkaMirrorData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                resource_name: crn:///kafka=cluster-1
              link_name: link-sb-1
              resource_name: crn:///kafka=cluster-1
              mirror_topic_name: topic-1
              source_topic_name: topic-1
              num_partitions: 3
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
              mirror_status: ACTIVE
              state_time_ms: 1612550939300
            - kind: KafkaMirrorData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                resource_name: crn:///kafka=cluster-1
              link_name: link-sb-2
              resource_name: crn:///kafka=cluster-1
              mirror_topic_name: topic-2
              source_topic_name: topic-2
              num_partitions: 3
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
              mirror_status: STOPPED
              state_time_ms: 1612551353640
          schema:
            $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
      description: Metadata of mirror topics
    DescribeMirrorTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaMirrorData
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors/topic-1
              resource_name: crn:///kafka=cluster-1
            link_name: link-sb-1
            mirror_topic_name: topic-1
            source_topic_name: topic-1
            num_partitions: 3
            mirror_lags:
            - partition: 0
              lag: 0
              last_source_fetch_offset: 0
            - partition: 1
              lag: 10000
              last_source_fetch_offset: 1000
            - partition: 2
              lag: 40000
              last_source_fetch_offset: 12030
            mirror_status: ACTIVE
            state_time_ms: 1612550939300
          schema:
            $ref: '#/components/schemas/ListMirrorTopicsResponseData'
      description: Metadata of the mirror topic
    AlterMirrorStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaPromoteMirror
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
              resource_name: crn:///kafka=cluster-1
            data:
            - kind: AlterMirrorsData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                resource: crn:///kafka=cluster-1
              mirror_topic_name: topic-sb
              error_code: null
              error_message: null
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
            - kind: AlterMirrorsData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                resource: crn:///kafka=cluster-1
              mirror_topic_name: topic-2
              error_code: 400
              error_message: Topic 'topic-2' has already stopped its mirror from 'my-new-link-1'
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
          schema:
            $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
      description: Mirror status alternation result
    BadBrokerOrBalancerRequestErrorResponse:
      content:
        application/json:
          examples:
            IllegalBrokerRemoval:
              value:
                error_code: 400
                message: 'Cannot remove broker 1 as there are partitions with replication
                  factor equal to 1 on the broker. One such partition: test_topic_partition_0.'
            BalancerOffline:
              value:
                error_code: 400
                message: The Confluent Balancer component is disabled or not started
                  yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad broker or balancer request
    BalancerOfflineErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: The Confluent Balancer component is disabled or not started yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Balancer offline
    BrokerNotFoundErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: 'Broker not found. Broker: 1 not found in the cluster: cluster-1'
          schema:
            $ref: '#/components/schemas/Error'
      description: Broker not found.
    UnrepresentableBrokerErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: The given broker id -10 is invalid
          schema:
            $ref: '#/components/schemas/Error'
      description: Unrepresentable broker id.
    BalancerNotEnabledErrorResponse:
      content:
        application/json:
          example:
            error_code: 500
            message: The Confluent Balancer component is disabled or not started yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Confluent Balancer disabled or not started.
    ClusterAuthorizationErrorResponse:
      content:
        application/json:
          example:
            error_code: 401
            message: 'Not authorized: the authenticated user didn''t have the right
              access to the resource.'
          schema:
            $ref: '#/components/schemas/Error'
      description: Operation not authorized.
    ClusterLinkNotFoundErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: The cluster link doesn't exist.
          schema:
            $ref: '#/components/schemas/Error'
      description: The cluster link doesn't exist.
    InvalidClusterLinkErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: Invalid Cluster Link Name.
          schema:
            $ref: '#/components/schemas/Error'
      description: The cluster link doesn't exist.
    InvalidConfigNameErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: Invalid Config Name.
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid Config Name.
    ClusterLinkExistsErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: A cluster link already exists with the provided link name
          schema:
            $ref: '#/components/schemas/Error'
      description: A cluster link already exists with the provided link name
    TimeoutErrorResponse:
      content:
        application/json:
          example:
            error_code: 408
            message: The server received the request, but the operation timed out
          schema:
            $ref: '#/components/schemas/Error'
      description: The server received the request, but the operation timed out
  schemas:
    AbstractConfigData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AbstractConfigData_allOf'
    AclData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AclData_allOf'
    AclDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/inline_response_200'
    AclOperation:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - ALL
      - READ
      - WRITE
      - CREATE
      - DELETE
      - ALTER
      - DESCRIBE
      - CLUSTER_ACTION
      - DESCRIBE_CONFIGS
      - ALTER_CONFIGS
      - IDEMPOTENT_WRITE
    AclPatternType:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - MATCH
      - LITERAL
      - PREFIXED
    AclPermission:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - DENY
      - ALLOW
    AclResourceType:
      enum:
      - UNKNOWN
      - ANY
      - TOPIC
      - GROUP
      - CLUSTER
      - TRANSACTIONAL_ID
      - DELEGATION_TOKEN
      type: string
    AlterConfigBatchRequestData:
      example:
        validate_only: true
        data:
        - name: name
          value: value
          operation: operation
        - name: name
          value: value
          operation: operation
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterConfigBatchRequestData_data'
          type: array
        validate_only:
          type: boolean
      required:
      - data
      type: object
    AnyValue:
      nullable: true
    AuthorizedOperations:
      items:
        type: string
        x-extensible-enum:
        - UNKNOWN
        - ALL
        - READ
        - WRITE
        - CREATE
        - DELETE
        - ALTER
        - DESCRIBE
        - CLUSTER_ACTION
        - DESCRIBE_CONFIGS
        - ALTER_CONFIGS
        - IDEMPOTENT_WRITE
      type: array
    BrokerConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/BrokerConfigData_allOf'
    BrokerConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerConfigDataList_allOf'
    BrokerData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerData_allOf'
    BrokerDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerDataList_allOf'
    ClusterConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/ClusterConfigData_allOf'
    ClusterConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ClusterConfigDataList_allOf'
    ClusterConfigType:
      type: string
      x-extensible-enum:
      - BROKER
    ClusterData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ClusterData_allOf'
    ClusterDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ClusterDataList_allOf'
    CreateAclRequestData:
      example:
        principal: principal
        pattern_type: pattern_type
        host: host
        permission: permission
        resource_name: resource_name
        operation: operation
      properties:
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - MATCH
          - LITERAL
          - PREFIXED
        principal:
          type: string
        host:
          type: string
        operation:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - ALL
          - READ
          - WRITE
          - CREATE
          - DELETE
          - ALTER
          - DESCRIBE
          - CLUSTER_ACTION
          - DESCRIBE_CONFIGS
          - ALTER_CONFIGS
          - IDEMPOTENT_WRITE
        permission:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - DENY
          - ALLOW
      required:
      - host
      - operation
      - pattern_type
      - permission
      - principal
      - resource_name
      - resource_type
      type: object
    CreateAclRequestDataList:
      allOf:
      - $ref: '#/components/schemas/CreateAclRequestDataList_allOf'
    CreateTopicRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        validate_only: true
        replication_factor: 6
        topic_name: topic_name
        partitions_count: 0
      properties:
        topic_name:
          type: string
        partitions_count:
          type: integer
        replication_factor:
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/CreateTopicRequestData_configs'
          type: array
        validate_only:
          type: boolean
      required:
      - topic_name
      type: object
    ConfigSource:
      type: string
      x-extensible-enum:
      - DYNAMIC_CLUSTER_LINK_CONFIG
      - DYNAMIC_TOPIC_CONFIG
      - DYNAMIC_BROKER_LOGGER_CONFIG
      - DYNAMIC_BROKER_CONFIG
      - DYNAMIC_DEFAULT_BROKER_CONFIG
      - STATIC_BROKER_CONFIG
      - DEFAULT_CONFIG
      - UNKNOWN
    ConfigSynonymData:
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
          - DYNAMIC_TOPIC_CONFIG
          - DYNAMIC_BROKER_LOGGER_CONFIG
          - DYNAMIC_BROKER_CONFIG
          - DYNAMIC_DEFAULT_BROKER_CONFIG
          - STATIC_BROKER_CONFIG
          - DEFAULT_CONFIG
          - UNKNOWN
      required:
      - name
      - source
      type: object
    ConsumerAssignmentData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerAssignmentData_allOf'
    ConsumerAssignmentDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerAssignmentDataList_allOf'
    ConsumerData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerData_allOf'
    ConsumerDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerDataList_allOf'
    ConsumerGroupData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerGroupData_allOf'
    ConsumerGroupDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerGroupDataList_allOf'
    ConsumerGroupState:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - PREPARING_REBALANCE
      - COMPLETING_REBALANCE
      - STABLE
      - DEAD
      - EMPTY
    ConsumerLagData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerLagData_allOf'
    ConsumerLagDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerLagDataList_allOf'
    ConsumerGroupLagSummaryData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerGroupLagSummaryData_allOf'
    Error:
      properties:
        error_code:
          format: int32
          type: integer
        message:
          nullable: true
          type: string
      required:
      - error_code
      - message
      type: object
    PartitionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/PartitionData_allOf'
    PartitionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/PartitionDataList_allOf'
    ProduceResponse:
      example:
        partition_id: 6
        cluster_id: cluster_id
        offset: 1
        topic_name: topic_name
        error_code: 0
        message: message
        value:
          size: 5
          type: type
        key:
          size: 5
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        error_code:
          format: int32
          type: integer
        message:
          type: string
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          format: int32
          type: integer
        offset:
          format: int64
          type: integer
        timestamp:
          format: date-time
          nullable: true
          type: string
        key:
          $ref: '#/components/schemas/ProduceResponseData'
        value:
          $ref: '#/components/schemas/ProduceResponseData'
      required:
      - error_code
      type: object
    ProduceResponseData:
      example:
        size: 5
        type: type
      nullable: true
      properties:
        size:
          type: integer
        type:
          type: string
          x-extensible-enum:
          - BINARY
          - JSON
          - STRING
      required:
      - size
      - type
      type: object
    ProduceRequest:
      example:
        partition_id: 0
        headers:
        - name: name
          value: value
        - name: name
          value: value
        value:
          data: ""
          type: type
        key:
          data: ""
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        partition_id:
          format: int32
          nullable: true
          type: integer
        headers:
          items:
            $ref: '#/components/schemas/ProduceRequestHeader'
          type: array
        key:
          $ref: '#/components/schemas/ProduceRequestData'
        value:
          $ref: '#/components/schemas/ProduceRequestData'
        timestamp:
          format: date-time
          nullable: true
          type: string
      type: object
    ProduceRequestData:
      example:
        data: ""
        type: type
      nullable: true
      properties:
        type:
          type: string
          x-extensible-enum:
          - BINARY
          - JSON
          - STRING
        data:
          nullable: true
      type: object
    ProduceRequestHeader:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          format: byte
          nullable: true
          type: string
      required:
      - name
      type: object
    ReassignmentData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReassignmentData_allOf'
    ReassignmentDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReassignmentDataList_allOf'
    Relationship:
      properties:
        related:
          type: string
      required:
      - related
      type: object
    ReplicaData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReplicaData_allOf'
    ReplicaDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReplicaDataList_allOf'
    Resource:
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
      required:
      - kind
      - metadata
      type: object
    ResourceCollection:
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceCollectionMetadata'
      required:
      - kind
      - metadata
      type: object
    ResourceCollectionMetadata:
      properties:
        self:
          type: string
        next:
          nullable: true
          type: string
      required:
      - self
      type: object
    ResourceMetadata:
      properties:
        self:
          type: string
        resource_name:
          nullable: true
          type: string
      required:
      - self
      type: object
    TopicConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/TopicConfigData_allOf'
    TopicConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/TopicConfigDataList_allOf'
    TopicData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/TopicData_allOf'
    TopicDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/TopicDataList_allOf'
    UpdateConfigRequestData:
      example:
        value: value
      properties:
        value:
          nullable: true
          type: string
      type: object
    UpdatePartitionCountRequestData:
      example:
        partitions_count: 0
      properties:
        partitions_count:
          format: int32
          type: integer
      required:
      - partitions_count
      type: object
    ReplicaStatusData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReplicaStatusData_allOf'
    ReplicaStatusDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReplicaStatusDataList_allOf'
    AnyUnevenLoadData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AnyUnevenLoadData_allOf'
    BalancerStatusData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BalancerStatusData_allOf'
    BrokerRemovalData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerRemovalData_allOf'
    BrokerRemovalDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerRemovalDataList_allOf'
    BrokerTaskData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerTaskData_allOf'
    BrokerTaskDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerTaskDataList_allOf'
    BrokerReplicaExclusionRequestData:
      properties:
        broker_id:
          type: integer
        reason:
          type: string
      required:
      - broker_id
      - reason
      type: object
    BrokerReplicaExclusionBatchRequestData:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionRequestData'
          type: array
      required:
      - data
      type: object
    BrokerReplicaExclusionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerReplicaExclusionData_allOf'
    BrokerReplicaExclusionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerReplicaExclusionDataList_allOf'
    AlterBrokerReplicaExclusionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AlterBrokerReplicaExclusionData_allOf'
    AlterBrokerReplicaExclusionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList_allOf'
    RemoveBrokerTaskData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RemoveBrokerTaskData_allOf'
    RemoveBrokerTaskDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/RemoveBrokerTaskDataList_allOf'
    ConfigData:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
      - name
      - value
    CreateLinkRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        remote_cluster_id: remote_cluster_id
        cluster_link_id: cluster_link_id
        destination_cluster_id: destination_cluster_id
        source_cluster_id: source_cluster_id
      properties:
        source_cluster_id:
          deprecated: true
          type: string
        destination_cluster_id:
          deprecated: true
          type: string
        remote_cluster_id:
          description: The expected remote cluster ID.
          type: string
        cluster_link_id:
          description: The expected cluster link ID. Can be provided when creating
            the second side of a bidirectional link for validating the link ID is
            as expected. If it's not provided, it's inferred from the remote cluster.
          type: string
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      type: object
    UpdateLinkConfigRequestData:
      example:
        value: value
      properties:
        value:
          type: string
      required:
      - value
      type: object
    LinkState:
      type: string
      x-extensible-enum:
      - ACTIVE
      - FAILED
      - UNAVAILABLE
      - PAUSED
      - UNKNOWN
    LinkError:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - NO_ERROR
      - AUTHENTICATION_ERROR
      - UNRESOLVABLE_BOOTSTRAP_ERROR
      - INVALID_BOOTSTRAP_INTERNAL_ENDPOINT_ERROR
      - BOOTSTRAP_TCP_CONNECTION_FAILED_ERROR
      - TIMEOUT_ERROR
    ListLinksResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListLinksResponseData_allOf'
    ListLinksResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListLinksResponseDataList_allOf'
    ListLinkConfigsResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListLinkConfigsResponseData_allOf'
    ListLinkConfigsResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListLinkConfigsResponseDataList_allOf'
    CreateMirrorTopicRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        source_topic_name: source_topic_name
        replication_factor: 0
        mirror_topic_name: mirror_topic_name
      properties:
        source_topic_name:
          type: string
        mirror_topic_name:
          type: string
        replication_factor:
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      required:
      - source_topic_name
      type: object
    AlterMirrorsRequestData:
      example:
        mirror_topic_names:
        - mirror_topic_names
        - mirror_topic_names
        mirror_topic_name_pattern: mirror_topic_name_pattern
      properties:
        mirror_topic_names:
          description: The mirror topics specified as a list of topic names.
          items:
            type: string
          type: array
        mirror_topic_name_pattern:
          description: The mirror topics specified as a pattern.
          type: string
      type: object
    ListMirrorTopicsResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListMirrorTopicsResponseData_allOf'
    ListMirrorTopicsResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListMirrorTopicsResponseDataList_allOf'
    AlterMirrorStatusResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AlterMirrorStatusResponseData_allOf'
    AlterMirrorStatusResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/AlterMirrorStatusResponseDataList_allOf'
    RemoveBrokersRequestData:
      properties:
        broker_ids:
          items:
            type: integer
          type: array
      required:
      - broker_ids
      type: object
    MirrorLags:
      items:
        $ref: '#/components/schemas/MirrorLag'
      type: array
    MirrorLag:
      properties:
        partition:
          type: integer
        lag:
          format: int64
          type: integer
        last_source_fetch_offset:
          format: int64
          type: integer
      required:
      - lag
      - last_source_fetch_offset
      - partition
      type: object
    MirrorTopicStatus:
      enum:
      - ACTIVE
      - FAILED
      - PAUSED
      - STOPPED
      - PENDING_STOPPED
      type: string
    AnyUnevenLoadStatus:
      type: string
      x-extensible-enum:
      - STARTING
      - BALANCING
      - BALANCED
      - BALANCING_FAILED
      - DISABLED
      - ABORTED
      - UNKNOWN
    BalancerStatus:
      type: string
      x-extensible-enum:
      - BOOTSTRAPPING
      - STARTING
      - ENABLED
      - ERROR
      - DISABLED
      - FAILOVER
      - LOAD_FAILURE
      - UNKNOWN
    BrokerTaskType:
      enum:
      - add-broker
      - remove-broker
      type: string
    BrokerTaskStatus:
      type: string
      x-extensible-enum:
      - FAILED
      - IN_PROGRESS
      - SUCCESS
      - UNKNOWN
    ExclusionOp:
      type: string
      x-extensible-enum:
      - SET
      - DELETE
      - UNKNOWN
    BrokerReplicaExclusionStatus:
      type: string
      x-extensible-enum:
      - PENDING
      - IN_PROGRESS
      - EXCLUDED
      - REMOVING
      - ERROR
      - CANCELED
      - COMPLETED
      - UNKNOWN
    DeprecatedPartitionReassignmentStatus:
      type: string
      x-extensible-enum:
      - CANCELED
      - FAILED
      - PENDING
      - IN_PROGRESS
      - COMPLETE
    DeprecatedBrokerShutdownStatus:
      type: string
      x-extensible-enum:
      - FAILED
      - CANCELED
      - PENDING
      - COMPLETE
    inline_response_200:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/AclData'
          type: array
      required:
      - data
      type: object
    AbstractConfigData_allOf:
      properties:
        cluster_id:
          type: string
        name:
          type: string
        value:
          nullable: true
          type: string
        is_default:
          type: boolean
        is_read_only:
          type: boolean
        is_sensitive:
          type: boolean
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
          - DYNAMIC_TOPIC_CONFIG
          - DYNAMIC_BROKER_LOGGER_CONFIG
          - DYNAMIC_BROKER_CONFIG
          - DYNAMIC_DEFAULT_BROKER_CONFIG
          - STATIC_BROKER_CONFIG
          - DEFAULT_CONFIG
          - UNKNOWN
        synonyms:
          items:
            $ref: '#/components/schemas/ConfigSynonymData'
          type: array
      required:
      - cluster_id
      - is_default
      - is_read_only
      - is_sensitive
      - name
      - source
      - synonyms
      type: object
    AclData_allOf:
      properties:
        cluster_id:
          type: string
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - MATCH
          - LITERAL
          - PREFIXED
        principal:
          type: string
        host:
          type: string
        operation:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - ALL
          - READ
          - WRITE
          - CREATE
          - DELETE
          - ALTER
          - DESCRIBE
          - CLUSTER_ACTION
          - DESCRIBE_CONFIGS
          - ALTER_CONFIGS
          - IDEMPOTENT_WRITE
        permission:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - DENY
          - ALLOW
      required:
      - cluster_id
      - host
      - operation
      - pattern_type
      - permission
      - principal
      - resource_name
      - resource_type
      type: object
    AlterConfigBatchRequestData_data:
      example:
        name: name
        value: value
        operation: operation
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
        operation:
          nullable: true
          type: string
          x-extensible-enum:
          - SET
          - DELETE
      required:
      - name
      type: object
    BrokerConfigData_allOf:
      properties:
        broker_id:
          type: integer
      required:
      - broker_id
      type: object
    BrokerConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerConfigData'
          type: array
      required:
      - data
      type: object
    BrokerData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        host:
          nullable: true
          type: string
        port:
          nullable: true
          type: integer
        rack:
          nullable: true
          type: string
        configs:
          $ref: '#/components/schemas/Relationship'
        partition_replicas:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker_id
      - cluster_id
      - configs
      - partition_replicas
      type: object
    BrokerDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerData'
          type: array
      required:
      - data
      type: object
    ClusterConfigData_allOf:
      properties:
        config_type:
          type: string
          x-extensible-enum:
          - BROKER
      required:
      - config_type
      type: object
    ClusterConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ClusterConfigData'
          type: array
      required:
      - data
      type: object
    ClusterData_allOf:
      properties:
        cluster_id:
          type: string
        controller:
          $ref: '#/components/schemas/Relationship'
        acls:
          $ref: '#/components/schemas/Relationship'
        brokers:
          $ref: '#/components/schemas/Relationship'
        broker_configs:
          $ref: '#/components/schemas/Relationship'
        consumer_groups:
          $ref: '#/components/schemas/Relationship'
        topics:
          $ref: '#/components/schemas/Relationship'
        partition_reassignments:
          $ref: '#/components/schemas/Relationship'
      required:
      - acls
      - broker_configs
      - brokers
      - cluster_id
      - consumer_groups
      - partition_reassignments
      - topics
      type: object
    ClusterDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ClusterData'
          type: array
      required:
      - data
      type: object
    CreateAclRequestDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/CreateAclRequestData'
          type: array
      required:
      - data
      type: object
    CreateTopicRequestData_configs:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
      - name
      type: object
    ConsumerAssignmentData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        consumer_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        partition:
          $ref: '#/components/schemas/Relationship'
        lag:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - consumer_id
      - lag
      - partition
      - partition_id
      - topic_name
      type: object
    ConsumerAssignmentDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerAssignmentData'
          type: array
      required:
      - data
      type: object
    ConsumerData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        consumer_id:
          type: string
        instance_id:
          nullable: true
          type: string
        client_id:
          type: string
        assignments:
          $ref: '#/components/schemas/Relationship'
      required:
      - assignments
      - client_id
      - cluster_id
      - consumer_group_id
      - consumer_id
      type: object
    ConsumerDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerData'
          type: array
      required:
      - data
      type: object
    ConsumerGroupData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        is_simple:
          type: boolean
        partition_assignor:
          type: string
        state:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - PREPARING_REBALANCE
          - COMPLETING_REBALANCE
          - STABLE
          - DEAD
          - EMPTY
        coordinator:
          $ref: '#/components/schemas/Relationship'
        consumer:
          $ref: '#/components/schemas/Relationship'
        lag_summary:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - consumers
      - coordinator
      - is_simple
      - lag_summary
      - partition_assignor
      - state
      type: object
    ConsumerGroupDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerGroupData'
          type: array
      required:
      - data
      type: object
    ConsumerLagData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        current_offset:
          format: int64
          type: integer
        log_end_offset:
          format: int64
          type: integer
        lag:
          format: int64
          type: integer
        consumer_id:
          type: string
        instance_id:
          nullable: true
          type: string
        client_id:
          type: string
      required:
      - client_id
      - cluster_id
      - consumer_group_id
      - consumer_id
      - current_offset
      - lag
      - log_end_offset
      - partition_id
      - topic_name
      type: object
    ConsumerLagDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerLagData'
          type: array
      required:
      - data
      type: object
    ConsumerGroupLagSummaryData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        max_lag_consumer_id:
          type: string
        max_lag_instance_id:
          nullable: true
          type: string
        max_lag_client_id:
          type: string
        max_lag_topic_name:
          type: string
        max_lag_partition_id:
          type: integer
        max_lag:
          format: int64
          type: integer
        total_lag:
          format: int64
          type: integer
        max_lag_consumer:
          $ref: '#/components/schemas/Relationship'
        max_lag_partition:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - max_lag
      - max_lag_client_id
      - max_lag_consumer
      - max_lag_consumer_id
      - max_lag_partition
      - max_lag_partition_id
      - max_lag_topic_name
      - total_lag
      type: object
    PartitionData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        leader:
          $ref: '#/components/schemas/Relationship'
        replicas:
          $ref: '#/components/schemas/Relationship'
        reassignment:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - partition_id
      - reassignment
      - replicas
      - topic_name
      type: object
    PartitionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/PartitionData'
          type: array
      required:
      - data
      type: object
    ReassignmentData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        adding_replicas:
          items:
            type: integer
          type: array
        removing_replicas:
          items:
            type: integer
          type: array
        replicas:
          $ref: '#/components/schemas/Relationship'
      required:
      - adding_replicas
      - cluster_id
      - partition_id
      - removing_replicas
      - replicas
      - topic_name
      type: object
    ReassignmentDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReassignmentData'
          type: array
      required:
      - data
      type: object
    ReplicaData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        broker_id:
          type: integer
        is_leader:
          type: boolean
        is_in_sync:
          type: boolean
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - is_in_sync
      - is_leader
      - partition_id
      - topic_name
      type: object
    ReplicaDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReplicaData'
          type: array
      required:
      - data
      type: object
    TopicConfigData_allOf:
      properties:
        topic_name:
          type: string
      required:
      - topic_name
      type: object
    TopicConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/TopicConfigData'
          type: array
      required:
      - data
      type: object
    TopicData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        is_internal:
          type: boolean
        replication_factor:
          type: integer
        partitions_count:
          type: integer
        partitions:
          $ref: '#/components/schemas/Relationship'
        configs:
          $ref: '#/components/schemas/Relationship'
        partition_reassignments:
          $ref: '#/components/schemas/Relationship'
        authorized_operations:
          $ref: '#/components/schemas/AuthorizedOperations'
      required:
      - cluster_id
      - configs
      - is_internal
      - partition_reassignments
      - partitions
      - partitions_count
      - replication_factor
      - topic_name
      type: object
    TopicDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/TopicData'
          type: array
      required:
      - data
      type: object
    ReplicaStatusData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        broker_id:
          format: int32
          type: integer
        partition_id:
          format: int32
          type: integer
        is_leader:
          type: boolean
        is_observer:
          type: boolean
        is_isr_eligible:
          type: boolean
        is_in_isr:
          type: boolean
        is_caught_up:
          type: boolean
        log_start_offset:
          format: int64
          type: integer
        log_end_offset:
          format: int64
          type: integer
        last_caught_up_time_ms:
          format: int64
          type: integer
        last_fetch_time_ms:
          format: int64
          type: integer
        link_name:
          type: string
      required:
      - broker_id
      - cluster_id
      - is_caught_up
      - is_in_isr
      - is_isr_eligible
      - is_leader
      - is_observer
      - last_caught_up_time_ms
      - last_fetch_time_ms
      - log_end_offset
      - log_start_offset
      - partition_id
      - topic_name
      type: object
    ReplicaStatusDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReplicaStatusData'
          type: array
      required:
      - data
      type: object
    AnyUnevenLoadData_allOf:
      properties:
        cluster_id:
          type: string
        status:
          type: string
          x-extensible-enum:
          - STARTING
          - BALANCING
          - BALANCED
          - BALANCING_FAILED
          - DISABLED
          - ABORTED
          - UNKNOWN
        previous_status:
          type: string
          x-extensible-enum:
          - STARTING
          - BALANCING
          - BALANCED
          - BALANCING_FAILED
          - DISABLED
          - ABORTED
          - UNKNOWN
        status_updated_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        previous_status_updated_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker_tasks:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker_tasks
      - cluster_id
      - previous_status
      - previous_status_updated_at
      - status
      - status_updated_at
      type: object
    BalancerStatusData_allOf:
      properties:
        cluster_id:
          type: string
        status:
          type: string
          x-extensible-enum:
          - BOOTSTRAPPING
          - STARTING
          - ENABLED
          - ERROR
          - DISABLED
          - FAILOVER
          - LOAD_FAILURE
          - UNKNOWN
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        any_uneven_load:
          $ref: '#/components/schemas/Relationship'
        broker_tasks:
          $ref: '#/components/schemas/Relationship'
      required:
      - any_uneven_load
      - broker_tasks
      - cluster_id
      - status
      type: object
    BrokerRemovalData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        broker_task:
          $ref: '#/components/schemas/Relationship'
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - broker_task
      - cluster_id
      type: object
    BrokerRemovalDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerRemovalData'
          type: array
      required:
      - data
      type: object
    BrokerTaskData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        task_type:
          $ref: '#/components/schemas/BrokerTaskType'
        task_status:
          type: string
          x-extensible-enum:
          - FAILED
          - IN_PROGRESS
          - SUCCESS
          - UNKNOWN
        shutdown_scheduled:
          nullable: true
          type: boolean
        sub_task_statuses:
          additionalProperties:
            type: string
          type: object
        created_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        updated_at:
          description: The date and time at which this task was last updated.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - created_at
      - sub_task_statuses
      - task_status
      - task_type
      - updated_at
      type: object
    BrokerTaskDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerTaskData'
          type: array
      required:
      - data
      type: object
    BrokerReplicaExclusionData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        reason:
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - reason
      type: object
    BrokerReplicaExclusionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionData'
          type: array
      required:
      - data
      type: object
    AlterBrokerReplicaExclusionData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        exclusion:
          type: string
          x-extensible-enum:
          - SET
          - DELETE
          - UNKNOWN
        reason:
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - exclusion
      - reason
      type: object
    AlterBrokerReplicaExclusionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionData'
          type: array
      required:
      - data
      type: object
    RemoveBrokerTaskData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        shutdown_scheduled:
          type: boolean
        broker_replica_exclusion_status:
          type: string
          x-extensible-enum:
          - PENDING
          - IN_PROGRESS
          - EXCLUDED
          - REMOVING
          - ERROR
          - CANCELED
          - COMPLETED
          - UNKNOWN
        partition_reassignment_status:
          type: string
          x-extensible-enum:
          - CANCELED
          - FAILED
          - PENDING
          - IN_PROGRESS
          - COMPLETE
        broker_shutdown_status:
          type: string
          x-extensible-enum:
          - FAILED
          - CANCELED
          - PENDING
          - COMPLETE
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - broker_replica_exclusion_status
      - broker_shutdown_status
      - cluster_id
      - partition_reassignment_status
      - shutdown_scheduled
      type: object
    RemoveBrokerTaskDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RemoveBrokerTaskData'
          type: array
      required:
      - data
      type: object
    ListLinksResponseData_allOf:
      properties:
        source_cluster_id:
          deprecated: true
          nullable: true
          type: string
        destination_cluster_id:
          deprecated: true
          nullable: true
          type: string
        remote_cluster_id:
          nullable: true
          type: string
        link_name:
          type: string
        link_id:
          deprecated: true
          type: string
        cluster_link_id:
          type: string
        topic_names:
          items:
            type: string
          type: array
        link_error:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - NO_ERROR
          - AUTHENTICATION_ERROR
          - UNRESOLVABLE_BOOTSTRAP_ERROR
          - INVALID_BOOTSTRAP_INTERNAL_ENDPOINT_ERROR
          - BOOTSTRAP_TCP_CONNECTION_FAILED_ERROR
          - TIMEOUT_ERROR
        link_error_message:
          nullable: true
          type: string
        link_state:
          type: string
          x-extensible-enum:
          - ACTIVE
          - FAILED
          - UNAVAILABLE
          - PAUSED
          - UNKNOWN
      required:
      - cluster_link_id
      - link_name
      - topic_names
      type: object
    ListLinksResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListLinksResponseData'
          type: array
      required:
      - data
      type: object
    ListLinkConfigsResponseData_allOf:
      properties:
        cluster_id:
          type: string
        name:
          type: string
        value:
          type: string
        read_only:
          type: boolean
        sensitive:
          type: boolean
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
        synonyms:
          items:
            type: string
          type: array
        link_name:
          type: string
      required:
      - cluster_id
      - default
      - link_name
      - name
      - read_only
      - sensitive
      - source
      - synonyms
      - value
      type: object
    ListLinkConfigsResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListLinkConfigsResponseData'
          type: array
      required:
      - data
      type: object
    ListMirrorTopicsResponseData_allOf:
      properties:
        link_name:
          type: string
        mirror_topic_name:
          type: string
        source_topic_name:
          type: string
        num_partitions:
          type: integer
        mirror_lags:
          $ref: '#/components/schemas/MirrorLags'
        mirror_status:
          $ref: '#/components/schemas/MirrorTopicStatus'
        state_time_ms:
          format: int64
          type: integer
      required:
      - link_name
      - mirror_lags
      - mirror_status
      - mirror_topic_name
      - num_partitions
      - source_topic_name
      - state_time_ms
      type: object
    ListMirrorTopicsResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListMirrorTopicsResponseData'
          type: array
      required:
      - data
      type: object
    AlterMirrorStatusResponseData_allOf:
      properties:
        mirror_topic_name:
          type: string
        error_message:
          nullable: true
          type: string
        error_code:
          nullable: true
          type: integer
        mirror_lags:
          $ref: '#/components/schemas/MirrorLags'
      required:
      - error_code
      - error_message
      - mirror_lags
      - mirror_topic_name
      type: object
    AlterMirrorStatusResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterMirrorStatusResponseData'
          type: array
      required:
      - data
      type: object
  securitySchemes:
    api-key:
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API
        Key ID as the username and API Key Secret as the password.
      scheme: basic
      type: http
    confluent-sts-access-token:
      description: Authenticate with Confluent API using this credentials (JSON Web
        Tokens) following OAuth 2.0.
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: https://api.confluent.cloud/sts/v1/oauth2/token
      type: oauth2
x-tagGroups: []
