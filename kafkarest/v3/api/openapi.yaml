openapi: 3.0.0
info:
  contact:
    email: kafka-clients-proxy-team@confluent.io
    name: Kafka REST Team
    url: https://confluent.slack.com/app_redirect?channel=kafka-rest-eng
  title: REST Admin API
  version: 3.0.0
  x-api-id: 499e3476-71e0-4d6f-b4f9-6776cec6df27
  x-api-group: v3
  x-audience: external-public
  x-tag-group: Cluster Admin for Kafka (%s)
servers:
- description: Confluent Cloud REST Endpoint. For example https://pkc-00000.region.provider.confluent.cloud
  url: https://pkc-00000.region.provider.confluent.cloud
  x-audience: business-unit-internal
tags:
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Cluster (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Configs (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: ACL (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Consumer Group (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Partition (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Topic (v3)
- description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  name: Cluster Linking (v3)
paths:
  /kafka/v3/clusters/{cluster_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the Kafka cluster with the specified ``cluster_id``.
      operationId: getKafkaV3Cluster
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaCluster
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
                  resource_name: crn:///kafka=cluster-1
                cluster_id: cluster-1
                controller:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                acls:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
                brokers:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
                broker_configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
                consumer_groups:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
                topics:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              schema:
                $ref: '#/components/schemas/ClusterData'
          description: The Kafka cluster.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Cluster
      tags:
      - Cluster (v3)
  /kafka/v3/clusters/{cluster_id}/acls:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Deletes the list of ACLs that matches the search criteria.
      operationId: deleteKafkaV3Acls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ACL resource type.
        explode: true
        in: query
        name: resource_type
        required: false
        schema:
          $ref: '#/components/schemas/AclResourceType'
        style: form
      - description: The ACL resource name.
        explode: true
        in: query
        name: resource_name
        required: false
        schema:
          type: string
        style: form
      - description: The ACL pattern type.
        explode: true
        in: query
        name: pattern_type
        required: false
        schema:
          $ref: '#/components/schemas/AclPatternType'
        style: form
      - description: The ACL principal.
        explode: true
        in: query
        name: principal
        required: false
        schema:
          type: string
        style: form
      - description: The ACL host.
        explode: true
        in: query
        name: host
        required: false
        schema:
          type: string
        style: form
      - description: The ACL operation.
        explode: true
        in: query
        name: operation
        required: false
        schema:
          $ref: '#/components/schemas/AclOperation'
        style: form
      - description: The ACL permission.
        explode: true
        in: query
        name: permission
        required: false
        schema:
          $ref: '#/components/schemas/AclPermission'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=alice&host=*&operation=ALL&permission=ALLOW
                  cluster_id: cluster-1
                  resource_type: TOPIC
                  resource_name: topic-
                  pattern_type: PREFIXED
                  principal: alice
                  host: '*'
                  operation: ALL
                  permission: ALLOW
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=cluster-1&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
                  cluster_id: cluster-1
                  resource_type: CLUSTER
                  resource_name: cluster-2
                  pattern_type: LITERAL
                  principal: alice
                  host: '*'
                  operation: DESCRIBE
                  permission: DENY
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: The list of deleted ACLs.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Delete ACLs
      tags:
      - ACL (v3)
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns a list of ACLs that match the search criteria.
      operationId: getKafkaV3Acls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ACL resource type.
        explode: true
        in: query
        name: resource_type
        required: false
        schema:
          $ref: '#/components/schemas/AclResourceType'
        style: form
      - description: The ACL resource name.
        explode: true
        in: query
        name: resource_name
        required: false
        schema:
          type: string
        style: form
      - description: The ACL pattern type.
        explode: true
        in: query
        name: pattern_type
        required: false
        schema:
          $ref: '#/components/schemas/AclPatternType'
        style: form
      - description: The ACL principal.
        explode: true
        in: query
        name: principal
        required: false
        schema:
          type: string
        style: form
      - description: The ACL host.
        explode: true
        in: query
        name: host
        required: false
        schema:
          type: string
        style: form
      - description: The ACL operation.
        explode: true
        in: query
        name: operation
        required: false
        schema:
          $ref: '#/components/schemas/AclOperation'
        style: form
      - description: The ACL permission.
        explode: true
        in: query
        name: permission
        required: false
        schema:
          $ref: '#/components/schemas/AclPermission'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaAclList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?principal=alice
                data:
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=alice&host=*&operation=ALL&permission=ALLOW
                  cluster_id: cluster-1
                  resource_type: TOPIC
                  resource_name: topic-
                  pattern_type: PREFIXED
                  principal: alice
                  host: '*'
                  operation: ALL
                  permission: ALLOW
                - kind: KafkaAcl
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=cluster-1&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
                  cluster_id: cluster-1
                  resource_type: CLUSTER
                  resource_name: cluster-2
                  pattern_type: LITERAL
                  principal: alice
                  host: '*'
                  operation: DESCRIBE
                  permission: DENY
              schema:
                $ref: '#/components/schemas/AclDataList'
          description: The list of ACLs.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Search ACLs
      tags:
      - ACL (v3)
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Creates an ACL.
      operationId: createKafkaV3Acls
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateAclRequest'
      responses:
        "201":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Create ACLs
      tags:
      - ACL (v3)
  /kafka/v3/clusters/{cluster_id}/broker-configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns a list of configuration parameters for the specified Kafka
        cluster.
      operationId: listKafkaV3ClusterConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaClusterConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
                  next: null
                data:
                - kind: KafkaClusterConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/max.connections
                    resource_name: crn:///kafka=cluster-1/broker-config=max.connections
                  cluster_id: cluster-1
                  config_type: BROKER
                  name: max.connections
                  value: "1000"
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  synonyms:
                  - name: max.connections
                    value: "1000"
                    source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  - name: max.connections
                    value: "2147483647"
                    source: DEFAULT_CONFIG
                - kind: KafkaClusterConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                    resource_name: crn:///kafka=cluster-1/broker-config=compression.type
                  cluster_id: cluster-1
                  config_type: BROKER
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/ClusterConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List Cluster Configs
      tags:
      - Configs (v3)
  /kafka/v3/clusters/{cluster_id}/broker-configs:alter:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Updates or deletes a set of Kafka cluster configuration parameters.
      operationId: updateKafkaV3ClusterConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AlterClusterConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Batch Alter Cluster Configs
      tags:
      - Configs (v3)
  /kafka/v3/clusters/{cluster_id}/broker-configs/{name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Resets the configuration parameter specified by ``name`` to its
        default value.
      operationId: deleteKafkaV3ClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Reset Cluster Config
      tags:
      - Configs (v3)
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the configuration parameter specified by ``name``.
      operationId: getKafkaV3ClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaClusterConfig
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                  resource_name: crn:///kafka=cluster-1/broker-config=compression.type
                cluster_id: cluster-1
                config_type: BROKER
                name: compression.type
                value: gzip
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
                synonyms:
                - name: compression.type
                  value: gzip
                  source: DYNAMIC_DEFAULT_BROKER_CONFIG
                - name: compression.type
                  value: producer
                  source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/ClusterConfigData'
          description: The cluster configuration parameter.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Cluster Config
      tags:
      - Configs (v3)
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Updates the configuration parameter specified by ``name``.
      operationId: updateKafkaV3ClusterConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateClusterConfigRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Update Cluster Config
      tags:
      - Configs (v3)
  /kafka/v3/clusters/{cluster_id}/consumer-groups:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the list of consumer groups that belong to the specified
        Kafka cluster.
      operationId: listKafkaV3ConsumerGroups
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroupList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
                  next: null
                data:
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
                  state: STABLE
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-2
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.StickyAssignor
                  state: PREPARING_REBALANCE
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/lag-summary
                - kind: KafkaConsumerGroup
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-3
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-3
                  is_simple: false
                  partition_assignor: org.apache.kafka.clients.consumer.RangeAssignor
                  state: DEAD
                  coordinator:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
                  consumers:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/consumers
                  lag_summary:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/lag-summary
              schema:
                $ref: '#/components/schemas/ConsumerGroupDataList'
          description: The list of consumer groups.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List Consumer Groups
      tags:
      - Consumer Group (v3)
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the consumer group specified by the ``consumer_group_id``.
      operationId: getKafkaV3ConsumerGroup
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroup
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                is_simple: false
                partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
                state: STABLE
                coordinator:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                consumers:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                lag_summary:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
              schema:
                $ref: '#/components/schemas/ConsumerGroupData'
          description: The consumer group.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Consumer Group
      tags:
      - Consumer Group (v3)
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns a list of consumers that belong to the specified consumer
        group.
      operationId: listKafkaV3Consumers
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
                  next: null
                data:
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-1
                  instance_id: consumer-instance-1
                  client_id: client-1
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
                - kind: KafkaConsumer
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  assignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
              schema:
                $ref: '#/components/schemas/ConsumerDataList'
          description: The list of consumers.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List Consumers
      tags:
      - Consumer Group (v3)
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lag-summary:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Returns the max and total lag of the consumers belonging to the
        specified consumer group.
      operationId: getKafkaV3ConsumerGroupLagSummary
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerGroupLagSummary
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
                  resource_name: crn:///kafka=cluster-1/consumer-groups=consumer-group-1/lag-summary
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                max_lag_consumer_id: consumer-1
                max_lag_instance_id: consumer-instance-1
                max_lag_client_id: client-1
                max_lag_topic_name: topic-1
                max_lag_partition_id: 1
                max_lag: 100
                total_lag: 110
                max_lag_consumer:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                max_lag_partition:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              schema:
                $ref: '#/components/schemas/ConsumerGroupLagSummaryData'
          description: The max and total consumer lag in a consumer group.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Consumer Group Lag Summary.
      tags:
      - Consumer Group (v3)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cluster Admin For Kafka v3
    x-lifecycle-stage: Early Access
    x-request-access-name: Cluster Admin For Kafka v3
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Returns a list of consumer lags of the consumers belonging to the
        specified consumer group.
      operationId: listKafkaV3ConsumerLags
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerLagList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags
                  next: null
                data:
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 1
                  consumer_id: consumer-1
                  instance_id: consumer-instance-1
                  client_id: client-1
                  current_offset: 1
                  log_end_offset: 101
                  lag: 100
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/2
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=2
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 2
                  consumer_id: consumer-2
                  instance_id: consumer-instance-2
                  client_id: client-2
                  current_offset: 1
                  log_end_offset: 11
                  lag: 10
                - kind: KafkaConsumerLag
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/3
                    resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=3
                  cluster_id: cluster-1
                  consumer_group_id: consumer-group-1
                  topic_name: topic-1
                  partition_id: 3
                  consumer_id: consumer-3
                  instance_id: consumer-instance-3
                  client_id: client-3
                  current_offset: 1
                  log_end_offset: 1
                  lag: 0
              schema:
                $ref: '#/components/schemas/ConsumerLagDataList'
          description: The list of consumer lags.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List Consumer Lags
      tags:
      - Consumer Group (v3)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cluster Admin For Kafka v3
    x-lifecycle-stage: Early Access
    x-request-access-name: Cluster Admin For Kafka v3
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags/{topic_name}/partitions/{partition_id}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Returns the consumer lag on a partition with the given `partition_id`.
      operationId: getKafkaV3ConsumerLag
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The partition ID.
        example: 0
        explode: false
        in: path
        name: partition_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumerLag
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                topic_name: topic-1
                partition_id: 1
                consumer_id: consumer-1
                instance_id: consumer-instance-1
                client_id: client-1
                current_offset: 1
                log_end_offset: 101
                lag: 100
              schema:
                $ref: '#/components/schemas/ConsumerLagData'
          description: The consumer lag.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Consumer Lag
      tags:
      - Partition (v3)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cluster Admin For Kafka v3
    x-lifecycle-stage: Early Access
    x-request-access-name: Cluster Admin For Kafka v3
  /kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers/{consumer_id}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Returns the consumer specified by the ``consumer_id``.
      operationId: getKafkaV3Consumer
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer group ID.
        example: consumer-group-1
        explode: false
        in: path
        name: consumer_group_id
        required: true
        schema:
          type: string
        style: simple
      - description: The consumer ID.
        example: consumer-1
        explode: false
        in: path
        name: consumer_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaConsumer
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                  resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                consumer_id: consumer-1
                instance_id: consumer-instance-1
                client_id: client-1
                assignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
              schema:
                $ref: '#/components/schemas/ConsumerData'
          description: The consumer.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Consumer
      tags:
      - Consumer Group (v3)
  /kafka/v3/clusters/{cluster_id}/topics:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the list of topics that belong to the specified Kafka cluster.
      operationId: listKafkaV3Topics
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
                  next: null
                data:
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                    resource_name: crn:///kafka=cluster-1/topic=topic-1
                  cluster_id: cluster-1
                  topic_name: topic-1
                  is_internal: false
                  replication_factor: 3
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2
                    resource_name: crn:///kafka=cluster-1/topic=topic-2
                  cluster_id: cluster-1
                  topic_name: topic-2
                  is_internal: true
                  replication_factor: 4
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/-/reassignments
                - kind: KafkaTopic
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3
                    resource_name: crn:///kafka=cluster-1/topic=topic-3
                  cluster_id: cluster-1
                  topic_name: topic-3
                  is_internal: false
                  replication_factor: 5
                  partitions_count: 1
                  partitions:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions
                  configs:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/configs
                  partition_reassignments:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicDataList'
          description: The list of topics.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List Topics
      tags:
      - Topic (v3)
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Creates a topic.
      operationId: createKafkaV3Topic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateTopicRequest'
      responses:
        "201":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X
                  resource_name: crn:///kafka=cluster-1/topic=topic-X
                cluster_id: cluster-1
                topic_name: topic-X
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The created topic.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Create Topic
      tags:
      - Topic (v3)
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Deletes the topic with the given `topic_name`.
      operationId: deleteKafkaV3Topic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Delete Topic
      tags:
      - Topic (v3)
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the topic with the given `topic_name`.
      operationId: getKafkaV3Topic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopic
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                  resource_name: crn:///kafka=cluster-1/topic=topic-1
                cluster_id: cluster-1
                topic_name: topic-1
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                configs:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                partition_reassignments:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
              schema:
                $ref: '#/components/schemas/TopicData'
          description: The topic.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Topic
      tags:
      - Topic (v3)
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of configs that belong to the specified topic.
      operationId: listKafkaV3TopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List Topic Configs
      tags:
      - Configs (v3)
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs:alter:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Updates or deletes a set of topic configs.
      operationId: updateKafkaV3TopicConfigBatch
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AlterTopicConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Batch Alter Topic Configs
      tags:
      - Configs (v3)
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs/{name}:
    delete:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Resets the config with given `name` to its default value.
      operationId: deleteKafkaV3TopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Reset Topic Config
      tags:
      - Configs (v3)
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the config with the given `name`.
      operationId: getKafkaV3TopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfig
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/compression.type
                  resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                cluster_id: cluster-1
                topic_name: topic-1
                name: compression.type
                value: gzip
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_TOPIC_CONFIG
                synonyms:
                - name: compression.type
                  value: gzip
                  source: DYNAMIC_TOPIC_CONFIG
                - name: compression.type
                  value: producer
                  source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigData'
          description: The topic configuration parameter.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Topic Config
      tags:
      - Configs (v3)
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Updates the config with given `name`.
      operationId: updateKafkaV3TopicConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The configuration parameter name.
        example: compression.type
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateTopicConfigRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Update Topic Config
      tags:
      - Configs (v3)
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/partitions:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the list of partitions that belong to the specified topic.
      operationId: listKafkaV3Partitions
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPartitionList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
                  next: null
                data:
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 1
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 2
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/2
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
                - kind: KafkaPartition
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3
                  cluster_id: cluster-1
                  topic_name: topic-1
                  partition_id: 3
                  leader:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas/3
                  replicas:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
                  reassignment:
                    related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
              schema:
                $ref: '#/components/schemas/PartitionDataList'
          description: The list of partitions.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List Partitions
      tags:
      - Partition (v3)
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/partitions/{partition_id}:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns the partition with the given `partition_id`.
      operationId: getKafkaV3Partition
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      - description: The partition ID.
        example: 0
        explode: false
        in: path
        name: partition_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPartition
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                  resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 1
                leader:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                replicas:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
                reassignment:
                  related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
              schema:
                $ref: '#/components/schemas/PartitionData'
          description: The partition
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get Partition
      tags:
      - Partition (v3)
  /kafka/v3/clusters/{cluster_id}/topics/-/configs:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Returns all topic configurations for topics hosted by the specified
        cluster.
      operationId: listKafkaV3AllTopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Get All Topic Configs
      tags:
      - Configs (v3)
  /kafka/v3/clusters/{cluster_id}/links:
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: listKafkaV3Links
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links
                  next: null
                data:
                - kind: KafkaLinkData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-1
                    resource_name: null
                  source_cluster_id: src-cluster-id
                  link_name: my-new-link-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                  topic_names:
                  - topic-sb-1
                  - topic-sb-2
                - kind: KafkaLinkData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-2
                    resource_name: null
                  source_cluster_id: src-cluster-id
                  link_name: my-new-link-2
                  link_id: abced-f7d8-4844-a577-abcdefghijklmnp
                  topic_names:
                  - topic-db-1
                  - topic-db-2
              schema:
                $ref: '#/components/schemas/ListLinksResponseDataList'
          description: A list of link names and properties
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List all cluster links in the dest cluster
      tags:
      - Cluster Linking (v3)
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: createKafkaV3Link
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateLinkRequest'
      responses:
        "204":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Create a cluster link
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}:
    delete:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: deleteKafkaV3Link
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Delete the cluster link
      tags:
      - Cluster Linking (v3)
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: getKafkaV3Link
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
                  resource_name: null
                source_cluster_id: src-cluster-id
                link_name: my-new-link-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                topic_names:
                - topic-db-1
                - topic-db-2
              schema:
                $ref: '#/components/schemas/ListLinksResponseData'
          description: Single link name and properties
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Describe the cluster link
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/default-configs:
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: listKafkaV3DefaultTopicConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The topic name.
        example: topic-1
        explode: false
        in: path
        name: topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaTopicConfigList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
                  next: null
                data:
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: cleanup.policy
                  value: compact
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
                - kind: KafkaTopicConfig
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                    resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
                  cluster_id: cluster-1
                  topic_name: topic-1
                  name: compression.type
                  value: gzip
                  is_default: false
                  is_read_only: false
                  is_sensitive: false
                  source: DYNAMIC_TOPIC_CONFIG
                  synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
              schema:
                $ref: '#/components/schemas/TopicConfigDataList'
          description: The list of cluster configs.
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "404":
          content:
            application/json:
              examples:
                endpoint_not_found:
                  description: Thrown for generic HTTP 404 errors.
                  value:
                    error_code: 404
                    message: HTTP 404 Not Found
                cluster_not_found:
                  description: Thrown when using a non-existing cluster ID.
                  value:
                    error_code: 404
                    message: Cluster my-cluster cannot be found.
                unknown_topic_or_partition:
                  description: Thrown when using a non-existing topic name or partition
                    ID.
                  value:
                    error_code: 40403
                    message: This server does not host this topic-partition.
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates attempted access to an unreachable or non-existing
            resource like e.g. an unknown topic or partition. GET requests to endpoints
            not allowed in the accesslists will also result in this response.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List Default Topic Configs
      tags:
      - Configs
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs:
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: listKafkaV3LinkConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkConfigDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/v-0Ce-CkTyKQol9v46LaCQ/links/link-nb-1/configs
                  next: null
                data:
                - kind: KafkaLinkConfigData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                    resource_name: null
                  cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                  name: consumer.offset.sync.ms
                  value: "3825940"
                  default: false
                  read_only: false
                  sensitive: false
                  source: DYNAMIC_CLUSTER_LINK_CONFIG
                  synonyms:
                  - cosm
                  link_name: link-db-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                - kind: KafkaLinkConfigData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                    resource_name: null
                  cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                  name: acl.sync.ms
                  value: "5000"
                  default: false
                  read_only: false
                  sensitive: false
                  source: DYNAMIC_CLUSTER_LINK_CONFIG
                  synonyms:
                  - asm
                  link_name: link-db-1
                  link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
              schema:
                $ref: '#/components/schemas/ListLinkConfigsResponseDataList'
          description: Config name and value
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List all configs of the cluster link
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs/{config_name}:
    delete:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: deleteKafkaV3LinkConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Reset the given config to default value
      tags:
      - Cluster Linking (v3)
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: getKafkaV3LinkConfigs
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaLinkConfigData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                  resource_name: null
                cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                name: consumer.offset.sync.ms
                value: "3825940"
                default: false
                read_only: false
                sensitive: false
                source: DYNAMIC_CLUSTER_LINK_CONFIG
                synonyms:
                - cosm
                link_name: link-db-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                topics:
                - topic-db-1
                - topic-db-2
              schema:
                $ref: '#/components/schemas/ListLinkConfigsResponseData'
          description: Config name and value
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Describe the config under the cluster link
      tags:
      - Cluster Linking (v3)
    put:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaV3LinkConfig
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The link config name
        example: consumer.offset.sync.enable
        explode: false
        in: path
        name: config_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UpdateLinkConfigRequest'
      responses:
        "204":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Alter the config under the cluster link
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/configs:alter:
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Batch Alter Link Configs
      operationId: updateKafkaV3LinkConfigBatch
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AlterLinkConfigBatchRequest'
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Batch Alter Topic Configs
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List all mirror topics under the link
      operationId: listKafkaV3MirrorTopicsUnderLink
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: The status of the mirror topic. If not specified, all mirror
          topics will be returned.
        example: active
        explode: true
        in: query
        name: mirror_status
        required: false
        schema:
          $ref: '#/components/schemas/MirrorTopicStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                  next: null
                data:
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-1
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-1
                  source_topic_name: topic-1
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_topic_status: active
                  state_time_ms: 1612550939300
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-2
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  source_topic_name: topic-2
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_topic_status: stopped
                  state_time_ms: 1612551353640
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
          description: Metadata of mirror topics
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List mirror topics
      tags:
      - Cluster Linking (v3)
    post:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create a topic in the destination cluster mirroring a topic in
        the source cluster
      operationId: createKafkaV3MirrorTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CreateMirrorTopicRequest'
      responses:
        "204":
          description: Operation succeeded, no content in the response
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Create a mirror topic
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/-/mirrors:
    get:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List all mirror topics in the cluster
      operationId: listKafkaV3MirrorTopics
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The status of the mirror topic. If not specified, all mirror
          topics will be returned.
        example: active
        explode: true
        in: query
        name: mirror_status
        required: false
        schema:
          $ref: '#/components/schemas/MirrorTopicStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorDataList
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                  next: null
                data:
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-1
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-1
                  source_topic_name: topic-1
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_topic_status: active
                  state_time_ms: 1612550939300
                - kind: KafkaMirrorData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                    resource_name: crn:///kafka=cluster-1
                  link_name: link-sb-2
                  resource_name: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  source_topic_name: topic-2
                  num_partitions: 3
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                  mirror_topic_status: stopped
                  state_time_ms: 1612551353640
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
          description: Metadata of mirror topics
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: List mirror topics
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors/{mirror_topic_name}:
    get:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: readKafkaV3MirrorTopic
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: Cluster Linking mirror topic name
        example: topic-1
        explode: false
        in: path
        name: mirror_topic_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaMirrorData
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors/topic-1
                  resource_name: crn:///kafka=cluster-1
                link_name: link-sb-1
                mirror_topic_name: topic-1
                source_topic_name: topic-1
                num_partitions: 3
                mirror_lags:
                - partition: 0
                  lag: 0
                  last_source_fetch_offset: 0
                - partition: 1
                  lag: 10000
                  last_source_fetch_offset: 1000
                - partition: 2
                  lag: 40000
                  last_source_fetch_offset: 12030
                mirror_topic_status: active
                state_time_ms: 1612550939300
              schema:
                $ref: '#/components/schemas/ListMirrorTopicsResponseData'
          description: Metadata of the mirror topic
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Describe the mirror topic
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:promote:
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaV3MirrorTopicsPromote
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate if the link can be created or not, but not to create
          it. Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Promote the mirror topics
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:failover:
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaV3MirrorTopicsFailover
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate if the link can be created or not, but not to create
          it. Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Failover the mirror topics
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:pause:
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaV3MirrorTopicsPause
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate if the link can be created or not, but not to create
          it. Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Pause the mirror topics
      tags:
      - Cluster Linking (v3)
  /kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:resume:
    post:
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      operationId: updateKafkaV3MirrorTopicsResume
      parameters:
      - description: The Kafka cluster ID.
        example: cluster-1
        explode: false
        in: path
        name: cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The link name
        example: link-sb1
        explode: false
        in: path
        name: link_name
        required: true
        schema:
          type: string
        style: simple
      - description: 'To validate if the link can be created or not, but not to create
          it. Default: false'
        example: false
        explode: true
        in: query
        name: validate_only
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                kind: KafkaPromoteMirror
                metadata:
                  self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
                  resource_name: crn:///kafka=cluster-1
                data:
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-sb
                  error_code: null
                  error_message: null
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                - kind: AlterMirrorsData
                  metadata:
                    self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                    resource: crn:///kafka=cluster-1
                  mirror_topic_name: topic-2
                  error_code: 400
                  error_message: Topic 'topic-2' has already stopped its mirror from
                    'my-new-link-1'
                  mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
              schema:
                $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          description: Mirror status alternation result
        "400":
          content:
            application/json:
              examples:
                create_topic_already_exists:
                  description: Thrown when trying to create a topic with a name already
                    used by an existing topic.
                  value:
                    error_code: 40002
                    message: Topic 'my-topic' already exists.
                produce_message_badly_escaped:
                  description: Thrown when using unescaped single quotes within a
                    single-quote-delimited record.
                  value:
                    error_code: 400
                    message: |-
                      Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                       at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              example:
                description: Thrown when trying to create a topic and passing a string
                  for the replication factor.
                value: 'Cannot deserialize value of type `java.lang.Integer` from
                  String "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
              schema:
                type: string
          description: Indicates a bad request error. It could be caused by an unexpected
            request body format or other forms of request validation failure. Usually
            serves application/json content, although in some cases simple text/plain
            content can be returned.
        "401":
          content:
            application/json:
              examples:
                kafka_authentication_failed:
                  description: Thrown when using Basic authentication with wrong Kafka
                    credentials.
                  value:
                    error_code: 40101
                    message: Authentication failed
              schema:
                $ref: '#/components/schemas/Error'
          description: Indicates a client authentication error. Kafka authentication
            failures will contain error code 40101 in the response body.
        "429":
          content:
            text/html:
              example:
                description: A sample response from Jetty's DoSFilter.
                value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
                  <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP
                  ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
                  </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
                  <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
                  </tr> </table> </body> </html>
              schema:
                type: string
          description: Indicates that a rate limit threshold has been reached, and
            the client should retry again later.
        "5XX":
          content:
            application/json:
              examples:
                generic_internal_server_error:
                  description: Thrown for generic HTTP 500 errors.
                  value:
                    error_code: 500
                    message: Internal Server Error
                produce_v3_missing_schema:
                  description: Thrown when the specified schema cannot be fetched
                    from Schema Registry.
                  value:
                    error_code: 50002
                    message: Error when fetching latest schema version. subject =
                      my-topic
              schema:
                $ref: '#/components/schemas/Error'
          description: A server-side problem that might not be addressable from the
            client side. Retriable Kafka errors will contain error code 50003 in the
            response body.
      summary: Resume the mirror topics
      tags:
      - Cluster Linking (v3)
components:
  parameters:
    AclHost:
      description: The ACL host.
      explode: true
      in: query
      name: host
      required: false
      schema:
        type: string
      style: form
    AclOperation:
      description: The ACL operation.
      explode: true
      in: query
      name: operation
      required: false
      schema:
        $ref: '#/components/schemas/AclOperation'
      style: form
    AclPatternType:
      description: The ACL pattern type.
      explode: true
      in: query
      name: pattern_type
      required: false
      schema:
        $ref: '#/components/schemas/AclPatternType'
      style: form
    AclPermission:
      description: The ACL permission.
      explode: true
      in: query
      name: permission
      required: false
      schema:
        $ref: '#/components/schemas/AclPermission'
      style: form
    AclPrincipal:
      description: The ACL principal.
      explode: true
      in: query
      name: principal
      required: false
      schema:
        type: string
      style: form
    AclResourceName:
      description: The ACL resource name.
      explode: true
      in: query
      name: resource_name
      required: false
      schema:
        type: string
      style: form
    AclResourceType:
      description: The ACL resource type.
      explode: true
      in: query
      name: resource_type
      required: false
      schema:
        $ref: '#/components/schemas/AclResourceType'
      style: form
    BrokerId:
      description: The Kafka broker ID.
      example: 1
      explode: false
      in: path
      name: broker_id
      required: true
      schema:
        type: integer
      style: simple
    ClusterId:
      description: The Kafka cluster ID.
      example: cluster-1
      explode: false
      in: path
      name: cluster_id
      required: true
      schema:
        type: string
      style: simple
    ConfigName:
      description: The configuration parameter name.
      example: compression.type
      explode: false
      in: path
      name: name
      required: true
      schema:
        type: string
      style: simple
    ConsumerGroupId:
      description: The consumer group ID.
      example: consumer-group-1
      explode: false
      in: path
      name: consumer_group_id
      required: true
      schema:
        type: string
      style: simple
    ConsumerId:
      description: The consumer ID.
      example: consumer-1
      explode: false
      in: path
      name: consumer_id
      required: true
      schema:
        type: string
      style: simple
    PartitionId:
      description: The partition ID.
      example: 0
      explode: false
      in: path
      name: partition_id
      required: true
      schema:
        type: integer
      style: simple
    TopicName:
      description: The topic name.
      example: topic-1
      explode: false
      in: path
      name: topic_name
      required: true
      schema:
        type: string
      style: simple
    BrokerTaskType:
      description: The Kafka broker task type.
      example: remove-broker
      explode: false
      in: path
      name: task_type
      required: true
      schema:
        $ref: '#/components/schemas/BrokerTaskType'
      style: simple
    ShouldShutdown:
      description: 'To shutdown the broker or not, Default: true'
      example: true
      explode: true
      in: query
      name: should_shutdown
      required: false
      schema:
        type: boolean
      style: form
    ValidateOnly:
      description: 'To validate if the link can be created or not, but not to create
        it. Default: false'
      example: false
      explode: true
      in: query
      name: validate_only
      required: false
      schema:
        type: boolean
      style: form
    ValidateLink:
      description: 'To synchronously validate that the source cluster ID is expected
        and the dest cluster has the permission to read topics in the source cluster.
        default: true'
      example: false
      explode: true
      in: query
      name: validate_link
      required: false
      schema:
        type: boolean
      style: form
    LinkName:
      description: The link name
      example: link-sb1
      explode: false
      in: path
      name: link_name
      required: true
      schema:
        type: string
      style: simple
    LinkConfigName:
      description: The link config name
      example: consumer.offset.sync.enable
      explode: false
      in: path
      name: config_name
      required: true
      schema:
        type: string
      style: simple
    MirrorTopicStatus:
      description: The status of the mirror topic. If not specified, all mirror topics
        will be returned.
      example: active
      explode: true
      in: query
      name: mirror_status
      required: false
      schema:
        $ref: '#/components/schemas/MirrorTopicStatus'
      style: form
    MirrorTopicName:
      description: Cluster Linking mirror topic name
      example: topic-1
      explode: false
      in: path
      name: mirror_topic_name
      required: true
      schema:
        type: string
      style: simple
  requestBodies:
    AlterBrokerConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: max.connections
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter broker configuration parameter batch request.
    AlterClusterConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: max.connections
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter cluster configuration parameter batch request.
    AlterTopicConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: cleanup.policy
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
      description: The alter topic configuration parameter batch request.
    CreateAclRequest:
      content:
        application/json:
          example:
            kind: KafkaAcl
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=kafka-cluster&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
            resource_type: CLUSTER
            resource_name: kafka-cluster
            pattern_type: LITERAL
            principal: principalType:principalName
            host: '*'
            operation: DESCRIBE
            permission: DENY
          schema:
            $ref: '#/components/schemas/CreateAclRequestData'
      description: The ACL creation request.
    CreateTopicRequest:
      content:
        application/json:
          examples:
            uniform_replication:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                configs:
                - name: cleanup.policy
                  value: compact
                - name: compression.type
                  value: gzip
            explicit_replicas_assignments:
              value:
                topic_name: topic-Y
                replicas_assignments:
                - partition_id: 0
                  broker_ids:
                  - 1
                  - 2
                - partition_id: 1
                  broker_ids:
                  - 2
                  - 3
                - partition_id: 2
                  broker_ids:
                  - 3
                  - 1
                configs:
                - name: cleanup.policy
                  value: compact
                - name: compression.type
                  value: gzip
          schema:
            $ref: '#/components/schemas/CreateTopicRequestData'
      description: The topic creation request.
    ProduceRequest:
      content:
        application/json:
          examples:
            binary_and_avro_with_subject_and_raw_schema:
              description: 'If using type: "BINARY" or type: "JSON", or using the
                schema field, type is required.'
              value:
                partition_id: 1
                headers:
                - name: Header-1
                  value: SGVhZGVyLTE=
                - name: Header-2
                  value: SGVhZGVyLTI=
                key:
                  type: BINARY
                  data: Zm9vYmFy
                value:
                  type: AVRO
                  subject: topic-1-key
                  schema: '{\"type\":\"string\"}'
                  data: foobar
                timestamp: 2021-02-05T19:14:42Z
            schema_id_and_schema_version:
              description: If not setting type, the record is assumed to use a schema.
                The actual schema is queried from Schema Registry based on the subject,
                schema_id and schema_version. You can specify the subject directly
                or you can use subject_name_strategy. If neither is specified, subject_name_strategy
                is assumed to be TOPIC_NAME. You can use either schema_id or schema_version
                to identify the actual schema in the subject.
              value:
                key:
                  subject_name_strategy: TOPIC_NAME
                  schema_id: 1
                  data: 1000
                value:
                  schema_version: 1
                  data:
                    foo: bar
            latest_schema:
              description: If neither schema_id or schema_version are specified, the
                latest schema for the subject is used. This should be the preferred
                way of using the API. You should register the schema with Schema Registry
                directly, then on Kafka REST you do not need to say anything about
                the schema and we will fetch the latest one for you.
              value:
                key:
                  data: 1000
                value:
                  data: foobar
            null_and_empty_data:
              description: data can be omitted or can be null.
              value:
                key:
                  schema_id: 1
                value:
                  schema_version: 1
                  data: null
            empty_value:
              description: key or value can be omitted entirely.
              value:
                key:
                  data: 1000
          schema:
            $ref: '#/components/schemas/ProduceRequest'
      description: 'A single record to be produced to Kafka. To produce multiple records
        on the same connection, simply concatenate all the records, e.g.: {"partition_id":1}{"partition_id":2}.
        Delivery reports will be concatenated on the same order as the records are
        sent. See examples for the options available.'
    UpdateBrokerConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The broker configuration parameter update request.
    UpdateClusterConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The cluster configuration parameter update request.
    UpdateTopicConfigRequest:
      content:
        application/json:
          example:
            value: gzip
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
      description: The topic configuration parameter update request.
    CreateLinkRequest:
      content:
        application/json:
          example:
            source_cluster_id: cluster-1
            configs:
            - name: acl.sync.enable
              value: "false"
            - name: consumer.offset.sync.ms
              value: "30000"
          schema:
            $ref: '#/components/schemas/CreateLinkRequestData'
      description: Create a cluster link
    UpdateLinkConfigRequest:
      content:
        application/json:
          example:
            value: "300000"
          schema:
            $ref: '#/components/schemas/UpdateLinkConfigRequestData'
      description: Link config value to update
    AlterLinkConfigBatchRequest:
      content:
        application/json:
          example:
            data:
            - name: cleanup.policy
              operation: DELETE
            - name: compression.type
              value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
    CreateMirrorTopicRequest:
      content:
        application/json:
          example:
            source_topic_name: topic-1
            configs:
            - name: unclean.leader.election.enable
              value: "true"
            replication_factor: 1
          schema:
            $ref: '#/components/schemas/CreateMirrorTopicRequestData'
      description: Name and configs of the topics mirroring from and mirroring to
    AlterMirrorsRequest:
      content:
        application/json:
          example:
            mirror_topic_names:
            - topic-1
            - topic-2
            - topic-3
          schema:
            $ref: '#/components/schemas/AlterMirrorsRequestData'
      description: Name of the topics to apply the changes
    RemoveBrokersRequest:
      content:
        application/json:
          example:
            broker_ids:
            - 1
            - 2
            - 3
          schema:
            $ref: '#/components/schemas/RemoveBrokersRequestData'
      description: Broker ids to remove
    BrokerReplicaExclusionBatchRequest:
      content:
        application/json:
          example:
            data:
            - broker_id: 1
              reason: The broker is to be removed.
            - broker_id: 2
              reason: The broker is to be removed.
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionBatchRequestData'
      description: Alter Broker Replica Exclusions.
  responses:
    CreateTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaTopic
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X
              resource_name: crn:///kafka=cluster-1/topic=topic-X
            cluster_id: cluster-1
            topic_name: topic-X
            is_internal: false
            replication_factor: 3
            partitions_count: 1
            partitions:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicData'
      description: The created topic.
    DeleteAclsResponse:
      content:
        application/json:
          example:
            data:
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=alice&host=*&operation=ALL&permission=ALLOW
              cluster_id: cluster-1
              resource_type: TOPIC
              resource_name: topic-
              pattern_type: PREFIXED
              principal: alice
              host: '*'
              operation: ALL
              permission: ALLOW
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=cluster-1&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
              cluster_id: cluster-1
              resource_type: CLUSTER
              resource_name: cluster-2
              pattern_type: LITERAL
              principal: alice
              host: '*'
              operation: DESCRIBE
              permission: DENY
          schema:
            $ref: '#/components/schemas/inline_response_200'
      description: The list of deleted ACLs.
    GetBrokerConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/compression.type
              resource_name: crn:///kafka=cluster-1/broker=1/config=compression.type
            cluster_id: cluster-1
            broker_id: 1
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_BROKER_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_BROKER_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/BrokerConfigData'
      description: The broker configuration parameter.
    GetBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaBroker
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              resource_name: crn:///kafka=cluster-1/broker=1
            cluster_id: cluster-1
            broker_id: 1
            host: localhost
            port: 9291
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
            partition_replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
          schema:
            $ref: '#/components/schemas/BrokerData'
      description: The broker.
    GetClusterConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
              resource_name: crn:///kafka=cluster-1/broker-config=compression.type
            cluster_id: cluster-1
            config_type: BROKER
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_DEFAULT_BROKER_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/ClusterConfigData'
      description: The cluster configuration parameter.
    GetClusterResponse:
      content:
        application/json:
          example:
            kind: KafkaCluster
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
              resource_name: crn:///kafka=cluster-1
            cluster_id: cluster-1
            controller:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            acls:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
            brokers:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
            broker_configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
            consumer_groups:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
            topics:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
          schema:
            $ref: '#/components/schemas/ClusterData'
      description: The Kafka cluster.
    GetConsumerAssignmentResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerAssignment
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=1/partition=1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            consumer_id: consumer-1
            topic_name: topic-1
            partition_id: 1
            partition:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
            lag:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
          schema:
            $ref: '#/components/schemas/ConsumerAssignmentData'
      description: The consumer group assignment.
    GetConsumerGroupResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroup
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            is_simple: false
            partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
            state: STABLE
            coordinator:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            consumers:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
            lag_summary:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
          schema:
            $ref: '#/components/schemas/ConsumerGroupData'
      description: The consumer group.
    GetConsumerGroupLagSummaryResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroupLagSummary
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
              resource_name: crn:///kafka=cluster-1/consumer-groups=consumer-group-1/lag-summary
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            max_lag_consumer_id: consumer-1
            max_lag_instance_id: consumer-instance-1
            max_lag_client_id: client-1
            max_lag_topic_name: topic-1
            max_lag_partition_id: 1
            max_lag: 100
            total_lag: 110
            max_lag_consumer:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
            max_lag_partition:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
          schema:
            $ref: '#/components/schemas/ConsumerGroupLagSummaryData'
      description: The max and total consumer lag in a consumer group.
    GetConsumerLagResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerLag
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            topic_name: topic-1
            partition_id: 1
            consumer_id: consumer-1
            instance_id: consumer-instance-1
            client_id: client-1
            current_offset: 1
            log_end_offset: 101
            lag: 100
          schema:
            $ref: '#/components/schemas/ConsumerLagData'
      description: The consumer lag.
    GetConsumerResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumer
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
              resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            consumer_id: consumer-1
            instance_id: consumer-instance-1
            client_id: client-1
            assignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
          schema:
            $ref: '#/components/schemas/ConsumerData'
      description: The consumer.
    GetPartitionResponse:
      content:
        application/json:
          example:
            kind: KafkaPartition
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            leader:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
            replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            reassignment:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
          schema:
            $ref: '#/components/schemas/PartitionData'
      description: The partition
    GetReassignmentResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignment
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            adding_replicas:
            - 1
            - 2
            removing_replicas:
            - 3
            replicas:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentData'
      description: The ongoing replicas reassignments.
    GetReplicaResponse:
      content:
        application/json:
          example:
            kind: KafkaReplica
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
              resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=1
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            broker_id: 1
            is_leader: true
            is_in_sync: true
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/ReplicaData'
      description: The replica.
    GetTopicConfigResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicConfig
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/compression.type
              resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
            cluster_id: cluster-1
            topic_name: topic-1
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_TOPIC_CONFIG
            synonyms:
            - name: compression.type
              value: gzip
              source: DYNAMIC_TOPIC_CONFIG
            - name: compression.type
              value: producer
              source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/TopicConfigData'
      description: The topic configuration parameter.
    GetTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaTopic
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
              resource_name: crn:///kafka=cluster-1/topic=topic-1
            cluster_id: cluster-1
            topic_name: topic-1
            is_internal: false
            replication_factor: 3
            partitions_count: 1
            partitions:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
            configs:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
            partition_reassignments:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicData'
      description: The topic.
    ListAllReassignmentsResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              next: null
            data:
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              adding_replicas:
              - 1
              - 2
              removing_replicas:
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-2/partition=2/reassignment
              cluster_id: cluster-1
              topic_name: topic-2
              partition_id: 2
              adding_replicas:
              - 1
              removing_replicas:
              - 2
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=3/reassignment
              cluster_id: cluster-1
              topic_name: topic-3
              partition_id: 3
              adding_replicas:
              - 3
              removing_replicas:
              - 1
              - 2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentDataList'
      description: The ongoing replicas reassignments.
    ListBrokerConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
              next: null
            data:
            - kind: KafkaBrokerConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/max.connections
                resource_name: crn:///kafka=cluster-1/broker=1/config=max.connections
              cluster_id: cluster-1
              broker_id: 1
              name: max.connections
              value: "1000"
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_BROKER_CONFIG
              synonyms:
              - name: max.connections
                value: "1000"
                source: DYNAMIC_BROKER_CONFIG
              - name: max.connections
                value: "2147483647"
                source: DEFAULT_CONFIG
            - kind: KafkaBrokerConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs/compression.type
                resource_name: crn:///kafka=cluster-1/broker=1/config=compression.type
              cluster_id: cluster-1
              broker_id: 1
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_BROKER_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_BROKER_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/BrokerConfigDataList'
      description: The list of broker configs.
    ListBrokersResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
              next: null
            data:
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1
              cluster_id: cluster-1
              broker_id: 1
              host: localhost
              port: 9291
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
                resource_name: crn:///kafka=cluster-1/broker=2
              cluster_id: cluster-1
              broker_id: 2
              host: localhost
              port: 9292
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/partition-replicas
            - kind: KafkaBroker
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
                resource_name: crn:///kafka=cluster-1/broker=3
              cluster_id: cluster-1
              broker_id: 3
              host: localhost
              port: 9293
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3/configs
              partition_replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3/partition-replicas
          schema:
            $ref: '#/components/schemas/BrokerDataList'
      description: The list of brokers.
    ListClusterConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
              next: null
            data:
            - kind: KafkaClusterConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/max.connections
                resource_name: crn:///kafka=cluster-1/broker-config=max.connections
              cluster_id: cluster-1
              config_type: BROKER
              name: max.connections
              value: "1000"
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
              synonyms:
              - name: max.connections
                value: "1000"
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
              - name: max.connections
                value: "2147483647"
                source: DEFAULT_CONFIG
            - kind: KafkaClusterConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type
                resource_name: crn:///kafka=cluster-1/broker-config=compression.type
              cluster_id: cluster-1
              config_type: BROKER
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_DEFAULT_BROKER_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/ClusterConfigDataList'
      description: The list of cluster configs.
    ListClustersResponse:
      content:
        application/json:
          example:
            kind: KafkaClusterList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters
              next: null
            data:
            - kind: KafkaCluster
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1
                resource_name: crn:///kafka=cluster-1
              cluster_id: cluster-1
              controller:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              acls:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls
              brokers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers
              broker_configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs
              consumer_groups:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
              topics:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
          schema:
            $ref: '#/components/schemas/ClusterDataList'
      description: The list of Kafka clusters.
    ListConsumerAssignmentsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerAssignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
              next: null
            data:
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=1/partition=1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-1
              partition_id: 1
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-2/partitions/2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=2/partition=2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-2
              partition_id: 2
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/2
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-2/partitions/2
            - kind: KafkaConsumerAssignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments/topic-3/partitions/3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1/assignment=topic=3/partition=3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              topic_name: topic-3
              partition_id: 3
              partition:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/3
              lag:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-3/partitions/3
          schema:
            $ref: '#/components/schemas/ConsumerAssignmentDataList'
      description: The list of consumer group assignments.
    ListConsumerGroupsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerGroupList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups
              next: null
            data:
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
              state: STABLE
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-2
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.StickyAssignor
              state: PREPARING_REBALANCE
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/lag-summary
            - kind: KafkaConsumerGroup
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-3
              is_simple: false
              partition_assignor: org.apache.kafka.clients.consumer.RangeAssignor
              state: DEAD
              coordinator:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
              consumers:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/consumers
              lag_summary:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/lag-summary
          schema:
            $ref: '#/components/schemas/ConsumerGroupDataList'
      description: The list of consumer groups.
    ListConsumerLagsResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerLagList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags
              next: null
            data:
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 1
              consumer_id: consumer-1
              instance_id: consumer-instance-1
              client_id: client-1
              current_offset: 1
              log_end_offset: 101
              lag: 100
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 2
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              current_offset: 1
              log_end_offset: 11
              lag: 10
            - kind: KafkaConsumerLag
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/3
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=3
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              topic_name: topic-1
              partition_id: 3
              consumer_id: consumer-3
              instance_id: consumer-instance-3
              client_id: client-3
              current_offset: 1
              log_end_offset: 1
              lag: 0
          schema:
            $ref: '#/components/schemas/ConsumerLagDataList'
      description: The list of consumer lags.
    ListConsumersResponse:
      content:
        application/json:
          example:
            kind: KafkaConsumerList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers
              next: null
            data:
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-1
              instance_id: consumer-instance-1
              client_id: client-1
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
            - kind: KafkaConsumer
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2
                resource_name: crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2
              cluster_id: cluster-1
              consumer_group_id: consumer-group-1
              consumer_id: consumer-2
              instance_id: consumer-instance-2
              client_id: client-2
              assignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments
          schema:
            $ref: '#/components/schemas/ConsumerDataList'
      description: The list of consumers.
    ListPartitionsResponse:
      content:
        application/json:
          example:
            kind: KafkaPartitionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
              next: null
            data:
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
            - kind: KafkaPartition
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 3
              leader:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas/3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
              reassignment:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
          schema:
            $ref: '#/components/schemas/PartitionDataList'
      description: The list of partitions.
    ListReplicasResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
              next: null
            data:
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 1
              is_leader: true
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/2
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=2
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 2
              is_leader: false
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/3
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/replica=3
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              broker_id: 3
              is_leader: false
              is_in_sync: false
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3
          schema:
            $ref: '#/components/schemas/ReplicaDataList'
      description: The list of replicas.
    ListTopicConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicConfigList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
              next: null
            data:
            - kind: KafkaTopicConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy
                resource_name: crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy
              cluster_id: cluster-1
              topic_name: topic-1
              name: cleanup.policy
              value: compact
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_TOPIC_CONFIG
              synonyms:
              - name: cleanup.policy
                value: compact
                source: DYNAMIC_TOPIC_CONFIG
              - name: cleanup.policy
                value: delete
                source: DEFAULT_CONFIG
            - kind: KafkaTopicConfig
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type
                resource_name: crn:///kafka=cluster-1/topic=topic-1/config=compression.type
              cluster_id: cluster-1
              topic_name: topic-1
              name: compression.type
              value: gzip
              is_default: false
              is_read_only: false
              is_sensitive: false
              source: DYNAMIC_TOPIC_CONFIG
              synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_TOPIC_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
          schema:
            $ref: '#/components/schemas/TopicConfigDataList'
      description: The list of cluster configs.
    ListTopicsResponse:
      content:
        application/json:
          example:
            kind: KafkaTopicList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics
              next: null
            data:
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1
                resource_name: crn:///kafka=cluster-1/topic=topic-1
              cluster_id: cluster-1
              topic_name: topic-1
              is_internal: false
              replication_factor: 3
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2
                resource_name: crn:///kafka=cluster-1/topic=topic-2
              cluster_id: cluster-1
              topic_name: topic-2
              is_internal: true
              replication_factor: 4
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/-/reassignments
            - kind: KafkaTopic
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3
                resource_name: crn:///kafka=cluster-1/topic=topic-3
              cluster_id: cluster-1
              topic_name: topic-3
              is_internal: false
              replication_factor: 5
              partitions_count: 1
              partitions:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions
              configs:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/configs
              partition_reassignments:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/-/reassignments
          schema:
            $ref: '#/components/schemas/TopicDataList'
      description: The list of topics.
    ProduceResponse:
      content:
        application/json:
          example:
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            offset: 0
            timestamp: 2021-02-05T19:14:42Z
            key:
              type: BINARY
              size: 7
            value:
              type: AVRO
              subject: topic-1-value
              schema_id: 1
              schema_version: 1
              size: 7
          schema:
            $ref: '#/components/schemas/ProduceResponse'
    SearchAclsResponse:
      content:
        application/json:
          example:
            kind: KafkaAclList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?principal=alice
            data:
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=alice&host=*&operation=ALL&permission=ALLOW
              cluster_id: cluster-1
              resource_type: TOPIC
              resource_name: topic-
              pattern_type: PREFIXED
              principal: alice
              host: '*'
              operation: ALL
              permission: ALLOW
            - kind: KafkaAcl
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=cluster-1&pattern_type=LITERAL&principal=bob&host=*&operation=DESCRIBE&permission=DENY
              cluster_id: cluster-1
              resource_type: CLUSTER
              resource_name: cluster-2
              pattern_type: LITERAL
              principal: alice
              host: '*'
              operation: DESCRIBE
              permission: DENY
          schema:
            $ref: '#/components/schemas/AclDataList'
      description: The list of ACLs.
    SearchReassignmentsByTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaReassignmentList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment
              next: null
            data:
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=1/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 1
              adding_replicas:
              - 1
              - 2
              removing_replicas:
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              adding_replicas:
              - 1
              removing_replicas:
              - 2
              - 3
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas
            - kind: KafkaReassignment
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=3/reassignment
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 3
              adding_replicas:
              - 3
              removing_replicas:
              - 1
              - 2
              replicas:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas
          schema:
            $ref: '#/components/schemas/ReassignmentDataList'
      description: The ongoing replicas reassignments.
    SearchReplicasByBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/partition-replicas
              next: null
            data:
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-1/partition=2/replica=1
              cluster_id: cluster-1
              topic_name: topic-1
              partition_id: 2
              broker_id: 1
              is_leader: true
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/3/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=3/replica=1
              cluster_id: cluster-1
              topic_name: topic-2
              partition_id: 3
              broker_id: 1
              is_leader: false
              is_in_sync: true
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaReplica
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/1/replicas/1
                resource_name: crn:///kafka=cluster-1/topic=topic-3/partition=1/replica=1
              cluster_id: cluster-1
              topic_name: topic-3
              partition_id: 1
              broker_id: 1
              is_leader: false
              is_in_sync: false
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/ReplicaDataList'
      description: The list of replicas.
    BadRequestErrorResponse:
      content:
        application/json:
          examples:
            create_topic_already_exists:
              description: Thrown when trying to create a topic with a name already
                used by an existing topic.
              value:
                error_code: 40002
                message: Topic 'my-topic' already exists.
            produce_message_badly_escaped:
              description: Thrown when using unescaped single quotes within a single-quote-delimited
                record.
              value:
                error_code: 400
                message: |-
                  Unexpected character ('k' (code 107)): was expecting double-quote to start field name
                   at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 3]
          schema:
            $ref: '#/components/schemas/Error'
        text/plain:
          example:
            description: Thrown when trying to create a topic and passing a string
              for the replication factor.
            value: 'Cannot deserialize value of type `java.lang.Integer` from String
              "all": not a valid Integer value\n at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
              line: 1, column: 53] (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
          schema:
            type: string
      description: Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure. Usually
        serves application/json content, although in some cases simple text/plain
        content can be returned.
    UnauthorizedErrorResponse:
      content:
        application/json:
          examples:
            kafka_authentication_failed:
              description: Thrown when using Basic authentication with wrong Kafka
                credentials.
              value:
                error_code: 40101
                message: Authentication failed
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates a client authentication error. Kafka authentication failures
        will contain error code 40101 in the response body.
    NotFoundErrorResponse:
      content:
        application/json:
          examples:
            endpoint_not_found:
              description: Thrown for generic HTTP 404 errors.
              value:
                error_code: 404
                message: HTTP 404 Not Found
            cluster_not_found:
              description: Thrown when using a non-existing cluster ID.
              value:
                error_code: 404
                message: Cluster my-cluster cannot be found.
            unknown_topic_or_partition:
              description: Thrown when using a non-existing topic name or partition
                ID.
              value:
                error_code: 40403
                message: This server does not host this topic-partition.
          schema:
            $ref: '#/components/schemas/Error'
      description: Indicates attempted access to an unreachable or non-existing resource
        like e.g. an unknown topic or partition. GET requests to endpoints not allowed
        in the accesslists will also result in this response.
    TooManyRequestsErrorResponse:
      content:
        text/html:
          example:
            description: A sample response from Jetty's DoSFilter.
            value: <html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
              <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP ERROR
              429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td>
              </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th>
              <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td>
              </tr> </table> </body> </html>
          schema:
            type: string
      description: Indicates that a rate limit threshold has been reached, and the
        client should retry again later.
    ServerErrorResponse:
      content:
        application/json:
          examples:
            generic_internal_server_error:
              description: Thrown for generic HTTP 500 errors.
              value:
                error_code: 500
                message: Internal Server Error
            produce_v3_missing_schema:
              description: Thrown when the specified schema cannot be fetched from
                Schema Registry.
              value:
                error_code: 50002
                message: Error when fetching latest schema version. subject = my-topic
          schema:
            $ref: '#/components/schemas/Error'
      description: A server-side problem that might not be addressable from the client
        side. Retriable Kafka errors will contain error code 50003 in the response
        body.
    ListReplicaStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaReplicaStatusList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic_1/partitions/0/replica-status
              resource_name: null
            data:
            - kind: KafkaReplicaStatus
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic-1/partitions/0/brokers/1/replica-status
              clusterId: cluster-1
              topicName: topic-1
              brokerId: 1
              partitionId: 0
              leader: true
              observer: false
              isrEligible: true
              inIsr: true
              caughtUp: true
              logStartOffset: 0
              logEndOffset: 0
              lastCaughtUpTimeMs: 100
              lastFetchTimeMs: 200
              linkName: test-link
            - kind: KafkaReplicaStatus
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/topics/topic-1/partitions/0/brokers/2/replica-status
              clusterId: cluster-1
              topicName: topic-1
              brokerId: 2
              partitionId: 0
              leader: false
              observer: false
              isrEligible: true
              inIsr: true
              caughtUp: true
              logStartOffset: 0
              logEndOffset: 0
              lastCaughtUpTimeMs: 100
              lastFetchTimeMs: 200
              linkName: test-link
          schema:
            $ref: '#/components/schemas/ReplicaStatusDataList'
      description: The list of Replica Statuses.
    GetAnyUnevenLoadResponse:
      content:
        application/json:
          example:
            kind: KafkaAnyUnevenLoad
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/any-uneven-load
              resource_name: crn:///kafka=cluster-1/any-uneven-load
            cluster_id: cluster-1
            status: BALANCING
            previous_status: BALANCING_FAILED
            status_updated_at: 2019-10-12T07:20:50Z
            previous_status_updated_at: 2019-10-12T07:20:35Z
            error_code: 10013
            error_message: The Confluent Balancer operation was overridden by a higher
              priority operation.
            broker_tasks:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
          schema:
            $ref: '#/components/schemas/AnyUnevenLoadData'
      description: The AnyUnevenLoad status
    GetBalancerStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaBalancerStatus
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/balancer
              resource_name: crn:///kafka=cluster-1/balancer
            cluster_id: cluster-1
            status: ERROR
            error_code: 10014
            error_message: The Confluent Balancer failed to start as JBOD is enabled
              for the cluster.
            any_uneven_load:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/even-cluster-load
            broker_tasks:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
          schema:
            $ref: '#/components/schemas/BalancerStatusData'
      description: The balancer status
    GetBrokerRemovalResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerRemoval
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              resource_name: crn:///kafka=cluster-1/broker=1/
            cluster_id: cluster-1
            broker_id: 1
            broker_task:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerRemovalData'
      description: The single broker removal response
    ListBrokerRemovalResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerRemovalList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers:delete
              next: null
            data:
            - kind: KafkaBrokerRemoval
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1/
              cluster_id: cluster-1
              broker_id: 1
              broker_task:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerRemoval
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
                resource_name: crn:///kafka=cluster-1/broker=1/
              cluster_id: cluster-1
              broker_id: 1
              broker_task:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerRemovalDataList'
      description: The multiple broker removal response
    GetBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTask
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
              resource_name: crn:///kafka=cluster-1/broker=1/task=1
            cluster_id: cluster-1
            broker_id: 1
            task_type: add-broker
            task_status: FAILED
            sub_task_statuses:
              partition_reassignment_status: ERROR
            created_at: 2019-10-12T07:20:50Z
            updated_at: 2019-10-12T07:20:55Z
            error_code: 10013
            error_message: The Confluent Balancer operation was overridden by a higher
              priority operation
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerTaskData'
      description: The broker task
    ListBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: SUCCESS
              sub_task_statuses:
                partition_reassignment_status: COMPLETED
              created_at: 2019-10-12T10:20:40Z
              updated_at: 2019-10-12T10:20:45Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/tasks/remove-broker
                resource_name: crn:///kafka=cluster-1/broker=2/task=remove-broker
              cluster_id: cluster_id
              broker_id: 2
              task_type: remove-broker
              task_status: FAILED
              shutdown_scheduled: true
              sub_task_statuses:
                broker_replica_exclusion_status: COMPLETED
                partition_reassignment_status: ERROR
                broker_shutdown_status: CANCELED
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: Error while computing the initial remove broker plan
                for brokers [2] prior to shutdown.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerTaskByBrokerResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: IN_PROGRESS
              sub_task_statuses:
                partition_reassignment_status: IN_PROGRESS
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/remove-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=remove-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: remove-broker
              task_status: FAILED
              shutdown_scheduled: false
              sub_task_statuses:
                broker_replica_exclusion_status: EXCLUDED
                partition_reassignment_status: ERROR
                broker_shutdown_status: CANCELED
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: Error while computing the initial remove broker plan
                for brokers [1] prior to shutdown.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerTaskByTaskTypeResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/-/tasks
              next: null
            data:
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=1/task=add-broker
              cluster_id: cluster_id
              broker_id: 1
              task_type: add-broker
              task_status: IN_PROGRESS
              sub_task_statuses:
                partition_reassignment_status: IN_PROGRESS
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2/tasks/add-broker
                resource_name: crn:///kafka=cluster-1/broker=2/task=add-broker
              cluster_id: cluster_id
              broker_id: 2
              task_type: add-broker
              task_status: FAILED
              sub_task_statuses:
                partition_reassignment_status: ERROR
              created_at: 2019-10-12T07:20:50Z
              updated_at: 2019-10-12T07:20:55Z
              error_code: 10006
              error_message: Error while computing the initial add broker plan for
                brokers [2]
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerTaskDataList'
      description: The list of tasks.
    ListBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              reason: Broker is to be removed.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              reason: Broker is to be removed.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionDataList'
      description: The list of broker replica exclusions.
    GetBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaBrokerReplicaExclusion
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
              next: null
            cluster_id: cluster-1
            broker_id: 1
            reason: Broker is to be removed.
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionData'
      description: A Broker Replica Exclusion.
    ListCreateBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: SET
              reason: Broker is to be removed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: SET
              reason: Broker is to be removed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    ListDeleteBrokerReplicaExclusionResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    ListDeleteBrokerReplicaExclusionErrorResponse:
      content:
        application/json:
          example:
            kind: KafkaAlterBrokerReplicaExclusionList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions
              next: null
            data:
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/1
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=1
              cluster_id: cluster-1
              broker_id: 1
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: 404
              error_message: No replica exclusion for broker 1 was present.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaAlterBrokerReplicaExclusion
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-replica-exclusions/2
                resource_name: crn:///kafka=cluster-1/broker-replica-exclusions=2
              cluster_id: cluster-1
              broker_id: 2
              exclusion: DELETE
              reason: Broker removal is completed.
              error_code: null
              error_message: null
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList'
      description: The list of alter broker replica exclusions.
    GetRemoveBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaRemoveBrokerTask
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/1
              resource_name: crn:///kafka=cluster-1/remove-broker-task=1
            cluster_id: cluster-1
            broker_id: 1
            shutdown_scheduled: false
            broker_replica_exclusion_status: COMPLETED
            partition_reassignment_status: FAILED
            broker_shutdown_status: CANCELED
            error_code: 10006
            error_message: Error while computing the initial remove broker plan for
              brokers [1] prior to shutdown.
            broker:
              related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
          schema:
            $ref: '#/components/schemas/RemoveBrokerTaskData'
      description: The remove broker task.
    ListRemoveBrokerTaskResponse:
      content:
        application/json:
          example:
            kind: KafkaRemoveBrokerTaskList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks
              next: null
            data:
            - kind: KafkaRemoveBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/1
                resource_name: crn:///kafka=cluster-1/remove-broker-task=1
              cluster_id: cluster-1
              broker_id: 1
              shutdown_scheduled: true
              broker_replica_exclusion_status: COMPLETED
              partition_reassignment_status: FAILED
              broker_shutdown_status: CANCELED
              error_code: 10006
              error_message: Error while computing the initial remove broker plan
                for brokers [1] prior to shutdown.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1
            - kind: KafkaRemoveBrokerTask
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/remove-broker-tasks/2
                resource_name: crn:///kafka=cluster-1/remove-broker-task=2
              cluster_id: cluster-1
              broker_id: 2
              shutdown_scheduled: true
              broker_replica_exclusion_status: EXCLUDED
              partition_reassignment_status: FAILED
              broker_shutdown_status: CANCELED
              error_code: 10006
              error_message: Error while computing the initial remove broker plan
                for brokers [2] prior to shutdown.
              broker:
                related: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2
          schema:
            $ref: '#/components/schemas/RemoveBrokerTaskDataList'
      description: The list of remove broker tasks.
    NoContentResponse:
      description: Operation succeeded, no content in the response
    ListLinksResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links
              next: null
            data:
            - kind: KafkaLinkData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-1
                resource_name: null
              source_cluster_id: src-cluster-id
              link_name: my-new-link-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
              topic_names:
              - topic-sb-1
              - topic-sb-2
            - kind: KafkaLinkData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-2
                resource_name: null
              source_cluster_id: src-cluster-id
              link_name: my-new-link-2
              link_id: abced-f7d8-4844-a577-abcdefghijklmnp
              topic_names:
              - topic-db-1
              - topic-db-2
          schema:
            $ref: '#/components/schemas/ListLinksResponseDataList'
      description: A list of link names and properties
    GetLinkResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkData
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1
              resource_name: null
            source_cluster_id: src-cluster-id
            link_name: my-new-link-1
            link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
            topic_names:
            - topic-db-1
            - topic-db-2
          schema:
            $ref: '#/components/schemas/ListLinksResponseData'
      description: Single link name and properties
    ListLinkConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkConfigDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/v-0Ce-CkTyKQol9v46LaCQ/links/link-nb-1/configs
              next: null
            data:
            - kind: KafkaLinkConfigData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                resource_name: null
              cluster_id: 1Rh_4htxSuen7RYGvGmgNw
              name: consumer.offset.sync.ms
              value: "3825940"
              default: false
              read_only: false
              sensitive: false
              source: DYNAMIC_CLUSTER_LINK_CONFIG
              synonyms:
              - cosm
              link_name: link-db-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
            - kind: KafkaLinkConfigData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
                resource_name: null
              cluster_id: 1Rh_4htxSuen7RYGvGmgNw
              name: acl.sync.ms
              value: "5000"
              default: false
              read_only: false
              sensitive: false
              source: DYNAMIC_CLUSTER_LINK_CONFIG
              synonyms:
              - asm
              link_name: link-db-1
              link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
          schema:
            $ref: '#/components/schemas/ListLinkConfigsResponseDataList'
      description: Config name and value
    GetLinkConfigsResponse:
      content:
        application/json:
          example:
            kind: KafkaLinkConfigData
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1
              resource_name: null
            cluster_id: 1Rh_4htxSuen7RYGvGmgNw
            name: consumer.offset.sync.ms
            value: "3825940"
            default: false
            read_only: false
            sensitive: false
            source: DYNAMIC_CLUSTER_LINK_CONFIG
            synonyms:
            - cosm
            link_name: link-db-1
            link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
            topics:
            - topic-db-1
            - topic-db-2
          schema:
            $ref: '#/components/schemas/ListLinkConfigsResponseData'
      description: Config name and value
    ListMirrorTopicsResponse:
      content:
        application/json:
          example:
            kind: KafkaMirrorDataList
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors
              resource_name: crn:///kafka=cluster-1
              next: null
            data:
            - kind: KafkaMirrorData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1
                resource_name: crn:///kafka=cluster-1
              link_name: link-sb-1
              resource_name: crn:///kafka=cluster-1
              mirror_topic_name: topic-1
              source_topic_name: topic-1
              num_partitions: 3
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
              mirror_topic_status: active
              state_time_ms: 1612550939300
            - kind: KafkaMirrorData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2
                resource_name: crn:///kafka=cluster-1
              link_name: link-sb-2
              resource_name: crn:///kafka=cluster-1
              mirror_topic_name: topic-2
              source_topic_name: topic-2
              num_partitions: 3
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
              mirror_topic_status: stopped
              state_time_ms: 1612551353640
          schema:
            $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
      description: Metadata of mirror topics
    DescribeMirrorTopicResponse:
      content:
        application/json:
          example:
            kind: KafkaMirrorData
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors/topic-1
              resource_name: crn:///kafka=cluster-1
            link_name: link-sb-1
            mirror_topic_name: topic-1
            source_topic_name: topic-1
            num_partitions: 3
            mirror_lags:
            - partition: 0
              lag: 0
              last_source_fetch_offset: 0
            - partition: 1
              lag: 10000
              last_source_fetch_offset: 1000
            - partition: 2
              lag: 40000
              last_source_fetch_offset: 12030
            mirror_topic_status: active
            state_time_ms: 1612550939300
          schema:
            $ref: '#/components/schemas/ListMirrorTopicsResponseData'
      description: Metadata of the mirror topic
    AlterMirrorStatusResponse:
      content:
        application/json:
          example:
            kind: KafkaPromoteMirror
            metadata:
              self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors
              resource_name: crn:///kafka=cluster-1
            data:
            - kind: AlterMirrorsData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1
                resource: crn:///kafka=cluster-1
              mirror_topic_name: topic-sb
              error_code: null
              error_message: null
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
            - kind: AlterMirrorsData
              metadata:
                self: https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2
                resource: crn:///kafka=cluster-1
              mirror_topic_name: topic-2
              error_code: 400
              error_message: Topic 'topic-2' has already stopped its mirror from 'my-new-link-1'
              mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
          schema:
            $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
      description: Mirror status alternation result
    BadBrokerOrBalancerRequestErrorResponse:
      content:
        application/json:
          examples:
            IllegalBrokerRemoval:
              value:
                error_code: 400
                message: 'Cannot remove broker 1 as there are partitions with replication
                  factor equal to 1 on the broker. One such partition: test_topic_parition_0.'
            BalancerOffline:
              value:
                error_code: 400
                message: The Confluent Balancer component is disabled or not started
                  yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad broker or balancer request
    BalancerOfflineErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: The Confluent Balancer component is disabled or not started yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Balancer offline
    BrokerNotFoundErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: 'Broker not found. Broker: 1 not found in the cluster: cluster-1'
          schema:
            $ref: '#/components/schemas/Error'
      description: Broker not found.
    UnrepresentableBrokerErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: The given broker id -10 is invalid
          schema:
            $ref: '#/components/schemas/Error'
      description: Unrepresentable broker id.
    BalancerNotEnabledErrorResponse:
      content:
        application/json:
          example:
            error_code: 500
            message: The Confluent Balancer component is disabled or not started yet.
          schema:
            $ref: '#/components/schemas/Error'
      description: Confluent Balancer disabled or not started.
    ClusterAuthorizationErrorResponse:
      content:
        application/json:
          example:
            error_code: 401
            message: 'Not authorized: the authenticated user didn''t have the right
              access to the resource.'
          schema:
            $ref: '#/components/schemas/Error'
      description: Operation not authorized.
    ClusterLinkNotFoundErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: The cluster link doesn't exist.
          schema:
            $ref: '#/components/schemas/Error'
      description: The cluster link doesn't exist.
    InvalidClusterLinkErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: Invalid Cluster Link Name.
          schema:
            $ref: '#/components/schemas/Error'
      description: The cluster link doesn't exist.
    InvalidConfigNameErrorResponse:
      content:
        application/json:
          example:
            error_code: 400
            message: Invalid Config Name.
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid Config Name.
    ClusterLinkExistsErrorResponse:
      content:
        application/json:
          example:
            error_code: 404
            message: A cluster link already exists with the provided link name
          schema:
            $ref: '#/components/schemas/Error'
      description: A cluster link already exists with the provided link name
    TimeoutErrorResponse:
      content:
        application/json:
          example:
            error_code: 408
            message: The server received the request, but the operation time out
          schema:
            $ref: '#/components/schemas/Error'
      description: The server received the request, but the operation time out
  schemas:
    AbstractConfigData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AbstractConfigData_allOf'
    AclData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AclData_allOf'
    AclDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/inline_response_200'
    AclOperation:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - ALL
      - READ
      - WRITE
      - CREATE
      - DELETE
      - ALTER
      - DESCRIBE
      - CLUSTER_ACTION
      - DESCRIBE_CONFIGS
      - ALTER_CONFIGS
      - IDEMPOTENT_WRITE
    AclPatternType:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - MATCH
      - LITERAL
      - PREFIXED
    AclPermission:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - ANY
      - DENY
      - ALLOW
    AclResourceType:
      enum:
      - UNKNOWN
      - ANY
      - TOPIC
      - GROUP
      - CLUSTER
      - TRANSACTIONAL_ID
      - DELEGATION_TOKEN
      type: string
    AlterConfigBatchRequestData:
      example:
        data:
        - name: name
          value: value
          operation: operation
        - name: name
          value: value
          operation: operation
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterConfigBatchRequestData_data'
          type: array
      required:
      - data
      type: object
    AnyValue:
      nullable: true
    BrokerConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/BrokerConfigData_allOf'
    BrokerConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerConfigDataList_allOf'
    BrokerData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerData_allOf'
    BrokerDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerDataList_allOf'
    ClusterConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/ClusterConfigData_allOf'
    ClusterConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ClusterConfigDataList_allOf'
    ClusterConfigType:
      type: string
      x-extensible-enum:
      - BROKER
    ClusterData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ClusterData_allOf'
    ClusterDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ClusterDataList_allOf'
    CreateAclRequestData:
      example:
        principal: principal
        pattern_type: pattern_type
        host: host
        permission: permission
        resource_name: resource_name
        operation: operation
      properties:
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - MATCH
          - LITERAL
          - PREFIXED
        principal:
          type: string
        host:
          type: string
        operation:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - ALL
          - READ
          - WRITE
          - CREATE
          - DELETE
          - ALTER
          - DESCRIBE
          - CLUSTER_ACTION
          - DESCRIBE_CONFIGS
          - ALTER_CONFIGS
          - IDEMPOTENT_WRITE
        permission:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - DENY
          - ALLOW
      required:
      - host
      - operation
      - pattern_type
      - permission
      - principal
      - resource_name
      - resource_type
      type: object
    CreateTopicRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        replication_factor: 6
        topic_name: topic_name
        replicas_assignments:
        - partition_id: 1
          broker_ids:
          - 5
          - 5
        - partition_id: 1
          broker_ids:
          - 5
          - 5
        partitions_count: 0
      properties:
        topic_name:
          type: string
        partitions_count:
          type: integer
        replication_factor:
          type: integer
        replicas_assignments:
          items:
            $ref: '#/components/schemas/CreateTopicRequestData_replicas_assignments'
          type: array
        configs:
          items:
            $ref: '#/components/schemas/CreateTopicRequestData_configs'
          type: array
      required:
      - topic_name
      type: object
    ConfigSource:
      type: string
      x-extensible-enum:
      - DYNAMIC_CLUSTER_LINK_CONFIG
      - DYNAMIC_TOPIC_CONFIG
      - DYNAMIC_BROKER_LOGGER_CONFIG
      - DYNAMIC_BROKER_CONFIG
      - DYNAMIC_DEFAULT_BROKER_CONFIG
      - STATIC_BROKER_CONFIG
      - DEFAULT_CONFIG
      - UNKNOWN
    ConfigSynonymData:
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
          - DYNAMIC_TOPIC_CONFIG
          - DYNAMIC_BROKER_LOGGER_CONFIG
          - DYNAMIC_BROKER_CONFIG
          - DYNAMIC_DEFAULT_BROKER_CONFIG
          - STATIC_BROKER_CONFIG
          - DEFAULT_CONFIG
          - UNKNOWN
      required:
      - name
      - source
      type: object
    ConsumerAssignmentData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerAssignmentData_allOf'
    ConsumerAssignmentDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerAssignmentDataList_allOf'
    ConsumerData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerData_allOf'
    ConsumerDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerDataList_allOf'
    ConsumerGroupData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerGroupData_allOf'
    ConsumerGroupDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerGroupDataList_allOf'
    ConsumerGroupState:
      type: string
      x-extensible-enum:
      - UNKNOWN
      - PREPARING_REBALANCE
      - COMPLETING_REBALANCE
      - STABLE
      - DEAD
      - EMPTY
    ConsumerLagData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerLagData_allOf'
    ConsumerLagDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ConsumerLagDataList_allOf'
    ConsumerGroupLagSummaryData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ConsumerGroupLagSummaryData_allOf'
    Error:
      properties:
        error_code:
          format: int32
          type: integer
        message:
          nullable: true
          type: string
      required:
      - error_code
      - message
      type: object
    PartitionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/PartitionData_allOf'
    PartitionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/PartitionDataList_allOf'
    ProduceResponse:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        offset:
          type: integer
        timestamp:
          format: date-time
          nullable: true
          type: string
        key:
          $ref: '#/components/schemas/ProduceResponseData'
        value:
          $ref: '#/components/schemas/ProduceResponseData'
      required:
      - cluster_id
      - offset
      - partition_id
      - topic_name
      type: object
    ProduceResponseData:
      nullable: true
      properties:
        size:
          type: integer
        type:
          nullable: true
          type: string
          x-extensible-enum:
          - BINARY
          - JSON
          - AVRO
          - JSONSCHEMA
          - PROTOBUF
        subject:
          nullable: true
          type: string
        schema_id:
          nullable: true
          type: integer
        schema_version:
          nullable: true
          type: integer
      required:
      - size
      type: object
    ProduceRequest:
      properties:
        partition_id:
          nullable: true
          type: integer
        headers:
          items:
            $ref: '#/components/schemas/ProduceRequestHeader'
          type: array
        key:
          $ref: '#/components/schemas/ProduceRequestData'
        value:
          $ref: '#/components/schemas/ProduceRequestData'
        timestamp:
          format: date-time
          nullable: true
          type: string
      type: object
    ProduceRequestData:
      nullable: true
      properties:
        type:
          type: string
          x-extensible-enum:
          - BINARY
          - JSON
          - AVRO
          - JSONSCHEMA
          - PROTOBUF
        subject:
          nullable: true
          type: string
        subject_name_strategy:
          nullable: true
          type: string
          x-extensible-enum:
          - TOPIC_NAME
          - RECORD_NAME
          - TOPIC_RECORD_NAME
        schema_id:
          nullable: true
          type: integer
        schema_version:
          nullable: true
          type: integer
        raw_schema:
          nullable: true
          type: string
        data:
          nullable: true
      type: object
    ProduceRequestHeader:
      properties:
        name:
          type: string
        value:
          format: byte
          nullable: true
          type: string
      required:
      - name
      type: object
    ReassignmentData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReassignmentData_allOf'
    ReassignmentDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReassignmentDataList_allOf'
    Relationship:
      properties:
        related:
          type: string
      required:
      - related
      type: object
    ReplicaData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReplicaData_allOf'
    ReplicaDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReplicaDataList_allOf'
    Resource:
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
      required:
      - kind
      - metadata
      type: object
    ResourceCollection:
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceCollectionMetadata'
      required:
      - kind
      - metadata
      type: object
    ResourceCollectionMetadata:
      properties:
        self:
          type: string
        next:
          nullable: true
          type: string
      required:
      - self
      type: object
    ResourceMetadata:
      properties:
        self:
          type: string
        resource_name:
          nullable: true
          type: string
      required:
      - self
      type: object
    TopicConfigData:
      allOf:
      - $ref: '#/components/schemas/AbstractConfigData'
      - $ref: '#/components/schemas/TopicConfigData_allOf'
    TopicConfigDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/TopicConfigDataList_allOf'
    TopicData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/TopicData_allOf'
    TopicDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/TopicDataList_allOf'
    UpdateConfigRequestData:
      example:
        value: value
      properties:
        value:
          nullable: true
          type: string
      type: object
    ReplicaStatusData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ReplicaStatusData_allOf'
    ReplicaStatusDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ReplicaStatusDataList_allOf'
    AnyUnevenLoadData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AnyUnevenLoadData_allOf'
    BalancerStatusData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BalancerStatusData_allOf'
    BrokerRemovalData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerRemovalData_allOf'
    BrokerRemovalDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerRemovalDataList_allOf'
    BrokerTaskData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerTaskData_allOf'
    BrokerTaskDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerTaskDataList_allOf'
    BrokerReplicaExclusionRequestData:
      properties:
        broker_id:
          type: integer
        reason:
          type: string
      required:
      - broker_id
      - reason
      type: object
    BrokerReplicaExclusionBatchRequestData:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionRequestData'
          type: array
      required:
      - data
      type: object
    BrokerReplicaExclusionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/BrokerReplicaExclusionData_allOf'
    BrokerReplicaExclusionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/BrokerReplicaExclusionDataList_allOf'
    AlterBrokerReplicaExclusionData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AlterBrokerReplicaExclusionData_allOf'
    AlterBrokerReplicaExclusionDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/AlterBrokerReplicaExclusionDataList_allOf'
    RemoveBrokerTaskData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/RemoveBrokerTaskData_allOf'
    RemoveBrokerTaskDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/RemoveBrokerTaskDataList_allOf'
    ConfigData:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
      - name
      - value
    CreateLinkRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        source_cluster_id: source_cluster_id
      properties:
        source_cluster_id:
          type: string
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      required:
      - source_cluster_id
      type: object
    UpdateLinkConfigRequestData:
      example:
        value: value
      properties:
        value:
          type: string
      required:
      - value
      type: object
    ListLinksResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListLinksResponseData_allOf'
    ListLinksResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListLinksResponseDataList_allOf'
    ListLinkConfigsResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListLinkConfigsResponseData_allOf'
    ListLinkConfigsResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListLinkConfigsResponseDataList_allOf'
    CreateMirrorTopicRequestData:
      example:
        configs:
        - name: name
          value: value
        - name: name
          value: value
        source_topic_name: source_topic_name
        replication_factor: 0
      properties:
        source_topic_name:
          type: string
        replication_factor:
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      required:
      - source_topic_name
      type: object
    AlterMirrorsRequestData:
      example:
        mirror_topic_names:
        - mirror_topic_names
        - mirror_topic_names
      properties:
        mirror_topic_names:
          items:
            type: string
          type: array
      required:
      - mirror_topic_names
      type: object
    ListMirrorTopicsResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/ListMirrorTopicsResponseData_allOf'
    ListMirrorTopicsResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/ListMirrorTopicsResponseDataList_allOf'
    AlterMirrorStatusResponseData:
      allOf:
      - $ref: '#/components/schemas/Resource'
      - $ref: '#/components/schemas/AlterMirrorStatusResponseData_allOf'
    AlterMirrorStatusResponseDataList:
      allOf:
      - $ref: '#/components/schemas/ResourceCollection'
      - $ref: '#/components/schemas/AlterMirrorStatusResponseDataList_allOf'
    RemoveBrokersRequestData:
      properties:
        broker_ids:
          items:
            type: integer
          type: array
      required:
      - broker_ids
      type: object
    MirrorLags:
      items:
        $ref: '#/components/schemas/MirrorLag'
      type: array
    MirrorLag:
      properties:
        partition:
          type: integer
        lag:
          type: integer
        last_source_fetch_offset:
          format: int64
          type: integer
      required:
      - lag
      - last_source_fetch_offset
      - partition
      type: object
    MirrorTopicStatus:
      enum:
      - active
      - failed
      - paused
      - stopped
      - pending_stopped
      type: string
    TopicList:
      example:
        topics:
        - topic-db
        - topic-nb
        - topic-sb
      properties:
        topics:
          items:
            type: string
          type: array
      required:
      - topics
      type: object
    AnyUnevenLoadStatus:
      type: string
      x-extensible-enum:
      - STARTING
      - BALANCING
      - BALANCED
      - BALANCING_FAILED
      - DISABLED
      - ABORTED
      - UNKNOWN
    BalancerStatus:
      type: string
      x-extensible-enum:
      - BOOTSTRAPPING
      - STARTING
      - ENABLED
      - ERROR
      - DISABLED
      - FAILOVER
      - LOAD_FAILURE
      - UNKNOWN
    BrokerTaskType:
      enum:
      - add-broker
      - remove-broker
      type: string
    BrokerTaskStatus:
      type: string
      x-extensible-enum:
      - FAILED
      - IN_PROGRESS
      - SUCCESS
      - UNKNOWN
    ExclusionOp:
      type: string
      x-extensible-enum:
      - SET
      - DELETE
      - UNKNOWN
    BrokerReplicaExclusionStatus:
      type: string
      x-extensible-enum:
      - PENDING
      - IN_PROGRESS
      - EXCLUDED
      - REMOVING
      - ERROR
      - CANCELED
      - COMPLETED
      - UNKNOWN
    PartitionReassignmentStatus:
      type: string
      x-extensible-enum:
      - CANCELED
      - ERROR
      - PENDING
      - IN_PROGRESS
      - COMPLETED
      - UNKNOWN
    BrokerShutdownStatus:
      type: string
      x-extensible-enum:
      - ERROR
      - CANCELED
      - PENDING
      - IN_PROGRESS
      - COMPLETED
      - UNKNOWN
    DeprecatedPartitionReassignmentStatus:
      type: string
      x-extensible-enum:
      - CANCELED
      - FAILED
      - PENDING
      - IN_PROGRESS
      - COMPLETE
    DeprecatedBrokerShutdownStatus:
      type: string
      x-extensible-enum:
      - FAILED
      - CANCELED
      - PENDING
      - COMPLETE
    inline_response_200:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/AclData'
          type: array
      required:
      - data
    AbstractConfigData_allOf:
      properties:
        cluster_id:
          type: string
        name:
          type: string
        value:
          nullable: true
          type: string
        is_default:
          type: boolean
        is_read_only:
          type: boolean
        is_sensitive:
          type: boolean
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
          - DYNAMIC_TOPIC_CONFIG
          - DYNAMIC_BROKER_LOGGER_CONFIG
          - DYNAMIC_BROKER_CONFIG
          - DYNAMIC_DEFAULT_BROKER_CONFIG
          - STATIC_BROKER_CONFIG
          - DEFAULT_CONFIG
          - UNKNOWN
        synonyms:
          items:
            $ref: '#/components/schemas/ConfigSynonymData'
          type: array
      required:
      - cluster_id
      - is_default
      - is_read_only
      - is_sensitive
      - name
      - source
      - synonyms
    AclData_allOf:
      properties:
        cluster_id:
          type: string
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - MATCH
          - LITERAL
          - PREFIXED
        principal:
          type: string
        host:
          type: string
        operation:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - ALL
          - READ
          - WRITE
          - CREATE
          - DELETE
          - ALTER
          - DESCRIBE
          - CLUSTER_ACTION
          - DESCRIBE_CONFIGS
          - ALTER_CONFIGS
          - IDEMPOTENT_WRITE
        permission:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - ANY
          - DENY
          - ALLOW
      required:
      - cluster_id
      - host
      - operation
      - pattern_type
      - permission
      - principal
      - resource_name
      - resource_type
    AlterConfigBatchRequestData_data:
      example:
        name: name
        value: value
        operation: operation
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
        operation:
          nullable: true
          type: string
          x-extensible-enum:
          - SET
          - DELETE
      required:
      - name
    BrokerConfigData_allOf:
      properties:
        broker_id:
          type: integer
      required:
      - broker_id
    BrokerConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerConfigData'
          type: array
      required:
      - data
    BrokerData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        host:
          nullable: true
          type: string
        port:
          nullable: true
          type: integer
        rack:
          nullable: true
          type: string
        configs:
          $ref: '#/components/schemas/Relationship'
        partition_replicas:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker_id
      - cluster_id
      - configs
      - partition_replicas
    BrokerDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerData'
          type: array
      required:
      - data
    ClusterConfigData_allOf:
      properties:
        config_type:
          type: string
          x-extensible-enum:
          - BROKER
      required:
      - config_type
    ClusterConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ClusterConfigData'
          type: array
      required:
      - data
    ClusterData_allOf:
      properties:
        cluster_id:
          type: string
        controller:
          $ref: '#/components/schemas/Relationship'
        acls:
          $ref: '#/components/schemas/Relationship'
        brokers:
          $ref: '#/components/schemas/Relationship'
        broker_configs:
          $ref: '#/components/schemas/Relationship'
        consumer_groups:
          $ref: '#/components/schemas/Relationship'
        topics:
          $ref: '#/components/schemas/Relationship'
        partition_reassignments:
          $ref: '#/components/schemas/Relationship'
      required:
      - acls
      - broker_configs
      - brokers
      - cluster_id
      - consumer_groups
      - partition_reassignments
      - topics
    ClusterDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ClusterData'
          type: array
      required:
      - data
    CreateTopicRequestData_replicas_assignments:
      example:
        partition_id: 1
        broker_ids:
        - 5
        - 5
      properties:
        partition_id:
          type: integer
        broker_ids:
          items:
            type: integer
          type: array
      required:
      - broker_ids
      - partition_id
    CreateTopicRequestData_configs:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
      - name
    ConsumerAssignmentData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        consumer_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        partition:
          $ref: '#/components/schemas/Relationship'
        lag:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - consumer_id
      - lag
      - partition
      - partition_id
      - topic_name
    ConsumerAssignmentDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerAssignmentData'
          type: array
      required:
      - data
    ConsumerData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        consumer_id:
          type: string
        instance_id:
          nullable: true
          type: string
        client_id:
          type: string
        assignments:
          $ref: '#/components/schemas/Relationship'
      required:
      - assignments
      - client_id
      - cluster_id
      - consumer_group_id
      - consumer_id
    ConsumerDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerData'
          type: array
      required:
      - data
    ConsumerGroupData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        is_simple:
          type: boolean
        partition_assignor:
          type: string
        state:
          type: string
          x-extensible-enum:
          - UNKNOWN
          - PREPARING_REBALANCE
          - COMPLETING_REBALANCE
          - STABLE
          - DEAD
          - EMPTY
        coordinator:
          $ref: '#/components/schemas/Relationship'
        consumer:
          $ref: '#/components/schemas/Relationship'
        lag_summary:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - consumers
      - coordinator
      - is_simple
      - lag_summary
      - partition_assignor
      - state
    ConsumerGroupDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerGroupData'
          type: array
      required:
      - data
    ConsumerLagData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        current_offset:
          format: int64
          type: integer
        log_end_offset:
          format: int64
          type: integer
        lag:
          format: int64
          type: integer
        consumer_id:
          type: string
        instance_id:
          nullable: true
          type: string
        client_id:
          type: string
      required:
      - client_id
      - cluster_id
      - consumer_group_id
      - consumer_id
      - current_offset
      - lag
      - log_end_offset
      - partition_id
      - topic_name
    ConsumerLagDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ConsumerLagData'
          type: array
      required:
      - data
    ConsumerGroupLagSummaryData_allOf:
      properties:
        cluster_id:
          type: string
        consumer_group_id:
          type: string
        max_lag_consumer_id:
          type: string
        max_lag_instance_id:
          nullable: true
          type: string
        max_lag_client_id:
          type: string
        max_lag_topic_name:
          type: string
        max_lag_partition_id:
          type: integer
        max_lag:
          format: int64
          type: integer
        total_lag:
          format: int64
          type: integer
        max_lag_consumer:
          $ref: '#/components/schemas/Relationship'
        max_lag_partition:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - consumer_group_id
      - max_lag
      - max_lag_client_id
      - max_lag_consumer
      - max_lag_consumer_id
      - max_lag_partition
      - max_lag_partition_id
      - max_lag_topic_name
      - total_lag
    PartitionData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        leader:
          $ref: '#/components/schemas/Relationship'
        replicas:
          $ref: '#/components/schemas/Relationship'
        reassignment:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - partition_id
      - reassignment
      - replicas
      - topic_name
    PartitionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/PartitionData'
          type: array
      required:
      - data
    ReassignmentData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        adding_replicas:
          items:
            type: integer
          type: array
        removing_replicas:
          items:
            type: integer
          type: array
        replicas:
          $ref: '#/components/schemas/Relationship'
      required:
      - adding_replicas
      - cluster_id
      - partition_id
      - removing_replicas
      - replicas
      - topic_name
    ReassignmentDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReassignmentData'
          type: array
      required:
      - data
    ReplicaData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
        broker_id:
          type: integer
        is_leader:
          type: boolean
        is_in_sync:
          type: boolean
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - is_in_sync
      - is_leader
      - partition_id
      - topic_name
    ReplicaDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReplicaData'
          type: array
      required:
      - data
    TopicConfigData_allOf:
      properties:
        topic_name:
          type: string
      required:
      - topic_name
    TopicConfigDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/TopicConfigData'
          type: array
      required:
      - data
    TopicData_allOf:
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        is_internal:
          type: boolean
        replication_factor:
          type: integer
        partitions_count:
          type: integer
        partitions:
          $ref: '#/components/schemas/Relationship'
        configs:
          $ref: '#/components/schemas/Relationship'
        partition_reassignments:
          $ref: '#/components/schemas/Relationship'
      required:
      - cluster_id
      - configs
      - is_internal
      - partition_reassignments
      - partitions
      - partitions_count
      - replication_factor
      - topic_name
    TopicDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/TopicData'
          type: array
      required:
      - data
    ReplicaStatusData_allOf:
      properties:
        clusterId:
          type: string
        topicName:
          type: string
        brokerId:
          type: integer
        partitionId:
          type: integer
        leader:
          type: boolean
        observer:
          type: boolean
        isrEligible:
          type: boolean
        inIsr:
          type: boolean
        caughtUp:
          type: boolean
        logStartOffset:
          type: integer
        logEndOffset:
          type: integer
        lastCaughtUpTimeMs:
          type: integer
        lastFetchTimeMs:
          type: integer
        linkName:
          type: string
      required:
      - brokerId
      - caughtUp
      - clusterId
      - inIsr
      - isrEligible
      - lastCaughtUpTimeMs
      - lastFetchTimeMs
      - leader
      - logEndOffset
      - logStartOffset
      - observer
      - partitionId
      - topicName
    ReplicaStatusDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ReplicaStatusData'
          type: array
      required:
      - data
    AnyUnevenLoadData_allOf:
      properties:
        cluster_id:
          type: string
        status:
          type: string
          x-extensible-enum:
          - STARTING
          - BALANCING
          - BALANCED
          - BALANCING_FAILED
          - DISABLED
          - ABORTED
          - UNKNOWN
        previous_status:
          type: string
          x-extensible-enum:
          - STARTING
          - BALANCING
          - BALANCED
          - BALANCING_FAILED
          - DISABLED
          - ABORTED
          - UNKNOWN
        status_updated_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        previous_status_updated_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker_tasks:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker_tasks
      - cluster_id
      - previous_status
      - previous_status_updated_at
      - status
      - status_updated_at
    BalancerStatusData_allOf:
      properties:
        cluster_id:
          type: string
        status:
          type: string
          x-extensible-enum:
          - BOOTSTRAPPING
          - STARTING
          - ENABLED
          - ERROR
          - DISABLED
          - FAILOVER
          - LOAD_FAILURE
          - UNKNOWN
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        any_uneven_load:
          $ref: '#/components/schemas/Relationship'
        broker_tasks:
          $ref: '#/components/schemas/Relationship'
      required:
      - any_uneven_load
      - broker_tasks
      - cluster_id
      - status
    BrokerRemovalData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        broker_task:
          $ref: '#/components/schemas/Relationship'
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - broker_task
      - cluster_id
    BrokerRemovalDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerRemovalData'
          type: array
      required:
      - data
    BrokerTaskData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        task_type:
          $ref: '#/components/schemas/BrokerTaskType'
        task_status:
          type: string
          x-extensible-enum:
          - FAILED
          - IN_PROGRESS
          - SUCCESS
          - UNKNOWN
        shutdown_scheduled:
          nullable: true
          type: boolean
        sub_task_statuses:
          additionalProperties:
            type: string
          type: object
        created_at:
          description: The date and time at which this task was created.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        updated_at:
          description: The date and time at which this task was last updated.
          example: 2019-10-12T07:20:50Z
          format: date-time
          readOnly: true
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - created_at
      - sub_task_statuses
      - task_status
      - task_type
      - updated_at
    BrokerTaskDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerTaskData'
          type: array
      required:
      - data
    BrokerReplicaExclusionData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        reason:
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - reason
    BrokerReplicaExclusionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionData'
          type: array
      required:
      - data
    AlterBrokerReplicaExclusionData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        exclusion:
          type: string
          x-extensible-enum:
          - SET
          - DELETE
          - UNKNOWN
        reason:
          type: string
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - cluster_id
      - exclusion
      - reason
    AlterBrokerReplicaExclusionDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterBrokerReplicaExclusionData'
          type: array
      required:
      - data
    RemoveBrokerTaskData_allOf:
      properties:
        cluster_id:
          type: string
        broker_id:
          type: integer
        shutdown_scheduled:
          type: boolean
        broker_replica_exclusion_status:
          type: string
          x-extensible-enum:
          - PENDING
          - IN_PROGRESS
          - EXCLUDED
          - REMOVING
          - ERROR
          - CANCELED
          - COMPLETED
          - UNKNOWN
        partition_reassignment_status:
          type: string
          x-extensible-enum:
          - CANCELED
          - FAILED
          - PENDING
          - IN_PROGRESS
          - COMPLETE
        broker_shutdown_status:
          type: string
          x-extensible-enum:
          - FAILED
          - CANCELED
          - PENDING
          - COMPLETE
        error_code:
          nullable: true
          type: integer
        error_message:
          nullable: true
          type: string
        broker:
          $ref: '#/components/schemas/Relationship'
      required:
      - broker
      - broker_id
      - broker_replica_exclusion_status
      - broker_shutdown_status
      - cluster_id
      - partition_reassignment_status
      - shutdown_scheduled
    RemoveBrokerTaskDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RemoveBrokerTaskData'
          type: array
      required:
      - data
    ListLinksResponseData_allOf:
      properties:
        source_cluster_id:
          type: string
        link_name:
          type: string
        link_id:
          type: string
        topics_names:
          items:
            type: string
          type: array
      required:
      - link_id
      - link_name
      - source_cluster_id
      - topic_names
    ListLinksResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListLinksResponseData'
          type: array
      required:
      - data
    ListLinkConfigsResponseData_allOf:
      properties:
        cluster_id:
          type: string
        name:
          type: string
        value:
          type: string
        read_only:
          type: boolean
        sensitive:
          type: boolean
        source:
          type: string
          x-extensible-enum:
          - DYNAMIC_CLUSTER_LINK_CONFIG
        synonyms:
          items:
            type: string
          type: array
        link_name:
          type: string
      required:
      - cluster_id
      - default
      - link_name
      - name
      - read_only
      - sensitive
      - source
      - synonyms
      - value
    ListLinkConfigsResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListLinkConfigsResponseData'
          type: array
      required:
      - data
    ListMirrorTopicsResponseData_allOf:
      properties:
        link_name:
          type: string
        mirror_topic_name:
          type: string
        source_topic_name:
          type: string
        num_partitions:
          type: integer
        mirror_lags:
          $ref: '#/components/schemas/MirrorLags'
        mirror_topic_status:
          $ref: '#/components/schemas/MirrorTopicStatus'
        state_time_ms:
          type: integer
      required:
      - link_name
      - mirror_lags
      - mirror_topic_name
      - mirror_topic_status
      - num_partitions
      - source_topic_name
      - state_time_ms
    ListMirrorTopicsResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ListMirrorTopicsResponseData'
          type: array
      required:
      - data
    AlterMirrorStatusResponseData_allOf:
      properties:
        mirror_topic_name:
          type: string
        error_message:
          nullable: true
          type: string
        error_code:
          nullable: true
          type: integer
        mirror_lags:
          $ref: '#/components/schemas/MirrorLags'
      required:
      - error_code
      - error_message
      - mirror_lags
      - mirror_topic_name
    AlterMirrorStatusResponseDataList_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AlterMirrorStatusResponseData'
          type: array
      required:
      - data
x-tagGroups:
- name: Cluster Admin for Kafka (v3)
  tags:
  - Cluster (v3)
  - Configs (v3)
  - ACL (v3)
  - Consumer Group (v3)
  - Partition (v3)
  - Topic (v3)
  - Cluster Linking (v3)
