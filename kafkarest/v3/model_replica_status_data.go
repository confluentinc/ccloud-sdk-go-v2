// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

import (
	"reflect"
)

// ReplicaStatusData struct for ReplicaStatusData
type ReplicaStatusData struct {
	Kind string `json:"kind"`
	Metadata ResourceMetadata `json:"metadata"`
	ClusterId string `json:"clusterId"`
	TopicName string `json:"topicName"`
	BrokerId int32 `json:"brokerId"`
	PartitionId int32 `json:"partitionId"`
	Leader bool `json:"leader"`
	Observer bool `json:"observer"`
	IsrEligible bool `json:"isrEligible"`
	InIsr bool `json:"inIsr"`
	CaughtUp bool `json:"caughtUp"`
	LogStartOffset int32 `json:"logStartOffset"`
	LogEndOffset int32 `json:"logEndOffset"`
	LastCaughtUpTimeMs int32 `json:"lastCaughtUpTimeMs"`
	LastFetchTimeMs int32 `json:"lastFetchTimeMs"`
	LinkName *string `json:"linkName,omitempty"`
}

// NewReplicaStatusData instantiates a new ReplicaStatusData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaStatusData(kind string, metadata ResourceMetadata, clusterId string, topicName string, brokerId int32, partitionId int32, leader bool, observer bool, isrEligible bool, inIsr bool, caughtUp bool, logStartOffset int32, logEndOffset int32, lastCaughtUpTimeMs int32, lastFetchTimeMs int32) *ReplicaStatusData {
	this := ReplicaStatusData{}
	this.Kind = kind
	this.Metadata = metadata
	this.ClusterId = clusterId
	this.TopicName = topicName
	this.BrokerId = brokerId
	this.PartitionId = partitionId
	this.Leader = leader
	this.Observer = observer
	this.IsrEligible = isrEligible
	this.InIsr = inIsr
	this.CaughtUp = caughtUp
	this.LogStartOffset = logStartOffset
	this.LogEndOffset = logEndOffset
	this.LastCaughtUpTimeMs = lastCaughtUpTimeMs
	this.LastFetchTimeMs = lastFetchTimeMs
	return &this
}

// NewReplicaStatusDataWithDefaults instantiates a new ReplicaStatusData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaStatusDataWithDefaults() *ReplicaStatusData {
	this := ReplicaStatusData{}
	return &this
}

// GetKind returns the Kind field value
func (o *ReplicaStatusData) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ReplicaStatusData) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *ReplicaStatusData) GetMetadata() ResourceMetadata {
	if o == nil {
		var ret ResourceMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetMetadataOk() (*ResourceMetadata, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ReplicaStatusData) SetMetadata(v ResourceMetadata) {
	o.Metadata = v
}

// GetClusterId returns the ClusterId field value
func (o *ReplicaStatusData) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetClusterIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *ReplicaStatusData) SetClusterId(v string) {
	o.ClusterId = v
}

// GetTopicName returns the TopicName field value
func (o *ReplicaStatusData) GetTopicName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetTopicNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TopicName, true
}

// SetTopicName sets field value
func (o *ReplicaStatusData) SetTopicName(v string) {
	o.TopicName = v
}

// GetBrokerId returns the BrokerId field value
func (o *ReplicaStatusData) GetBrokerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BrokerId
}

// GetBrokerIdOk returns a tuple with the BrokerId field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetBrokerIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BrokerId, true
}

// SetBrokerId sets field value
func (o *ReplicaStatusData) SetBrokerId(v int32) {
	o.BrokerId = v
}

// GetPartitionId returns the PartitionId field value
func (o *ReplicaStatusData) GetPartitionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PartitionId
}

// GetPartitionIdOk returns a tuple with the PartitionId field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetPartitionIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PartitionId, true
}

// SetPartitionId sets field value
func (o *ReplicaStatusData) SetPartitionId(v int32) {
	o.PartitionId = v
}

// GetLeader returns the Leader field value
func (o *ReplicaStatusData) GetLeader() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetLeaderOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Leader, true
}

// SetLeader sets field value
func (o *ReplicaStatusData) SetLeader(v bool) {
	o.Leader = v
}

// GetObserver returns the Observer field value
func (o *ReplicaStatusData) GetObserver() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Observer
}

// GetObserverOk returns a tuple with the Observer field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetObserverOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Observer, true
}

// SetObserver sets field value
func (o *ReplicaStatusData) SetObserver(v bool) {
	o.Observer = v
}

// GetIsrEligible returns the IsrEligible field value
func (o *ReplicaStatusData) GetIsrEligible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsrEligible
}

// GetIsrEligibleOk returns a tuple with the IsrEligible field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetIsrEligibleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsrEligible, true
}

// SetIsrEligible sets field value
func (o *ReplicaStatusData) SetIsrEligible(v bool) {
	o.IsrEligible = v
}

// GetInIsr returns the InIsr field value
func (o *ReplicaStatusData) GetInIsr() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InIsr
}

// GetInIsrOk returns a tuple with the InIsr field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetInIsrOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InIsr, true
}

// SetInIsr sets field value
func (o *ReplicaStatusData) SetInIsr(v bool) {
	o.InIsr = v
}

// GetCaughtUp returns the CaughtUp field value
func (o *ReplicaStatusData) GetCaughtUp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CaughtUp
}

// GetCaughtUpOk returns a tuple with the CaughtUp field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetCaughtUpOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CaughtUp, true
}

// SetCaughtUp sets field value
func (o *ReplicaStatusData) SetCaughtUp(v bool) {
	o.CaughtUp = v
}

// GetLogStartOffset returns the LogStartOffset field value
func (o *ReplicaStatusData) GetLogStartOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LogStartOffset
}

// GetLogStartOffsetOk returns a tuple with the LogStartOffset field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetLogStartOffsetOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LogStartOffset, true
}

// SetLogStartOffset sets field value
func (o *ReplicaStatusData) SetLogStartOffset(v int32) {
	o.LogStartOffset = v
}

// GetLogEndOffset returns the LogEndOffset field value
func (o *ReplicaStatusData) GetLogEndOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LogEndOffset
}

// GetLogEndOffsetOk returns a tuple with the LogEndOffset field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetLogEndOffsetOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LogEndOffset, true
}

// SetLogEndOffset sets field value
func (o *ReplicaStatusData) SetLogEndOffset(v int32) {
	o.LogEndOffset = v
}

// GetLastCaughtUpTimeMs returns the LastCaughtUpTimeMs field value
func (o *ReplicaStatusData) GetLastCaughtUpTimeMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastCaughtUpTimeMs
}

// GetLastCaughtUpTimeMsOk returns a tuple with the LastCaughtUpTimeMs field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetLastCaughtUpTimeMsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LastCaughtUpTimeMs, true
}

// SetLastCaughtUpTimeMs sets field value
func (o *ReplicaStatusData) SetLastCaughtUpTimeMs(v int32) {
	o.LastCaughtUpTimeMs = v
}

// GetLastFetchTimeMs returns the LastFetchTimeMs field value
func (o *ReplicaStatusData) GetLastFetchTimeMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastFetchTimeMs
}

// GetLastFetchTimeMsOk returns a tuple with the LastFetchTimeMs field value
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetLastFetchTimeMsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LastFetchTimeMs, true
}

// SetLastFetchTimeMs sets field value
func (o *ReplicaStatusData) SetLastFetchTimeMs(v int32) {
	o.LastFetchTimeMs = v
}

// GetLinkName returns the LinkName field value if set, zero value otherwise.
func (o *ReplicaStatusData) GetLinkName() string {
	if o == nil || o.LinkName == nil {
		var ret string
		return ret
	}
	return *o.LinkName
}

// GetLinkNameOk returns a tuple with the LinkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaStatusData) GetLinkNameOk() (*string, bool) {
	if o == nil || o.LinkName == nil {
		return nil, false
	}
	return o.LinkName, true
}

// HasLinkName returns a boolean if a field has been set.
func (o *ReplicaStatusData) HasLinkName() bool {
	if o != nil && o.LinkName != nil {
		return true
	}

	return false
}

// SetLinkName gets a reference to the given string and assigns it to the LinkName field.
func (o *ReplicaStatusData) SetLinkName(v string) {
	o.LinkName = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ReplicaStatusData) Redact() {
    o.recurseRedact(&o.Kind)
    o.recurseRedact(&o.Metadata)
    o.recurseRedact(&o.ClusterId)
    o.recurseRedact(&o.TopicName)
    o.recurseRedact(&o.BrokerId)
    o.recurseRedact(&o.PartitionId)
    o.recurseRedact(&o.Leader)
    o.recurseRedact(&o.Observer)
    o.recurseRedact(&o.IsrEligible)
    o.recurseRedact(&o.InIsr)
    o.recurseRedact(&o.CaughtUp)
    o.recurseRedact(&o.LogStartOffset)
    o.recurseRedact(&o.LogEndOffset)
    o.recurseRedact(&o.LastCaughtUpTimeMs)
    o.recurseRedact(&o.LastFetchTimeMs)
    o.recurseRedact(o.LinkName)
}

func (o *ReplicaStatusData) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ReplicaStatusData) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ReplicaStatusData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["clusterId"] = o.ClusterId
	}
	if true {
		toSerialize["topicName"] = o.TopicName
	}
	if true {
		toSerialize["brokerId"] = o.BrokerId
	}
	if true {
		toSerialize["partitionId"] = o.PartitionId
	}
	if true {
		toSerialize["leader"] = o.Leader
	}
	if true {
		toSerialize["observer"] = o.Observer
	}
	if true {
		toSerialize["isrEligible"] = o.IsrEligible
	}
	if true {
		toSerialize["inIsr"] = o.InIsr
	}
	if true {
		toSerialize["caughtUp"] = o.CaughtUp
	}
	if true {
		toSerialize["logStartOffset"] = o.LogStartOffset
	}
	if true {
		toSerialize["logEndOffset"] = o.LogEndOffset
	}
	if true {
		toSerialize["lastCaughtUpTimeMs"] = o.LastCaughtUpTimeMs
	}
	if true {
		toSerialize["lastFetchTimeMs"] = o.LastFetchTimeMs
	}
	if o.LinkName != nil {
		toSerialize["linkName"] = o.LinkName
	}
	return json.Marshal(toSerialize)
}

type NullableReplicaStatusData struct {
	value *ReplicaStatusData
	isSet bool
}

func (v NullableReplicaStatusData) Get() *ReplicaStatusData {
	return v.value
}

func (v *NullableReplicaStatusData) Set(val *ReplicaStatusData) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaStatusData) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaStatusData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaStatusData(val *ReplicaStatusData) *NullableReplicaStatusData {
	return &NullableReplicaStatusData{value: val, isSet: true}
}

func (v NullableReplicaStatusData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaStatusData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


