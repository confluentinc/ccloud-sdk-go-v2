// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_cluster_linking_v3.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3 "github.com/confluentinc/ccloud-sdk-go-v2/kafkarest/v3"
)

// ClusterLinkingV3Api is a mock of ClusterLinkingV3Api interface
type ClusterLinkingV3Api struct {
	lockCreateKafkaLink sync.Mutex
	CreateKafkaLinkFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaLinkRequest

	lockCreateKafkaLinkExecute sync.Mutex
	CreateKafkaLinkExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaLinkRequest) (*net_http.Response, error)

	lockCreateKafkaMirrorTopic sync.Mutex
	CreateKafkaMirrorTopicFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaMirrorTopicRequest

	lockCreateKafkaMirrorTopicExecute sync.Mutex
	CreateKafkaMirrorTopicExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaMirrorTopicRequest) (*net_http.Response, error)

	lockDeleteKafkaLink sync.Mutex
	DeleteKafkaLinkFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkRequest

	lockDeleteKafkaLinkExecute sync.Mutex
	DeleteKafkaLinkExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkRequest) (*net_http.Response, error)

	lockDeleteKafkaLinkConfig sync.Mutex
	DeleteKafkaLinkConfigFunc func(ctx context.Context, clusterId, linkName, configName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkConfigRequest

	lockDeleteKafkaLinkConfigExecute sync.Mutex
	DeleteKafkaLinkConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkConfigRequest) (*net_http.Response, error)

	lockGetKafkaLink sync.Mutex
	GetKafkaLinkFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkRequest

	lockGetKafkaLinkExecute sync.Mutex
	GetKafkaLinkExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListLinksResponseData, *net_http.Response, error)

	lockGetKafkaLinkConfigs sync.Mutex
	GetKafkaLinkConfigsFunc func(ctx context.Context, clusterId, linkName, configName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkConfigsRequest

	lockGetKafkaLinkConfigsExecute sync.Mutex
	GetKafkaLinkConfigsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListLinkConfigsResponseData, *net_http.Response, error)

	lockListKafkaLinkConfigs sync.Mutex
	ListKafkaLinkConfigsFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinkConfigsRequest

	lockListKafkaLinkConfigsExecute sync.Mutex
	ListKafkaLinkConfigsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinkConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListLinkConfigsResponseDataList, *net_http.Response, error)

	lockListKafkaLinks sync.Mutex
	ListKafkaLinksFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinksRequest

	lockListKafkaLinksExecute sync.Mutex
	ListKafkaLinksExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinksRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListLinksResponseDataList, *net_http.Response, error)

	lockListKafkaMirrorTopics sync.Mutex
	ListKafkaMirrorTopicsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsRequest

	lockListKafkaMirrorTopicsExecute sync.Mutex
	ListKafkaMirrorTopicsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListMirrorTopicsResponseDataList, *net_http.Response, error)

	lockListKafkaMirrorTopicsUnderLink sync.Mutex
	ListKafkaMirrorTopicsUnderLinkFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsUnderLinkRequest

	lockListKafkaMirrorTopicsUnderLinkExecute sync.Mutex
	ListKafkaMirrorTopicsUnderLinkExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsUnderLinkRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListMirrorTopicsResponseDataList, *net_http.Response, error)

	lockReadKafkaMirrorTopic sync.Mutex
	ReadKafkaMirrorTopicFunc func(ctx context.Context, clusterId, linkName, mirrorTopicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiReadKafkaMirrorTopicRequest

	lockReadKafkaMirrorTopicExecute sync.Mutex
	ReadKafkaMirrorTopicExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiReadKafkaMirrorTopicRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListMirrorTopicsResponseData, *net_http.Response, error)

	lockUpdateKafkaLinkConfig sync.Mutex
	UpdateKafkaLinkConfigFunc func(ctx context.Context, clusterId, linkName, configName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigRequest

	lockUpdateKafkaLinkConfigExecute sync.Mutex
	UpdateKafkaLinkConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigRequest) (*net_http.Response, error)

	lockUpdateKafkaLinkConfigBatch sync.Mutex
	UpdateKafkaLinkConfigBatchFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigBatchRequest

	lockUpdateKafkaLinkConfigBatchExecute sync.Mutex
	UpdateKafkaLinkConfigBatchExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigBatchRequest) (*net_http.Response, error)

	lockUpdateKafkaMirrorTopicsFailover sync.Mutex
	UpdateKafkaMirrorTopicsFailoverFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsFailoverRequest

	lockUpdateKafkaMirrorTopicsFailoverExecute sync.Mutex
	UpdateKafkaMirrorTopicsFailoverExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsFailoverRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AlterMirrorStatusResponseDataList, *net_http.Response, error)

	lockUpdateKafkaMirrorTopicsPause sync.Mutex
	UpdateKafkaMirrorTopicsPauseFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPauseRequest

	lockUpdateKafkaMirrorTopicsPauseExecute sync.Mutex
	UpdateKafkaMirrorTopicsPauseExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPauseRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AlterMirrorStatusResponseDataList, *net_http.Response, error)

	lockUpdateKafkaMirrorTopicsPromote sync.Mutex
	UpdateKafkaMirrorTopicsPromoteFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPromoteRequest

	lockUpdateKafkaMirrorTopicsPromoteExecute sync.Mutex
	UpdateKafkaMirrorTopicsPromoteExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPromoteRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AlterMirrorStatusResponseDataList, *net_http.Response, error)

	lockUpdateKafkaMirrorTopicsResume sync.Mutex
	UpdateKafkaMirrorTopicsResumeFunc func(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsResumeRequest

	lockUpdateKafkaMirrorTopicsResumeExecute sync.Mutex
	UpdateKafkaMirrorTopicsResumeExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsResumeRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AlterMirrorStatusResponseDataList, *net_http.Response, error)

	calls struct {
		CreateKafkaLink []struct {
			Ctx       context.Context
			ClusterId string
		}
		CreateKafkaLinkExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaLinkRequest
		}
		CreateKafkaMirrorTopic []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		CreateKafkaMirrorTopicExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaMirrorTopicRequest
		}
		DeleteKafkaLink []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		DeleteKafkaLinkExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkRequest
		}
		DeleteKafkaLinkConfig []struct {
			Ctx        context.Context
			ClusterId  string
			LinkName   string
			ConfigName string
		}
		DeleteKafkaLinkConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkConfigRequest
		}
		GetKafkaLink []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		GetKafkaLinkExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkRequest
		}
		GetKafkaLinkConfigs []struct {
			Ctx        context.Context
			ClusterId  string
			LinkName   string
			ConfigName string
		}
		GetKafkaLinkConfigsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkConfigsRequest
		}
		ListKafkaLinkConfigs []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		ListKafkaLinkConfigsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinkConfigsRequest
		}
		ListKafkaLinks []struct {
			Ctx       context.Context
			ClusterId string
		}
		ListKafkaLinksExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinksRequest
		}
		ListKafkaMirrorTopics []struct {
			Ctx       context.Context
			ClusterId string
		}
		ListKafkaMirrorTopicsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsRequest
		}
		ListKafkaMirrorTopicsUnderLink []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		ListKafkaMirrorTopicsUnderLinkExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsUnderLinkRequest
		}
		ReadKafkaMirrorTopic []struct {
			Ctx             context.Context
			ClusterId       string
			LinkName        string
			MirrorTopicName string
		}
		ReadKafkaMirrorTopicExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiReadKafkaMirrorTopicRequest
		}
		UpdateKafkaLinkConfig []struct {
			Ctx        context.Context
			ClusterId  string
			LinkName   string
			ConfigName string
		}
		UpdateKafkaLinkConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigRequest
		}
		UpdateKafkaLinkConfigBatch []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		UpdateKafkaLinkConfigBatchExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigBatchRequest
		}
		UpdateKafkaMirrorTopicsFailover []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		UpdateKafkaMirrorTopicsFailoverExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsFailoverRequest
		}
		UpdateKafkaMirrorTopicsPause []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		UpdateKafkaMirrorTopicsPauseExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPauseRequest
		}
		UpdateKafkaMirrorTopicsPromote []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		UpdateKafkaMirrorTopicsPromoteExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPromoteRequest
		}
		UpdateKafkaMirrorTopicsResume []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		UpdateKafkaMirrorTopicsResumeExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsResumeRequest
		}
	}
}

// CreateKafkaLink mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) CreateKafkaLink(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaLinkRequest {
	m.lockCreateKafkaLink.Lock()
	defer m.lockCreateKafkaLink.Unlock()

	if m.CreateKafkaLinkFunc == nil {
		panic("mocker: ClusterLinkingV3Api.CreateKafkaLinkFunc is nil but ClusterLinkingV3Api.CreateKafkaLink was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.CreateKafkaLink = append(m.calls.CreateKafkaLink, call)

	return m.CreateKafkaLinkFunc(ctx, clusterId)
}

// CreateKafkaLinkCalled returns true if CreateKafkaLink was called at least once.
func (m *ClusterLinkingV3Api) CreateKafkaLinkCalled() bool {
	m.lockCreateKafkaLink.Lock()
	defer m.lockCreateKafkaLink.Unlock()

	return len(m.calls.CreateKafkaLink) > 0
}

// CreateKafkaLinkCalls returns the calls made to CreateKafkaLink.
func (m *ClusterLinkingV3Api) CreateKafkaLinkCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockCreateKafkaLink.Lock()
	defer m.lockCreateKafkaLink.Unlock()

	return m.calls.CreateKafkaLink
}

// CreateKafkaLinkExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) CreateKafkaLinkExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaLinkRequest) (*net_http.Response, error) {
	m.lockCreateKafkaLinkExecute.Lock()
	defer m.lockCreateKafkaLinkExecute.Unlock()

	if m.CreateKafkaLinkExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.CreateKafkaLinkExecuteFunc is nil but ClusterLinkingV3Api.CreateKafkaLinkExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaLinkRequest
	}{
		R: r,
	}

	m.calls.CreateKafkaLinkExecute = append(m.calls.CreateKafkaLinkExecute, call)

	return m.CreateKafkaLinkExecuteFunc(r)
}

// CreateKafkaLinkExecuteCalled returns true if CreateKafkaLinkExecute was called at least once.
func (m *ClusterLinkingV3Api) CreateKafkaLinkExecuteCalled() bool {
	m.lockCreateKafkaLinkExecute.Lock()
	defer m.lockCreateKafkaLinkExecute.Unlock()

	return len(m.calls.CreateKafkaLinkExecute) > 0
}

// CreateKafkaLinkExecuteCalls returns the calls made to CreateKafkaLinkExecute.
func (m *ClusterLinkingV3Api) CreateKafkaLinkExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaLinkRequest
} {
	m.lockCreateKafkaLinkExecute.Lock()
	defer m.lockCreateKafkaLinkExecute.Unlock()

	return m.calls.CreateKafkaLinkExecute
}

// CreateKafkaMirrorTopic mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) CreateKafkaMirrorTopic(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaMirrorTopicRequest {
	m.lockCreateKafkaMirrorTopic.Lock()
	defer m.lockCreateKafkaMirrorTopic.Unlock()

	if m.CreateKafkaMirrorTopicFunc == nil {
		panic("mocker: ClusterLinkingV3Api.CreateKafkaMirrorTopicFunc is nil but ClusterLinkingV3Api.CreateKafkaMirrorTopic was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.CreateKafkaMirrorTopic = append(m.calls.CreateKafkaMirrorTopic, call)

	return m.CreateKafkaMirrorTopicFunc(ctx, clusterId, linkName)
}

// CreateKafkaMirrorTopicCalled returns true if CreateKafkaMirrorTopic was called at least once.
func (m *ClusterLinkingV3Api) CreateKafkaMirrorTopicCalled() bool {
	m.lockCreateKafkaMirrorTopic.Lock()
	defer m.lockCreateKafkaMirrorTopic.Unlock()

	return len(m.calls.CreateKafkaMirrorTopic) > 0
}

// CreateKafkaMirrorTopicCalls returns the calls made to CreateKafkaMirrorTopic.
func (m *ClusterLinkingV3Api) CreateKafkaMirrorTopicCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockCreateKafkaMirrorTopic.Lock()
	defer m.lockCreateKafkaMirrorTopic.Unlock()

	return m.calls.CreateKafkaMirrorTopic
}

// CreateKafkaMirrorTopicExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) CreateKafkaMirrorTopicExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaMirrorTopicRequest) (*net_http.Response, error) {
	m.lockCreateKafkaMirrorTopicExecute.Lock()
	defer m.lockCreateKafkaMirrorTopicExecute.Unlock()

	if m.CreateKafkaMirrorTopicExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.CreateKafkaMirrorTopicExecuteFunc is nil but ClusterLinkingV3Api.CreateKafkaMirrorTopicExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaMirrorTopicRequest
	}{
		R: r,
	}

	m.calls.CreateKafkaMirrorTopicExecute = append(m.calls.CreateKafkaMirrorTopicExecute, call)

	return m.CreateKafkaMirrorTopicExecuteFunc(r)
}

// CreateKafkaMirrorTopicExecuteCalled returns true if CreateKafkaMirrorTopicExecute was called at least once.
func (m *ClusterLinkingV3Api) CreateKafkaMirrorTopicExecuteCalled() bool {
	m.lockCreateKafkaMirrorTopicExecute.Lock()
	defer m.lockCreateKafkaMirrorTopicExecute.Unlock()

	return len(m.calls.CreateKafkaMirrorTopicExecute) > 0
}

// CreateKafkaMirrorTopicExecuteCalls returns the calls made to CreateKafkaMirrorTopicExecute.
func (m *ClusterLinkingV3Api) CreateKafkaMirrorTopicExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaMirrorTopicRequest
} {
	m.lockCreateKafkaMirrorTopicExecute.Lock()
	defer m.lockCreateKafkaMirrorTopicExecute.Unlock()

	return m.calls.CreateKafkaMirrorTopicExecute
}

// DeleteKafkaLink mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) DeleteKafkaLink(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkRequest {
	m.lockDeleteKafkaLink.Lock()
	defer m.lockDeleteKafkaLink.Unlock()

	if m.DeleteKafkaLinkFunc == nil {
		panic("mocker: ClusterLinkingV3Api.DeleteKafkaLinkFunc is nil but ClusterLinkingV3Api.DeleteKafkaLink was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.DeleteKafkaLink = append(m.calls.DeleteKafkaLink, call)

	return m.DeleteKafkaLinkFunc(ctx, clusterId, linkName)
}

// DeleteKafkaLinkCalled returns true if DeleteKafkaLink was called at least once.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkCalled() bool {
	m.lockDeleteKafkaLink.Lock()
	defer m.lockDeleteKafkaLink.Unlock()

	return len(m.calls.DeleteKafkaLink) > 0
}

// DeleteKafkaLinkCalls returns the calls made to DeleteKafkaLink.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockDeleteKafkaLink.Lock()
	defer m.lockDeleteKafkaLink.Unlock()

	return m.calls.DeleteKafkaLink
}

// DeleteKafkaLinkExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkRequest) (*net_http.Response, error) {
	m.lockDeleteKafkaLinkExecute.Lock()
	defer m.lockDeleteKafkaLinkExecute.Unlock()

	if m.DeleteKafkaLinkExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.DeleteKafkaLinkExecuteFunc is nil but ClusterLinkingV3Api.DeleteKafkaLinkExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkRequest
	}{
		R: r,
	}

	m.calls.DeleteKafkaLinkExecute = append(m.calls.DeleteKafkaLinkExecute, call)

	return m.DeleteKafkaLinkExecuteFunc(r)
}

// DeleteKafkaLinkExecuteCalled returns true if DeleteKafkaLinkExecute was called at least once.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkExecuteCalled() bool {
	m.lockDeleteKafkaLinkExecute.Lock()
	defer m.lockDeleteKafkaLinkExecute.Unlock()

	return len(m.calls.DeleteKafkaLinkExecute) > 0
}

// DeleteKafkaLinkExecuteCalls returns the calls made to DeleteKafkaLinkExecute.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkRequest
} {
	m.lockDeleteKafkaLinkExecute.Lock()
	defer m.lockDeleteKafkaLinkExecute.Unlock()

	return m.calls.DeleteKafkaLinkExecute
}

// DeleteKafkaLinkConfig mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkConfig(ctx context.Context, clusterId, linkName, configName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkConfigRequest {
	m.lockDeleteKafkaLinkConfig.Lock()
	defer m.lockDeleteKafkaLinkConfig.Unlock()

	if m.DeleteKafkaLinkConfigFunc == nil {
		panic("mocker: ClusterLinkingV3Api.DeleteKafkaLinkConfigFunc is nil but ClusterLinkingV3Api.DeleteKafkaLinkConfig was called.")
	}

	call := struct {
		Ctx        context.Context
		ClusterId  string
		LinkName   string
		ConfigName string
	}{
		Ctx:        ctx,
		ClusterId:  clusterId,
		LinkName:   linkName,
		ConfigName: configName,
	}

	m.calls.DeleteKafkaLinkConfig = append(m.calls.DeleteKafkaLinkConfig, call)

	return m.DeleteKafkaLinkConfigFunc(ctx, clusterId, linkName, configName)
}

// DeleteKafkaLinkConfigCalled returns true if DeleteKafkaLinkConfig was called at least once.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkConfigCalled() bool {
	m.lockDeleteKafkaLinkConfig.Lock()
	defer m.lockDeleteKafkaLinkConfig.Unlock()

	return len(m.calls.DeleteKafkaLinkConfig) > 0
}

// DeleteKafkaLinkConfigCalls returns the calls made to DeleteKafkaLinkConfig.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkConfigCalls() []struct {
	Ctx        context.Context
	ClusterId  string
	LinkName   string
	ConfigName string
} {
	m.lockDeleteKafkaLinkConfig.Lock()
	defer m.lockDeleteKafkaLinkConfig.Unlock()

	return m.calls.DeleteKafkaLinkConfig
}

// DeleteKafkaLinkConfigExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkConfigRequest) (*net_http.Response, error) {
	m.lockDeleteKafkaLinkConfigExecute.Lock()
	defer m.lockDeleteKafkaLinkConfigExecute.Unlock()

	if m.DeleteKafkaLinkConfigExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.DeleteKafkaLinkConfigExecuteFunc is nil but ClusterLinkingV3Api.DeleteKafkaLinkConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkConfigRequest
	}{
		R: r,
	}

	m.calls.DeleteKafkaLinkConfigExecute = append(m.calls.DeleteKafkaLinkConfigExecute, call)

	return m.DeleteKafkaLinkConfigExecuteFunc(r)
}

// DeleteKafkaLinkConfigExecuteCalled returns true if DeleteKafkaLinkConfigExecute was called at least once.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkConfigExecuteCalled() bool {
	m.lockDeleteKafkaLinkConfigExecute.Lock()
	defer m.lockDeleteKafkaLinkConfigExecute.Unlock()

	return len(m.calls.DeleteKafkaLinkConfigExecute) > 0
}

// DeleteKafkaLinkConfigExecuteCalls returns the calls made to DeleteKafkaLinkConfigExecute.
func (m *ClusterLinkingV3Api) DeleteKafkaLinkConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaLinkConfigRequest
} {
	m.lockDeleteKafkaLinkConfigExecute.Lock()
	defer m.lockDeleteKafkaLinkConfigExecute.Unlock()

	return m.calls.DeleteKafkaLinkConfigExecute
}

// GetKafkaLink mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) GetKafkaLink(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkRequest {
	m.lockGetKafkaLink.Lock()
	defer m.lockGetKafkaLink.Unlock()

	if m.GetKafkaLinkFunc == nil {
		panic("mocker: ClusterLinkingV3Api.GetKafkaLinkFunc is nil but ClusterLinkingV3Api.GetKafkaLink was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.GetKafkaLink = append(m.calls.GetKafkaLink, call)

	return m.GetKafkaLinkFunc(ctx, clusterId, linkName)
}

// GetKafkaLinkCalled returns true if GetKafkaLink was called at least once.
func (m *ClusterLinkingV3Api) GetKafkaLinkCalled() bool {
	m.lockGetKafkaLink.Lock()
	defer m.lockGetKafkaLink.Unlock()

	return len(m.calls.GetKafkaLink) > 0
}

// GetKafkaLinkCalls returns the calls made to GetKafkaLink.
func (m *ClusterLinkingV3Api) GetKafkaLinkCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockGetKafkaLink.Lock()
	defer m.lockGetKafkaLink.Unlock()

	return m.calls.GetKafkaLink
}

// GetKafkaLinkExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) GetKafkaLinkExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListLinksResponseData, *net_http.Response, error) {
	m.lockGetKafkaLinkExecute.Lock()
	defer m.lockGetKafkaLinkExecute.Unlock()

	if m.GetKafkaLinkExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.GetKafkaLinkExecuteFunc is nil but ClusterLinkingV3Api.GetKafkaLinkExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkRequest
	}{
		R: r,
	}

	m.calls.GetKafkaLinkExecute = append(m.calls.GetKafkaLinkExecute, call)

	return m.GetKafkaLinkExecuteFunc(r)
}

// GetKafkaLinkExecuteCalled returns true if GetKafkaLinkExecute was called at least once.
func (m *ClusterLinkingV3Api) GetKafkaLinkExecuteCalled() bool {
	m.lockGetKafkaLinkExecute.Lock()
	defer m.lockGetKafkaLinkExecute.Unlock()

	return len(m.calls.GetKafkaLinkExecute) > 0
}

// GetKafkaLinkExecuteCalls returns the calls made to GetKafkaLinkExecute.
func (m *ClusterLinkingV3Api) GetKafkaLinkExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkRequest
} {
	m.lockGetKafkaLinkExecute.Lock()
	defer m.lockGetKafkaLinkExecute.Unlock()

	return m.calls.GetKafkaLinkExecute
}

// GetKafkaLinkConfigs mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) GetKafkaLinkConfigs(ctx context.Context, clusterId, linkName, configName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkConfigsRequest {
	m.lockGetKafkaLinkConfigs.Lock()
	defer m.lockGetKafkaLinkConfigs.Unlock()

	if m.GetKafkaLinkConfigsFunc == nil {
		panic("mocker: ClusterLinkingV3Api.GetKafkaLinkConfigsFunc is nil but ClusterLinkingV3Api.GetKafkaLinkConfigs was called.")
	}

	call := struct {
		Ctx        context.Context
		ClusterId  string
		LinkName   string
		ConfigName string
	}{
		Ctx:        ctx,
		ClusterId:  clusterId,
		LinkName:   linkName,
		ConfigName: configName,
	}

	m.calls.GetKafkaLinkConfigs = append(m.calls.GetKafkaLinkConfigs, call)

	return m.GetKafkaLinkConfigsFunc(ctx, clusterId, linkName, configName)
}

// GetKafkaLinkConfigsCalled returns true if GetKafkaLinkConfigs was called at least once.
func (m *ClusterLinkingV3Api) GetKafkaLinkConfigsCalled() bool {
	m.lockGetKafkaLinkConfigs.Lock()
	defer m.lockGetKafkaLinkConfigs.Unlock()

	return len(m.calls.GetKafkaLinkConfigs) > 0
}

// GetKafkaLinkConfigsCalls returns the calls made to GetKafkaLinkConfigs.
func (m *ClusterLinkingV3Api) GetKafkaLinkConfigsCalls() []struct {
	Ctx        context.Context
	ClusterId  string
	LinkName   string
	ConfigName string
} {
	m.lockGetKafkaLinkConfigs.Lock()
	defer m.lockGetKafkaLinkConfigs.Unlock()

	return m.calls.GetKafkaLinkConfigs
}

// GetKafkaLinkConfigsExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) GetKafkaLinkConfigsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListLinkConfigsResponseData, *net_http.Response, error) {
	m.lockGetKafkaLinkConfigsExecute.Lock()
	defer m.lockGetKafkaLinkConfigsExecute.Unlock()

	if m.GetKafkaLinkConfigsExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.GetKafkaLinkConfigsExecuteFunc is nil but ClusterLinkingV3Api.GetKafkaLinkConfigsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkConfigsRequest
	}{
		R: r,
	}

	m.calls.GetKafkaLinkConfigsExecute = append(m.calls.GetKafkaLinkConfigsExecute, call)

	return m.GetKafkaLinkConfigsExecuteFunc(r)
}

// GetKafkaLinkConfigsExecuteCalled returns true if GetKafkaLinkConfigsExecute was called at least once.
func (m *ClusterLinkingV3Api) GetKafkaLinkConfigsExecuteCalled() bool {
	m.lockGetKafkaLinkConfigsExecute.Lock()
	defer m.lockGetKafkaLinkConfigsExecute.Unlock()

	return len(m.calls.GetKafkaLinkConfigsExecute) > 0
}

// GetKafkaLinkConfigsExecuteCalls returns the calls made to GetKafkaLinkConfigsExecute.
func (m *ClusterLinkingV3Api) GetKafkaLinkConfigsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaLinkConfigsRequest
} {
	m.lockGetKafkaLinkConfigsExecute.Lock()
	defer m.lockGetKafkaLinkConfigsExecute.Unlock()

	return m.calls.GetKafkaLinkConfigsExecute
}

// ListKafkaLinkConfigs mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ListKafkaLinkConfigs(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinkConfigsRequest {
	m.lockListKafkaLinkConfigs.Lock()
	defer m.lockListKafkaLinkConfigs.Unlock()

	if m.ListKafkaLinkConfigsFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ListKafkaLinkConfigsFunc is nil but ClusterLinkingV3Api.ListKafkaLinkConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.ListKafkaLinkConfigs = append(m.calls.ListKafkaLinkConfigs, call)

	return m.ListKafkaLinkConfigsFunc(ctx, clusterId, linkName)
}

// ListKafkaLinkConfigsCalled returns true if ListKafkaLinkConfigs was called at least once.
func (m *ClusterLinkingV3Api) ListKafkaLinkConfigsCalled() bool {
	m.lockListKafkaLinkConfigs.Lock()
	defer m.lockListKafkaLinkConfigs.Unlock()

	return len(m.calls.ListKafkaLinkConfigs) > 0
}

// ListKafkaLinkConfigsCalls returns the calls made to ListKafkaLinkConfigs.
func (m *ClusterLinkingV3Api) ListKafkaLinkConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockListKafkaLinkConfigs.Lock()
	defer m.lockListKafkaLinkConfigs.Unlock()

	return m.calls.ListKafkaLinkConfigs
}

// ListKafkaLinkConfigsExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ListKafkaLinkConfigsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinkConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListLinkConfigsResponseDataList, *net_http.Response, error) {
	m.lockListKafkaLinkConfigsExecute.Lock()
	defer m.lockListKafkaLinkConfigsExecute.Unlock()

	if m.ListKafkaLinkConfigsExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ListKafkaLinkConfigsExecuteFunc is nil but ClusterLinkingV3Api.ListKafkaLinkConfigsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinkConfigsRequest
	}{
		R: r,
	}

	m.calls.ListKafkaLinkConfigsExecute = append(m.calls.ListKafkaLinkConfigsExecute, call)

	return m.ListKafkaLinkConfigsExecuteFunc(r)
}

// ListKafkaLinkConfigsExecuteCalled returns true if ListKafkaLinkConfigsExecute was called at least once.
func (m *ClusterLinkingV3Api) ListKafkaLinkConfigsExecuteCalled() bool {
	m.lockListKafkaLinkConfigsExecute.Lock()
	defer m.lockListKafkaLinkConfigsExecute.Unlock()

	return len(m.calls.ListKafkaLinkConfigsExecute) > 0
}

// ListKafkaLinkConfigsExecuteCalls returns the calls made to ListKafkaLinkConfigsExecute.
func (m *ClusterLinkingV3Api) ListKafkaLinkConfigsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinkConfigsRequest
} {
	m.lockListKafkaLinkConfigsExecute.Lock()
	defer m.lockListKafkaLinkConfigsExecute.Unlock()

	return m.calls.ListKafkaLinkConfigsExecute
}

// ListKafkaLinks mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ListKafkaLinks(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinksRequest {
	m.lockListKafkaLinks.Lock()
	defer m.lockListKafkaLinks.Unlock()

	if m.ListKafkaLinksFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ListKafkaLinksFunc is nil but ClusterLinkingV3Api.ListKafkaLinks was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ListKafkaLinks = append(m.calls.ListKafkaLinks, call)

	return m.ListKafkaLinksFunc(ctx, clusterId)
}

// ListKafkaLinksCalled returns true if ListKafkaLinks was called at least once.
func (m *ClusterLinkingV3Api) ListKafkaLinksCalled() bool {
	m.lockListKafkaLinks.Lock()
	defer m.lockListKafkaLinks.Unlock()

	return len(m.calls.ListKafkaLinks) > 0
}

// ListKafkaLinksCalls returns the calls made to ListKafkaLinks.
func (m *ClusterLinkingV3Api) ListKafkaLinksCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockListKafkaLinks.Lock()
	defer m.lockListKafkaLinks.Unlock()

	return m.calls.ListKafkaLinks
}

// ListKafkaLinksExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ListKafkaLinksExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinksRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListLinksResponseDataList, *net_http.Response, error) {
	m.lockListKafkaLinksExecute.Lock()
	defer m.lockListKafkaLinksExecute.Unlock()

	if m.ListKafkaLinksExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ListKafkaLinksExecuteFunc is nil but ClusterLinkingV3Api.ListKafkaLinksExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinksRequest
	}{
		R: r,
	}

	m.calls.ListKafkaLinksExecute = append(m.calls.ListKafkaLinksExecute, call)

	return m.ListKafkaLinksExecuteFunc(r)
}

// ListKafkaLinksExecuteCalled returns true if ListKafkaLinksExecute was called at least once.
func (m *ClusterLinkingV3Api) ListKafkaLinksExecuteCalled() bool {
	m.lockListKafkaLinksExecute.Lock()
	defer m.lockListKafkaLinksExecute.Unlock()

	return len(m.calls.ListKafkaLinksExecute) > 0
}

// ListKafkaLinksExecuteCalls returns the calls made to ListKafkaLinksExecute.
func (m *ClusterLinkingV3Api) ListKafkaLinksExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaLinksRequest
} {
	m.lockListKafkaLinksExecute.Lock()
	defer m.lockListKafkaLinksExecute.Unlock()

	return m.calls.ListKafkaLinksExecute
}

// ListKafkaMirrorTopics mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopics(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsRequest {
	m.lockListKafkaMirrorTopics.Lock()
	defer m.lockListKafkaMirrorTopics.Unlock()

	if m.ListKafkaMirrorTopicsFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ListKafkaMirrorTopicsFunc is nil but ClusterLinkingV3Api.ListKafkaMirrorTopics was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ListKafkaMirrorTopics = append(m.calls.ListKafkaMirrorTopics, call)

	return m.ListKafkaMirrorTopicsFunc(ctx, clusterId)
}

// ListKafkaMirrorTopicsCalled returns true if ListKafkaMirrorTopics was called at least once.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsCalled() bool {
	m.lockListKafkaMirrorTopics.Lock()
	defer m.lockListKafkaMirrorTopics.Unlock()

	return len(m.calls.ListKafkaMirrorTopics) > 0
}

// ListKafkaMirrorTopicsCalls returns the calls made to ListKafkaMirrorTopics.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockListKafkaMirrorTopics.Lock()
	defer m.lockListKafkaMirrorTopics.Unlock()

	return m.calls.ListKafkaMirrorTopics
}

// ListKafkaMirrorTopicsExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListMirrorTopicsResponseDataList, *net_http.Response, error) {
	m.lockListKafkaMirrorTopicsExecute.Lock()
	defer m.lockListKafkaMirrorTopicsExecute.Unlock()

	if m.ListKafkaMirrorTopicsExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ListKafkaMirrorTopicsExecuteFunc is nil but ClusterLinkingV3Api.ListKafkaMirrorTopicsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsRequest
	}{
		R: r,
	}

	m.calls.ListKafkaMirrorTopicsExecute = append(m.calls.ListKafkaMirrorTopicsExecute, call)

	return m.ListKafkaMirrorTopicsExecuteFunc(r)
}

// ListKafkaMirrorTopicsExecuteCalled returns true if ListKafkaMirrorTopicsExecute was called at least once.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsExecuteCalled() bool {
	m.lockListKafkaMirrorTopicsExecute.Lock()
	defer m.lockListKafkaMirrorTopicsExecute.Unlock()

	return len(m.calls.ListKafkaMirrorTopicsExecute) > 0
}

// ListKafkaMirrorTopicsExecuteCalls returns the calls made to ListKafkaMirrorTopicsExecute.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsRequest
} {
	m.lockListKafkaMirrorTopicsExecute.Lock()
	defer m.lockListKafkaMirrorTopicsExecute.Unlock()

	return m.calls.ListKafkaMirrorTopicsExecute
}

// ListKafkaMirrorTopicsUnderLink mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsUnderLink(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsUnderLinkRequest {
	m.lockListKafkaMirrorTopicsUnderLink.Lock()
	defer m.lockListKafkaMirrorTopicsUnderLink.Unlock()

	if m.ListKafkaMirrorTopicsUnderLinkFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ListKafkaMirrorTopicsUnderLinkFunc is nil but ClusterLinkingV3Api.ListKafkaMirrorTopicsUnderLink was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.ListKafkaMirrorTopicsUnderLink = append(m.calls.ListKafkaMirrorTopicsUnderLink, call)

	return m.ListKafkaMirrorTopicsUnderLinkFunc(ctx, clusterId, linkName)
}

// ListKafkaMirrorTopicsUnderLinkCalled returns true if ListKafkaMirrorTopicsUnderLink was called at least once.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsUnderLinkCalled() bool {
	m.lockListKafkaMirrorTopicsUnderLink.Lock()
	defer m.lockListKafkaMirrorTopicsUnderLink.Unlock()

	return len(m.calls.ListKafkaMirrorTopicsUnderLink) > 0
}

// ListKafkaMirrorTopicsUnderLinkCalls returns the calls made to ListKafkaMirrorTopicsUnderLink.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsUnderLinkCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockListKafkaMirrorTopicsUnderLink.Lock()
	defer m.lockListKafkaMirrorTopicsUnderLink.Unlock()

	return m.calls.ListKafkaMirrorTopicsUnderLink
}

// ListKafkaMirrorTopicsUnderLinkExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsUnderLinkExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsUnderLinkRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListMirrorTopicsResponseDataList, *net_http.Response, error) {
	m.lockListKafkaMirrorTopicsUnderLinkExecute.Lock()
	defer m.lockListKafkaMirrorTopicsUnderLinkExecute.Unlock()

	if m.ListKafkaMirrorTopicsUnderLinkExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ListKafkaMirrorTopicsUnderLinkExecuteFunc is nil but ClusterLinkingV3Api.ListKafkaMirrorTopicsUnderLinkExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsUnderLinkRequest
	}{
		R: r,
	}

	m.calls.ListKafkaMirrorTopicsUnderLinkExecute = append(m.calls.ListKafkaMirrorTopicsUnderLinkExecute, call)

	return m.ListKafkaMirrorTopicsUnderLinkExecuteFunc(r)
}

// ListKafkaMirrorTopicsUnderLinkExecuteCalled returns true if ListKafkaMirrorTopicsUnderLinkExecute was called at least once.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsUnderLinkExecuteCalled() bool {
	m.lockListKafkaMirrorTopicsUnderLinkExecute.Lock()
	defer m.lockListKafkaMirrorTopicsUnderLinkExecute.Unlock()

	return len(m.calls.ListKafkaMirrorTopicsUnderLinkExecute) > 0
}

// ListKafkaMirrorTopicsUnderLinkExecuteCalls returns the calls made to ListKafkaMirrorTopicsUnderLinkExecute.
func (m *ClusterLinkingV3Api) ListKafkaMirrorTopicsUnderLinkExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaMirrorTopicsUnderLinkRequest
} {
	m.lockListKafkaMirrorTopicsUnderLinkExecute.Lock()
	defer m.lockListKafkaMirrorTopicsUnderLinkExecute.Unlock()

	return m.calls.ListKafkaMirrorTopicsUnderLinkExecute
}

// ReadKafkaMirrorTopic mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ReadKafkaMirrorTopic(ctx context.Context, clusterId, linkName, mirrorTopicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiReadKafkaMirrorTopicRequest {
	m.lockReadKafkaMirrorTopic.Lock()
	defer m.lockReadKafkaMirrorTopic.Unlock()

	if m.ReadKafkaMirrorTopicFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ReadKafkaMirrorTopicFunc is nil but ClusterLinkingV3Api.ReadKafkaMirrorTopic was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		LinkName        string
		MirrorTopicName string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		LinkName:        linkName,
		MirrorTopicName: mirrorTopicName,
	}

	m.calls.ReadKafkaMirrorTopic = append(m.calls.ReadKafkaMirrorTopic, call)

	return m.ReadKafkaMirrorTopicFunc(ctx, clusterId, linkName, mirrorTopicName)
}

// ReadKafkaMirrorTopicCalled returns true if ReadKafkaMirrorTopic was called at least once.
func (m *ClusterLinkingV3Api) ReadKafkaMirrorTopicCalled() bool {
	m.lockReadKafkaMirrorTopic.Lock()
	defer m.lockReadKafkaMirrorTopic.Unlock()

	return len(m.calls.ReadKafkaMirrorTopic) > 0
}

// ReadKafkaMirrorTopicCalls returns the calls made to ReadKafkaMirrorTopic.
func (m *ClusterLinkingV3Api) ReadKafkaMirrorTopicCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	LinkName        string
	MirrorTopicName string
} {
	m.lockReadKafkaMirrorTopic.Lock()
	defer m.lockReadKafkaMirrorTopic.Unlock()

	return m.calls.ReadKafkaMirrorTopic
}

// ReadKafkaMirrorTopicExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) ReadKafkaMirrorTopicExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiReadKafkaMirrorTopicRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ListMirrorTopicsResponseData, *net_http.Response, error) {
	m.lockReadKafkaMirrorTopicExecute.Lock()
	defer m.lockReadKafkaMirrorTopicExecute.Unlock()

	if m.ReadKafkaMirrorTopicExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.ReadKafkaMirrorTopicExecuteFunc is nil but ClusterLinkingV3Api.ReadKafkaMirrorTopicExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiReadKafkaMirrorTopicRequest
	}{
		R: r,
	}

	m.calls.ReadKafkaMirrorTopicExecute = append(m.calls.ReadKafkaMirrorTopicExecute, call)

	return m.ReadKafkaMirrorTopicExecuteFunc(r)
}

// ReadKafkaMirrorTopicExecuteCalled returns true if ReadKafkaMirrorTopicExecute was called at least once.
func (m *ClusterLinkingV3Api) ReadKafkaMirrorTopicExecuteCalled() bool {
	m.lockReadKafkaMirrorTopicExecute.Lock()
	defer m.lockReadKafkaMirrorTopicExecute.Unlock()

	return len(m.calls.ReadKafkaMirrorTopicExecute) > 0
}

// ReadKafkaMirrorTopicExecuteCalls returns the calls made to ReadKafkaMirrorTopicExecute.
func (m *ClusterLinkingV3Api) ReadKafkaMirrorTopicExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiReadKafkaMirrorTopicRequest
} {
	m.lockReadKafkaMirrorTopicExecute.Lock()
	defer m.lockReadKafkaMirrorTopicExecute.Unlock()

	return m.calls.ReadKafkaMirrorTopicExecute
}

// UpdateKafkaLinkConfig mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfig(ctx context.Context, clusterId, linkName, configName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigRequest {
	m.lockUpdateKafkaLinkConfig.Lock()
	defer m.lockUpdateKafkaLinkConfig.Unlock()

	if m.UpdateKafkaLinkConfigFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaLinkConfigFunc is nil but ClusterLinkingV3Api.UpdateKafkaLinkConfig was called.")
	}

	call := struct {
		Ctx        context.Context
		ClusterId  string
		LinkName   string
		ConfigName string
	}{
		Ctx:        ctx,
		ClusterId:  clusterId,
		LinkName:   linkName,
		ConfigName: configName,
	}

	m.calls.UpdateKafkaLinkConfig = append(m.calls.UpdateKafkaLinkConfig, call)

	return m.UpdateKafkaLinkConfigFunc(ctx, clusterId, linkName, configName)
}

// UpdateKafkaLinkConfigCalled returns true if UpdateKafkaLinkConfig was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigCalled() bool {
	m.lockUpdateKafkaLinkConfig.Lock()
	defer m.lockUpdateKafkaLinkConfig.Unlock()

	return len(m.calls.UpdateKafkaLinkConfig) > 0
}

// UpdateKafkaLinkConfigCalls returns the calls made to UpdateKafkaLinkConfig.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigCalls() []struct {
	Ctx        context.Context
	ClusterId  string
	LinkName   string
	ConfigName string
} {
	m.lockUpdateKafkaLinkConfig.Lock()
	defer m.lockUpdateKafkaLinkConfig.Unlock()

	return m.calls.UpdateKafkaLinkConfig
}

// UpdateKafkaLinkConfigExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigRequest) (*net_http.Response, error) {
	m.lockUpdateKafkaLinkConfigExecute.Lock()
	defer m.lockUpdateKafkaLinkConfigExecute.Unlock()

	if m.UpdateKafkaLinkConfigExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaLinkConfigExecuteFunc is nil but ClusterLinkingV3Api.UpdateKafkaLinkConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaLinkConfigExecute = append(m.calls.UpdateKafkaLinkConfigExecute, call)

	return m.UpdateKafkaLinkConfigExecuteFunc(r)
}

// UpdateKafkaLinkConfigExecuteCalled returns true if UpdateKafkaLinkConfigExecute was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigExecuteCalled() bool {
	m.lockUpdateKafkaLinkConfigExecute.Lock()
	defer m.lockUpdateKafkaLinkConfigExecute.Unlock()

	return len(m.calls.UpdateKafkaLinkConfigExecute) > 0
}

// UpdateKafkaLinkConfigExecuteCalls returns the calls made to UpdateKafkaLinkConfigExecute.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigRequest
} {
	m.lockUpdateKafkaLinkConfigExecute.Lock()
	defer m.lockUpdateKafkaLinkConfigExecute.Unlock()

	return m.calls.UpdateKafkaLinkConfigExecute
}

// UpdateKafkaLinkConfigBatch mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigBatch(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigBatchRequest {
	m.lockUpdateKafkaLinkConfigBatch.Lock()
	defer m.lockUpdateKafkaLinkConfigBatch.Unlock()

	if m.UpdateKafkaLinkConfigBatchFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaLinkConfigBatchFunc is nil but ClusterLinkingV3Api.UpdateKafkaLinkConfigBatch was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.UpdateKafkaLinkConfigBatch = append(m.calls.UpdateKafkaLinkConfigBatch, call)

	return m.UpdateKafkaLinkConfigBatchFunc(ctx, clusterId, linkName)
}

// UpdateKafkaLinkConfigBatchCalled returns true if UpdateKafkaLinkConfigBatch was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigBatchCalled() bool {
	m.lockUpdateKafkaLinkConfigBatch.Lock()
	defer m.lockUpdateKafkaLinkConfigBatch.Unlock()

	return len(m.calls.UpdateKafkaLinkConfigBatch) > 0
}

// UpdateKafkaLinkConfigBatchCalls returns the calls made to UpdateKafkaLinkConfigBatch.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigBatchCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockUpdateKafkaLinkConfigBatch.Lock()
	defer m.lockUpdateKafkaLinkConfigBatch.Unlock()

	return m.calls.UpdateKafkaLinkConfigBatch
}

// UpdateKafkaLinkConfigBatchExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigBatchExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigBatchRequest) (*net_http.Response, error) {
	m.lockUpdateKafkaLinkConfigBatchExecute.Lock()
	defer m.lockUpdateKafkaLinkConfigBatchExecute.Unlock()

	if m.UpdateKafkaLinkConfigBatchExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaLinkConfigBatchExecuteFunc is nil but ClusterLinkingV3Api.UpdateKafkaLinkConfigBatchExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigBatchRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaLinkConfigBatchExecute = append(m.calls.UpdateKafkaLinkConfigBatchExecute, call)

	return m.UpdateKafkaLinkConfigBatchExecuteFunc(r)
}

// UpdateKafkaLinkConfigBatchExecuteCalled returns true if UpdateKafkaLinkConfigBatchExecute was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigBatchExecuteCalled() bool {
	m.lockUpdateKafkaLinkConfigBatchExecute.Lock()
	defer m.lockUpdateKafkaLinkConfigBatchExecute.Unlock()

	return len(m.calls.UpdateKafkaLinkConfigBatchExecute) > 0
}

// UpdateKafkaLinkConfigBatchExecuteCalls returns the calls made to UpdateKafkaLinkConfigBatchExecute.
func (m *ClusterLinkingV3Api) UpdateKafkaLinkConfigBatchExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaLinkConfigBatchRequest
} {
	m.lockUpdateKafkaLinkConfigBatchExecute.Lock()
	defer m.lockUpdateKafkaLinkConfigBatchExecute.Unlock()

	return m.calls.UpdateKafkaLinkConfigBatchExecute
}

// UpdateKafkaMirrorTopicsFailover mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsFailover(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsFailoverRequest {
	m.lockUpdateKafkaMirrorTopicsFailover.Lock()
	defer m.lockUpdateKafkaMirrorTopicsFailover.Unlock()

	if m.UpdateKafkaMirrorTopicsFailoverFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaMirrorTopicsFailoverFunc is nil but ClusterLinkingV3Api.UpdateKafkaMirrorTopicsFailover was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.UpdateKafkaMirrorTopicsFailover = append(m.calls.UpdateKafkaMirrorTopicsFailover, call)

	return m.UpdateKafkaMirrorTopicsFailoverFunc(ctx, clusterId, linkName)
}

// UpdateKafkaMirrorTopicsFailoverCalled returns true if UpdateKafkaMirrorTopicsFailover was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsFailoverCalled() bool {
	m.lockUpdateKafkaMirrorTopicsFailover.Lock()
	defer m.lockUpdateKafkaMirrorTopicsFailover.Unlock()

	return len(m.calls.UpdateKafkaMirrorTopicsFailover) > 0
}

// UpdateKafkaMirrorTopicsFailoverCalls returns the calls made to UpdateKafkaMirrorTopicsFailover.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsFailoverCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockUpdateKafkaMirrorTopicsFailover.Lock()
	defer m.lockUpdateKafkaMirrorTopicsFailover.Unlock()

	return m.calls.UpdateKafkaMirrorTopicsFailover
}

// UpdateKafkaMirrorTopicsFailoverExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsFailoverExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsFailoverRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AlterMirrorStatusResponseDataList, *net_http.Response, error) {
	m.lockUpdateKafkaMirrorTopicsFailoverExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsFailoverExecute.Unlock()

	if m.UpdateKafkaMirrorTopicsFailoverExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaMirrorTopicsFailoverExecuteFunc is nil but ClusterLinkingV3Api.UpdateKafkaMirrorTopicsFailoverExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsFailoverRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaMirrorTopicsFailoverExecute = append(m.calls.UpdateKafkaMirrorTopicsFailoverExecute, call)

	return m.UpdateKafkaMirrorTopicsFailoverExecuteFunc(r)
}

// UpdateKafkaMirrorTopicsFailoverExecuteCalled returns true if UpdateKafkaMirrorTopicsFailoverExecute was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsFailoverExecuteCalled() bool {
	m.lockUpdateKafkaMirrorTopicsFailoverExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsFailoverExecute.Unlock()

	return len(m.calls.UpdateKafkaMirrorTopicsFailoverExecute) > 0
}

// UpdateKafkaMirrorTopicsFailoverExecuteCalls returns the calls made to UpdateKafkaMirrorTopicsFailoverExecute.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsFailoverExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsFailoverRequest
} {
	m.lockUpdateKafkaMirrorTopicsFailoverExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsFailoverExecute.Unlock()

	return m.calls.UpdateKafkaMirrorTopicsFailoverExecute
}

// UpdateKafkaMirrorTopicsPause mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPause(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPauseRequest {
	m.lockUpdateKafkaMirrorTopicsPause.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPause.Unlock()

	if m.UpdateKafkaMirrorTopicsPauseFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaMirrorTopicsPauseFunc is nil but ClusterLinkingV3Api.UpdateKafkaMirrorTopicsPause was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.UpdateKafkaMirrorTopicsPause = append(m.calls.UpdateKafkaMirrorTopicsPause, call)

	return m.UpdateKafkaMirrorTopicsPauseFunc(ctx, clusterId, linkName)
}

// UpdateKafkaMirrorTopicsPauseCalled returns true if UpdateKafkaMirrorTopicsPause was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPauseCalled() bool {
	m.lockUpdateKafkaMirrorTopicsPause.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPause.Unlock()

	return len(m.calls.UpdateKafkaMirrorTopicsPause) > 0
}

// UpdateKafkaMirrorTopicsPauseCalls returns the calls made to UpdateKafkaMirrorTopicsPause.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPauseCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockUpdateKafkaMirrorTopicsPause.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPause.Unlock()

	return m.calls.UpdateKafkaMirrorTopicsPause
}

// UpdateKafkaMirrorTopicsPauseExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPauseExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPauseRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AlterMirrorStatusResponseDataList, *net_http.Response, error) {
	m.lockUpdateKafkaMirrorTopicsPauseExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPauseExecute.Unlock()

	if m.UpdateKafkaMirrorTopicsPauseExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaMirrorTopicsPauseExecuteFunc is nil but ClusterLinkingV3Api.UpdateKafkaMirrorTopicsPauseExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPauseRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaMirrorTopicsPauseExecute = append(m.calls.UpdateKafkaMirrorTopicsPauseExecute, call)

	return m.UpdateKafkaMirrorTopicsPauseExecuteFunc(r)
}

// UpdateKafkaMirrorTopicsPauseExecuteCalled returns true if UpdateKafkaMirrorTopicsPauseExecute was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPauseExecuteCalled() bool {
	m.lockUpdateKafkaMirrorTopicsPauseExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPauseExecute.Unlock()

	return len(m.calls.UpdateKafkaMirrorTopicsPauseExecute) > 0
}

// UpdateKafkaMirrorTopicsPauseExecuteCalls returns the calls made to UpdateKafkaMirrorTopicsPauseExecute.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPauseExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPauseRequest
} {
	m.lockUpdateKafkaMirrorTopicsPauseExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPauseExecute.Unlock()

	return m.calls.UpdateKafkaMirrorTopicsPauseExecute
}

// UpdateKafkaMirrorTopicsPromote mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPromote(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPromoteRequest {
	m.lockUpdateKafkaMirrorTopicsPromote.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPromote.Unlock()

	if m.UpdateKafkaMirrorTopicsPromoteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaMirrorTopicsPromoteFunc is nil but ClusterLinkingV3Api.UpdateKafkaMirrorTopicsPromote was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.UpdateKafkaMirrorTopicsPromote = append(m.calls.UpdateKafkaMirrorTopicsPromote, call)

	return m.UpdateKafkaMirrorTopicsPromoteFunc(ctx, clusterId, linkName)
}

// UpdateKafkaMirrorTopicsPromoteCalled returns true if UpdateKafkaMirrorTopicsPromote was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPromoteCalled() bool {
	m.lockUpdateKafkaMirrorTopicsPromote.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPromote.Unlock()

	return len(m.calls.UpdateKafkaMirrorTopicsPromote) > 0
}

// UpdateKafkaMirrorTopicsPromoteCalls returns the calls made to UpdateKafkaMirrorTopicsPromote.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPromoteCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockUpdateKafkaMirrorTopicsPromote.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPromote.Unlock()

	return m.calls.UpdateKafkaMirrorTopicsPromote
}

// UpdateKafkaMirrorTopicsPromoteExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPromoteExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPromoteRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AlterMirrorStatusResponseDataList, *net_http.Response, error) {
	m.lockUpdateKafkaMirrorTopicsPromoteExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPromoteExecute.Unlock()

	if m.UpdateKafkaMirrorTopicsPromoteExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaMirrorTopicsPromoteExecuteFunc is nil but ClusterLinkingV3Api.UpdateKafkaMirrorTopicsPromoteExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPromoteRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaMirrorTopicsPromoteExecute = append(m.calls.UpdateKafkaMirrorTopicsPromoteExecute, call)

	return m.UpdateKafkaMirrorTopicsPromoteExecuteFunc(r)
}

// UpdateKafkaMirrorTopicsPromoteExecuteCalled returns true if UpdateKafkaMirrorTopicsPromoteExecute was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPromoteExecuteCalled() bool {
	m.lockUpdateKafkaMirrorTopicsPromoteExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPromoteExecute.Unlock()

	return len(m.calls.UpdateKafkaMirrorTopicsPromoteExecute) > 0
}

// UpdateKafkaMirrorTopicsPromoteExecuteCalls returns the calls made to UpdateKafkaMirrorTopicsPromoteExecute.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsPromoteExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsPromoteRequest
} {
	m.lockUpdateKafkaMirrorTopicsPromoteExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsPromoteExecute.Unlock()

	return m.calls.UpdateKafkaMirrorTopicsPromoteExecute
}

// UpdateKafkaMirrorTopicsResume mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsResume(ctx context.Context, clusterId, linkName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsResumeRequest {
	m.lockUpdateKafkaMirrorTopicsResume.Lock()
	defer m.lockUpdateKafkaMirrorTopicsResume.Unlock()

	if m.UpdateKafkaMirrorTopicsResumeFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaMirrorTopicsResumeFunc is nil but ClusterLinkingV3Api.UpdateKafkaMirrorTopicsResume was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.UpdateKafkaMirrorTopicsResume = append(m.calls.UpdateKafkaMirrorTopicsResume, call)

	return m.UpdateKafkaMirrorTopicsResumeFunc(ctx, clusterId, linkName)
}

// UpdateKafkaMirrorTopicsResumeCalled returns true if UpdateKafkaMirrorTopicsResume was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsResumeCalled() bool {
	m.lockUpdateKafkaMirrorTopicsResume.Lock()
	defer m.lockUpdateKafkaMirrorTopicsResume.Unlock()

	return len(m.calls.UpdateKafkaMirrorTopicsResume) > 0
}

// UpdateKafkaMirrorTopicsResumeCalls returns the calls made to UpdateKafkaMirrorTopicsResume.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsResumeCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockUpdateKafkaMirrorTopicsResume.Lock()
	defer m.lockUpdateKafkaMirrorTopicsResume.Unlock()

	return m.calls.UpdateKafkaMirrorTopicsResume
}

// UpdateKafkaMirrorTopicsResumeExecute mocks base method by wrapping the associated func.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsResumeExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsResumeRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AlterMirrorStatusResponseDataList, *net_http.Response, error) {
	m.lockUpdateKafkaMirrorTopicsResumeExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsResumeExecute.Unlock()

	if m.UpdateKafkaMirrorTopicsResumeExecuteFunc == nil {
		panic("mocker: ClusterLinkingV3Api.UpdateKafkaMirrorTopicsResumeExecuteFunc is nil but ClusterLinkingV3Api.UpdateKafkaMirrorTopicsResumeExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsResumeRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaMirrorTopicsResumeExecute = append(m.calls.UpdateKafkaMirrorTopicsResumeExecute, call)

	return m.UpdateKafkaMirrorTopicsResumeExecuteFunc(r)
}

// UpdateKafkaMirrorTopicsResumeExecuteCalled returns true if UpdateKafkaMirrorTopicsResumeExecute was called at least once.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsResumeExecuteCalled() bool {
	m.lockUpdateKafkaMirrorTopicsResumeExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsResumeExecute.Unlock()

	return len(m.calls.UpdateKafkaMirrorTopicsResumeExecute) > 0
}

// UpdateKafkaMirrorTopicsResumeExecuteCalls returns the calls made to UpdateKafkaMirrorTopicsResumeExecute.
func (m *ClusterLinkingV3Api) UpdateKafkaMirrorTopicsResumeExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaMirrorTopicsResumeRequest
} {
	m.lockUpdateKafkaMirrorTopicsResumeExecute.Lock()
	defer m.lockUpdateKafkaMirrorTopicsResumeExecute.Unlock()

	return m.calls.UpdateKafkaMirrorTopicsResumeExecute
}

// Reset resets the calls made to the mocked methods.
func (m *ClusterLinkingV3Api) Reset() {
	m.lockCreateKafkaLink.Lock()
	m.calls.CreateKafkaLink = nil
	m.lockCreateKafkaLink.Unlock()
	m.lockCreateKafkaLinkExecute.Lock()
	m.calls.CreateKafkaLinkExecute = nil
	m.lockCreateKafkaLinkExecute.Unlock()
	m.lockCreateKafkaMirrorTopic.Lock()
	m.calls.CreateKafkaMirrorTopic = nil
	m.lockCreateKafkaMirrorTopic.Unlock()
	m.lockCreateKafkaMirrorTopicExecute.Lock()
	m.calls.CreateKafkaMirrorTopicExecute = nil
	m.lockCreateKafkaMirrorTopicExecute.Unlock()
	m.lockDeleteKafkaLink.Lock()
	m.calls.DeleteKafkaLink = nil
	m.lockDeleteKafkaLink.Unlock()
	m.lockDeleteKafkaLinkExecute.Lock()
	m.calls.DeleteKafkaLinkExecute = nil
	m.lockDeleteKafkaLinkExecute.Unlock()
	m.lockDeleteKafkaLinkConfig.Lock()
	m.calls.DeleteKafkaLinkConfig = nil
	m.lockDeleteKafkaLinkConfig.Unlock()
	m.lockDeleteKafkaLinkConfigExecute.Lock()
	m.calls.DeleteKafkaLinkConfigExecute = nil
	m.lockDeleteKafkaLinkConfigExecute.Unlock()
	m.lockGetKafkaLink.Lock()
	m.calls.GetKafkaLink = nil
	m.lockGetKafkaLink.Unlock()
	m.lockGetKafkaLinkExecute.Lock()
	m.calls.GetKafkaLinkExecute = nil
	m.lockGetKafkaLinkExecute.Unlock()
	m.lockGetKafkaLinkConfigs.Lock()
	m.calls.GetKafkaLinkConfigs = nil
	m.lockGetKafkaLinkConfigs.Unlock()
	m.lockGetKafkaLinkConfigsExecute.Lock()
	m.calls.GetKafkaLinkConfigsExecute = nil
	m.lockGetKafkaLinkConfigsExecute.Unlock()
	m.lockListKafkaLinkConfigs.Lock()
	m.calls.ListKafkaLinkConfigs = nil
	m.lockListKafkaLinkConfigs.Unlock()
	m.lockListKafkaLinkConfigsExecute.Lock()
	m.calls.ListKafkaLinkConfigsExecute = nil
	m.lockListKafkaLinkConfigsExecute.Unlock()
	m.lockListKafkaLinks.Lock()
	m.calls.ListKafkaLinks = nil
	m.lockListKafkaLinks.Unlock()
	m.lockListKafkaLinksExecute.Lock()
	m.calls.ListKafkaLinksExecute = nil
	m.lockListKafkaLinksExecute.Unlock()
	m.lockListKafkaMirrorTopics.Lock()
	m.calls.ListKafkaMirrorTopics = nil
	m.lockListKafkaMirrorTopics.Unlock()
	m.lockListKafkaMirrorTopicsExecute.Lock()
	m.calls.ListKafkaMirrorTopicsExecute = nil
	m.lockListKafkaMirrorTopicsExecute.Unlock()
	m.lockListKafkaMirrorTopicsUnderLink.Lock()
	m.calls.ListKafkaMirrorTopicsUnderLink = nil
	m.lockListKafkaMirrorTopicsUnderLink.Unlock()
	m.lockListKafkaMirrorTopicsUnderLinkExecute.Lock()
	m.calls.ListKafkaMirrorTopicsUnderLinkExecute = nil
	m.lockListKafkaMirrorTopicsUnderLinkExecute.Unlock()
	m.lockReadKafkaMirrorTopic.Lock()
	m.calls.ReadKafkaMirrorTopic = nil
	m.lockReadKafkaMirrorTopic.Unlock()
	m.lockReadKafkaMirrorTopicExecute.Lock()
	m.calls.ReadKafkaMirrorTopicExecute = nil
	m.lockReadKafkaMirrorTopicExecute.Unlock()
	m.lockUpdateKafkaLinkConfig.Lock()
	m.calls.UpdateKafkaLinkConfig = nil
	m.lockUpdateKafkaLinkConfig.Unlock()
	m.lockUpdateKafkaLinkConfigExecute.Lock()
	m.calls.UpdateKafkaLinkConfigExecute = nil
	m.lockUpdateKafkaLinkConfigExecute.Unlock()
	m.lockUpdateKafkaLinkConfigBatch.Lock()
	m.calls.UpdateKafkaLinkConfigBatch = nil
	m.lockUpdateKafkaLinkConfigBatch.Unlock()
	m.lockUpdateKafkaLinkConfigBatchExecute.Lock()
	m.calls.UpdateKafkaLinkConfigBatchExecute = nil
	m.lockUpdateKafkaLinkConfigBatchExecute.Unlock()
	m.lockUpdateKafkaMirrorTopicsFailover.Lock()
	m.calls.UpdateKafkaMirrorTopicsFailover = nil
	m.lockUpdateKafkaMirrorTopicsFailover.Unlock()
	m.lockUpdateKafkaMirrorTopicsFailoverExecute.Lock()
	m.calls.UpdateKafkaMirrorTopicsFailoverExecute = nil
	m.lockUpdateKafkaMirrorTopicsFailoverExecute.Unlock()
	m.lockUpdateKafkaMirrorTopicsPause.Lock()
	m.calls.UpdateKafkaMirrorTopicsPause = nil
	m.lockUpdateKafkaMirrorTopicsPause.Unlock()
	m.lockUpdateKafkaMirrorTopicsPauseExecute.Lock()
	m.calls.UpdateKafkaMirrorTopicsPauseExecute = nil
	m.lockUpdateKafkaMirrorTopicsPauseExecute.Unlock()
	m.lockUpdateKafkaMirrorTopicsPromote.Lock()
	m.calls.UpdateKafkaMirrorTopicsPromote = nil
	m.lockUpdateKafkaMirrorTopicsPromote.Unlock()
	m.lockUpdateKafkaMirrorTopicsPromoteExecute.Lock()
	m.calls.UpdateKafkaMirrorTopicsPromoteExecute = nil
	m.lockUpdateKafkaMirrorTopicsPromoteExecute.Unlock()
	m.lockUpdateKafkaMirrorTopicsResume.Lock()
	m.calls.UpdateKafkaMirrorTopicsResume = nil
	m.lockUpdateKafkaMirrorTopicsResume.Unlock()
	m.lockUpdateKafkaMirrorTopicsResumeExecute.Lock()
	m.calls.UpdateKafkaMirrorTopicsResumeExecute = nil
	m.lockUpdateKafkaMirrorTopicsResumeExecute.Unlock()
}
