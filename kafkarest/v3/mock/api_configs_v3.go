// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_configs_v3.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3 "github.com/confluentinc/ccloud-sdk-go-v2/kafkarest/v3"
)

// ConfigsV3Api is a mock of ConfigsV3Api interface
type ConfigsV3Api struct {
	lockDeleteKafkaClusterConfig sync.Mutex
	DeleteKafkaClusterConfigFunc func(ctx context.Context, clusterId, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaClusterConfigRequest

	lockDeleteKafkaClusterConfigExecute sync.Mutex
	DeleteKafkaClusterConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaClusterConfigRequest) (*net_http.Response, error)

	lockDeleteKafkaTopicConfig sync.Mutex
	DeleteKafkaTopicConfigFunc func(ctx context.Context, clusterId, topicName, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaTopicConfigRequest

	lockDeleteKafkaTopicConfigExecute sync.Mutex
	DeleteKafkaTopicConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaTopicConfigRequest) (*net_http.Response, error)

	lockGetKafkaClusterConfig sync.Mutex
	GetKafkaClusterConfigFunc func(ctx context.Context, clusterId, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaClusterConfigRequest

	lockGetKafkaClusterConfigExecute sync.Mutex
	GetKafkaClusterConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaClusterConfigRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ClusterConfigData, *net_http.Response, error)

	lockGetKafkaTopicConfig sync.Mutex
	GetKafkaTopicConfigFunc func(ctx context.Context, clusterId, topicName, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaTopicConfigRequest

	lockGetKafkaTopicConfigExecute sync.Mutex
	GetKafkaTopicConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaTopicConfigRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.TopicConfigData, *net_http.Response, error)

	lockListKafkaAllTopicConfigs sync.Mutex
	ListKafkaAllTopicConfigsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaAllTopicConfigsRequest

	lockListKafkaAllTopicConfigsExecute sync.Mutex
	ListKafkaAllTopicConfigsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaAllTopicConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.TopicConfigDataList, *net_http.Response, error)

	lockListKafkaClusterConfigs sync.Mutex
	ListKafkaClusterConfigsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaClusterConfigsRequest

	lockListKafkaClusterConfigsExecute sync.Mutex
	ListKafkaClusterConfigsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaClusterConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ClusterConfigDataList, *net_http.Response, error)

	lockListKafkaDefaultTopicConfigs sync.Mutex
	ListKafkaDefaultTopicConfigsFunc func(ctx context.Context, clusterId, topicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaDefaultTopicConfigsRequest

	lockListKafkaDefaultTopicConfigsExecute sync.Mutex
	ListKafkaDefaultTopicConfigsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaDefaultTopicConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.TopicConfigDataList, *net_http.Response, error)

	lockListKafkaTopicConfigs sync.Mutex
	ListKafkaTopicConfigsFunc func(ctx context.Context, clusterId, topicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaTopicConfigsRequest

	lockListKafkaTopicConfigsExecute sync.Mutex
	ListKafkaTopicConfigsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaTopicConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.TopicConfigDataList, *net_http.Response, error)

	lockUpdateKafkaClusterConfig sync.Mutex
	UpdateKafkaClusterConfigFunc func(ctx context.Context, clusterId, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigRequest

	lockUpdateKafkaClusterConfigExecute sync.Mutex
	UpdateKafkaClusterConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigRequest) (*net_http.Response, error)

	lockUpdateKafkaClusterConfigs sync.Mutex
	UpdateKafkaClusterConfigsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigsRequest

	lockUpdateKafkaClusterConfigsExecute sync.Mutex
	UpdateKafkaClusterConfigsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigsRequest) (*net_http.Response, error)

	lockUpdateKafkaTopicConfig sync.Mutex
	UpdateKafkaTopicConfigFunc func(ctx context.Context, clusterId, topicName, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigRequest

	lockUpdateKafkaTopicConfigExecute sync.Mutex
	UpdateKafkaTopicConfigExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigRequest) (*net_http.Response, error)

	lockUpdateKafkaTopicConfigBatch sync.Mutex
	UpdateKafkaTopicConfigBatchFunc func(ctx context.Context, clusterId, topicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigBatchRequest

	lockUpdateKafkaTopicConfigBatchExecute sync.Mutex
	UpdateKafkaTopicConfigBatchExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigBatchRequest) (*net_http.Response, error)

	calls struct {
		DeleteKafkaClusterConfig []struct {
			Ctx       context.Context
			ClusterId string
			Name      string
		}
		DeleteKafkaClusterConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaClusterConfigRequest
		}
		DeleteKafkaTopicConfig []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
			Name      string
		}
		DeleteKafkaTopicConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaTopicConfigRequest
		}
		GetKafkaClusterConfig []struct {
			Ctx       context.Context
			ClusterId string
			Name      string
		}
		GetKafkaClusterConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaClusterConfigRequest
		}
		GetKafkaTopicConfig []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
			Name      string
		}
		GetKafkaTopicConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaTopicConfigRequest
		}
		ListKafkaAllTopicConfigs []struct {
			Ctx       context.Context
			ClusterId string
		}
		ListKafkaAllTopicConfigsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaAllTopicConfigsRequest
		}
		ListKafkaClusterConfigs []struct {
			Ctx       context.Context
			ClusterId string
		}
		ListKafkaClusterConfigsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaClusterConfigsRequest
		}
		ListKafkaDefaultTopicConfigs []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
		ListKafkaDefaultTopicConfigsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaDefaultTopicConfigsRequest
		}
		ListKafkaTopicConfigs []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
		ListKafkaTopicConfigsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaTopicConfigsRequest
		}
		UpdateKafkaClusterConfig []struct {
			Ctx       context.Context
			ClusterId string
			Name      string
		}
		UpdateKafkaClusterConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigRequest
		}
		UpdateKafkaClusterConfigs []struct {
			Ctx       context.Context
			ClusterId string
		}
		UpdateKafkaClusterConfigsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigsRequest
		}
		UpdateKafkaTopicConfig []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
			Name      string
		}
		UpdateKafkaTopicConfigExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigRequest
		}
		UpdateKafkaTopicConfigBatch []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
		UpdateKafkaTopicConfigBatchExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigBatchRequest
		}
	}
}

// DeleteKafkaClusterConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) DeleteKafkaClusterConfig(ctx context.Context, clusterId, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaClusterConfigRequest {
	m.lockDeleteKafkaClusterConfig.Lock()
	defer m.lockDeleteKafkaClusterConfig.Unlock()

	if m.DeleteKafkaClusterConfigFunc == nil {
		panic("mocker: ConfigsV3Api.DeleteKafkaClusterConfigFunc is nil but ConfigsV3Api.DeleteKafkaClusterConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		Name:      name,
	}

	m.calls.DeleteKafkaClusterConfig = append(m.calls.DeleteKafkaClusterConfig, call)

	return m.DeleteKafkaClusterConfigFunc(ctx, clusterId, name)
}

// DeleteKafkaClusterConfigCalled returns true if DeleteKafkaClusterConfig was called at least once.
func (m *ConfigsV3Api) DeleteKafkaClusterConfigCalled() bool {
	m.lockDeleteKafkaClusterConfig.Lock()
	defer m.lockDeleteKafkaClusterConfig.Unlock()

	return len(m.calls.DeleteKafkaClusterConfig) > 0
}

// DeleteKafkaClusterConfigCalls returns the calls made to DeleteKafkaClusterConfig.
func (m *ConfigsV3Api) DeleteKafkaClusterConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	Name      string
} {
	m.lockDeleteKafkaClusterConfig.Lock()
	defer m.lockDeleteKafkaClusterConfig.Unlock()

	return m.calls.DeleteKafkaClusterConfig
}

// DeleteKafkaClusterConfigExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) DeleteKafkaClusterConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaClusterConfigRequest) (*net_http.Response, error) {
	m.lockDeleteKafkaClusterConfigExecute.Lock()
	defer m.lockDeleteKafkaClusterConfigExecute.Unlock()

	if m.DeleteKafkaClusterConfigExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.DeleteKafkaClusterConfigExecuteFunc is nil but ConfigsV3Api.DeleteKafkaClusterConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaClusterConfigRequest
	}{
		R: r,
	}

	m.calls.DeleteKafkaClusterConfigExecute = append(m.calls.DeleteKafkaClusterConfigExecute, call)

	return m.DeleteKafkaClusterConfigExecuteFunc(r)
}

// DeleteKafkaClusterConfigExecuteCalled returns true if DeleteKafkaClusterConfigExecute was called at least once.
func (m *ConfigsV3Api) DeleteKafkaClusterConfigExecuteCalled() bool {
	m.lockDeleteKafkaClusterConfigExecute.Lock()
	defer m.lockDeleteKafkaClusterConfigExecute.Unlock()

	return len(m.calls.DeleteKafkaClusterConfigExecute) > 0
}

// DeleteKafkaClusterConfigExecuteCalls returns the calls made to DeleteKafkaClusterConfigExecute.
func (m *ConfigsV3Api) DeleteKafkaClusterConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaClusterConfigRequest
} {
	m.lockDeleteKafkaClusterConfigExecute.Lock()
	defer m.lockDeleteKafkaClusterConfigExecute.Unlock()

	return m.calls.DeleteKafkaClusterConfigExecute
}

// DeleteKafkaTopicConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) DeleteKafkaTopicConfig(ctx context.Context, clusterId, topicName, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaTopicConfigRequest {
	m.lockDeleteKafkaTopicConfig.Lock()
	defer m.lockDeleteKafkaTopicConfig.Unlock()

	if m.DeleteKafkaTopicConfigFunc == nil {
		panic("mocker: ConfigsV3Api.DeleteKafkaTopicConfigFunc is nil but ConfigsV3Api.DeleteKafkaTopicConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
		Name:      name,
	}

	m.calls.DeleteKafkaTopicConfig = append(m.calls.DeleteKafkaTopicConfig, call)

	return m.DeleteKafkaTopicConfigFunc(ctx, clusterId, topicName, name)
}

// DeleteKafkaTopicConfigCalled returns true if DeleteKafkaTopicConfig was called at least once.
func (m *ConfigsV3Api) DeleteKafkaTopicConfigCalled() bool {
	m.lockDeleteKafkaTopicConfig.Lock()
	defer m.lockDeleteKafkaTopicConfig.Unlock()

	return len(m.calls.DeleteKafkaTopicConfig) > 0
}

// DeleteKafkaTopicConfigCalls returns the calls made to DeleteKafkaTopicConfig.
func (m *ConfigsV3Api) DeleteKafkaTopicConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
	Name      string
} {
	m.lockDeleteKafkaTopicConfig.Lock()
	defer m.lockDeleteKafkaTopicConfig.Unlock()

	return m.calls.DeleteKafkaTopicConfig
}

// DeleteKafkaTopicConfigExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) DeleteKafkaTopicConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaTopicConfigRequest) (*net_http.Response, error) {
	m.lockDeleteKafkaTopicConfigExecute.Lock()
	defer m.lockDeleteKafkaTopicConfigExecute.Unlock()

	if m.DeleteKafkaTopicConfigExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.DeleteKafkaTopicConfigExecuteFunc is nil but ConfigsV3Api.DeleteKafkaTopicConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaTopicConfigRequest
	}{
		R: r,
	}

	m.calls.DeleteKafkaTopicConfigExecute = append(m.calls.DeleteKafkaTopicConfigExecute, call)

	return m.DeleteKafkaTopicConfigExecuteFunc(r)
}

// DeleteKafkaTopicConfigExecuteCalled returns true if DeleteKafkaTopicConfigExecute was called at least once.
func (m *ConfigsV3Api) DeleteKafkaTopicConfigExecuteCalled() bool {
	m.lockDeleteKafkaTopicConfigExecute.Lock()
	defer m.lockDeleteKafkaTopicConfigExecute.Unlock()

	return len(m.calls.DeleteKafkaTopicConfigExecute) > 0
}

// DeleteKafkaTopicConfigExecuteCalls returns the calls made to DeleteKafkaTopicConfigExecute.
func (m *ConfigsV3Api) DeleteKafkaTopicConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaTopicConfigRequest
} {
	m.lockDeleteKafkaTopicConfigExecute.Lock()
	defer m.lockDeleteKafkaTopicConfigExecute.Unlock()

	return m.calls.DeleteKafkaTopicConfigExecute
}

// GetKafkaClusterConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) GetKafkaClusterConfig(ctx context.Context, clusterId, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaClusterConfigRequest {
	m.lockGetKafkaClusterConfig.Lock()
	defer m.lockGetKafkaClusterConfig.Unlock()

	if m.GetKafkaClusterConfigFunc == nil {
		panic("mocker: ConfigsV3Api.GetKafkaClusterConfigFunc is nil but ConfigsV3Api.GetKafkaClusterConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		Name:      name,
	}

	m.calls.GetKafkaClusterConfig = append(m.calls.GetKafkaClusterConfig, call)

	return m.GetKafkaClusterConfigFunc(ctx, clusterId, name)
}

// GetKafkaClusterConfigCalled returns true if GetKafkaClusterConfig was called at least once.
func (m *ConfigsV3Api) GetKafkaClusterConfigCalled() bool {
	m.lockGetKafkaClusterConfig.Lock()
	defer m.lockGetKafkaClusterConfig.Unlock()

	return len(m.calls.GetKafkaClusterConfig) > 0
}

// GetKafkaClusterConfigCalls returns the calls made to GetKafkaClusterConfig.
func (m *ConfigsV3Api) GetKafkaClusterConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	Name      string
} {
	m.lockGetKafkaClusterConfig.Lock()
	defer m.lockGetKafkaClusterConfig.Unlock()

	return m.calls.GetKafkaClusterConfig
}

// GetKafkaClusterConfigExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) GetKafkaClusterConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaClusterConfigRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ClusterConfigData, *net_http.Response, error) {
	m.lockGetKafkaClusterConfigExecute.Lock()
	defer m.lockGetKafkaClusterConfigExecute.Unlock()

	if m.GetKafkaClusterConfigExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.GetKafkaClusterConfigExecuteFunc is nil but ConfigsV3Api.GetKafkaClusterConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaClusterConfigRequest
	}{
		R: r,
	}

	m.calls.GetKafkaClusterConfigExecute = append(m.calls.GetKafkaClusterConfigExecute, call)

	return m.GetKafkaClusterConfigExecuteFunc(r)
}

// GetKafkaClusterConfigExecuteCalled returns true if GetKafkaClusterConfigExecute was called at least once.
func (m *ConfigsV3Api) GetKafkaClusterConfigExecuteCalled() bool {
	m.lockGetKafkaClusterConfigExecute.Lock()
	defer m.lockGetKafkaClusterConfigExecute.Unlock()

	return len(m.calls.GetKafkaClusterConfigExecute) > 0
}

// GetKafkaClusterConfigExecuteCalls returns the calls made to GetKafkaClusterConfigExecute.
func (m *ConfigsV3Api) GetKafkaClusterConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaClusterConfigRequest
} {
	m.lockGetKafkaClusterConfigExecute.Lock()
	defer m.lockGetKafkaClusterConfigExecute.Unlock()

	return m.calls.GetKafkaClusterConfigExecute
}

// GetKafkaTopicConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) GetKafkaTopicConfig(ctx context.Context, clusterId, topicName, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaTopicConfigRequest {
	m.lockGetKafkaTopicConfig.Lock()
	defer m.lockGetKafkaTopicConfig.Unlock()

	if m.GetKafkaTopicConfigFunc == nil {
		panic("mocker: ConfigsV3Api.GetKafkaTopicConfigFunc is nil but ConfigsV3Api.GetKafkaTopicConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
		Name:      name,
	}

	m.calls.GetKafkaTopicConfig = append(m.calls.GetKafkaTopicConfig, call)

	return m.GetKafkaTopicConfigFunc(ctx, clusterId, topicName, name)
}

// GetKafkaTopicConfigCalled returns true if GetKafkaTopicConfig was called at least once.
func (m *ConfigsV3Api) GetKafkaTopicConfigCalled() bool {
	m.lockGetKafkaTopicConfig.Lock()
	defer m.lockGetKafkaTopicConfig.Unlock()

	return len(m.calls.GetKafkaTopicConfig) > 0
}

// GetKafkaTopicConfigCalls returns the calls made to GetKafkaTopicConfig.
func (m *ConfigsV3Api) GetKafkaTopicConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
	Name      string
} {
	m.lockGetKafkaTopicConfig.Lock()
	defer m.lockGetKafkaTopicConfig.Unlock()

	return m.calls.GetKafkaTopicConfig
}

// GetKafkaTopicConfigExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) GetKafkaTopicConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaTopicConfigRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.TopicConfigData, *net_http.Response, error) {
	m.lockGetKafkaTopicConfigExecute.Lock()
	defer m.lockGetKafkaTopicConfigExecute.Unlock()

	if m.GetKafkaTopicConfigExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.GetKafkaTopicConfigExecuteFunc is nil but ConfigsV3Api.GetKafkaTopicConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaTopicConfigRequest
	}{
		R: r,
	}

	m.calls.GetKafkaTopicConfigExecute = append(m.calls.GetKafkaTopicConfigExecute, call)

	return m.GetKafkaTopicConfigExecuteFunc(r)
}

// GetKafkaTopicConfigExecuteCalled returns true if GetKafkaTopicConfigExecute was called at least once.
func (m *ConfigsV3Api) GetKafkaTopicConfigExecuteCalled() bool {
	m.lockGetKafkaTopicConfigExecute.Lock()
	defer m.lockGetKafkaTopicConfigExecute.Unlock()

	return len(m.calls.GetKafkaTopicConfigExecute) > 0
}

// GetKafkaTopicConfigExecuteCalls returns the calls made to GetKafkaTopicConfigExecute.
func (m *ConfigsV3Api) GetKafkaTopicConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaTopicConfigRequest
} {
	m.lockGetKafkaTopicConfigExecute.Lock()
	defer m.lockGetKafkaTopicConfigExecute.Unlock()

	return m.calls.GetKafkaTopicConfigExecute
}

// ListKafkaAllTopicConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigs(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaAllTopicConfigsRequest {
	m.lockListKafkaAllTopicConfigs.Lock()
	defer m.lockListKafkaAllTopicConfigs.Unlock()

	if m.ListKafkaAllTopicConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaAllTopicConfigsFunc is nil but ConfigsV3Api.ListKafkaAllTopicConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ListKafkaAllTopicConfigs = append(m.calls.ListKafkaAllTopicConfigs, call)

	return m.ListKafkaAllTopicConfigsFunc(ctx, clusterId)
}

// ListKafkaAllTopicConfigsCalled returns true if ListKafkaAllTopicConfigs was called at least once.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigsCalled() bool {
	m.lockListKafkaAllTopicConfigs.Lock()
	defer m.lockListKafkaAllTopicConfigs.Unlock()

	return len(m.calls.ListKafkaAllTopicConfigs) > 0
}

// ListKafkaAllTopicConfigsCalls returns the calls made to ListKafkaAllTopicConfigs.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockListKafkaAllTopicConfigs.Lock()
	defer m.lockListKafkaAllTopicConfigs.Unlock()

	return m.calls.ListKafkaAllTopicConfigs
}

// ListKafkaAllTopicConfigsExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaAllTopicConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.TopicConfigDataList, *net_http.Response, error) {
	m.lockListKafkaAllTopicConfigsExecute.Lock()
	defer m.lockListKafkaAllTopicConfigsExecute.Unlock()

	if m.ListKafkaAllTopicConfigsExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaAllTopicConfigsExecuteFunc is nil but ConfigsV3Api.ListKafkaAllTopicConfigsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaAllTopicConfigsRequest
	}{
		R: r,
	}

	m.calls.ListKafkaAllTopicConfigsExecute = append(m.calls.ListKafkaAllTopicConfigsExecute, call)

	return m.ListKafkaAllTopicConfigsExecuteFunc(r)
}

// ListKafkaAllTopicConfigsExecuteCalled returns true if ListKafkaAllTopicConfigsExecute was called at least once.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigsExecuteCalled() bool {
	m.lockListKafkaAllTopicConfigsExecute.Lock()
	defer m.lockListKafkaAllTopicConfigsExecute.Unlock()

	return len(m.calls.ListKafkaAllTopicConfigsExecute) > 0
}

// ListKafkaAllTopicConfigsExecuteCalls returns the calls made to ListKafkaAllTopicConfigsExecute.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaAllTopicConfigsRequest
} {
	m.lockListKafkaAllTopicConfigsExecute.Lock()
	defer m.lockListKafkaAllTopicConfigsExecute.Unlock()

	return m.calls.ListKafkaAllTopicConfigsExecute
}

// ListKafkaClusterConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaClusterConfigs(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaClusterConfigsRequest {
	m.lockListKafkaClusterConfigs.Lock()
	defer m.lockListKafkaClusterConfigs.Unlock()

	if m.ListKafkaClusterConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaClusterConfigsFunc is nil but ConfigsV3Api.ListKafkaClusterConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ListKafkaClusterConfigs = append(m.calls.ListKafkaClusterConfigs, call)

	return m.ListKafkaClusterConfigsFunc(ctx, clusterId)
}

// ListKafkaClusterConfigsCalled returns true if ListKafkaClusterConfigs was called at least once.
func (m *ConfigsV3Api) ListKafkaClusterConfigsCalled() bool {
	m.lockListKafkaClusterConfigs.Lock()
	defer m.lockListKafkaClusterConfigs.Unlock()

	return len(m.calls.ListKafkaClusterConfigs) > 0
}

// ListKafkaClusterConfigsCalls returns the calls made to ListKafkaClusterConfigs.
func (m *ConfigsV3Api) ListKafkaClusterConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockListKafkaClusterConfigs.Lock()
	defer m.lockListKafkaClusterConfigs.Unlock()

	return m.calls.ListKafkaClusterConfigs
}

// ListKafkaClusterConfigsExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaClusterConfigsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaClusterConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ClusterConfigDataList, *net_http.Response, error) {
	m.lockListKafkaClusterConfigsExecute.Lock()
	defer m.lockListKafkaClusterConfigsExecute.Unlock()

	if m.ListKafkaClusterConfigsExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaClusterConfigsExecuteFunc is nil but ConfigsV3Api.ListKafkaClusterConfigsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaClusterConfigsRequest
	}{
		R: r,
	}

	m.calls.ListKafkaClusterConfigsExecute = append(m.calls.ListKafkaClusterConfigsExecute, call)

	return m.ListKafkaClusterConfigsExecuteFunc(r)
}

// ListKafkaClusterConfigsExecuteCalled returns true if ListKafkaClusterConfigsExecute was called at least once.
func (m *ConfigsV3Api) ListKafkaClusterConfigsExecuteCalled() bool {
	m.lockListKafkaClusterConfigsExecute.Lock()
	defer m.lockListKafkaClusterConfigsExecute.Unlock()

	return len(m.calls.ListKafkaClusterConfigsExecute) > 0
}

// ListKafkaClusterConfigsExecuteCalls returns the calls made to ListKafkaClusterConfigsExecute.
func (m *ConfigsV3Api) ListKafkaClusterConfigsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaClusterConfigsRequest
} {
	m.lockListKafkaClusterConfigsExecute.Lock()
	defer m.lockListKafkaClusterConfigsExecute.Unlock()

	return m.calls.ListKafkaClusterConfigsExecute
}

// ListKafkaDefaultTopicConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigs(ctx context.Context, clusterId, topicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaDefaultTopicConfigsRequest {
	m.lockListKafkaDefaultTopicConfigs.Lock()
	defer m.lockListKafkaDefaultTopicConfigs.Unlock()

	if m.ListKafkaDefaultTopicConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaDefaultTopicConfigsFunc is nil but ConfigsV3Api.ListKafkaDefaultTopicConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ListKafkaDefaultTopicConfigs = append(m.calls.ListKafkaDefaultTopicConfigs, call)

	return m.ListKafkaDefaultTopicConfigsFunc(ctx, clusterId, topicName)
}

// ListKafkaDefaultTopicConfigsCalled returns true if ListKafkaDefaultTopicConfigs was called at least once.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigsCalled() bool {
	m.lockListKafkaDefaultTopicConfigs.Lock()
	defer m.lockListKafkaDefaultTopicConfigs.Unlock()

	return len(m.calls.ListKafkaDefaultTopicConfigs) > 0
}

// ListKafkaDefaultTopicConfigsCalls returns the calls made to ListKafkaDefaultTopicConfigs.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockListKafkaDefaultTopicConfigs.Lock()
	defer m.lockListKafkaDefaultTopicConfigs.Unlock()

	return m.calls.ListKafkaDefaultTopicConfigs
}

// ListKafkaDefaultTopicConfigsExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaDefaultTopicConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.TopicConfigDataList, *net_http.Response, error) {
	m.lockListKafkaDefaultTopicConfigsExecute.Lock()
	defer m.lockListKafkaDefaultTopicConfigsExecute.Unlock()

	if m.ListKafkaDefaultTopicConfigsExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaDefaultTopicConfigsExecuteFunc is nil but ConfigsV3Api.ListKafkaDefaultTopicConfigsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaDefaultTopicConfigsRequest
	}{
		R: r,
	}

	m.calls.ListKafkaDefaultTopicConfigsExecute = append(m.calls.ListKafkaDefaultTopicConfigsExecute, call)

	return m.ListKafkaDefaultTopicConfigsExecuteFunc(r)
}

// ListKafkaDefaultTopicConfigsExecuteCalled returns true if ListKafkaDefaultTopicConfigsExecute was called at least once.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigsExecuteCalled() bool {
	m.lockListKafkaDefaultTopicConfigsExecute.Lock()
	defer m.lockListKafkaDefaultTopicConfigsExecute.Unlock()

	return len(m.calls.ListKafkaDefaultTopicConfigsExecute) > 0
}

// ListKafkaDefaultTopicConfigsExecuteCalls returns the calls made to ListKafkaDefaultTopicConfigsExecute.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaDefaultTopicConfigsRequest
} {
	m.lockListKafkaDefaultTopicConfigsExecute.Lock()
	defer m.lockListKafkaDefaultTopicConfigsExecute.Unlock()

	return m.calls.ListKafkaDefaultTopicConfigsExecute
}

// ListKafkaTopicConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaTopicConfigs(ctx context.Context, clusterId, topicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaTopicConfigsRequest {
	m.lockListKafkaTopicConfigs.Lock()
	defer m.lockListKafkaTopicConfigs.Unlock()

	if m.ListKafkaTopicConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaTopicConfigsFunc is nil but ConfigsV3Api.ListKafkaTopicConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ListKafkaTopicConfigs = append(m.calls.ListKafkaTopicConfigs, call)

	return m.ListKafkaTopicConfigsFunc(ctx, clusterId, topicName)
}

// ListKafkaTopicConfigsCalled returns true if ListKafkaTopicConfigs was called at least once.
func (m *ConfigsV3Api) ListKafkaTopicConfigsCalled() bool {
	m.lockListKafkaTopicConfigs.Lock()
	defer m.lockListKafkaTopicConfigs.Unlock()

	return len(m.calls.ListKafkaTopicConfigs) > 0
}

// ListKafkaTopicConfigsCalls returns the calls made to ListKafkaTopicConfigs.
func (m *ConfigsV3Api) ListKafkaTopicConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockListKafkaTopicConfigs.Lock()
	defer m.lockListKafkaTopicConfigs.Unlock()

	return m.calls.ListKafkaTopicConfigs
}

// ListKafkaTopicConfigsExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaTopicConfigsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaTopicConfigsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.TopicConfigDataList, *net_http.Response, error) {
	m.lockListKafkaTopicConfigsExecute.Lock()
	defer m.lockListKafkaTopicConfigsExecute.Unlock()

	if m.ListKafkaTopicConfigsExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaTopicConfigsExecuteFunc is nil but ConfigsV3Api.ListKafkaTopicConfigsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaTopicConfigsRequest
	}{
		R: r,
	}

	m.calls.ListKafkaTopicConfigsExecute = append(m.calls.ListKafkaTopicConfigsExecute, call)

	return m.ListKafkaTopicConfigsExecuteFunc(r)
}

// ListKafkaTopicConfigsExecuteCalled returns true if ListKafkaTopicConfigsExecute was called at least once.
func (m *ConfigsV3Api) ListKafkaTopicConfigsExecuteCalled() bool {
	m.lockListKafkaTopicConfigsExecute.Lock()
	defer m.lockListKafkaTopicConfigsExecute.Unlock()

	return len(m.calls.ListKafkaTopicConfigsExecute) > 0
}

// ListKafkaTopicConfigsExecuteCalls returns the calls made to ListKafkaTopicConfigsExecute.
func (m *ConfigsV3Api) ListKafkaTopicConfigsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaTopicConfigsRequest
} {
	m.lockListKafkaTopicConfigsExecute.Lock()
	defer m.lockListKafkaTopicConfigsExecute.Unlock()

	return m.calls.ListKafkaTopicConfigsExecute
}

// UpdateKafkaClusterConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaClusterConfig(ctx context.Context, clusterId, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigRequest {
	m.lockUpdateKafkaClusterConfig.Lock()
	defer m.lockUpdateKafkaClusterConfig.Unlock()

	if m.UpdateKafkaClusterConfigFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaClusterConfigFunc is nil but ConfigsV3Api.UpdateKafkaClusterConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		Name:      name,
	}

	m.calls.UpdateKafkaClusterConfig = append(m.calls.UpdateKafkaClusterConfig, call)

	return m.UpdateKafkaClusterConfigFunc(ctx, clusterId, name)
}

// UpdateKafkaClusterConfigCalled returns true if UpdateKafkaClusterConfig was called at least once.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigCalled() bool {
	m.lockUpdateKafkaClusterConfig.Lock()
	defer m.lockUpdateKafkaClusterConfig.Unlock()

	return len(m.calls.UpdateKafkaClusterConfig) > 0
}

// UpdateKafkaClusterConfigCalls returns the calls made to UpdateKafkaClusterConfig.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	Name      string
} {
	m.lockUpdateKafkaClusterConfig.Lock()
	defer m.lockUpdateKafkaClusterConfig.Unlock()

	return m.calls.UpdateKafkaClusterConfig
}

// UpdateKafkaClusterConfigExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigRequest) (*net_http.Response, error) {
	m.lockUpdateKafkaClusterConfigExecute.Lock()
	defer m.lockUpdateKafkaClusterConfigExecute.Unlock()

	if m.UpdateKafkaClusterConfigExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaClusterConfigExecuteFunc is nil but ConfigsV3Api.UpdateKafkaClusterConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaClusterConfigExecute = append(m.calls.UpdateKafkaClusterConfigExecute, call)

	return m.UpdateKafkaClusterConfigExecuteFunc(r)
}

// UpdateKafkaClusterConfigExecuteCalled returns true if UpdateKafkaClusterConfigExecute was called at least once.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigExecuteCalled() bool {
	m.lockUpdateKafkaClusterConfigExecute.Lock()
	defer m.lockUpdateKafkaClusterConfigExecute.Unlock()

	return len(m.calls.UpdateKafkaClusterConfigExecute) > 0
}

// UpdateKafkaClusterConfigExecuteCalls returns the calls made to UpdateKafkaClusterConfigExecute.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigRequest
} {
	m.lockUpdateKafkaClusterConfigExecute.Lock()
	defer m.lockUpdateKafkaClusterConfigExecute.Unlock()

	return m.calls.UpdateKafkaClusterConfigExecute
}

// UpdateKafkaClusterConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigs(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigsRequest {
	m.lockUpdateKafkaClusterConfigs.Lock()
	defer m.lockUpdateKafkaClusterConfigs.Unlock()

	if m.UpdateKafkaClusterConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaClusterConfigsFunc is nil but ConfigsV3Api.UpdateKafkaClusterConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.UpdateKafkaClusterConfigs = append(m.calls.UpdateKafkaClusterConfigs, call)

	return m.UpdateKafkaClusterConfigsFunc(ctx, clusterId)
}

// UpdateKafkaClusterConfigsCalled returns true if UpdateKafkaClusterConfigs was called at least once.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigsCalled() bool {
	m.lockUpdateKafkaClusterConfigs.Lock()
	defer m.lockUpdateKafkaClusterConfigs.Unlock()

	return len(m.calls.UpdateKafkaClusterConfigs) > 0
}

// UpdateKafkaClusterConfigsCalls returns the calls made to UpdateKafkaClusterConfigs.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockUpdateKafkaClusterConfigs.Lock()
	defer m.lockUpdateKafkaClusterConfigs.Unlock()

	return m.calls.UpdateKafkaClusterConfigs
}

// UpdateKafkaClusterConfigsExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigsRequest) (*net_http.Response, error) {
	m.lockUpdateKafkaClusterConfigsExecute.Lock()
	defer m.lockUpdateKafkaClusterConfigsExecute.Unlock()

	if m.UpdateKafkaClusterConfigsExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaClusterConfigsExecuteFunc is nil but ConfigsV3Api.UpdateKafkaClusterConfigsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigsRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaClusterConfigsExecute = append(m.calls.UpdateKafkaClusterConfigsExecute, call)

	return m.UpdateKafkaClusterConfigsExecuteFunc(r)
}

// UpdateKafkaClusterConfigsExecuteCalled returns true if UpdateKafkaClusterConfigsExecute was called at least once.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigsExecuteCalled() bool {
	m.lockUpdateKafkaClusterConfigsExecute.Lock()
	defer m.lockUpdateKafkaClusterConfigsExecute.Unlock()

	return len(m.calls.UpdateKafkaClusterConfigsExecute) > 0
}

// UpdateKafkaClusterConfigsExecuteCalls returns the calls made to UpdateKafkaClusterConfigsExecute.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaClusterConfigsRequest
} {
	m.lockUpdateKafkaClusterConfigsExecute.Lock()
	defer m.lockUpdateKafkaClusterConfigsExecute.Unlock()

	return m.calls.UpdateKafkaClusterConfigsExecute
}

// UpdateKafkaTopicConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaTopicConfig(ctx context.Context, clusterId, topicName, name string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigRequest {
	m.lockUpdateKafkaTopicConfig.Lock()
	defer m.lockUpdateKafkaTopicConfig.Unlock()

	if m.UpdateKafkaTopicConfigFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaTopicConfigFunc is nil but ConfigsV3Api.UpdateKafkaTopicConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
		Name:      name,
	}

	m.calls.UpdateKafkaTopicConfig = append(m.calls.UpdateKafkaTopicConfig, call)

	return m.UpdateKafkaTopicConfigFunc(ctx, clusterId, topicName, name)
}

// UpdateKafkaTopicConfigCalled returns true if UpdateKafkaTopicConfig was called at least once.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigCalled() bool {
	m.lockUpdateKafkaTopicConfig.Lock()
	defer m.lockUpdateKafkaTopicConfig.Unlock()

	return len(m.calls.UpdateKafkaTopicConfig) > 0
}

// UpdateKafkaTopicConfigCalls returns the calls made to UpdateKafkaTopicConfig.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
	Name      string
} {
	m.lockUpdateKafkaTopicConfig.Lock()
	defer m.lockUpdateKafkaTopicConfig.Unlock()

	return m.calls.UpdateKafkaTopicConfig
}

// UpdateKafkaTopicConfigExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigRequest) (*net_http.Response, error) {
	m.lockUpdateKafkaTopicConfigExecute.Lock()
	defer m.lockUpdateKafkaTopicConfigExecute.Unlock()

	if m.UpdateKafkaTopicConfigExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaTopicConfigExecuteFunc is nil but ConfigsV3Api.UpdateKafkaTopicConfigExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaTopicConfigExecute = append(m.calls.UpdateKafkaTopicConfigExecute, call)

	return m.UpdateKafkaTopicConfigExecuteFunc(r)
}

// UpdateKafkaTopicConfigExecuteCalled returns true if UpdateKafkaTopicConfigExecute was called at least once.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigExecuteCalled() bool {
	m.lockUpdateKafkaTopicConfigExecute.Lock()
	defer m.lockUpdateKafkaTopicConfigExecute.Unlock()

	return len(m.calls.UpdateKafkaTopicConfigExecute) > 0
}

// UpdateKafkaTopicConfigExecuteCalls returns the calls made to UpdateKafkaTopicConfigExecute.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigRequest
} {
	m.lockUpdateKafkaTopicConfigExecute.Lock()
	defer m.lockUpdateKafkaTopicConfigExecute.Unlock()

	return m.calls.UpdateKafkaTopicConfigExecute
}

// UpdateKafkaTopicConfigBatch mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatch(ctx context.Context, clusterId, topicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigBatchRequest {
	m.lockUpdateKafkaTopicConfigBatch.Lock()
	defer m.lockUpdateKafkaTopicConfigBatch.Unlock()

	if m.UpdateKafkaTopicConfigBatchFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaTopicConfigBatchFunc is nil but ConfigsV3Api.UpdateKafkaTopicConfigBatch was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.UpdateKafkaTopicConfigBatch = append(m.calls.UpdateKafkaTopicConfigBatch, call)

	return m.UpdateKafkaTopicConfigBatchFunc(ctx, clusterId, topicName)
}

// UpdateKafkaTopicConfigBatchCalled returns true if UpdateKafkaTopicConfigBatch was called at least once.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatchCalled() bool {
	m.lockUpdateKafkaTopicConfigBatch.Lock()
	defer m.lockUpdateKafkaTopicConfigBatch.Unlock()

	return len(m.calls.UpdateKafkaTopicConfigBatch) > 0
}

// UpdateKafkaTopicConfigBatchCalls returns the calls made to UpdateKafkaTopicConfigBatch.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatchCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockUpdateKafkaTopicConfigBatch.Lock()
	defer m.lockUpdateKafkaTopicConfigBatch.Unlock()

	return m.calls.UpdateKafkaTopicConfigBatch
}

// UpdateKafkaTopicConfigBatchExecute mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatchExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigBatchRequest) (*net_http.Response, error) {
	m.lockUpdateKafkaTopicConfigBatchExecute.Lock()
	defer m.lockUpdateKafkaTopicConfigBatchExecute.Unlock()

	if m.UpdateKafkaTopicConfigBatchExecuteFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaTopicConfigBatchExecuteFunc is nil but ConfigsV3Api.UpdateKafkaTopicConfigBatchExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigBatchRequest
	}{
		R: r,
	}

	m.calls.UpdateKafkaTopicConfigBatchExecute = append(m.calls.UpdateKafkaTopicConfigBatchExecute, call)

	return m.UpdateKafkaTopicConfigBatchExecuteFunc(r)
}

// UpdateKafkaTopicConfigBatchExecuteCalled returns true if UpdateKafkaTopicConfigBatchExecute was called at least once.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatchExecuteCalled() bool {
	m.lockUpdateKafkaTopicConfigBatchExecute.Lock()
	defer m.lockUpdateKafkaTopicConfigBatchExecute.Unlock()

	return len(m.calls.UpdateKafkaTopicConfigBatchExecute) > 0
}

// UpdateKafkaTopicConfigBatchExecuteCalls returns the calls made to UpdateKafkaTopicConfigBatchExecute.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatchExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiUpdateKafkaTopicConfigBatchRequest
} {
	m.lockUpdateKafkaTopicConfigBatchExecute.Lock()
	defer m.lockUpdateKafkaTopicConfigBatchExecute.Unlock()

	return m.calls.UpdateKafkaTopicConfigBatchExecute
}

// Reset resets the calls made to the mocked methods.
func (m *ConfigsV3Api) Reset() {
	m.lockDeleteKafkaClusterConfig.Lock()
	m.calls.DeleteKafkaClusterConfig = nil
	m.lockDeleteKafkaClusterConfig.Unlock()
	m.lockDeleteKafkaClusterConfigExecute.Lock()
	m.calls.DeleteKafkaClusterConfigExecute = nil
	m.lockDeleteKafkaClusterConfigExecute.Unlock()
	m.lockDeleteKafkaTopicConfig.Lock()
	m.calls.DeleteKafkaTopicConfig = nil
	m.lockDeleteKafkaTopicConfig.Unlock()
	m.lockDeleteKafkaTopicConfigExecute.Lock()
	m.calls.DeleteKafkaTopicConfigExecute = nil
	m.lockDeleteKafkaTopicConfigExecute.Unlock()
	m.lockGetKafkaClusterConfig.Lock()
	m.calls.GetKafkaClusterConfig = nil
	m.lockGetKafkaClusterConfig.Unlock()
	m.lockGetKafkaClusterConfigExecute.Lock()
	m.calls.GetKafkaClusterConfigExecute = nil
	m.lockGetKafkaClusterConfigExecute.Unlock()
	m.lockGetKafkaTopicConfig.Lock()
	m.calls.GetKafkaTopicConfig = nil
	m.lockGetKafkaTopicConfig.Unlock()
	m.lockGetKafkaTopicConfigExecute.Lock()
	m.calls.GetKafkaTopicConfigExecute = nil
	m.lockGetKafkaTopicConfigExecute.Unlock()
	m.lockListKafkaAllTopicConfigs.Lock()
	m.calls.ListKafkaAllTopicConfigs = nil
	m.lockListKafkaAllTopicConfigs.Unlock()
	m.lockListKafkaAllTopicConfigsExecute.Lock()
	m.calls.ListKafkaAllTopicConfigsExecute = nil
	m.lockListKafkaAllTopicConfigsExecute.Unlock()
	m.lockListKafkaClusterConfigs.Lock()
	m.calls.ListKafkaClusterConfigs = nil
	m.lockListKafkaClusterConfigs.Unlock()
	m.lockListKafkaClusterConfigsExecute.Lock()
	m.calls.ListKafkaClusterConfigsExecute = nil
	m.lockListKafkaClusterConfigsExecute.Unlock()
	m.lockListKafkaDefaultTopicConfigs.Lock()
	m.calls.ListKafkaDefaultTopicConfigs = nil
	m.lockListKafkaDefaultTopicConfigs.Unlock()
	m.lockListKafkaDefaultTopicConfigsExecute.Lock()
	m.calls.ListKafkaDefaultTopicConfigsExecute = nil
	m.lockListKafkaDefaultTopicConfigsExecute.Unlock()
	m.lockListKafkaTopicConfigs.Lock()
	m.calls.ListKafkaTopicConfigs = nil
	m.lockListKafkaTopicConfigs.Unlock()
	m.lockListKafkaTopicConfigsExecute.Lock()
	m.calls.ListKafkaTopicConfigsExecute = nil
	m.lockListKafkaTopicConfigsExecute.Unlock()
	m.lockUpdateKafkaClusterConfig.Lock()
	m.calls.UpdateKafkaClusterConfig = nil
	m.lockUpdateKafkaClusterConfig.Unlock()
	m.lockUpdateKafkaClusterConfigExecute.Lock()
	m.calls.UpdateKafkaClusterConfigExecute = nil
	m.lockUpdateKafkaClusterConfigExecute.Unlock()
	m.lockUpdateKafkaClusterConfigs.Lock()
	m.calls.UpdateKafkaClusterConfigs = nil
	m.lockUpdateKafkaClusterConfigs.Unlock()
	m.lockUpdateKafkaClusterConfigsExecute.Lock()
	m.calls.UpdateKafkaClusterConfigsExecute = nil
	m.lockUpdateKafkaClusterConfigsExecute.Unlock()
	m.lockUpdateKafkaTopicConfig.Lock()
	m.calls.UpdateKafkaTopicConfig = nil
	m.lockUpdateKafkaTopicConfig.Unlock()
	m.lockUpdateKafkaTopicConfigExecute.Lock()
	m.calls.UpdateKafkaTopicConfigExecute = nil
	m.lockUpdateKafkaTopicConfigExecute.Unlock()
	m.lockUpdateKafkaTopicConfigBatch.Lock()
	m.calls.UpdateKafkaTopicConfigBatch = nil
	m.lockUpdateKafkaTopicConfigBatch.Unlock()
	m.lockUpdateKafkaTopicConfigBatchExecute.Lock()
	m.calls.UpdateKafkaTopicConfigBatchExecute = nil
	m.lockUpdateKafkaTopicConfigBatchExecute.Unlock()
}
