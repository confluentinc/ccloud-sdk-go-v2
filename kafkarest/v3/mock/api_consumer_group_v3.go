// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_consumer_group_v3.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3 "github.com/confluentinc/ccloud-sdk-go-v2/kafkarest/v3"
)

// ConsumerGroupV3Api is a mock of ConsumerGroupV3Api interface
type ConsumerGroupV3Api struct {
	lockGetKafkaConsumer sync.Mutex
	GetKafkaConsumerFunc func(ctx context.Context, clusterId, consumerGroupId, consumerId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerRequest

	lockGetKafkaConsumerExecute sync.Mutex
	GetKafkaConsumerExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerData, *net_http.Response, error)

	lockGetKafkaConsumerGroup sync.Mutex
	GetKafkaConsumerGroupFunc func(ctx context.Context, clusterId, consumerGroupId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupRequest

	lockGetKafkaConsumerGroupExecute sync.Mutex
	GetKafkaConsumerGroupExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerGroupData, *net_http.Response, error)

	lockGetKafkaConsumerGroupLagSummary sync.Mutex
	GetKafkaConsumerGroupLagSummaryFunc func(ctx context.Context, clusterId, consumerGroupId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupLagSummaryRequest

	lockGetKafkaConsumerGroupLagSummaryExecute sync.Mutex
	GetKafkaConsumerGroupLagSummaryExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupLagSummaryRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerGroupLagSummaryData, *net_http.Response, error)

	lockListKafkaConsumerGroups sync.Mutex
	ListKafkaConsumerGroupsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerGroupsRequest

	lockListKafkaConsumerGroupsExecute sync.Mutex
	ListKafkaConsumerGroupsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerGroupsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerGroupDataList, *net_http.Response, error)

	lockListKafkaConsumerLags sync.Mutex
	ListKafkaConsumerLagsFunc func(ctx context.Context, clusterId, consumerGroupId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerLagsRequest

	lockListKafkaConsumerLagsExecute sync.Mutex
	ListKafkaConsumerLagsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerLagsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerLagDataList, *net_http.Response, error)

	lockListKafkaConsumers sync.Mutex
	ListKafkaConsumersFunc func(ctx context.Context, clusterId, consumerGroupId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumersRequest

	lockListKafkaConsumersExecute sync.Mutex
	ListKafkaConsumersExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumersRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerDataList, *net_http.Response, error)

	calls struct {
		GetKafkaConsumer []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
			ConsumerId      string
		}
		GetKafkaConsumerExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerRequest
		}
		GetKafkaConsumerGroup []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
		}
		GetKafkaConsumerGroupExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupRequest
		}
		GetKafkaConsumerGroupLagSummary []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
		}
		GetKafkaConsumerGroupLagSummaryExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupLagSummaryRequest
		}
		ListKafkaConsumerGroups []struct {
			Ctx       context.Context
			ClusterId string
		}
		ListKafkaConsumerGroupsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerGroupsRequest
		}
		ListKafkaConsumerLags []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
		}
		ListKafkaConsumerLagsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerLagsRequest
		}
		ListKafkaConsumers []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
		}
		ListKafkaConsumersExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumersRequest
		}
	}
}

// GetKafkaConsumer mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) GetKafkaConsumer(ctx context.Context, clusterId, consumerGroupId, consumerId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerRequest {
	m.lockGetKafkaConsumer.Lock()
	defer m.lockGetKafkaConsumer.Unlock()

	if m.GetKafkaConsumerFunc == nil {
		panic("mocker: ConsumerGroupV3Api.GetKafkaConsumerFunc is nil but ConsumerGroupV3Api.GetKafkaConsumer was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
		ConsumerId      string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
		ConsumerId:      consumerId,
	}

	m.calls.GetKafkaConsumer = append(m.calls.GetKafkaConsumer, call)

	return m.GetKafkaConsumerFunc(ctx, clusterId, consumerGroupId, consumerId)
}

// GetKafkaConsumerCalled returns true if GetKafkaConsumer was called at least once.
func (m *ConsumerGroupV3Api) GetKafkaConsumerCalled() bool {
	m.lockGetKafkaConsumer.Lock()
	defer m.lockGetKafkaConsumer.Unlock()

	return len(m.calls.GetKafkaConsumer) > 0
}

// GetKafkaConsumerCalls returns the calls made to GetKafkaConsumer.
func (m *ConsumerGroupV3Api) GetKafkaConsumerCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
	ConsumerId      string
} {
	m.lockGetKafkaConsumer.Lock()
	defer m.lockGetKafkaConsumer.Unlock()

	return m.calls.GetKafkaConsumer
}

// GetKafkaConsumerExecute mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) GetKafkaConsumerExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerData, *net_http.Response, error) {
	m.lockGetKafkaConsumerExecute.Lock()
	defer m.lockGetKafkaConsumerExecute.Unlock()

	if m.GetKafkaConsumerExecuteFunc == nil {
		panic("mocker: ConsumerGroupV3Api.GetKafkaConsumerExecuteFunc is nil but ConsumerGroupV3Api.GetKafkaConsumerExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerRequest
	}{
		R: r,
	}

	m.calls.GetKafkaConsumerExecute = append(m.calls.GetKafkaConsumerExecute, call)

	return m.GetKafkaConsumerExecuteFunc(r)
}

// GetKafkaConsumerExecuteCalled returns true if GetKafkaConsumerExecute was called at least once.
func (m *ConsumerGroupV3Api) GetKafkaConsumerExecuteCalled() bool {
	m.lockGetKafkaConsumerExecute.Lock()
	defer m.lockGetKafkaConsumerExecute.Unlock()

	return len(m.calls.GetKafkaConsumerExecute) > 0
}

// GetKafkaConsumerExecuteCalls returns the calls made to GetKafkaConsumerExecute.
func (m *ConsumerGroupV3Api) GetKafkaConsumerExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerRequest
} {
	m.lockGetKafkaConsumerExecute.Lock()
	defer m.lockGetKafkaConsumerExecute.Unlock()

	return m.calls.GetKafkaConsumerExecute
}

// GetKafkaConsumerGroup mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroup(ctx context.Context, clusterId, consumerGroupId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupRequest {
	m.lockGetKafkaConsumerGroup.Lock()
	defer m.lockGetKafkaConsumerGroup.Unlock()

	if m.GetKafkaConsumerGroupFunc == nil {
		panic("mocker: ConsumerGroupV3Api.GetKafkaConsumerGroupFunc is nil but ConsumerGroupV3Api.GetKafkaConsumerGroup was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
	}

	m.calls.GetKafkaConsumerGroup = append(m.calls.GetKafkaConsumerGroup, call)

	return m.GetKafkaConsumerGroupFunc(ctx, clusterId, consumerGroupId)
}

// GetKafkaConsumerGroupCalled returns true if GetKafkaConsumerGroup was called at least once.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupCalled() bool {
	m.lockGetKafkaConsumerGroup.Lock()
	defer m.lockGetKafkaConsumerGroup.Unlock()

	return len(m.calls.GetKafkaConsumerGroup) > 0
}

// GetKafkaConsumerGroupCalls returns the calls made to GetKafkaConsumerGroup.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
} {
	m.lockGetKafkaConsumerGroup.Lock()
	defer m.lockGetKafkaConsumerGroup.Unlock()

	return m.calls.GetKafkaConsumerGroup
}

// GetKafkaConsumerGroupExecute mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerGroupData, *net_http.Response, error) {
	m.lockGetKafkaConsumerGroupExecute.Lock()
	defer m.lockGetKafkaConsumerGroupExecute.Unlock()

	if m.GetKafkaConsumerGroupExecuteFunc == nil {
		panic("mocker: ConsumerGroupV3Api.GetKafkaConsumerGroupExecuteFunc is nil but ConsumerGroupV3Api.GetKafkaConsumerGroupExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupRequest
	}{
		R: r,
	}

	m.calls.GetKafkaConsumerGroupExecute = append(m.calls.GetKafkaConsumerGroupExecute, call)

	return m.GetKafkaConsumerGroupExecuteFunc(r)
}

// GetKafkaConsumerGroupExecuteCalled returns true if GetKafkaConsumerGroupExecute was called at least once.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupExecuteCalled() bool {
	m.lockGetKafkaConsumerGroupExecute.Lock()
	defer m.lockGetKafkaConsumerGroupExecute.Unlock()

	return len(m.calls.GetKafkaConsumerGroupExecute) > 0
}

// GetKafkaConsumerGroupExecuteCalls returns the calls made to GetKafkaConsumerGroupExecute.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupRequest
} {
	m.lockGetKafkaConsumerGroupExecute.Lock()
	defer m.lockGetKafkaConsumerGroupExecute.Unlock()

	return m.calls.GetKafkaConsumerGroupExecute
}

// GetKafkaConsumerGroupLagSummary mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupLagSummary(ctx context.Context, clusterId, consumerGroupId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupLagSummaryRequest {
	m.lockGetKafkaConsumerGroupLagSummary.Lock()
	defer m.lockGetKafkaConsumerGroupLagSummary.Unlock()

	if m.GetKafkaConsumerGroupLagSummaryFunc == nil {
		panic("mocker: ConsumerGroupV3Api.GetKafkaConsumerGroupLagSummaryFunc is nil but ConsumerGroupV3Api.GetKafkaConsumerGroupLagSummary was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
	}

	m.calls.GetKafkaConsumerGroupLagSummary = append(m.calls.GetKafkaConsumerGroupLagSummary, call)

	return m.GetKafkaConsumerGroupLagSummaryFunc(ctx, clusterId, consumerGroupId)
}

// GetKafkaConsumerGroupLagSummaryCalled returns true if GetKafkaConsumerGroupLagSummary was called at least once.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupLagSummaryCalled() bool {
	m.lockGetKafkaConsumerGroupLagSummary.Lock()
	defer m.lockGetKafkaConsumerGroupLagSummary.Unlock()

	return len(m.calls.GetKafkaConsumerGroupLagSummary) > 0
}

// GetKafkaConsumerGroupLagSummaryCalls returns the calls made to GetKafkaConsumerGroupLagSummary.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupLagSummaryCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
} {
	m.lockGetKafkaConsumerGroupLagSummary.Lock()
	defer m.lockGetKafkaConsumerGroupLagSummary.Unlock()

	return m.calls.GetKafkaConsumerGroupLagSummary
}

// GetKafkaConsumerGroupLagSummaryExecute mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupLagSummaryExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupLagSummaryRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerGroupLagSummaryData, *net_http.Response, error) {
	m.lockGetKafkaConsumerGroupLagSummaryExecute.Lock()
	defer m.lockGetKafkaConsumerGroupLagSummaryExecute.Unlock()

	if m.GetKafkaConsumerGroupLagSummaryExecuteFunc == nil {
		panic("mocker: ConsumerGroupV3Api.GetKafkaConsumerGroupLagSummaryExecuteFunc is nil but ConsumerGroupV3Api.GetKafkaConsumerGroupLagSummaryExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupLagSummaryRequest
	}{
		R: r,
	}

	m.calls.GetKafkaConsumerGroupLagSummaryExecute = append(m.calls.GetKafkaConsumerGroupLagSummaryExecute, call)

	return m.GetKafkaConsumerGroupLagSummaryExecuteFunc(r)
}

// GetKafkaConsumerGroupLagSummaryExecuteCalled returns true if GetKafkaConsumerGroupLagSummaryExecute was called at least once.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupLagSummaryExecuteCalled() bool {
	m.lockGetKafkaConsumerGroupLagSummaryExecute.Lock()
	defer m.lockGetKafkaConsumerGroupLagSummaryExecute.Unlock()

	return len(m.calls.GetKafkaConsumerGroupLagSummaryExecute) > 0
}

// GetKafkaConsumerGroupLagSummaryExecuteCalls returns the calls made to GetKafkaConsumerGroupLagSummaryExecute.
func (m *ConsumerGroupV3Api) GetKafkaConsumerGroupLagSummaryExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaConsumerGroupLagSummaryRequest
} {
	m.lockGetKafkaConsumerGroupLagSummaryExecute.Lock()
	defer m.lockGetKafkaConsumerGroupLagSummaryExecute.Unlock()

	return m.calls.GetKafkaConsumerGroupLagSummaryExecute
}

// ListKafkaConsumerGroups mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) ListKafkaConsumerGroups(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerGroupsRequest {
	m.lockListKafkaConsumerGroups.Lock()
	defer m.lockListKafkaConsumerGroups.Unlock()

	if m.ListKafkaConsumerGroupsFunc == nil {
		panic("mocker: ConsumerGroupV3Api.ListKafkaConsumerGroupsFunc is nil but ConsumerGroupV3Api.ListKafkaConsumerGroups was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ListKafkaConsumerGroups = append(m.calls.ListKafkaConsumerGroups, call)

	return m.ListKafkaConsumerGroupsFunc(ctx, clusterId)
}

// ListKafkaConsumerGroupsCalled returns true if ListKafkaConsumerGroups was called at least once.
func (m *ConsumerGroupV3Api) ListKafkaConsumerGroupsCalled() bool {
	m.lockListKafkaConsumerGroups.Lock()
	defer m.lockListKafkaConsumerGroups.Unlock()

	return len(m.calls.ListKafkaConsumerGroups) > 0
}

// ListKafkaConsumerGroupsCalls returns the calls made to ListKafkaConsumerGroups.
func (m *ConsumerGroupV3Api) ListKafkaConsumerGroupsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockListKafkaConsumerGroups.Lock()
	defer m.lockListKafkaConsumerGroups.Unlock()

	return m.calls.ListKafkaConsumerGroups
}

// ListKafkaConsumerGroupsExecute mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) ListKafkaConsumerGroupsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerGroupsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerGroupDataList, *net_http.Response, error) {
	m.lockListKafkaConsumerGroupsExecute.Lock()
	defer m.lockListKafkaConsumerGroupsExecute.Unlock()

	if m.ListKafkaConsumerGroupsExecuteFunc == nil {
		panic("mocker: ConsumerGroupV3Api.ListKafkaConsumerGroupsExecuteFunc is nil but ConsumerGroupV3Api.ListKafkaConsumerGroupsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerGroupsRequest
	}{
		R: r,
	}

	m.calls.ListKafkaConsumerGroupsExecute = append(m.calls.ListKafkaConsumerGroupsExecute, call)

	return m.ListKafkaConsumerGroupsExecuteFunc(r)
}

// ListKafkaConsumerGroupsExecuteCalled returns true if ListKafkaConsumerGroupsExecute was called at least once.
func (m *ConsumerGroupV3Api) ListKafkaConsumerGroupsExecuteCalled() bool {
	m.lockListKafkaConsumerGroupsExecute.Lock()
	defer m.lockListKafkaConsumerGroupsExecute.Unlock()

	return len(m.calls.ListKafkaConsumerGroupsExecute) > 0
}

// ListKafkaConsumerGroupsExecuteCalls returns the calls made to ListKafkaConsumerGroupsExecute.
func (m *ConsumerGroupV3Api) ListKafkaConsumerGroupsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerGroupsRequest
} {
	m.lockListKafkaConsumerGroupsExecute.Lock()
	defer m.lockListKafkaConsumerGroupsExecute.Unlock()

	return m.calls.ListKafkaConsumerGroupsExecute
}

// ListKafkaConsumerLags mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) ListKafkaConsumerLags(ctx context.Context, clusterId, consumerGroupId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerLagsRequest {
	m.lockListKafkaConsumerLags.Lock()
	defer m.lockListKafkaConsumerLags.Unlock()

	if m.ListKafkaConsumerLagsFunc == nil {
		panic("mocker: ConsumerGroupV3Api.ListKafkaConsumerLagsFunc is nil but ConsumerGroupV3Api.ListKafkaConsumerLags was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
	}

	m.calls.ListKafkaConsumerLags = append(m.calls.ListKafkaConsumerLags, call)

	return m.ListKafkaConsumerLagsFunc(ctx, clusterId, consumerGroupId)
}

// ListKafkaConsumerLagsCalled returns true if ListKafkaConsumerLags was called at least once.
func (m *ConsumerGroupV3Api) ListKafkaConsumerLagsCalled() bool {
	m.lockListKafkaConsumerLags.Lock()
	defer m.lockListKafkaConsumerLags.Unlock()

	return len(m.calls.ListKafkaConsumerLags) > 0
}

// ListKafkaConsumerLagsCalls returns the calls made to ListKafkaConsumerLags.
func (m *ConsumerGroupV3Api) ListKafkaConsumerLagsCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
} {
	m.lockListKafkaConsumerLags.Lock()
	defer m.lockListKafkaConsumerLags.Unlock()

	return m.calls.ListKafkaConsumerLags
}

// ListKafkaConsumerLagsExecute mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) ListKafkaConsumerLagsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerLagsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerLagDataList, *net_http.Response, error) {
	m.lockListKafkaConsumerLagsExecute.Lock()
	defer m.lockListKafkaConsumerLagsExecute.Unlock()

	if m.ListKafkaConsumerLagsExecuteFunc == nil {
		panic("mocker: ConsumerGroupV3Api.ListKafkaConsumerLagsExecuteFunc is nil but ConsumerGroupV3Api.ListKafkaConsumerLagsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerLagsRequest
	}{
		R: r,
	}

	m.calls.ListKafkaConsumerLagsExecute = append(m.calls.ListKafkaConsumerLagsExecute, call)

	return m.ListKafkaConsumerLagsExecuteFunc(r)
}

// ListKafkaConsumerLagsExecuteCalled returns true if ListKafkaConsumerLagsExecute was called at least once.
func (m *ConsumerGroupV3Api) ListKafkaConsumerLagsExecuteCalled() bool {
	m.lockListKafkaConsumerLagsExecute.Lock()
	defer m.lockListKafkaConsumerLagsExecute.Unlock()

	return len(m.calls.ListKafkaConsumerLagsExecute) > 0
}

// ListKafkaConsumerLagsExecuteCalls returns the calls made to ListKafkaConsumerLagsExecute.
func (m *ConsumerGroupV3Api) ListKafkaConsumerLagsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumerLagsRequest
} {
	m.lockListKafkaConsumerLagsExecute.Lock()
	defer m.lockListKafkaConsumerLagsExecute.Unlock()

	return m.calls.ListKafkaConsumerLagsExecute
}

// ListKafkaConsumers mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) ListKafkaConsumers(ctx context.Context, clusterId, consumerGroupId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumersRequest {
	m.lockListKafkaConsumers.Lock()
	defer m.lockListKafkaConsumers.Unlock()

	if m.ListKafkaConsumersFunc == nil {
		panic("mocker: ConsumerGroupV3Api.ListKafkaConsumersFunc is nil but ConsumerGroupV3Api.ListKafkaConsumers was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
	}

	m.calls.ListKafkaConsumers = append(m.calls.ListKafkaConsumers, call)

	return m.ListKafkaConsumersFunc(ctx, clusterId, consumerGroupId)
}

// ListKafkaConsumersCalled returns true if ListKafkaConsumers was called at least once.
func (m *ConsumerGroupV3Api) ListKafkaConsumersCalled() bool {
	m.lockListKafkaConsumers.Lock()
	defer m.lockListKafkaConsumers.Unlock()

	return len(m.calls.ListKafkaConsumers) > 0
}

// ListKafkaConsumersCalls returns the calls made to ListKafkaConsumers.
func (m *ConsumerGroupV3Api) ListKafkaConsumersCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
} {
	m.lockListKafkaConsumers.Lock()
	defer m.lockListKafkaConsumers.Unlock()

	return m.calls.ListKafkaConsumers
}

// ListKafkaConsumersExecute mocks base method by wrapping the associated func.
func (m *ConsumerGroupV3Api) ListKafkaConsumersExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumersRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ConsumerDataList, *net_http.Response, error) {
	m.lockListKafkaConsumersExecute.Lock()
	defer m.lockListKafkaConsumersExecute.Unlock()

	if m.ListKafkaConsumersExecuteFunc == nil {
		panic("mocker: ConsumerGroupV3Api.ListKafkaConsumersExecuteFunc is nil but ConsumerGroupV3Api.ListKafkaConsumersExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumersRequest
	}{
		R: r,
	}

	m.calls.ListKafkaConsumersExecute = append(m.calls.ListKafkaConsumersExecute, call)

	return m.ListKafkaConsumersExecuteFunc(r)
}

// ListKafkaConsumersExecuteCalled returns true if ListKafkaConsumersExecute was called at least once.
func (m *ConsumerGroupV3Api) ListKafkaConsumersExecuteCalled() bool {
	m.lockListKafkaConsumersExecute.Lock()
	defer m.lockListKafkaConsumersExecute.Unlock()

	return len(m.calls.ListKafkaConsumersExecute) > 0
}

// ListKafkaConsumersExecuteCalls returns the calls made to ListKafkaConsumersExecute.
func (m *ConsumerGroupV3Api) ListKafkaConsumersExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiListKafkaConsumersRequest
} {
	m.lockListKafkaConsumersExecute.Lock()
	defer m.lockListKafkaConsumersExecute.Unlock()

	return m.calls.ListKafkaConsumersExecute
}

// Reset resets the calls made to the mocked methods.
func (m *ConsumerGroupV3Api) Reset() {
	m.lockGetKafkaConsumer.Lock()
	m.calls.GetKafkaConsumer = nil
	m.lockGetKafkaConsumer.Unlock()
	m.lockGetKafkaConsumerExecute.Lock()
	m.calls.GetKafkaConsumerExecute = nil
	m.lockGetKafkaConsumerExecute.Unlock()
	m.lockGetKafkaConsumerGroup.Lock()
	m.calls.GetKafkaConsumerGroup = nil
	m.lockGetKafkaConsumerGroup.Unlock()
	m.lockGetKafkaConsumerGroupExecute.Lock()
	m.calls.GetKafkaConsumerGroupExecute = nil
	m.lockGetKafkaConsumerGroupExecute.Unlock()
	m.lockGetKafkaConsumerGroupLagSummary.Lock()
	m.calls.GetKafkaConsumerGroupLagSummary = nil
	m.lockGetKafkaConsumerGroupLagSummary.Unlock()
	m.lockGetKafkaConsumerGroupLagSummaryExecute.Lock()
	m.calls.GetKafkaConsumerGroupLagSummaryExecute = nil
	m.lockGetKafkaConsumerGroupLagSummaryExecute.Unlock()
	m.lockListKafkaConsumerGroups.Lock()
	m.calls.ListKafkaConsumerGroups = nil
	m.lockListKafkaConsumerGroups.Unlock()
	m.lockListKafkaConsumerGroupsExecute.Lock()
	m.calls.ListKafkaConsumerGroupsExecute = nil
	m.lockListKafkaConsumerGroupsExecute.Unlock()
	m.lockListKafkaConsumerLags.Lock()
	m.calls.ListKafkaConsumerLags = nil
	m.lockListKafkaConsumerLags.Unlock()
	m.lockListKafkaConsumerLagsExecute.Lock()
	m.calls.ListKafkaConsumerLagsExecute = nil
	m.lockListKafkaConsumerLagsExecute.Unlock()
	m.lockListKafkaConsumers.Lock()
	m.calls.ListKafkaConsumers = nil
	m.lockListKafkaConsumers.Unlock()
	m.lockListKafkaConsumersExecute.Lock()
	m.calls.ListKafkaConsumersExecute = nil
	m.lockListKafkaConsumersExecute.Unlock()
}
