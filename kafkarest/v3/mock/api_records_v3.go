// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_records_v3.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3 "github.com/confluentinc/ccloud-sdk-go-v2/kafkarest/v3"
)

// RecordsV3Api is a mock of RecordsV3Api interface
type RecordsV3Api struct {
	lockProduceRecords sync.Mutex
	ProduceRecordsFunc func(ctx context.Context, clusterId, topicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiProduceRecordsRequest

	lockProduceRecordsExecute sync.Mutex
	ProduceRecordsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiProduceRecordsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ProduceResponse, *net_http.Response, error)

	calls struct {
		ProduceRecords []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
		ProduceRecordsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiProduceRecordsRequest
		}
	}
}

// ProduceRecords mocks base method by wrapping the associated func.
func (m *RecordsV3Api) ProduceRecords(ctx context.Context, clusterId, topicName string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiProduceRecordsRequest {
	m.lockProduceRecords.Lock()
	defer m.lockProduceRecords.Unlock()

	if m.ProduceRecordsFunc == nil {
		panic("mocker: RecordsV3Api.ProduceRecordsFunc is nil but RecordsV3Api.ProduceRecords was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ProduceRecords = append(m.calls.ProduceRecords, call)

	return m.ProduceRecordsFunc(ctx, clusterId, topicName)
}

// ProduceRecordsCalled returns true if ProduceRecords was called at least once.
func (m *RecordsV3Api) ProduceRecordsCalled() bool {
	m.lockProduceRecords.Lock()
	defer m.lockProduceRecords.Unlock()

	return len(m.calls.ProduceRecords) > 0
}

// ProduceRecordsCalls returns the calls made to ProduceRecords.
func (m *RecordsV3Api) ProduceRecordsCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockProduceRecords.Lock()
	defer m.lockProduceRecords.Unlock()

	return m.calls.ProduceRecords
}

// ProduceRecordsExecute mocks base method by wrapping the associated func.
func (m *RecordsV3Api) ProduceRecordsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiProduceRecordsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ProduceResponse, *net_http.Response, error) {
	m.lockProduceRecordsExecute.Lock()
	defer m.lockProduceRecordsExecute.Unlock()

	if m.ProduceRecordsExecuteFunc == nil {
		panic("mocker: RecordsV3Api.ProduceRecordsExecuteFunc is nil but RecordsV3Api.ProduceRecordsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiProduceRecordsRequest
	}{
		R: r,
	}

	m.calls.ProduceRecordsExecute = append(m.calls.ProduceRecordsExecute, call)

	return m.ProduceRecordsExecuteFunc(r)
}

// ProduceRecordsExecuteCalled returns true if ProduceRecordsExecute was called at least once.
func (m *RecordsV3Api) ProduceRecordsExecuteCalled() bool {
	m.lockProduceRecordsExecute.Lock()
	defer m.lockProduceRecordsExecute.Unlock()

	return len(m.calls.ProduceRecordsExecute) > 0
}

// ProduceRecordsExecuteCalls returns the calls made to ProduceRecordsExecute.
func (m *RecordsV3Api) ProduceRecordsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiProduceRecordsRequest
} {
	m.lockProduceRecordsExecute.Lock()
	defer m.lockProduceRecordsExecute.Unlock()

	return m.calls.ProduceRecordsExecute
}

// Reset resets the calls made to the mocked methods.
func (m *RecordsV3Api) Reset() {
	m.lockProduceRecords.Lock()
	m.calls.ProduceRecords = nil
	m.lockProduceRecords.Unlock()
	m.lockProduceRecordsExecute.Lock()
	m.calls.ProduceRecordsExecute = nil
	m.lockProduceRecordsExecute.Unlock()
}
