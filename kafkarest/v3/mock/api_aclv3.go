// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_aclv3.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3 "github.com/confluentinc/ccloud-sdk-go-v2/kafkarest/v3"
)

// ACLV3Api is a mock of ACLV3Api interface
type ACLV3Api struct {
	lockBatchCreateKafkaV3Acls sync.Mutex
	BatchCreateKafkaV3AclsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiBatchCreateKafkaV3AclsRequest

	lockBatchCreateKafkaV3AclsExecute sync.Mutex
	BatchCreateKafkaV3AclsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiBatchCreateKafkaV3AclsRequest) (*net_http.Response, error)

	lockCreateKafkaAcls sync.Mutex
	CreateKafkaAclsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaAclsRequest

	lockCreateKafkaAclsExecute sync.Mutex
	CreateKafkaAclsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaAclsRequest) (*net_http.Response, error)

	lockDeleteKafkaAcls sync.Mutex
	DeleteKafkaAclsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaAclsRequest

	lockDeleteKafkaAclsExecute sync.Mutex
	DeleteKafkaAclsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaAclsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.InlineResponse200, *net_http.Response, error)

	lockGetKafkaAcls sync.Mutex
	GetKafkaAclsFunc func(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaAclsRequest

	lockGetKafkaAclsExecute sync.Mutex
	GetKafkaAclsExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaAclsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AclDataList, *net_http.Response, error)

	calls struct {
		BatchCreateKafkaV3Acls []struct {
			Ctx       context.Context
			ClusterId string
		}
		BatchCreateKafkaV3AclsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiBatchCreateKafkaV3AclsRequest
		}
		CreateKafkaAcls []struct {
			Ctx       context.Context
			ClusterId string
		}
		CreateKafkaAclsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaAclsRequest
		}
		DeleteKafkaAcls []struct {
			Ctx       context.Context
			ClusterId string
		}
		DeleteKafkaAclsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaAclsRequest
		}
		GetKafkaAcls []struct {
			Ctx       context.Context
			ClusterId string
		}
		GetKafkaAclsExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaAclsRequest
		}
	}
}

// BatchCreateKafkaV3Acls mocks base method by wrapping the associated func.
func (m *ACLV3Api) BatchCreateKafkaV3Acls(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiBatchCreateKafkaV3AclsRequest {
	m.lockBatchCreateKafkaV3Acls.Lock()
	defer m.lockBatchCreateKafkaV3Acls.Unlock()

	if m.BatchCreateKafkaV3AclsFunc == nil {
		panic("mocker: ACLV3Api.BatchCreateKafkaV3AclsFunc is nil but ACLV3Api.BatchCreateKafkaV3Acls was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.BatchCreateKafkaV3Acls = append(m.calls.BatchCreateKafkaV3Acls, call)

	return m.BatchCreateKafkaV3AclsFunc(ctx, clusterId)
}

// BatchCreateKafkaV3AclsCalled returns true if BatchCreateKafkaV3Acls was called at least once.
func (m *ACLV3Api) BatchCreateKafkaV3AclsCalled() bool {
	m.lockBatchCreateKafkaV3Acls.Lock()
	defer m.lockBatchCreateKafkaV3Acls.Unlock()

	return len(m.calls.BatchCreateKafkaV3Acls) > 0
}

// BatchCreateKafkaV3AclsCalls returns the calls made to BatchCreateKafkaV3Acls.
func (m *ACLV3Api) BatchCreateKafkaV3AclsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockBatchCreateKafkaV3Acls.Lock()
	defer m.lockBatchCreateKafkaV3Acls.Unlock()

	return m.calls.BatchCreateKafkaV3Acls
}

// BatchCreateKafkaV3AclsExecute mocks base method by wrapping the associated func.
func (m *ACLV3Api) BatchCreateKafkaV3AclsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiBatchCreateKafkaV3AclsRequest) (*net_http.Response, error) {
	m.lockBatchCreateKafkaV3AclsExecute.Lock()
	defer m.lockBatchCreateKafkaV3AclsExecute.Unlock()

	if m.BatchCreateKafkaV3AclsExecuteFunc == nil {
		panic("mocker: ACLV3Api.BatchCreateKafkaV3AclsExecuteFunc is nil but ACLV3Api.BatchCreateKafkaV3AclsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiBatchCreateKafkaV3AclsRequest
	}{
		R: r,
	}

	m.calls.BatchCreateKafkaV3AclsExecute = append(m.calls.BatchCreateKafkaV3AclsExecute, call)

	return m.BatchCreateKafkaV3AclsExecuteFunc(r)
}

// BatchCreateKafkaV3AclsExecuteCalled returns true if BatchCreateKafkaV3AclsExecute was called at least once.
func (m *ACLV3Api) BatchCreateKafkaV3AclsExecuteCalled() bool {
	m.lockBatchCreateKafkaV3AclsExecute.Lock()
	defer m.lockBatchCreateKafkaV3AclsExecute.Unlock()

	return len(m.calls.BatchCreateKafkaV3AclsExecute) > 0
}

// BatchCreateKafkaV3AclsExecuteCalls returns the calls made to BatchCreateKafkaV3AclsExecute.
func (m *ACLV3Api) BatchCreateKafkaV3AclsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiBatchCreateKafkaV3AclsRequest
} {
	m.lockBatchCreateKafkaV3AclsExecute.Lock()
	defer m.lockBatchCreateKafkaV3AclsExecute.Unlock()

	return m.calls.BatchCreateKafkaV3AclsExecute
}

// CreateKafkaAcls mocks base method by wrapping the associated func.
func (m *ACLV3Api) CreateKafkaAcls(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaAclsRequest {
	m.lockCreateKafkaAcls.Lock()
	defer m.lockCreateKafkaAcls.Unlock()

	if m.CreateKafkaAclsFunc == nil {
		panic("mocker: ACLV3Api.CreateKafkaAclsFunc is nil but ACLV3Api.CreateKafkaAcls was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.CreateKafkaAcls = append(m.calls.CreateKafkaAcls, call)

	return m.CreateKafkaAclsFunc(ctx, clusterId)
}

// CreateKafkaAclsCalled returns true if CreateKafkaAcls was called at least once.
func (m *ACLV3Api) CreateKafkaAclsCalled() bool {
	m.lockCreateKafkaAcls.Lock()
	defer m.lockCreateKafkaAcls.Unlock()

	return len(m.calls.CreateKafkaAcls) > 0
}

// CreateKafkaAclsCalls returns the calls made to CreateKafkaAcls.
func (m *ACLV3Api) CreateKafkaAclsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockCreateKafkaAcls.Lock()
	defer m.lockCreateKafkaAcls.Unlock()

	return m.calls.CreateKafkaAcls
}

// CreateKafkaAclsExecute mocks base method by wrapping the associated func.
func (m *ACLV3Api) CreateKafkaAclsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaAclsRequest) (*net_http.Response, error) {
	m.lockCreateKafkaAclsExecute.Lock()
	defer m.lockCreateKafkaAclsExecute.Unlock()

	if m.CreateKafkaAclsExecuteFunc == nil {
		panic("mocker: ACLV3Api.CreateKafkaAclsExecuteFunc is nil but ACLV3Api.CreateKafkaAclsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaAclsRequest
	}{
		R: r,
	}

	m.calls.CreateKafkaAclsExecute = append(m.calls.CreateKafkaAclsExecute, call)

	return m.CreateKafkaAclsExecuteFunc(r)
}

// CreateKafkaAclsExecuteCalled returns true if CreateKafkaAclsExecute was called at least once.
func (m *ACLV3Api) CreateKafkaAclsExecuteCalled() bool {
	m.lockCreateKafkaAclsExecute.Lock()
	defer m.lockCreateKafkaAclsExecute.Unlock()

	return len(m.calls.CreateKafkaAclsExecute) > 0
}

// CreateKafkaAclsExecuteCalls returns the calls made to CreateKafkaAclsExecute.
func (m *ACLV3Api) CreateKafkaAclsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiCreateKafkaAclsRequest
} {
	m.lockCreateKafkaAclsExecute.Lock()
	defer m.lockCreateKafkaAclsExecute.Unlock()

	return m.calls.CreateKafkaAclsExecute
}

// DeleteKafkaAcls mocks base method by wrapping the associated func.
func (m *ACLV3Api) DeleteKafkaAcls(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaAclsRequest {
	m.lockDeleteKafkaAcls.Lock()
	defer m.lockDeleteKafkaAcls.Unlock()

	if m.DeleteKafkaAclsFunc == nil {
		panic("mocker: ACLV3Api.DeleteKafkaAclsFunc is nil but ACLV3Api.DeleteKafkaAcls was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.DeleteKafkaAcls = append(m.calls.DeleteKafkaAcls, call)

	return m.DeleteKafkaAclsFunc(ctx, clusterId)
}

// DeleteKafkaAclsCalled returns true if DeleteKafkaAcls was called at least once.
func (m *ACLV3Api) DeleteKafkaAclsCalled() bool {
	m.lockDeleteKafkaAcls.Lock()
	defer m.lockDeleteKafkaAcls.Unlock()

	return len(m.calls.DeleteKafkaAcls) > 0
}

// DeleteKafkaAclsCalls returns the calls made to DeleteKafkaAcls.
func (m *ACLV3Api) DeleteKafkaAclsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockDeleteKafkaAcls.Lock()
	defer m.lockDeleteKafkaAcls.Unlock()

	return m.calls.DeleteKafkaAcls
}

// DeleteKafkaAclsExecute mocks base method by wrapping the associated func.
func (m *ACLV3Api) DeleteKafkaAclsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaAclsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.InlineResponse200, *net_http.Response, error) {
	m.lockDeleteKafkaAclsExecute.Lock()
	defer m.lockDeleteKafkaAclsExecute.Unlock()

	if m.DeleteKafkaAclsExecuteFunc == nil {
		panic("mocker: ACLV3Api.DeleteKafkaAclsExecuteFunc is nil but ACLV3Api.DeleteKafkaAclsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaAclsRequest
	}{
		R: r,
	}

	m.calls.DeleteKafkaAclsExecute = append(m.calls.DeleteKafkaAclsExecute, call)

	return m.DeleteKafkaAclsExecuteFunc(r)
}

// DeleteKafkaAclsExecuteCalled returns true if DeleteKafkaAclsExecute was called at least once.
func (m *ACLV3Api) DeleteKafkaAclsExecuteCalled() bool {
	m.lockDeleteKafkaAclsExecute.Lock()
	defer m.lockDeleteKafkaAclsExecute.Unlock()

	return len(m.calls.DeleteKafkaAclsExecute) > 0
}

// DeleteKafkaAclsExecuteCalls returns the calls made to DeleteKafkaAclsExecute.
func (m *ACLV3Api) DeleteKafkaAclsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiDeleteKafkaAclsRequest
} {
	m.lockDeleteKafkaAclsExecute.Lock()
	defer m.lockDeleteKafkaAclsExecute.Unlock()

	return m.calls.DeleteKafkaAclsExecute
}

// GetKafkaAcls mocks base method by wrapping the associated func.
func (m *ACLV3Api) GetKafkaAcls(ctx context.Context, clusterId string) github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaAclsRequest {
	m.lockGetKafkaAcls.Lock()
	defer m.lockGetKafkaAcls.Unlock()

	if m.GetKafkaAclsFunc == nil {
		panic("mocker: ACLV3Api.GetKafkaAclsFunc is nil but ACLV3Api.GetKafkaAcls was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.GetKafkaAcls = append(m.calls.GetKafkaAcls, call)

	return m.GetKafkaAclsFunc(ctx, clusterId)
}

// GetKafkaAclsCalled returns true if GetKafkaAcls was called at least once.
func (m *ACLV3Api) GetKafkaAclsCalled() bool {
	m.lockGetKafkaAcls.Lock()
	defer m.lockGetKafkaAcls.Unlock()

	return len(m.calls.GetKafkaAcls) > 0
}

// GetKafkaAclsCalls returns the calls made to GetKafkaAcls.
func (m *ACLV3Api) GetKafkaAclsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockGetKafkaAcls.Lock()
	defer m.lockGetKafkaAcls.Unlock()

	return m.calls.GetKafkaAcls
}

// GetKafkaAclsExecute mocks base method by wrapping the associated func.
func (m *ACLV3Api) GetKafkaAclsExecute(r github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaAclsRequest) (github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.AclDataList, *net_http.Response, error) {
	m.lockGetKafkaAclsExecute.Lock()
	defer m.lockGetKafkaAclsExecute.Unlock()

	if m.GetKafkaAclsExecuteFunc == nil {
		panic("mocker: ACLV3Api.GetKafkaAclsExecuteFunc is nil but ACLV3Api.GetKafkaAclsExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaAclsRequest
	}{
		R: r,
	}

	m.calls.GetKafkaAclsExecute = append(m.calls.GetKafkaAclsExecute, call)

	return m.GetKafkaAclsExecuteFunc(r)
}

// GetKafkaAclsExecuteCalled returns true if GetKafkaAclsExecute was called at least once.
func (m *ACLV3Api) GetKafkaAclsExecuteCalled() bool {
	m.lockGetKafkaAclsExecute.Lock()
	defer m.lockGetKafkaAclsExecute.Unlock()

	return len(m.calls.GetKafkaAclsExecute) > 0
}

// GetKafkaAclsExecuteCalls returns the calls made to GetKafkaAclsExecute.
func (m *ACLV3Api) GetKafkaAclsExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_kafkarest_v3.ApiGetKafkaAclsRequest
} {
	m.lockGetKafkaAclsExecute.Lock()
	defer m.lockGetKafkaAclsExecute.Unlock()

	return m.calls.GetKafkaAclsExecute
}

// Reset resets the calls made to the mocked methods.
func (m *ACLV3Api) Reset() {
	m.lockBatchCreateKafkaV3Acls.Lock()
	m.calls.BatchCreateKafkaV3Acls = nil
	m.lockBatchCreateKafkaV3Acls.Unlock()
	m.lockBatchCreateKafkaV3AclsExecute.Lock()
	m.calls.BatchCreateKafkaV3AclsExecute = nil
	m.lockBatchCreateKafkaV3AclsExecute.Unlock()
	m.lockCreateKafkaAcls.Lock()
	m.calls.CreateKafkaAcls = nil
	m.lockCreateKafkaAcls.Unlock()
	m.lockCreateKafkaAclsExecute.Lock()
	m.calls.CreateKafkaAclsExecute = nil
	m.lockCreateKafkaAclsExecute.Unlock()
	m.lockDeleteKafkaAcls.Lock()
	m.calls.DeleteKafkaAcls = nil
	m.lockDeleteKafkaAcls.Unlock()
	m.lockDeleteKafkaAclsExecute.Lock()
	m.calls.DeleteKafkaAclsExecute = nil
	m.lockDeleteKafkaAclsExecute.Unlock()
	m.lockGetKafkaAcls.Lock()
	m.calls.GetKafkaAcls = nil
	m.lockGetKafkaAcls.Unlock()
	m.lockGetKafkaAclsExecute.Lock()
	m.calls.GetKafkaAclsExecute = nil
	m.lockGetKafkaAclsExecute.Unlock()
}
