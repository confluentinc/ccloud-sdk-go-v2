// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ShareGroupData struct for ShareGroupData
type ShareGroupData struct {
	Kind         string           `json:"kind,omitempty"`
	Metadata     ResourceMetadata `json:"metadata,omitempty"`
	ClusterId    string           `json:"cluster_id,omitempty"`
	ShareGroupId string           `json:"share_group_id,omitempty"`
	State        string           `json:"state,omitempty"`
	Coordinator  Relationship     `json:"coordinator,omitempty"`
	Consumers    Relationship     `json:"consumers,omitempty"`
	// Number of consumers in this share group
	ConsumerCount int32 `json:"consumer_count,omitempty"`
	// Total number of partitions assigned to this share group across all consumers
	PartitionCount int32 `json:"partition_count,omitempty"`
	// List of topic-partitions assigned to this share group, including those from empty groups
	AssignedTopicPartitions *[]ShareGroupTopicPartitionData `json:"assigned_topic_partitions,omitempty"`
}

// NewShareGroupData instantiates a new ShareGroupData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareGroupData(kind string, metadata ResourceMetadata, clusterId string, shareGroupId string, state string, coordinator Relationship, consumers Relationship, consumerCount int32, partitionCount int32) *ShareGroupData {
	this := ShareGroupData{}
	this.Kind = kind
	this.Metadata = metadata
	this.ClusterId = clusterId
	this.ShareGroupId = shareGroupId
	this.State = state
	this.Coordinator = coordinator
	this.Consumers = consumers
	this.ConsumerCount = consumerCount
	this.PartitionCount = partitionCount
	return &this
}

// NewShareGroupDataWithDefaults instantiates a new ShareGroupData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareGroupDataWithDefaults() *ShareGroupData {
	this := ShareGroupData{}
	return &this
}

// GetKind returns the Kind field value
func (o *ShareGroupData) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ShareGroupData) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *ShareGroupData) GetMetadata() ResourceMetadata {
	if o == nil {
		var ret ResourceMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetMetadataOk() (*ResourceMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ShareGroupData) SetMetadata(v ResourceMetadata) {
	o.Metadata = v
}

// GetClusterId returns the ClusterId field value
func (o *ShareGroupData) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *ShareGroupData) SetClusterId(v string) {
	o.ClusterId = v
}

// GetShareGroupId returns the ShareGroupId field value
func (o *ShareGroupData) GetShareGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareGroupId
}

// GetShareGroupIdOk returns a tuple with the ShareGroupId field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetShareGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareGroupId, true
}

// SetShareGroupId sets field value
func (o *ShareGroupData) SetShareGroupId(v string) {
	o.ShareGroupId = v
}

// GetState returns the State field value
func (o *ShareGroupData) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ShareGroupData) SetState(v string) {
	o.State = v
}

// GetCoordinator returns the Coordinator field value
func (o *ShareGroupData) GetCoordinator() Relationship {
	if o == nil {
		var ret Relationship
		return ret
	}

	return o.Coordinator
}

// GetCoordinatorOk returns a tuple with the Coordinator field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetCoordinatorOk() (*Relationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Coordinator, true
}

// SetCoordinator sets field value
func (o *ShareGroupData) SetCoordinator(v Relationship) {
	o.Coordinator = v
}

// GetConsumers returns the Consumers field value
func (o *ShareGroupData) GetConsumers() Relationship {
	if o == nil {
		var ret Relationship
		return ret
	}

	return o.Consumers
}

// GetConsumersOk returns a tuple with the Consumers field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetConsumersOk() (*Relationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consumers, true
}

// SetConsumers sets field value
func (o *ShareGroupData) SetConsumers(v Relationship) {
	o.Consumers = v
}

// GetConsumerCount returns the ConsumerCount field value
func (o *ShareGroupData) GetConsumerCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConsumerCount
}

// GetConsumerCountOk returns a tuple with the ConsumerCount field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetConsumerCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumerCount, true
}

// SetConsumerCount sets field value
func (o *ShareGroupData) SetConsumerCount(v int32) {
	o.ConsumerCount = v
}

// GetPartitionCount returns the PartitionCount field value
func (o *ShareGroupData) GetPartitionCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PartitionCount
}

// GetPartitionCountOk returns a tuple with the PartitionCount field value
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetPartitionCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartitionCount, true
}

// SetPartitionCount sets field value
func (o *ShareGroupData) SetPartitionCount(v int32) {
	o.PartitionCount = v
}

// GetAssignedTopicPartitions returns the AssignedTopicPartitions field value if set, zero value otherwise.
func (o *ShareGroupData) GetAssignedTopicPartitions() []ShareGroupTopicPartitionData {
	if o == nil || o.AssignedTopicPartitions == nil {
		var ret []ShareGroupTopicPartitionData
		return ret
	}
	return *o.AssignedTopicPartitions
}

// GetAssignedTopicPartitionsOk returns a tuple with the AssignedTopicPartitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareGroupData) GetAssignedTopicPartitionsOk() (*[]ShareGroupTopicPartitionData, bool) {
	if o == nil || o.AssignedTopicPartitions == nil {
		return nil, false
	}
	return o.AssignedTopicPartitions, true
}

// HasAssignedTopicPartitions returns a boolean if a field has been set.
func (o *ShareGroupData) HasAssignedTopicPartitions() bool {
	if o != nil && o.AssignedTopicPartitions != nil {
		return true
	}

	return false
}

// SetAssignedTopicPartitions gets a reference to the given []ShareGroupTopicPartitionData and assigns it to the AssignedTopicPartitions field.
func (o *ShareGroupData) SetAssignedTopicPartitions(v []ShareGroupTopicPartitionData) {
	o.AssignedTopicPartitions = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ShareGroupData) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(&o.Metadata)
	o.recurseRedact(&o.ClusterId)
	o.recurseRedact(&o.ShareGroupId)
	o.recurseRedact(&o.State)
	o.recurseRedact(&o.Coordinator)
	o.recurseRedact(&o.Consumers)
	o.recurseRedact(&o.ConsumerCount)
	o.recurseRedact(&o.PartitionCount)
	o.recurseRedact(o.AssignedTopicPartitions)
}

func (o *ShareGroupData) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ShareGroupData) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ShareGroupData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if true {
		toSerialize["share_group_id"] = o.ShareGroupId
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["coordinator"] = o.Coordinator
	}
	if true {
		toSerialize["consumers"] = o.Consumers
	}
	if true {
		toSerialize["consumer_count"] = o.ConsumerCount
	}
	if true {
		toSerialize["partition_count"] = o.PartitionCount
	}
	if o.AssignedTopicPartitions != nil {
		toSerialize["assigned_topic_partitions"] = o.AssignedTopicPartitions
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableShareGroupData struct {
	value *ShareGroupData
	isSet bool
}

func (v NullableShareGroupData) Get() *ShareGroupData {
	return v.value
}

func (v *NullableShareGroupData) Set(val *ShareGroupData) {
	v.value = val
	v.isSet = true
}

func (v NullableShareGroupData) IsSet() bool {
	return v.isSet
}

func (v *NullableShareGroupData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareGroupData(val *ShareGroupData) *NullableShareGroupData {
	return &NullableShareGroupData{value: val, isSet: true}
}

func (v NullableShareGroupData) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableShareGroupData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
