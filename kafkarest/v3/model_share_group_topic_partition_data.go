// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ShareGroupTopicPartitionData struct for ShareGroupTopicPartitionData
type ShareGroupTopicPartitionData struct {
	Kind     string           `json:"kind,omitempty"`
	Metadata ResourceMetadata `json:"metadata,omitempty"`
	// The name of the topic
	TopicName string `json:"topic_name,omitempty"`
	// The partition ID
	PartitionId int32        `json:"partition_id,omitempty"`
	Partition   Relationship `json:"partition,omitempty"`
}

// NewShareGroupTopicPartitionData instantiates a new ShareGroupTopicPartitionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareGroupTopicPartitionData(kind string, metadata ResourceMetadata, topicName string, partitionId int32, partition Relationship) *ShareGroupTopicPartitionData {
	this := ShareGroupTopicPartitionData{}
	this.Kind = kind
	this.Metadata = metadata
	this.TopicName = topicName
	this.PartitionId = partitionId
	this.Partition = partition
	return &this
}

// NewShareGroupTopicPartitionDataWithDefaults instantiates a new ShareGroupTopicPartitionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareGroupTopicPartitionDataWithDefaults() *ShareGroupTopicPartitionData {
	this := ShareGroupTopicPartitionData{}
	return &this
}

// GetKind returns the Kind field value
func (o *ShareGroupTopicPartitionData) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ShareGroupTopicPartitionData) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ShareGroupTopicPartitionData) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *ShareGroupTopicPartitionData) GetMetadata() ResourceMetadata {
	if o == nil {
		var ret ResourceMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ShareGroupTopicPartitionData) GetMetadataOk() (*ResourceMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ShareGroupTopicPartitionData) SetMetadata(v ResourceMetadata) {
	o.Metadata = v
}

// GetTopicName returns the TopicName field value
func (o *ShareGroupTopicPartitionData) GetTopicName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value
// and a boolean to check if the value has been set.
func (o *ShareGroupTopicPartitionData) GetTopicNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopicName, true
}

// SetTopicName sets field value
func (o *ShareGroupTopicPartitionData) SetTopicName(v string) {
	o.TopicName = v
}

// GetPartitionId returns the PartitionId field value
func (o *ShareGroupTopicPartitionData) GetPartitionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PartitionId
}

// GetPartitionIdOk returns a tuple with the PartitionId field value
// and a boolean to check if the value has been set.
func (o *ShareGroupTopicPartitionData) GetPartitionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartitionId, true
}

// SetPartitionId sets field value
func (o *ShareGroupTopicPartitionData) SetPartitionId(v int32) {
	o.PartitionId = v
}

// GetPartition returns the Partition field value
func (o *ShareGroupTopicPartitionData) GetPartition() Relationship {
	if o == nil {
		var ret Relationship
		return ret
	}

	return o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value
// and a boolean to check if the value has been set.
func (o *ShareGroupTopicPartitionData) GetPartitionOk() (*Relationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partition, true
}

// SetPartition sets field value
func (o *ShareGroupTopicPartitionData) SetPartition(v Relationship) {
	o.Partition = v
}

// Redact resets all sensitive fields to their zero value.
func (o *ShareGroupTopicPartitionData) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(&o.Metadata)
	o.recurseRedact(&o.TopicName)
	o.recurseRedact(&o.PartitionId)
	o.recurseRedact(&o.Partition)
}

func (o *ShareGroupTopicPartitionData) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ShareGroupTopicPartitionData) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ShareGroupTopicPartitionData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["topic_name"] = o.TopicName
	}
	if true {
		toSerialize["partition_id"] = o.PartitionId
	}
	if true {
		toSerialize["partition"] = o.Partition
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableShareGroupTopicPartitionData struct {
	value *ShareGroupTopicPartitionData
	isSet bool
}

func (v NullableShareGroupTopicPartitionData) Get() *ShareGroupTopicPartitionData {
	return v.value
}

func (v *NullableShareGroupTopicPartitionData) Set(val *ShareGroupTopicPartitionData) {
	v.value = val
	v.isSet = true
}

func (v NullableShareGroupTopicPartitionData) IsSet() bool {
	return v.isSet
}

func (v *NullableShareGroupTopicPartitionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareGroupTopicPartitionData(val *ShareGroupTopicPartitionData) *NullableShareGroupTopicPartitionData {
	return &NullableShareGroupTopicPartitionData{value: val, isSet: true}
}

func (v NullableShareGroupTopicPartitionData) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableShareGroupTopicPartitionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
