// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ConsumerGroupV3Api interface {

	/*
	GetKafkaV3Consumer Get Consumer

	[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Returns the consumer specified by the ``consumer_id``.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param clusterId The Kafka cluster ID.
	 @param consumerGroupId The consumer group ID.
	 @param consumerId The consumer ID.
	 @return ApiGetKafkaV3ConsumerRequest
	*/
	GetKafkaV3Consumer(ctx _context.Context, clusterId string, consumerGroupId string, consumerId string) ApiGetKafkaV3ConsumerRequest

	// GetKafkaV3ConsumerExecute executes the request
	//  @return ConsumerData
	GetKafkaV3ConsumerExecute(r ApiGetKafkaV3ConsumerRequest) (ConsumerData, *_nethttp.Response, error)

	/*
	GetKafkaV3ConsumerGroup Get Consumer Group

	[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Returns the consumer group specified by the ``consumer_group_id``.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param clusterId The Kafka cluster ID.
	 @param consumerGroupId The consumer group ID.
	 @return ApiGetKafkaV3ConsumerGroupRequest
	*/
	GetKafkaV3ConsumerGroup(ctx _context.Context, clusterId string, consumerGroupId string) ApiGetKafkaV3ConsumerGroupRequest

	// GetKafkaV3ConsumerGroupExecute executes the request
	//  @return ConsumerGroupData
	GetKafkaV3ConsumerGroupExecute(r ApiGetKafkaV3ConsumerGroupRequest) (ConsumerGroupData, *_nethttp.Response, error)

	/*
	GetKafkaV3ConsumerGroupLagSummary Get Consumer Group Lag Summary.

	[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Returns the max and total lag of the consumers belonging to the
specified consumer group.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param clusterId The Kafka cluster ID.
	 @param consumerGroupId The consumer group ID.
	 @return ApiGetKafkaV3ConsumerGroupLagSummaryRequest
	*/
	GetKafkaV3ConsumerGroupLagSummary(ctx _context.Context, clusterId string, consumerGroupId string) ApiGetKafkaV3ConsumerGroupLagSummaryRequest

	// GetKafkaV3ConsumerGroupLagSummaryExecute executes the request
	//  @return ConsumerGroupLagSummaryData
	GetKafkaV3ConsumerGroupLagSummaryExecute(r ApiGetKafkaV3ConsumerGroupLagSummaryRequest) (ConsumerGroupLagSummaryData, *_nethttp.Response, error)

	/*
	ListKafkaV3ConsumerGroups List Consumer Groups

	[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Returns the list of consumer groups that belong to the specified
Kafka cluster.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param clusterId The Kafka cluster ID.
	 @return ApiListKafkaV3ConsumerGroupsRequest
	*/
	ListKafkaV3ConsumerGroups(ctx _context.Context, clusterId string) ApiListKafkaV3ConsumerGroupsRequest

	// ListKafkaV3ConsumerGroupsExecute executes the request
	//  @return ConsumerGroupDataList
	ListKafkaV3ConsumerGroupsExecute(r ApiListKafkaV3ConsumerGroupsRequest) (ConsumerGroupDataList, *_nethttp.Response, error)

	/*
	ListKafkaV3ConsumerLags List Consumer Lags

	[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Returns a list of consumer lags of the consumers belonging to the
specified consumer group.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param clusterId The Kafka cluster ID.
	 @param consumerGroupId The consumer group ID.
	 @return ApiListKafkaV3ConsumerLagsRequest
	*/
	ListKafkaV3ConsumerLags(ctx _context.Context, clusterId string, consumerGroupId string) ApiListKafkaV3ConsumerLagsRequest

	// ListKafkaV3ConsumerLagsExecute executes the request
	//  @return ConsumerLagDataList
	ListKafkaV3ConsumerLagsExecute(r ApiListKafkaV3ConsumerLagsRequest) (ConsumerLagDataList, *_nethttp.Response, error)

	/*
	ListKafkaV3Consumers List Consumers

	[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Returns a list of consumers that belong to the specified consumer
group.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param clusterId The Kafka cluster ID.
	 @param consumerGroupId The consumer group ID.
	 @return ApiListKafkaV3ConsumersRequest
	*/
	ListKafkaV3Consumers(ctx _context.Context, clusterId string, consumerGroupId string) ApiListKafkaV3ConsumersRequest

	// ListKafkaV3ConsumersExecute executes the request
	//  @return ConsumerDataList
	ListKafkaV3ConsumersExecute(r ApiListKafkaV3ConsumersRequest) (ConsumerDataList, *_nethttp.Response, error)
}

// ConsumerGroupV3ApiService ConsumerGroupV3Api service
type ConsumerGroupV3ApiService service

type ApiGetKafkaV3ConsumerRequest struct {
	ctx _context.Context
	ApiService ConsumerGroupV3Api
	clusterId string
	consumerGroupId string
	consumerId string
}


func (r ApiGetKafkaV3ConsumerRequest) Execute() (ConsumerData, *_nethttp.Response, error) {
	return r.ApiService.GetKafkaV3ConsumerExecute(r)
}

/*
GetKafkaV3Consumer Get Consumer

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Returns the consumer specified by the ``consumer_id``.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterId The Kafka cluster ID.
 @param consumerGroupId The consumer group ID.
 @param consumerId The consumer ID.
 @return ApiGetKafkaV3ConsumerRequest
*/
func (a *ConsumerGroupV3ApiService) GetKafkaV3Consumer(ctx _context.Context, clusterId string, consumerGroupId string, consumerId string) ApiGetKafkaV3ConsumerRequest {
	return ApiGetKafkaV3ConsumerRequest{
		ApiService: a,
		ctx: ctx,
		clusterId: clusterId,
		consumerGroupId: consumerGroupId,
		consumerId: consumerId,
	}
}

// Execute executes the request
//  @return ConsumerData
func (a *ConsumerGroupV3ApiService) GetKafkaV3ConsumerExecute(r ApiGetKafkaV3ConsumerRequest) (ConsumerData, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConsumerData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerGroupV3ApiService.GetKafkaV3Consumer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers/{consumer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(r.clusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consumer_group_id"+"}", _neturl.PathEscape(parameterToString(r.consumerGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consumer_id"+"}", _neturl.PathEscape(parameterToString(r.consumerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKafkaV3ConsumerGroupRequest struct {
	ctx _context.Context
	ApiService ConsumerGroupV3Api
	clusterId string
	consumerGroupId string
}


func (r ApiGetKafkaV3ConsumerGroupRequest) Execute() (ConsumerGroupData, *_nethttp.Response, error) {
	return r.ApiService.GetKafkaV3ConsumerGroupExecute(r)
}

/*
GetKafkaV3ConsumerGroup Get Consumer Group

[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Returns the consumer group specified by the ``consumer_group_id``.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterId The Kafka cluster ID.
 @param consumerGroupId The consumer group ID.
 @return ApiGetKafkaV3ConsumerGroupRequest
*/
func (a *ConsumerGroupV3ApiService) GetKafkaV3ConsumerGroup(ctx _context.Context, clusterId string, consumerGroupId string) ApiGetKafkaV3ConsumerGroupRequest {
	return ApiGetKafkaV3ConsumerGroupRequest{
		ApiService: a,
		ctx: ctx,
		clusterId: clusterId,
		consumerGroupId: consumerGroupId,
	}
}

// Execute executes the request
//  @return ConsumerGroupData
func (a *ConsumerGroupV3ApiService) GetKafkaV3ConsumerGroupExecute(r ApiGetKafkaV3ConsumerGroupRequest) (ConsumerGroupData, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConsumerGroupData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerGroupV3ApiService.GetKafkaV3ConsumerGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(r.clusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consumer_group_id"+"}", _neturl.PathEscape(parameterToString(r.consumerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKafkaV3ConsumerGroupLagSummaryRequest struct {
	ctx _context.Context
	ApiService ConsumerGroupV3Api
	clusterId string
	consumerGroupId string
}


func (r ApiGetKafkaV3ConsumerGroupLagSummaryRequest) Execute() (ConsumerGroupLagSummaryData, *_nethttp.Response, error) {
	return r.ApiService.GetKafkaV3ConsumerGroupLagSummaryExecute(r)
}

/*
GetKafkaV3ConsumerGroupLagSummary Get Consumer Group Lag Summary.

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Returns the max and total lag of the consumers belonging to the
specified consumer group.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterId The Kafka cluster ID.
 @param consumerGroupId The consumer group ID.
 @return ApiGetKafkaV3ConsumerGroupLagSummaryRequest
*/
func (a *ConsumerGroupV3ApiService) GetKafkaV3ConsumerGroupLagSummary(ctx _context.Context, clusterId string, consumerGroupId string) ApiGetKafkaV3ConsumerGroupLagSummaryRequest {
	return ApiGetKafkaV3ConsumerGroupLagSummaryRequest{
		ApiService: a,
		ctx: ctx,
		clusterId: clusterId,
		consumerGroupId: consumerGroupId,
	}
}

// Execute executes the request
//  @return ConsumerGroupLagSummaryData
func (a *ConsumerGroupV3ApiService) GetKafkaV3ConsumerGroupLagSummaryExecute(r ApiGetKafkaV3ConsumerGroupLagSummaryRequest) (ConsumerGroupLagSummaryData, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConsumerGroupLagSummaryData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerGroupV3ApiService.GetKafkaV3ConsumerGroupLagSummary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lag-summary"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(r.clusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consumer_group_id"+"}", _neturl.PathEscape(parameterToString(r.consumerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListKafkaV3ConsumerGroupsRequest struct {
	ctx _context.Context
	ApiService ConsumerGroupV3Api
	clusterId string
}


func (r ApiListKafkaV3ConsumerGroupsRequest) Execute() (ConsumerGroupDataList, *_nethttp.Response, error) {
	return r.ApiService.ListKafkaV3ConsumerGroupsExecute(r)
}

/*
ListKafkaV3ConsumerGroups List Consumer Groups

[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Returns the list of consumer groups that belong to the specified
Kafka cluster.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterId The Kafka cluster ID.
 @return ApiListKafkaV3ConsumerGroupsRequest
*/
func (a *ConsumerGroupV3ApiService) ListKafkaV3ConsumerGroups(ctx _context.Context, clusterId string) ApiListKafkaV3ConsumerGroupsRequest {
	return ApiListKafkaV3ConsumerGroupsRequest{
		ApiService: a,
		ctx: ctx,
		clusterId: clusterId,
	}
}

// Execute executes the request
//  @return ConsumerGroupDataList
func (a *ConsumerGroupV3ApiService) ListKafkaV3ConsumerGroupsExecute(r ApiListKafkaV3ConsumerGroupsRequest) (ConsumerGroupDataList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConsumerGroupDataList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerGroupV3ApiService.ListKafkaV3ConsumerGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kafka/v3/clusters/{cluster_id}/consumer-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(r.clusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListKafkaV3ConsumerLagsRequest struct {
	ctx _context.Context
	ApiService ConsumerGroupV3Api
	clusterId string
	consumerGroupId string
}


func (r ApiListKafkaV3ConsumerLagsRequest) Execute() (ConsumerLagDataList, *_nethttp.Response, error) {
	return r.ApiService.ListKafkaV3ConsumerLagsExecute(r)
}

/*
ListKafkaV3ConsumerLags List Consumer Lags

[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cluster Admin for Kafka (v3)](https://img.shields.io/badge/-Request%20Access%20To%20Cluster%20Admin%20For%20Kafka%20v3-%23bc8540)](mailto:ccloud-rest-api+consumer-lag-earlyaccess@confluent.io?subject=Request%20to%20join%20v3%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cluster%20Admin%20For%20Kafka%20v3%20Early%20Access%20to%20provide%20early%20feedback%20on%20consumer%20lag%20apis%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

Returns a list of consumer lags of the consumers belonging to the
specified consumer group.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterId The Kafka cluster ID.
 @param consumerGroupId The consumer group ID.
 @return ApiListKafkaV3ConsumerLagsRequest
*/
func (a *ConsumerGroupV3ApiService) ListKafkaV3ConsumerLags(ctx _context.Context, clusterId string, consumerGroupId string) ApiListKafkaV3ConsumerLagsRequest {
	return ApiListKafkaV3ConsumerLagsRequest{
		ApiService: a,
		ctx: ctx,
		clusterId: clusterId,
		consumerGroupId: consumerGroupId,
	}
}

// Execute executes the request
//  @return ConsumerLagDataList
func (a *ConsumerGroupV3ApiService) ListKafkaV3ConsumerLagsExecute(r ApiListKafkaV3ConsumerLagsRequest) (ConsumerLagDataList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConsumerLagDataList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerGroupV3ApiService.ListKafkaV3ConsumerLags")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(r.clusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consumer_group_id"+"}", _neturl.PathEscape(parameterToString(r.consumerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListKafkaV3ConsumersRequest struct {
	ctx _context.Context
	ApiService ConsumerGroupV3Api
	clusterId string
	consumerGroupId string
}


func (r ApiListKafkaV3ConsumersRequest) Execute() (ConsumerDataList, *_nethttp.Response, error) {
	return r.ApiService.ListKafkaV3ConsumersExecute(r)
}

/*
ListKafkaV3Consumers List Consumers

[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Returns a list of consumers that belong to the specified consumer
group.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterId The Kafka cluster ID.
 @param consumerGroupId The consumer group ID.
 @return ApiListKafkaV3ConsumersRequest
*/
func (a *ConsumerGroupV3ApiService) ListKafkaV3Consumers(ctx _context.Context, clusterId string, consumerGroupId string) ApiListKafkaV3ConsumersRequest {
	return ApiListKafkaV3ConsumersRequest{
		ApiService: a,
		ctx: ctx,
		clusterId: clusterId,
		consumerGroupId: consumerGroupId,
	}
}

// Execute executes the request
//  @return ConsumerDataList
func (a *ConsumerGroupV3ApiService) ListKafkaV3ConsumersExecute(r ApiListKafkaV3ConsumersRequest) (ConsumerDataList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConsumerDataList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerGroupV3ApiService.ListKafkaV3Consumers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(r.clusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consumer_group_id"+"}", _neturl.PathEscape(parameterToString(r.consumerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
