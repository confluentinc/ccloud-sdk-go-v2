// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

import (
	"reflect"
)

// ProduceResponseData struct for ProduceResponseData
type ProduceResponseData struct {
	Size int32 `json:"size"`
	Type NullableString `json:"type,omitempty"`
	Subject NullableString `json:"subject,omitempty"`
	SchemaId NullableInt32 `json:"schema_id,omitempty"`
	SchemaVersion NullableInt32 `json:"schema_version,omitempty"`
}

// NewProduceResponseData instantiates a new ProduceResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduceResponseData(size int32) *ProduceResponseData {
	this := ProduceResponseData{}
	this.Size = size
	return &this
}

// NewProduceResponseDataWithDefaults instantiates a new ProduceResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProduceResponseDataWithDefaults() *ProduceResponseData {
	this := ProduceResponseData{}
	return &this
}

// GetSize returns the Size field value
func (o *ProduceResponseData) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ProduceResponseData) GetSizeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ProduceResponseData) SetSize(v int32) {
	o.Size = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProduceResponseData) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProduceResponseData) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ProduceResponseData) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ProduceResponseData) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ProduceResponseData) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ProduceResponseData) UnsetType() {
	o.Type.Unset()
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProduceResponseData) GetSubject() string {
	if o == nil || o.Subject.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProduceResponseData) GetSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// HasSubject returns a boolean if a field has been set.
func (o *ProduceResponseData) HasSubject() bool {
	if o != nil && o.Subject.IsSet() {
		return true
	}

	return false
}

// SetSubject gets a reference to the given NullableString and assigns it to the Subject field.
func (o *ProduceResponseData) SetSubject(v string) {
	o.Subject.Set(&v)
}
// SetSubjectNil sets the value for Subject to be an explicit nil
func (o *ProduceResponseData) SetSubjectNil() {
	o.Subject.Set(nil)
}

// UnsetSubject ensures that no value is present for Subject, not even an explicit nil
func (o *ProduceResponseData) UnsetSubject() {
	o.Subject.Unset()
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProduceResponseData) GetSchemaId() int32 {
	if o == nil || o.SchemaId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SchemaId.Get()
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProduceResponseData) GetSchemaIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SchemaId.Get(), o.SchemaId.IsSet()
}

// HasSchemaId returns a boolean if a field has been set.
func (o *ProduceResponseData) HasSchemaId() bool {
	if o != nil && o.SchemaId.IsSet() {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given NullableInt32 and assigns it to the SchemaId field.
func (o *ProduceResponseData) SetSchemaId(v int32) {
	o.SchemaId.Set(&v)
}
// SetSchemaIdNil sets the value for SchemaId to be an explicit nil
func (o *ProduceResponseData) SetSchemaIdNil() {
	o.SchemaId.Set(nil)
}

// UnsetSchemaId ensures that no value is present for SchemaId, not even an explicit nil
func (o *ProduceResponseData) UnsetSchemaId() {
	o.SchemaId.Unset()
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProduceResponseData) GetSchemaVersion() int32 {
	if o == nil || o.SchemaVersion.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SchemaVersion.Get()
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProduceResponseData) GetSchemaVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SchemaVersion.Get(), o.SchemaVersion.IsSet()
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *ProduceResponseData) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion.IsSet() {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given NullableInt32 and assigns it to the SchemaVersion field.
func (o *ProduceResponseData) SetSchemaVersion(v int32) {
	o.SchemaVersion.Set(&v)
}
// SetSchemaVersionNil sets the value for SchemaVersion to be an explicit nil
func (o *ProduceResponseData) SetSchemaVersionNil() {
	o.SchemaVersion.Set(nil)
}

// UnsetSchemaVersion ensures that no value is present for SchemaVersion, not even an explicit nil
func (o *ProduceResponseData) UnsetSchemaVersion() {
	o.SchemaVersion.Unset()
}

// Redact resets all sensitive fields to their zero value.
func (o *ProduceResponseData) Redact() {
    o.recurseRedact(&o.Size)
    o.recurseRedact(o.Type)
    o.recurseRedact(o.Subject)
    o.recurseRedact(o.SchemaId)
    o.recurseRedact(o.SchemaVersion)
}

func (o *ProduceResponseData) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ProduceResponseData) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ProduceResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["size"] = o.Size
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Subject.IsSet() {
		toSerialize["subject"] = o.Subject.Get()
	}
	if o.SchemaId.IsSet() {
		toSerialize["schema_id"] = o.SchemaId.Get()
	}
	if o.SchemaVersion.IsSet() {
		toSerialize["schema_version"] = o.SchemaVersion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProduceResponseData struct {
	value *ProduceResponseData
	isSet bool
}

func (v NullableProduceResponseData) Get() *ProduceResponseData {
	return v.value
}

func (v *NullableProduceResponseData) Set(val *ProduceResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableProduceResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableProduceResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduceResponseData(val *ProduceResponseData) *NullableProduceResponseData {
	return &NullableProduceResponseData{value: val, isSet: true}
}

func (v NullableProduceResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduceResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


