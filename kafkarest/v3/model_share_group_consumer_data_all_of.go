// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ShareGroupConsumerDataAllOf struct for ShareGroupConsumerDataAllOf
type ShareGroupConsumerDataAllOf struct {
	ClusterId   string       `json:"cluster_id,omitempty"`
	GroupId     string       `json:"group_id,omitempty"`
	ConsumerId  string       `json:"consumer_id,omitempty"`
	ClientId    string       `json:"client_id,omitempty"`
	Assignments Relationship `json:"assignments,omitempty"`
}

// NewShareGroupConsumerDataAllOf instantiates a new ShareGroupConsumerDataAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareGroupConsumerDataAllOf(clusterId string, groupId string, consumerId string, clientId string, assignments Relationship) *ShareGroupConsumerDataAllOf {
	this := ShareGroupConsumerDataAllOf{}
	this.ClusterId = clusterId
	this.GroupId = groupId
	this.ConsumerId = consumerId
	this.ClientId = clientId
	this.Assignments = assignments
	return &this
}

// NewShareGroupConsumerDataAllOfWithDefaults instantiates a new ShareGroupConsumerDataAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareGroupConsumerDataAllOfWithDefaults() *ShareGroupConsumerDataAllOf {
	this := ShareGroupConsumerDataAllOf{}
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *ShareGroupConsumerDataAllOf) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *ShareGroupConsumerDataAllOf) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *ShareGroupConsumerDataAllOf) SetClusterId(v string) {
	o.ClusterId = v
}

// GetGroupId returns the GroupId field value
func (o *ShareGroupConsumerDataAllOf) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *ShareGroupConsumerDataAllOf) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *ShareGroupConsumerDataAllOf) SetGroupId(v string) {
	o.GroupId = v
}

// GetConsumerId returns the ConsumerId field value
func (o *ShareGroupConsumerDataAllOf) GetConsumerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsumerId
}

// GetConsumerIdOk returns a tuple with the ConsumerId field value
// and a boolean to check if the value has been set.
func (o *ShareGroupConsumerDataAllOf) GetConsumerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumerId, true
}

// SetConsumerId sets field value
func (o *ShareGroupConsumerDataAllOf) SetConsumerId(v string) {
	o.ConsumerId = v
}

// GetClientId returns the ClientId field value
func (o *ShareGroupConsumerDataAllOf) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *ShareGroupConsumerDataAllOf) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *ShareGroupConsumerDataAllOf) SetClientId(v string) {
	o.ClientId = v
}

// GetAssignments returns the Assignments field value
func (o *ShareGroupConsumerDataAllOf) GetAssignments() Relationship {
	if o == nil {
		var ret Relationship
		return ret
	}

	return o.Assignments
}

// GetAssignmentsOk returns a tuple with the Assignments field value
// and a boolean to check if the value has been set.
func (o *ShareGroupConsumerDataAllOf) GetAssignmentsOk() (*Relationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assignments, true
}

// SetAssignments sets field value
func (o *ShareGroupConsumerDataAllOf) SetAssignments(v Relationship) {
	o.Assignments = v
}

// Redact resets all sensitive fields to their zero value.
func (o *ShareGroupConsumerDataAllOf) Redact() {
	o.recurseRedact(&o.ClusterId)
	o.recurseRedact(&o.GroupId)
	o.recurseRedact(&o.ConsumerId)
	o.recurseRedact(&o.ClientId)
	o.recurseRedact(&o.Assignments)
}

func (o *ShareGroupConsumerDataAllOf) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ShareGroupConsumerDataAllOf) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ShareGroupConsumerDataAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if true {
		toSerialize["group_id"] = o.GroupId
	}
	if true {
		toSerialize["consumer_id"] = o.ConsumerId
	}
	if true {
		toSerialize["client_id"] = o.ClientId
	}
	if true {
		toSerialize["assignments"] = o.Assignments
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableShareGroupConsumerDataAllOf struct {
	value *ShareGroupConsumerDataAllOf
	isSet bool
}

func (v NullableShareGroupConsumerDataAllOf) Get() *ShareGroupConsumerDataAllOf {
	return v.value
}

func (v *NullableShareGroupConsumerDataAllOf) Set(val *ShareGroupConsumerDataAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableShareGroupConsumerDataAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableShareGroupConsumerDataAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareGroupConsumerDataAllOf(val *ShareGroupConsumerDataAllOf) *NullableShareGroupConsumerDataAllOf {
	return &NullableShareGroupConsumerDataAllOf{value: val, isSet: true}
}

func (v NullableShareGroupConsumerDataAllOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableShareGroupConsumerDataAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
