openapi: 3.0.0
info:
  contact:
    email: support@confluent.io
    name: Confluent Cloud
    url: https://www.confluent.io/cloud-contact-us/
  description: "<div class=\"status-info\">\n<p class=\"status-info-title\">Note</p>\n\
    This documents the collection of Confluent Cloud APIs. Each API documents its\n\
    <a href=\"#section/Versioning/API-Lifecycle-Policy\">lifecycle phase</a>. APIs\n\
    marked as Early Access or Preview are not ready for production usage. We're currently\n\
    working with a select group of customers to get feedback and iterate on these\
    \ APIs.\n</div>\n\n# Introduction\n\nConfluent Cloud APIs are a core building\
    \ block of Confluent Cloud. You can use the APIs to\nmanage your own account or\
    \ to integrate Confluent into your product.\n\nMost of the APIs are organized\
    \ around\n<a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\"\
    \ target=\"_blank\">REST</a>\nand the resources which make up Confluent Cloud.\
    \ The APIs have predictable\nresource-oriented URLs, transport data using JSON,\
    \ and use standard HTTP verbs,\nresponse codes, authentication, and design principles.\n\
    \n# Object Model\n\n<div class=\"status-info\">\n<p class=\"status-info-title\"\
    >Note</p>\nThis section describes the object model for many Confluent Cloud APIs,\
    \ but not all.\nThe Connect v1 API group has a different object model. Please\
    \ review the example request and response bodies\nin the Connect v1 API documentation\
    \ <a href=\"#tag/Connectors-(v1)\">below</a> to see its object model.\n</div>\n\
    \nConfluent Cloud APIs are primarily designed to be declarative and intent-oriented.\
    \ In other words, \ntell the API what you want (e.g., throughput or SLOs) and\
    \ it will figure out how to make it happen \n(e.g., cluster sizing). A Confluent\
    \ object acts as a \"record of intent\" — after you create the\nobject, Confluent\
    \ Cloud will work tirelessly in the background to ensure that the object exists\n\
    as specified.\n\nConfluent APIs represent objects in JSON with media-type `application/json`.\n\
    \nMany objects follow a model consisting of `spec` and `status`. An object's `spec`\
    \ tells\nConfluent the _desired state_ (specification) of the resource. The object\
    \ may not be\nimmediately available or changes may not be immediately applied.\
    \ For this reason,\nmany objects also have a\_`status` property that provides\
    \ info about the current\n_actual state_ of the resource. Confluent Cloud is continuously\
    \ and actively managing\neach resource's actual state to match it's desired state.\n\
    \nAll Confluent objects share a set of common properties:\n\n* **api_version**\_\
    –\_API objects have an `api_version`\_field indicating their API version.\n* **kind**\_\
    –\_API objects have a\_`kind`\_field indicating the kind of\_object it is.\n*\
    \ **id** –\_Each object in the API will have an identifier, indicated via its\_\
    `id` field,\n  and should be treated as an opaque string unless otherwise specified.\n\
    \nThere are a number of other [standard properties](#standard-properties) and\
    \ that you'll encounter\nused by many API objects. And of course, objects have\
    \ plenty of non-standard fields that are\nspecific to each object _kind_... this\
    \ is what makes them interesting!\n\n# Authentication\n\nConfluent uses API keys\
    \ for integrating with Confluent Cloud. Integrations must be\nauthorized and authenticated\
    \ before they can access or manage resources in Confluent Cloud.\nYou can manage\
    \ your API keys in the Confluent Cloud Dashboard or Confluent Cloud CLI.\nSee\
    \ [the docs for details on creating and managing API keys](https://docs.confluent.io/cloud/current/client-apps/api-keys.html).\n\
    \nToday, you can divide API keys into two classes:\n\n* **Cloud API Keys** – These\
    \ grant access to the Confluent Cloud Control Plane APIs,\n  such as for Provisioning\
    \ and Metrics integrations.\n* **Cluster API Keys** – These grant access to a\
    \ single Confluent cluster, such as a specific\n  Kafka or Schema Registry cluster.\n\
    \nAn API key is owned by a User or Service Account and inherits the permissions\
    \ granted\nto the owner.\n\n* For example, if service account `Armageddon` is\
    \ granted ACLs on Kafka Cluster `neptune`,\n  then a Cluster API Key for `neptune`\
    \ owned by `Armageddon` will have these ACLs.\n* **Note 1:** ACLs aren't currently\
    \ enforced for users, only service accounts.\n* **Note 2:** API Keys are automatically\
    \ deleted when the owning user or service account is\n  deleted (e.g., an employee\
    \ leaves the company, or moves to a new department and an SSO\n  integration removes\
    \ their user in Confluent Cloud as they no longer require access)\n* Confluent\
    \ **strongly recommend** that you use service accounts for all production-critical\
    \ access.\n\nYour API keys carry many privileges, so **be sure to keep them secure**!\
    \ Do not share your\nAPI keys in publicly accessible areas such as GitHub, client-side\
    \ code, and so forth.\n\nAll API requests must be made over HTTPS. Calls made\
    \ over plain HTTP will fail. API requests\nwithout authentication will also fail.\n\
    \nTo use your API key, send it as an `Authorization: Basic {key}` header. Remember\
    \ that HTTP\nBasic authorization requires you to colon-separate and base64 encode\
    \ your key. For example,\nif your API Key ID is `ABCDEFGH123456789` and the corresponding\
    \ API Key Secret is\n`XNCIW93I2L1SQPJSJ823K1LS902KLDFMCZPWEO`, then the authorization\
    \ header will be\n\n    Authorization: Basic QUJDREVGR0gxMjM0NTY3ODk6WE5DSVc5M0kyTDFTUVBKU0o4MjNLMUxTOTAyS0xERk1DWlBXRU8=\n\
    \nThis example header can be generated from the API key (on Mac OS X) with\n\n\
    \    $ echo -n \"ABCDEFGH123456789:XNCIW93I2L1SQPJSJ823K1LS902KLDFMCZPWEO\" |\
    \ base64\n\n<!-- TODO: port this back to the Confluent API Design Guide -->\n\n\
    <SecurityDefinitions />\n\n# Errors\n\n<div class=\"status-info\">\n<p class=\"\
    status-info-title\">Note</p>\nThis section describes the structure of error responses\
    \ for many Confluent Cloud APIs, but not all.\nThe Connect v1 API group has a\
    \ different set of structures for error responses. Please review the example\n\
    request and response bodies in the Connect v1 API documentation <a href=\"#tag/Connectors-(v1)\"\
    >below</a>\nto see its error behaviour.\n</div>\n\nConfluent uses conventional\
    \ [HTTP status codes](#section/HTTP-Guidelines/Status-Codes) to\nindicate the\
    \ success or failure of an API request.\n\nFailures follow a standard model to\
    \ tell you about what went wrong. They may include\none or more error objects\
    \ with the following fields:\n\n| Field      | Type    | Description\n|------------|---------|--------------------------------------\n\
    | id*        | UUID    | A unique identifier for this particular occurrence of\
    \ the problem.\n| status     | String  | The HTTP status code applicable to this\
    \ problem.\n| code       | String  | An application-specific error code.\n| title\
    \      | String  | A short, human-readable summary of the problem that **should\
    \ not** change from occurrence to occurrence of the problem, except for purposes\
    \ of localization.\n| detail*    | String  | A human-readable explanation specific\
    \ to this occurrence of the problem. Like title, this field’s value can be localized.\n\
    | source     | Object  | An object that references the source of the error, and\
    \ optionally includes any of the following members:\n| &nbsp;&nbsp;pointer   |\
    \ String  | A <a href=\"https://tools.ietf.org/html/rfc6901\" target=\"_blank\"\
    >JSON Pointer</a> to the associated entity in the request document (e.g. `\"/spec/title\"\
    ` for a specific attribute).\n| &nbsp;&nbsp;parameter | String  | A string indicating\
    \ which URI query parameter caused the error.\n| meta       | Object  | A meta\
    \ object that contains non-standard meta-information about the error.\n| resolution\
    \ | String  | Instructions for the end-user for correcting the error.\n\n\\* indicates\
    \ a required field\n\nAll errors include an `id` and some `detail` message. The\
    \ `id` is a unique identifier — use it\nwhen you're working with Confluent support\
    \ to debug a problem with a specific API call. The\n`detail` describes what went\
    \ wrong.\n\nSome errors that could be handled programmatically (e.g., a Kafka\
    \ cluster config is invalid)\nmay include an error `code` that briefly explains\
    \ the error reported.\n\nValidation issues and similar errors include a `source`\
    \ which tells you exactly\nwhat in the request was responsible for the error.\n\
    \nFor example, a failure may look like\n\n    {\n      \"errors\": [{\n      \
    \  \"status\": \"422\",\n        \"code\": \"invalid_configuration\",\n      \
    \  \"id\": \"30ce6058-87da-11e4-b116-123b93f75cba\",\n        \"title\": \"The\
    \ Kafka cluster configuration is invalid\",\n        \"detail\": \"The property\
    \ '/cluster/storage_size' of type string did not match the following type: integer\"\
    ,\n        \"source\": {\n          \"pointer\": \"/cluster/storage_size\"\n \
    \       }\n      }]\n    }\n\nIf a request fails validation, it will return an\
    \ HTTP `422 Unprocessable Entity`\nwith a list of fields that failed validation.\n\
    \n# Pagination\n\n<div class=\"status-info\">\n<p class=\"status-info-title\"\
    >Note</p>\nThis section describes the pagination behavior of “list” operations\
    \ for many Confluent Cloud APIs, but not all.\nThe Connect v1 API list operations\
    \ do not support pagination.\n</div>\n\nAll API resources have support for bulk\
    \ reads via \"list\" API operations. For example,\nyou can \"list Kafka clusters\"\
    , \"list api keys\", and \"list environments\". These \"list\"\noperations require\
    \ pagination; by requesting smaller subsets of data, API clients\nreceive a response\
    \ much faster than requesting the entire, potentially large, data set.\n\nAll\
    \ \"list\" operations follow the same pattern with the following parameters:\n\
    \n* `page_size` –  client-provided max number of items per page, only valid on\
    \ the first request.\n* `page_token` –  server-generated token used for traversing\
    \ through the result set.\n\nA paginated response may include any of the following\
    \ pagination links. API clients may\nfollow the respective link to page forward\
    \ or backward through the result set as desired.\n\n| [Link Relation](https://www.iana.org/assignments/link-relations/link-relations.xml)\
    \ | Description\n|---------|---------------------------------------\n| `next`\
    \  | A link to the next page of results. A response that does not contain a next\
    \ link does not have further data to fetch.\n| `prev`  | A link to the previous\
    \ page of results. A response that does not contain a prev link has no previous\
    \ data. This link is **optional** for collections that cannot be traversed backward.\n\
    | `first` | A link to the first page of results. This link is **optional** for\
    \ collections that cannot be indexed directly to a given page.\n| `last`  | A\
    \ link to the last page of results. This link is **optional** for collections\
    \ that cannot be indexed directly to a given page.\n\nAPI clients must treat pagination\
    \ links and the `page_token` parameter in particular as an opaque string. \n\n\
    An example paginated list response may look like\n```\n{\n    \"api_version\"\
    : \"v2\",\n    \"kind\": \"KafkaClusterList\",\n    \"metadata\": {\n        \"\
    next\": \"https://api.confluent.cloud/kafka-clusters?page_token=ABCDEFGHIJKLMNOP1234567890\"\
    \n    }\n    \"data\": [\n        {\n            \"metadata\": {\n           \
    \     \"id\": \"lkc-abc123\",\n                \"self\": \"https://api.confluent.cloud/kafka-clusters/lkc-abc123\"\
    ,\n                \"resource_name\": \"crn://confluent.cloud/kafka=lkc-abc123\"\
    ,\n            }\n            \"spec\": {\n                \"display_name\": \"\
    My Kafka Cluster\",\n                <snip>\n            },\n            \"status\"\
    : {\n                \"phase\": \"RUNNING\",\n                <snip>\n       \
    \     }\n        },\n        <snip>\n    ]\n}\n```\n\n# Rate Limiting\n\nTo protect\
    \ the stability of the API and keep it available to all users, Confluent employs\n\
    multiple safeguards. If you send too many requests in quick succession or perform\
    \ too many\nconcurrent operations, you may be throttled or have your request rejected\
    \ with an error.\n\nWhen a rate limit is breached, an HTTP `429 Too Many Requests`\
    \ error is returned.\n<!-- with\nthe following header:\n\n| Header           \
    \       | Description\n|-------------------------|----------------------------------------\n\
    | `Retry-After`           | The number of seconds to wait until the rate limit\
    \ window resets. Only sent when the rate limit is reached.\n\n-->\n<!-- TODO make\
    \ this true\n\nConfluent enforces multiple kinds of limits, including request\
    \ rate and concurrency limits, both\nper user and organization wide. Unauthenticated\
    \ requests are associated with the originating\nIP address, and not the user making\
    \ requests.\n\n-->\n\nIntegrations should gracefully handle these limits by watching\
    \ for `429` error responses and\nbuilding in a retry mechanism. This mechanism\
    \ should follow a capped exponential backoff policy to\nprevent [retry amplification](https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/)\n\
    (\"retry storms\") and also introduce some randomness (\"jitter\") to avoid the\n\
    [thundering herd effect](https://en.wikipedia.org/wiki/Thundering_herd_problem).\n\
    \n\nIf you’re running into this error and think you need a higher rate limit,\
    \ contact Confluent at\n[support@confluent.io](mailto:support@confluent.io).\n\
    \n# Identifiers and URLs\n\nMost resources have multiple identifiers:\n* `id`\
    \ is the \"natural identifier\" for an object. It is only unique within its parent\
    \ resource.\n  The `id` is unique across time: the ID will not be reclaimed and\
    \ reused after an object is deleted.\n* `resource_name` is a Uniform Resource\
    \ Identifier (URI) that is globally unique across all resources.\n  This encompasses\
    \ all parent resource `kind`s and `id`s necessary to uniquely identify a particular\n\
    \  instance of this object `kind`. Because it uses object `id`s, the CRN will\
    \ not be reclaimed and\n  reused after an object is deleted. It is represented\
    \ as a Confluent Resource Name (see below). \n* `self` is a Uniform Resource Locator\
    \ (URL) at which an object can be addressed.\n  This URL encodes the service location,\
    \ API version, and other particulars necessary to\n  locate the resource at a\
    \ point in time.\n\nTo see how these relate to each other, consider `KafkaBroker`\
    \ with `broker.id=2` in a `KafkaCluster`\nin Confluent Cloud identified as `lkc-xsi8201`.\
    \ In such an example, the `KafkaBroker` has `id=2`,\nthe `resource_name` is `crn://confluent.cloud/kafka=lkc-xsi8201/broker=2`\
    \ and the `self` URL may be\nsomething like `https://pkc-8wlk2n.us-west-2.aws.confluent.cloud`.\
    \ Note that different identifiers\ncarry different information for different purposes,\
    \ but the `resource_name` is the most complete\nand canonical identifier.\n\n\
    ## Confluent Resource Names (CRNs)\n\n*Confluent Resource Names* (CRNs) are used\
    \ to uniquely identify all Confluent resources.\n\nA CRN is a valid URI having\
    \ an \"authority\" of `confluent.cloud` or a self-managed\n<a href=\"https://docs.confluent.io/current/security/rbac/configure-mds/index.html\"\
    \ target=\"_blank\">\nmetadata service URL</a>, followed by the minimal hierarchical\
    \ set of key-value\npairs necessary to uniquely identify a resource.\n\nHere are\
    \ some examples for basic resources in Confluent Cloud:\n\n| Resource        \
    \    | Example CRN                                                 |\n|---------------------|-------------------------------------------------------------|\n\
    | Environment         | crn://confluent.cloud/environment=e-xyz1234          \
    \       |\n| User                | crn://confluent.cloud/user=u-rst9876      \
    \                  |\n| API Key             | crn://confluent.cloud/api-key=ABCDEFG9876543210\
    \             |\n| Service Account     | crn://confluent.cloud/service-account=sa-lmn2468\
    \            |\n| Service Account Key | crn://confluent.cloud/service-account-key=HIJKLMN0123456789\
    \ |\n| Kafka Cluster       | crn://confluent.cloud/kafka=lkc-abc123          \
    \            |\n\n# Data Types\n\n### Primitive Types\n\n| Data Type  | Representation\n\
    |------------|---------------------\n| Integers   | Each API may specify the type\
    \ as `int32` or `int64`. Note that many languages, including JavaScript, are limited\
    \ to a max size of approx `2**53` and don't correctly handle large `int64` values\
    \ with their default JSON parser.\n| Dates      | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\"\
    \ target=\"_blank\">RFC 3339</a> formatted string. UTC timezones are assumed,\
    \ unless otherwise given.\n| Times      | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\"\
    \ target=\"_blank\">RFC 3339</a> formatted string. UTC timezones are assumed,\
    \ unless otherwise given.\n| Durations  | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\"\
    \ target=\"_blank\">RFC 3339</a> formatted string.\n| Periods    | <a href=\"\
    https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> formatted\
    \ string. UTC timezones are assumed, unless otherwise given.\n| Ranges     | All\
    \ ranges are represented using half-open intervals with naming conventions like\
    \ `[start_XXX, end_XXX)` such as `[start_time, end_time)`.\n| Enums      | Most\
    \ APIs use <a href=\"https://opensource.zalando.com/restful-api-guidelines/#112\"\
    \ target=\"_blank\">`x-extensible-enum`</a> as an open-ended list of values. This\
    \ improves compatibility compared with a standard `enum` which by definition represents\
    \ a closed set. All enums have a `0`-valued entry which either serves as the default\
    \ for common cases, or represents `UNSPECIFIED` when no default exists and results\
    \ in an error.\n\n<!-- TODO\n### Standard Objects\n\n| Money Object | https://schema.org/MonetaryAmount\
    \ or https://opensource.zalando.com/restful-api-guidelines/#173\n| Price Specification\
    \ | https://schema.org/PriceSpecification -> https://schema.org/UnitPriceSpecification\
    \ and https://schema.org/PaymentChargeSpecification\n-->\n\n### Standard Properties\n\
    \nConfluent uses this set of standard properties to ensure common concepts use\n\
    the same name and semantics across different APIs.\n\n| Name             | Description\n\
    |------------------|------------------------------------------\n| **api_version**\_\
    \ | Many API objects have an `api_version`\_field indicating their API version.\
    \ See the [Object Model](#section/Object-Model).\n| **kind**\_        | Many API\
    \ objects have a\_`kind`\_field indicating the\_kind of object it is. See the\
    \ [Object Model](#section/Object-Model).\n| **id**           | Many objects in\
    \ the API will have an identifier, indicated via its\_`id`\_field, and should\
    \ be treated as an opaque string unless otherwise specified. See the [Object Model](#section/Object-Model).\n\
    | **name**         | Objects which support a client-provided unique identifier\
    \ instead of a generated `id` will indicate this identifier via its `name` field.\n\
    | **display_name** | The human-readable display name of an API object.\n| **title**\
    \        | The official name of an API object, such as a company name. It should\
    \ be treated as the formal version of\_`display_name`.\n| **description**  | One\
    \ or more paragraphs of text description of an entity.\n| **created_at**\_  |\
    \ The date and time the object was created, represented as a string in <a href=\"\
    https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> format.\n\
    | **updated_at**  \_| The date and time the object was last modified, represented\
    \ as a string in <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\"\
    >RFC 3339</a> format.\n| **deleted_at**   | If present, the date and time after\
    \ which the object was/will be deleted,\_represented as a string in <a href=\"\
    https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> format.\n\
    | **page_token**   | The pagination token in the List request. See [Pagination](#section/Pagination).\n\
    | **page_size**    | The pagination size in the List request. See [Pagination](#section/Pagination).\n\
    | **total_size**   | The total count of items in the list irrespective of pagination.\
    \ See [Pagination](#section/Pagination).\n| **spec**         | The _desired state_\
    \ specification of the resource, as observed by Confluent Cloud.\n| **status**\
    \       | The current _actual state_ of the resource, as observed by Confluent\
    \ Cloud.\n\n# Versioning\n\nConfluent APIs ensure stability for your integrations\
    \ by avoiding the introduction\nof breaking changes to customers unexpectedly.\
    \ Confluent will make non-breaking\nAPI changes without advance notice. Thus,\
    \ API clients **must**  follow the\n[Compatibility Policy](#section/Versioning/Compatibility-Policy)\
    \ below to ensure your\ningtegration remains stable. All APIs follow the API Lifecycle\
    \ Policy described below,\nwhich describes the guarantees API clients can rely\
    \ on.\n\nBreaking changes will be [widely communicated](#communication) in advance\
    \ in accordance\nwith the Confluent [Deprecation Policy](#section/Versioning/Deprecation-Policy).\
    \ Confluent will provide \ntimelines and a migration path for all API changes,\
    \ where available. Be sure to subscribe\nto one or more [communication channels](#communication)\
    \ so you don't miss any updates!\n\nOne exception to these guidelines is for critical\
    \ security issues. Confluent will take any necessary\nactions to mitigate any\
    \ critical security issue as soon as possible, which may include disabling\nthe\
    \ vulnerable functionality until a proper solution is available.\n\nDo not consume\
    \ any Confluent API unless it is documented in the API Reference. All undocumented\n\
    endpoints should be considered private, subject to change without notice, and\
    \ not covered by any\nagreements.\n\n> Note: The version in the URL (e.g. \"v1\"\
    \ or \"v2\") is not a \"major version\" in the\n[Semantic Versioning](https://semver.org/)\
    \ sense. It is a \"generational version\" or \"meta version\", as seen in\nAPIs\
    \ like <a href=\"https://developer.github.com/v3/versions/\" target=\"_blank\"\
    >Github API</a> or the\n<a href=\"https://stripe.com/docs/api/versioning\" target=\"\
    _blank\">Stripe API</a>.\n\n## Known Issues\n\nDuring the Early Access and Preview\
    \ periods, we have a few known issues.\n\n| Issue          | Description     \
    \                                                              | Proposed Resolution\n\
    |----------------|-------------------------------------------------------------------------------|-----------------------------------------------------\n\
    | Quota Exceeded | Some \"Quota Exceeded\" errors will be returned as HTTP 400\
    \ instead of HTTP 402 | Return 402 consistently for \"Quota Exceeded\" errors\
    \ \n\n## API Lifecycle Policy\n\nThe following status labels are applicable to\
    \ APIs, features, and SDK versions, based on\nthe current support status of each:\n\
    \n* **Early Access** – May change at any time. Not recommended for production\
    \ usage. Not officially supported by\n  Confluent. Intended for user feedback\
    \ only. Users must be granted explicit access to the API by Confluent.\n* **Preview**\
    \ – Unlikely to change between Preview and General Availability. Not recommended\
    \ for production usage.\n  Officially supported by Confluent for non-production\
    \ usage. For Closed Previews, users must be granted explicit\n  access to the\
    \ API by Confluent.\n* **Generally Available (GA)** – Will not change at short\
    \ notice. Recommended for production usage.\n  Officially supported by Confluent\
    \ for non-production and production usage.\n* **Deprecated** – No longer supported.\
    \ Will be removed in the future at the announced date.\n  Use is discouraged and\
    \ migration following the upgrade guide is recommended.\n* **Sunset** – Removed,\
    \ and no longer supported or available.\n\nResources, operations, and individual\
    \ fields in the <a href=\"./openapi/v3\" target=\"_blank\">OpenAPI spec</a>\n\
    will be annotated with `x-lifecycle-stage`, `x-deprecated-at`, and `x-sunset-at`.\
    \ These\nannotations will appear in the corresponding API Reference Documentation.\
    \ An API is\n\"Generally Available\" unless explicitly marked otherwise.\n\n##\
    \ Compatibility Policy\n\nConfluent Cloud APIs are governed by\n<a href=\"https://docs.confluent.io/current/cloud/limits.html#upgrade-policy\"\
    \ target=\"_blank\">\nConfluent Cloud Upgrade Policy</a>, which means that backward\
    \ incompatible changes and\ndeprecations will be made approximately once per year,\
    \ and 180 days notice will be provided via email to all\nregistered Confluent\
    \ Cloud users.\n\n### Backward Compatibility\n\n> *An API version is backward\
    \ compatible if a program written against the previous version of the\n> API will\
    \ continue to work the same way, without modification, against this version of\
    \ the API.*\n\nConfluent considers the following changes to be backward compatible:\n\
    \n* Adding new API resources.\n* Adding new optional parameters to existing API\
    \ requests (e.g., query string).\n* Adding new properties to existing API resources\
    \ (e.g., request body).\n* Changing the order of properties in existing API responses.\n\
    * Changing the length or format of object IDs or other opaque strings.\n  * Unless\
    \ otherwise documented, you can safely assume object IDs generated by Confluent\
    \ will never exceed 255\n    characters, but you should be able to handle IDs\
    \ of up to that length. If you're using MySQL,\n    for example, you should store\
    \ IDs in a `VARCHAR(255) COLLATE utf8_bin` column.\n  * This includes adding or\
    \ removing fixed prefixes (such as `lkc-` on Kafka cluster IDs).\n  * This includes\
    \ API keys, API tokens, and similar authentication mechanisms.\n  * This includes\
    \ all strings described as \"opaque\" in the docs, such as pagination cursors.\n\
    * Adding new API event types.\n* Adding new properties to existing API event types.\n\
    * Omitting properties with null values from existing API responses.\n\n### Forward\
    \ Compatibility\n\n> *An API version is forward compatible if a program written\
    \ against the next version of the API\n> will continue to work the same way, without\
    \ modification, against this version of the API.*\n\nIn other words, a forward\
    \ compatible API will accept input intended for a later version of itself.\n\n\
    Confluent does not guarantee the forward compatibility of the APIs, but Confluent\
    \ does generally follow the guidelines\ngiven by the [Robustness principle](https://en.wikipedia.org/wiki/Robustness_principle).\n\
    This means that the API determines what to do with a request based only on the\
    \ parts that it recognizes.\n\nThis is often referred to as the MUST IGNORE rule.\n\
    \n* Request parameters that are not recognized will be ignored (e.g., query string).\n\
    * Request properties that are not recognized will be ignored (e.g., request body).\n\
    * Request metadata that are not recognized will be ignored (e.g., request headers).\n\
    \nAPI clients must also follow the MUST IGNORE rule.\n\n* Response properties\
    \ that are not recognized must be ignored (e.g., response body).\n* Response metadata\
    \ that are not recognized must be ignored (e.g., response headers).\n\nAdditionally,\
    \ there is a more subtle related rule called the MUST FORWARD rule. Any parts\
    \ of\na request that an API doesn't recognize must be forwarded unchanged.\n\n\
    * Response properties that are not recognized must be included in any input subsequent\
    \ updates (e.g., request body)\n  * This includes future `PUT` requests in a read/modify/write\
    \ operation.\n    (This isn't required for `PATCH` partial updates, which is why\
    \ Confluent APIs use `PATCH`.)\n* Event processors must not strip unknown properties\
    \ before forwarding messages.\n\n### Client Responsibilities\n\n* Resource and\
    \ rate limits, and the default and maximum sizes of paginated data **are not**\n\
    \  considered part of the API contract and may change (possibly dynamically).\
    \ It is the client's\n  responsibility to read the road signs and obey the speed\
    \ limit.\n* If a property has a primitive type and the API documentation does\
    \ not explicitly limit its\n  possible values, clients **must not** assume the\
    \ values are constrained to a particular set\n  of possible responses.\n* If a\
    \ property of an object is not explicitly declared as mandatory in the API, clients\n\
    \  **must not** assume it will be present.\n* A resource **may** be modified to\
    \ return a \"redirection\" response (e.g. `301`, `307`) instead of\n  directly\
    \ returning the resource. Clients **must** handle HTTP-level redirects, and respect\
    \ HTTP\n  headers (e.g. `Location`).\n\n## Deprecation Policy\n\nConfluent will\
    \ announce deprecations at least 180 days in advance of a breaking change\nand\
    \ will continue to maintain the deprecated APIs in their original form during\
    \ this time.\n\nExceptions to this policy apply in case of critical security vulnerabilities\
    \ or functional defects.\n\n### Communication\n\nWhen a deprecation is announced,\
    \ the details and any relevant migration\ninformation will be available on one\
    \ or more of the following channels:\n\n* Lifecycle, deprecation and \"since\"\
    \ annotations in the <a href=\"./openapi/v3\" target=\"_blank\">OpenAPI spec</a>\n\
    * Announcements on the <a href=\"https://www.confluent.io/blog/\" target=\"_blank\"\
    >Developer Blog</a>,\n  <a href=\"https://confluentcommunity.slack.com\" target=\"\
    _blank\">Community Slack</a>\n  (<a href=\"https://slackpass.io/confluentcommunity\"\
    \ target=\"_blank\">join!</a>),\n  <a href=\"https://groups.google.com/forum/#!forum/confluent-platform\"\
    \ target=\"_blank\">Google Group</a>,\n  the <a href=\"https://twitter.com/ConfluentInc\"\
    \ target=\"_blank\">@ConfluentInc twitter</a>\n  account, and similar channels\n\
    * Enterprise customers may receive information by email to their specified Confluent\
    \ contact, if applicable.\n\n<!-- TODO:\n### Discoverability\n-->\n\n# HTTP Guidelines\n\
    \n## Status Codes\n\nConfluent respects the meanings and behavior of HTTP status\
    \ codes as defined\nin <a href=\"https://tools.ietf.org/html/rfc2616\">RFC2616</a>\
    \ and elsewhere.\n\n* Codes in the `2xx` range indicate success\n* Codes in the\
    \ `3xx` range indicate redirection\n* Codes in the `4xx` range indicate an error\
    \ caused by the client request\n  (e.g., a required parameter was omitted, an\
    \ invalid cluster configuration was provided, etc.)\n* Codes in the `5xx` range\
    \ indicate an error with Confluent's servers (these are rare)\n\nThe various HTTP\
    \ status codes that might be returned are listed below.\n\n| Code | Title    \
    \              | Description\n|------|------------------------|--------------------------------\n\
    | 200  | OK                     | Everything worked as expected.\n| 201  | Created\
    \                | The resource was created. Follow the `Location` header.\n|\
    \ 204  | No Content             | Everything worked and there is no content to\
    \ return.\n| 400  | Bad Request\t        | The request was unacceptable, often\
    \ due to malformed syntax, or a missing or malformed parameter.\n| 401  | Unauthorized\
    \           | No valid credentials provided. or the credentials are unsuitable,\
    \ invalid, or unauthorized.\n| 402  | Over Quota             | The request was\
    \ valid, but you've exceeded your plan quota or limits.\n| 404  | Not Found  \
    \            | The requested resource doesn't exist or you're unauthorized to\
    \ know it exists.\n| 409  | Conflict               | The request conflicts with\
    \ another request (perhaps it already exists or was based on a stale version of\
    \ data).\n| 422  | Validation Failed      | The request was parsed correctly but\
    \ failed some sort of validation.\n| 429  | Too Many Requests      | Too many\
    \ requests hit the API too quickly. Confluent recommends an exponential backoff\
    \ of your requests.\n| 500, 502, 503, 504 | Server Errors | Something went wrong\
    \ on Confluent's end. (These are rare.)\n\nThis list is not exhaustive; other\
    \ standard HTTP error codes may be used,\nincluding `304`, `307`, `308`, `405`,\
    \ `406`, `408`, `410`, and `415`.\n\nFor more details, see https://httpstatuses.com.\n\
    \n<!--\n\n## Method Overriding\n\nSome firewalls and HTTP clients restrict the\
    \ use of verbs other than `GET` and `POST`. In those\nenvironments, Confluent\
    \ API operations that require `PUT`, `PATCH`, and `DELETE` verbs will be inaccessible.\n\
    \nTo avoid this issue, Confluent APIs support the `X-HTTP-Method-Override` header,\
    \ allowing clients to\n\"tunnel\" `PUT`, `PATCH`, and `DELETE` requests via a\
    \ `POST` request.\n\nFor example, to call a Confluent `PATCH` resource via a `POST`\
    \ request, you can\ninclude `X-HTTP-Method-Override: PATCH` as a header.\n\n##\
    \ User Agent Required\n\nConfluent API requests **should** include a valid `User-Agent`\
    \ header. Requests with no `User-Agent`\nheader may be rejected. You should use\
    \ the name of your integration for the `User-Agent`\nheader value and include\
    \ contact information so that Confluent can contact you if there are problems.\n\
    \n> If your integration is acting as a proxy or gateway, you **should** forward\
    \ the User-Agent\n> of the originating client with your API requests.\n\nHere's\
    \ a complete example:\n\n    User-Agent: CoolToolName/1.2.3 (https://example.org/CoolTool/;\
    \ CoolTool@example.org) UsedBaseLibrary/2.1.0\n\nThe minimum user agent string\
    \ is the integration name and version: `name/version`.\nYou can string together\
    \ multiple values in a space-separated list. The full syntax is:\n\n    name/version\
    \ [(comments)] [name/version [(comments)]] [...]​\n\nFor the integration name,\
    \ use a string (without whitespace) that clearly and meaningfully\nidentifies\
    \ your integration.\n\n* Avoid ambiguous names: `Confluent-Integration`, `Kafka-Sink`\n\
    * Use clear and meaningful names: `ABCTools-ToolName`, `StackStorm-Confluent-Plugin`\n\
    \nFor the version, use a semantic version, build ID, commit hash, or other identifier\n\
    that is updated automatically when you release a new version.\n\nWrap comments\
    \ in parentheses `()` as a semi-colon separated list. Helpful comments to include:\n\
    \n* A public URL for your integration, such as a GitHub link or a page in your\n\
    \  docs site that describes the integration.\n* Contact information so that Confluent\
    \ can easily reach the integration publisher. This\n  information from the user\
    \ agent string will never be shared nor used by Confluent for\n  any purpose other\
    \ than discussing the integration with its publisher.\n\nIf you provide an invalid\
    \ `User-Agent` header, you may receive a `403 Forbidden` response.\n\n-->\n"
  title: Confluent Cloud APIs
  x-api-id: 46234552-5833-42eb-ba0f-883ad3f70d2b
  x-audience: external-public
  x-logo:
    url: https://assets.confluent.io/m/5ec23aa91903c00b/
servers:
- description: Confluent Cloud API
  url: https://api.confluent.cloud
tags:
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `Environment` objects represent an isolated namespace for your Confluent resources
    for organizational purposes.

    The API allows you to create, delete, and update your environments. You can retrieve
    individual environments as well as a list of all your environments.


    Related guide: [Environments in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/environments.html).

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `environments_per_org` | Environments in one Confluent Cloud organization |
  name: Environments (v2)
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `User` objects represent individuals who may access your Confluent resources.

    The API allows you to update, and delete your users. You can retrieve
    individual users as well as a list of all your users.


    Related guide: [Users in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `users_per_org` | Users in one Confluent Cloud organization |
  name: Users (v2)
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `ServiceAccount` something


    Related guide: [Service Accounts in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/service-account.html).

    ## Quotas and Limits
    This resource is subject to the following quotas:

    | Quota | Description |
    | --- | --- |
    | `service_accounts_per_org` | Service Accounts in one Confluent Cloud organization |
  name: Service Accounts (v2)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    API for managing connectors.

    The API allows you to list, create, get, update and delete your connectors.

    Connect metrics are available through [Metrics v2 API](https://api.telemetry.confluent.cloud/docs#tag/Version-2).

    Related guide: [Confluent Cloud API and Fully-Managed Connectors](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).
  name: Connectors (v1)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    API for managing lifecycle of connectors. Operations currently supported are Pause and Resume.
  name: Lifecycle (v1)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    API for requesting the status of a connector or the tasks of a connector.
  name: Status (v1)
- description: |-
    [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

    API for managing connector plugins.
  name: Plugins (v1)
- description: |
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `Entitlement` objects represent metadata about a marketplace entitlement.

    An entitlement includes metadata about a marketplace purchase
    (start date, end date, billing information, partner IDs, etc).
    The API allows partners to create, read, and list entitlements. (Unless you
    need entitlement creation and customer registration to be separate,
    we recommend using the Signup API to create an organization and entitlement
    at the same time)

    The API only allows authorized partners to interact with the Entitlements API.
  name: Entitlements (partner/v2)
- description: |
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `Organizations` objects represent an entire Confluent Cloud organization.
    Partners are allowed to get an organization they have signed up or
    list all organizations they have signed up.
  name: Organizations (partner/v2)
- description: |
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `Signup` APIs can only be performed by partners.
  name: Signup (partner/v2)
paths:
  /v2/environments:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all environments.
      operationId: listV2Environments
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2.EnvironmentList'
          description: Environment.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: List of Environments
      tags:
      - Environments (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/v2/environments?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/environments?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/environments?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/v2/environments?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/environments?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/environments?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/environments?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to create an environment.
      operationId: createV2Environment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2.Environment'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2.Environment'
          description: An Environment was created.
          headers:
            Location:
              description: Environment resource uri
              explode: false
              schema:
                example: https://api.confluent.cloud/v2/environments/{id}
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: 'The request would exceed the quota: kafka_clusters_per_environment'
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: https://api.confluent.cloud/{object}/{id}
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Create an Environment
      tags:
      - Environments (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/v2/environments \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"prod-finance01"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"prod-finance01\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/environments")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/environments\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"prod-finance01\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"prod-finance01\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/v2/environments", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/environments",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({display_name: 'prod-finance01'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/environments");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"prod-finance01\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/environments");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"prod-finance01\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Cloud v2
  /v2/environments/{id}:
    delete:
      description: |
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to delete an environment.

        If successful, this request will also recursively delete all of the environment's associated resources,
        including all Kafka clusters, connectors, etc.
      operationId: deleteV2Environment
      parameters:
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An Environment is being deleted.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Delete an Environment
      tags:
      - Environments (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/v2/environments/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/environments/{id}")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/environments/{id}\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/v2/environments/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/environments/{id}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/environments/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/environments/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read an environment.
      operationId: getV2Environment
      parameters:
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2.Environment'
          description: Environment.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Read an Environment
      tags:
      - Environments (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/v2/environments/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/environments/{id}")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/environments/{id}\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/v2/environments/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/environments/{id}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/environments/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/environments/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to update an environment.

      operationId: updateV2Environment
      parameters:
      - description: The unique identifier for the environment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2.Environment'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2.Environment'
          description: Environment.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: 'The request would exceed the quota: kafka_clusters_per_environment'
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Update an Environment
      tags:
      - Environments (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url 'https://api.confluent.cloud/v2/environments/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"prod-finance01"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"prod-finance01\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/environments/{id}")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/environments/{id}\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"prod-finance01\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"prod-finance01\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/v2/environments/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/environments/{id}",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({display_name: 'prod-finance01'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/environments/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"prod-finance01\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/environments/{id}");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"prod-finance01\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Cloud v2
  /v2/users:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all users.
      operationId: listV2Users
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2.UserList'
          description: User.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: List of Users
      tags:
      - Users (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/v2/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/v2/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/users?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Cloud v2
  /v2/users/{id}:
    delete:
      description: |
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to delete a user.

        If successful, this request will also recursively delete all of the user's associated resources,
        including its cloud and cluster API keys.
      operationId: deleteV2User
      parameters:
      - description: The unique identifier for the user.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A User is being deleted.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Delete a User
      tags:
      - Users (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/v2/users/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/users/{id}")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/users/{id}\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/v2/users/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/users/{id}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/users/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/users/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read a user.
      operationId: getV2User
      parameters:
      - description: The unique identifier for the user.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/v2.User'
                - required:
                  - api_version
                  - email
                  - id
                  - kind
                  - metadata
                  type: object
          description: User.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Read a User
      tags:
      - Users (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/v2/users/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/users/{id}")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/users/{id}\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/v2/users/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/users/{id}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/users/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/users/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to update a user.

      operationId: updateV2User
      parameters:
      - description: The unique identifier for the user.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2.User'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/v2.User'
                - required:
                  - api_version
                  - email
                  - id
                  - kind
                  - metadata
                  type: object
          description: User.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: 'The request would exceed the quota: kafka_clusters_per_environment'
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Update a User
      tags:
      - Users (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url 'https://api.confluent.cloud/v2/users/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"email":"marty.mcfly@example.com","given_name":"Marty","family_name":"McFly"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"email\":\"marty.mcfly@example.com\",\"given_name\":\"Marty\",\"family_name\":\"McFly\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/users/{id}")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/users/{id}\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"marty.mcfly@example.com\\\
          \",\\\"given_name\\\":\\\"Marty\\\",\\\"family_name\\\":\\\"McFly\\\"}\"\
          )\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"email\":\"marty.mcfly@example.com\",\"given_name\":\"Marty\",\"family_name\":\"McFly\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/v2/users/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/users/{id}",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({email: 'marty.mcfly@example.com', given_name: 'Marty', family_name: 'McFly'}));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/users/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"email\":\"marty.mcfly@example.com\",\"given_name\":\"Marty\",\"family_name\":\"McFly\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/users/{id}");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"email\":\"marty.mcfly@example.com\",\"given_name\":\"Marty\",\"family_name\":\"McFly\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Cloud v2
  /v2/service-accounts:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all service accounts.
      operationId: listV2ServiceAccounts
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2.ServiceAccountList'
          description: Service Account.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: List of Service Accounts
      tags:
      - Service Accounts (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/v2/service-accounts?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/service-accounts?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/service-accounts?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/v2/service-accounts?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/service-accounts?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/service-accounts?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/service-accounts?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to create a service account.
      operationId: createV2ServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/v2.ServiceAccount'
              - required:
                - display_name
                type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/v2.ServiceAccount'
                - required:
                  - display_name
                  type: object
          description: A Service Account was created.
          headers:
            Location:
              description: ServiceAccount resource uri
              explode: false
              schema:
                example: https://api.confluent.cloud/v2/service-accounts/{id}
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: 'The request would exceed the quota: kafka_clusters_per_environment'
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: https://api.confluent.cloud/{object}/{id}
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Create a Service Account
      tags:
      - Service Accounts (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/v2/service-accounts \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"DeLorean_auto_repair","description":"Doc'\''s repair bot for the DeLorean"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/service-accounts")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/service-accounts\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"DeLorean_auto_repair\\\
          \",\\\"description\\\":\\\"Doc's repair bot for the DeLorean\\\"}\")\n\n\
          \treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/v2/service-accounts", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/service-accounts",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'DeLorean_auto_repair',
            description: 'Doc\'s repair bot for the DeLorean'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/service-accounts");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/service-accounts");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Cloud v2
  /v2/service-accounts/{id}:
    delete:
      description: |
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to delete a service account.

        If successful, this request will also recursively delete all of the service account's associated resources,
        including its cloud and cluster API keys.
      operationId: deleteV2ServiceAccount
      parameters:
      - description: The unique identifier for the service account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: A Service Account is being deleted.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Delete a Service Account
      tags:
      - Service Accounts (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url 'https://api.confluent.cloud/v2/service-accounts/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/service-accounts/{id}")
            .delete(null)
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/service-accounts/{id}\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/v2/service-accounts/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "DELETE",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/service-accounts/{id}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/service-accounts/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/service-accounts/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read a service account.
      operationId: getV2ServiceAccount
      parameters:
      - description: The unique identifier for the service account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/v2.ServiceAccount'
                - required:
                  - display_name
                  type: object
          description: Service Account.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Read a Service Account
      tags:
      - Service Accounts (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/v2/service-accounts/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/service-accounts/{id}")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/service-accounts/{id}\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/v2/service-accounts/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/service-accounts/{id}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/service-accounts/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/service-accounts/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    patch:
      description: |+
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Cloud v2](https://img.shields.io/badge/-Request%20Access%20To%20Cloud%20v2-%23bc8540)](mailto:ccloud-api-access+v2-early-access@confluent.io?subject=Request%20to%20join%20v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to update a service account.

      operationId: updateV2ServiceAccount
      parameters:
      - description: The unique identifier for the service account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2.ServiceAccount'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/v2.ServiceAccount'
                - required:
                  - display_name
                  type: object
          description: Service Account.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "402":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "402"
                  code: quota_exceeded
                  title: Kafka Clusters Per Org Quota Exceeded
                  detail: 'The request would exceed the quota: kafka_clusters_per_environment'
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request would exceed one or more quotas.
          x-summary: Over Quota
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Update a Service Account
      tags:
      - Service Accounts (v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Cloud v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request PATCH \
            --url 'https://api.confluent.cloud/v2/service-accounts/{id}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"display_name":"DeLorean_auto_repair","description":"Doc'\''s repair bot for the DeLorean"}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/v2/service-accounts/{id}")
            .patch(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/v2/service-accounts/{id}\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"DeLorean_auto_repair\\\
          \",\\\"description\\\":\\\"Doc's repair bot for the DeLorean\\\"}\")\n\n\
          \treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/v2/service-accounts/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "PATCH",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/v2/service-accounts/{id}",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            display_name: 'DeLorean_auto_repair',
            description: 'Doc\'s repair bot for the DeLorean'
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/v2/service-accounts/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/v2/service-accounts/{id}");
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          request.AddParameter("application/json", "{\"display_name\":\"DeLorean_auto_repair\",\"description\":\"Doc's repair bot for the DeLorean\"}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Cloud v2
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve a list of "names" of the active connectors. You can then make a [read request](#operation/readConnectv1Connector) for a specific connector by name.
      operationId: listConnectv1Connectors
      parameters:
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - MyGcsLogsBucketConnector
              schema:
                description: List of connector names
                items:
                  description: Connector name
                  type: string
                type: array
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: List of Connectors
      tags:
      - Connectors (v1)
      x-lifecycle-stage: General Availability
    post:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create a new connector. Returns the new connector information if successful.
      operationId: createConnectv1Connector
      parameters:
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            example:
              name: MyGcsLogsBucketConnector
              config:
                connector.class: GcsSink
                data.format: BYTES
                flush.size: "1000"
                gcs.bucket.name: APILogsBucket
                gcs.credentials.config: '****************'
                kafka.api.key: '****************'
                kafka.api.secret: '****************'
                name: MyGcsLogsBucketConnector
                tasks.max: "2"
                time.interval: DAILY
                topics: APILogsTopic
            schema:
              properties:
                name:
                  description: Name of the connector to create.
                  type: string
                config:
                  additionalProperties:
                    description: Other configuration parameters for the connector.
                      All values should be strings. See the connector's docs for details.
                    type: string
                  description: Configuration parameters for the connector. All values
                    should be strings.
                  properties:
                    connector.class:
                      description: The connector class name. E.g. BigQuerySink, GcsSink,
                        etc.
                      type: string
                    name:
                      description: Name or alias of the class (plugin) for this connector.
                      type: string
                    kafka.api.key:
                      description: The kafka cluster api key.
                      type: string
                    kafka.api.secret:
                      description: The kafka cluster api secret key.
                      type: string
                  required:
                  - connector.class
                  - kafka.api.key
                  - kafka.api.secret
                  - name
                  type: object
              type: object
      responses:
        "201":
          content:
            application/json:
              example:
                name: MyGcsLogsBucketConnector
                config:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "1000"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "1"
                  time.interval: DAILY
                  topics: APILogsTopic
                tasks:
                - connector: MyGcsLogsBucketConnector
                  task: 0
                type: sink
              schema:
                $ref: '#/components/schemas/connect.v1.Connector'
          description: Created
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/inline_response_400'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Failed to find any class that implements Connector and which
                  name matches io.confluent.connect.<connector-class>...
              schema:
                $ref: '#/components/schemas/inline_response_500'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Create a Connector
      tags:
      - Connectors (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/config:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get the configuration for the connector.
      operationId: getConnectv1ConnectorConfig
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                cloud.environment: prod
                cloud.provider: aws
                connector.class: GcsSink
                data.format: BYTES
                flush.size: "1000"
                gcs.bucket.name: APILogsBucket
                gcs.credentials.config: '****************'
                kafka.api.key: '****************'
                kafka.api.secret: '****************'
                kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                kafka.region: us-west-2
                name: MyGcsLogsBucketConnector
                tasks.max: "2"
                time.interval: DAILY
                topics: APILogsTopic
              schema:
                additionalProperties:
                  description: Other configuration parameters for the connector. See
                    the connector's docs for the list of options.
                  type: string
                description: Configuration parameters for the connector.
                properties:
                  cloud.environment:
                    description: The cloud environment type.
                    enum:
                    - private
                    - devel
                    - stag
                    - prod
                    type: string
                  cloud.provider:
                    description: The cloud service provider, e.g. aws, azure, etc.
                    type: string
                    x-extensible-enum:
                    - aws
                    - azure
                    - gcp
                  connector.class:
                    description: The connector class name. E.g. BigQuerySink, GcsSink,
                      etc.
                    type: string
                  name:
                    description: Name or alias of the class (plugin) for this connector.
                    type: string
                  kafka.endpoint:
                    description: The kafka cluster endpoint.
                    type: string
                  kafka.region:
                    description: The kafka cluster region.
                    type: string
                  kafka.api.key:
                    description: The kafka cluster api key.
                    type: string
                  kafka.api.secret:
                    description: The kafka cluster api secret key.
                    type: string
                required:
                - cloud.environment
                - cloud.provider
                - connector.class
                - kafka.api.key
                - kafka.api.secret
                - kafka.endpoint
                - kafka.region
                - name
                type: object
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Read a Connector Configuration
      tags:
      - Connectors (v1)
      x-lifecycle-stage: General Availability
    put:
      description: Create a new connector using the given configuration, or update
        the configuration for an existing connector. Returns information about the
        connector after the change has been made.
      operationId: createOrUpdateConnectv1ConnectorConfig
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              connector.class: GcsSink
              data.format: BYTES
              flush.size: "1000"
              gcs.bucket.name: APILogsBucket
              gcs.credentials.config: '****************'
              kafka.api.key: '****************'
              kafka.api.secret: '****************'
              name: MyGcsLogsBucketConnector
              tasks.max: "2"
              time.interval: DAILY
              topics: APILogsTopic
            schema:
              additionalProperties:
                description: Other configuration parameters for the connector. All
                  values should be strings. See the connector's docs for details.
                type: string
              description: Configuration parameters for the connector.
              properties:
                connector.class:
                  description: The connector class name. E.g. BigQuerySink, GcsSink,
                    etc.
                  type: string
                name:
                  description: Name or alias of the class (plugin) for this connector.
                  type: string
                kafka.api.key:
                  description: The kafka cluster api key.
                  type: string
                kafka.api.secret:
                  description: The kafka cluster api secret key.
                  type: string
              required:
              - connector.class
              - kafka.api.key
              - kafka.api.secret
              - name
              type: object
        description: Configuration parameters for the connector. All values should
          be strings.
      responses:
        "201":
          content:
            application/json:
              example:
                name: MyGcsLogsBucketConnector
                config:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "1000"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "2"
                  time.interval: DAILY
                  topics: APILogsTopic
                tasks:
                - connector: MyGcsLogsBucketConnector
                  task: 0
                - connector: MyGcsLogsBucketConnector
                  task: 1
                type: sink
              schema:
                $ref: '#/components/schemas/connect.v1.Connector'
          description: Created
        "400":
          content:
            application/json:
              example:
                error:
                  code: 400
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error_code: 500
                message: Failed to find any class that implements Connector and which
                  name matches io.confluent.connect.<connector-class>...
              schema:
                $ref: '#/components/schemas/inline_response_500'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Create or Update a Connector Configuration
      tags:
      - Connectors (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}:
    delete:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete a connector. Halts all tasks and deletes the connector configuration.
      operationId: deleteConnectv1Connector
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                error: null
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: OK
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Delete a Connector
      tags:
      - Connectors (v1)
      x-lifecycle-stage: General Availability
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get information about the connector.
      operationId: readConnectv1Connector
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                name: MyGcsLogsBucketConnector
                config:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "1000"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "1"
                  time.interval: DAILY
                  topics: APILogsTopic
                tasks:
                - connector: MyGcsLogsBucketConnector
                  task: 0
                type: sink
              schema:
                $ref: '#/components/schemas/connect.v1.Connector'
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Read a Connector
      tags:
      - Connectors (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/pause:
    put:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Pause the connector and its tasks. Stops message processing until the connector is resumed. This call is asynchronous and the tasks will not transition to PAUSED state at the same time.
      operationId: pauseConnectv1Connector
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Accepted
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Pause a Connector
      tags:
      - Lifecycle (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/resume:
    put:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Resume a paused connector or do nothing if the connector is not paused. This call is asynchronous and the tasks will not transition to RUNNING state at the same time.
      operationId: resumeConnectv1Connector
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Accepted
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Resume a Connector
      tags:
      - Lifecycle (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/status:
    get:
      description: Get current status of the connector. This includes whether it is
        running, failed, or paused. Also includes which worker it is assigned to,
        error information if it has failed, and the state of all its tasks.
      operationId: readConnectv1ConnectorStatus
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                name: MyGcsLogsBucketConnector
                connector:
                  state: PROVISIONING
                  worker_id: MyGcsLogsBucketConnector
                  trace: ""
                tasks: []
                type: source
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Connector.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Read a Connector Status
      tags:
      - Status (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/tasks:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get a list of tasks currently running for the connector.
      operationId: listConnectv1ConnectorTasks
      parameters:
      - description: The unique name of the connector.
        explode: false
        in: path
        name: connector_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - id:
                  connector: MyGcsLogsBucketConnector
                  task: 2
                config:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "1000"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "2"
                  time.interval: DAILY
                  topics: APILogsTopic
              schema:
                $ref: '#/components/schemas/connect.v1.Connectors'
          description: Connector Task.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: account not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: List of Connector Tasks
      tags:
      - Status (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connector-plugins:
    get:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return a list of connector plugins installed in the Kafka Connect cluster.
      operationId: listConnectv1ConnectorPlugins
      parameters:
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - class: BigQuerySink
                type: sink
              - class: KinesisSource
                type: source
                version: 0.1.0
              - class: PostgresSource
                type: source
                version: 0.1.0
              - class: S3_SINK
                type: sink
              - class: GcsSink
                type: sink
                version: 0.2.0
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_2'
                type: array
          description: Connector Plugin.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: List of Connector Plugins
      tags:
      - Plugins (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connector-plugins/{plugin_name}/config/validate:
    put:
      description: |-
        [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Validate the provided configuration values against the configuration definition. This API performs per config validation and returns suggested values and validation error messages.
      operationId: validateConnectv1ConnectorPlugin
      parameters:
      - description: The unique name of the connector plugin.
        explode: false
        in: path
        name: plugin_name
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the environment this resource belongs
          to.
        explode: false
        in: path
        name: environment_id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the Kafka cluster.
        explode: false
        in: path
        name: kafka_cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              GCS_connector_invalid_body:
                value:
                  cloud.environment: prod
                  cloud.provider: aws
                  connector.class: GcsSink
                  data.format: BYTES
                  flush.size: "500"
                  gcs.bucket.name: APILogsBucket
                  gcs.credentials.config: '****************'
                  kafka.api.key: '****************'
                  kafka.api.secret: '****************'
                  kafka.endpoint: SASL_SSL://pkc-xxxxx.us-west-2.aws.confluent.cloud:9092
                  kafka.region: us-west-2
                  name: MyGcsLogsBucketConnector
                  tasks.max: "2"
                  time.interval: DAILY
                  topics: APILogsTopic
            schema:
              additionalProperties:
                description: Other configuration parameters for the connector. All
                  values should be strings. See the connector's docs for the list
                  of options.
                type: string
              description: Configuration parameters for the connector. All values
                should be strings.
              type: object
        description: Configuration parameters for the connector. All values should
          be strings.
      responses:
        "200":
          content:
            application/json:
              example:
                name: io.confluent.connect.gcs.GcsSinkConnector
                groups:
                - Organize my data by...
                - Which topics do you want to get data from?
                - Messages
                - How should we connect to your data?
                - Google Cloud Storage details
                - Kafka Cluster credentials
                - Number of tasks for this connector
                error_count: 1
                configs:
                - definition:
                    name: name
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Sets a name for your connector.
                    group: How should we connect to your data?
                    width: NONE
                    display_name: Connector name
                    dependents: []
                    order: 2
                    alias: ""
                  value:
                    name: name
                    value: '{{.logicalClusterId}}'
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: connector.class
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: ""
                    group: How should we connect to your data?
                    width: NONE
                    display_name: Connector class
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: connector.class
                    value: io.confluent.connect.gcs.GcsSinkConnector
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: kafka.api.key
                    type: PASSWORD
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: ""
                    group: Kafka Cluster credentials
                    width: NONE
                    display_name: Kafka API Key
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: kafka.api.key
                    value: ""
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: kafka.api.secret
                    type: PASSWORD
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: ""
                    group: Kafka Cluster credentials
                    width: NONE
                    display_name: Kafka API Secret
                    dependents:
                    - kafka.api.key
                    order: 2
                    alias: ""
                  value:
                    name: kafka.api.secret
                    value: ""
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: topics
                    type: LIST
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Identifies the topic name or a comma-separated
                      list of topic names.
                    group: Which topics do you want to get data from?
                    width: NONE
                    display_name: Topic names
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: topics
                    value: test1
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: data.format
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Sets the input/output message format. Valid entries
                      are AVRO, JSON, or BYTES
                    group: Messages
                    width: NONE
                    display_name: Message format
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: data.format
                    value: BYTES
                    recommended_values:
                    - BYTES
                    - JSON
                    - AVRO
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: gcs.credentials.config
                    type: PASSWORD
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Contents of the downloaded GCP service account
                      JSON file.
                    group: Google Cloud Storage details
                    width: NONE
                    display_name: Google Cloud Storage credentials.
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: gcs.credentials.config
                    value: ""
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: gcs.bucket.name
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: A Google Cloud Storage bucket must be in the same
                      region as your Confluent Cloud cluster.
                    group: Google Cloud Storage details
                    width: NONE
                    display_name: Bucket name.
                    dependents: []
                    order: 2
                    alias: ""
                  value:
                    name: gcs.bucket.name
                    value: gmagare
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: time.interval
                    type: STRING
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: Sets how your messages grouped in storage. Valid
                      entries are DAILY or HOURLY.
                    group: Organize my data by...
                    width: NONE
                    display_name: Time interval
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: time.interval
                    value: DAILY
                    recommended_values:
                    - DAILY
                    - HOURLY
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: tasks.max
                    type: INT
                    required: true
                    default_value: ""
                    importance: HIGH
                    documentation: ""
                    group: Number of tasks for this connector
                    width: NONE
                    display_name: Tasks
                    dependents: []
                    order: 1
                    alias: ""
                  value:
                    name: tasks.max
                    value: "1"
                    recommended_values: []
                    errors: []
                    visible: true
                  metadata: {}
                - definition:
                    name: flush.size
                    type: INT
                    required: true
                    default_value: "1000"
                    importance: HIGH
                    documentation: This value defaults to 1000. For example, if you
                      use the default setting of 1000 and your topic has six partitions,
                      files start to be created in the storage bucket after more than
                      1000 records exist in each partition. Note that the default
                      value of 1000 can be increased if needed.
                    group: Organize my data by...
                    width: NONE
                    display_name: Flush size
                    dependents: []
                    order: 2
                    alias: ""
                  value:
                    name: flush.size
                    value: "1"
                    recommended_values: []
                    errors:
                    - '"flush.size" should be greater than or equal to 1000'
                    visible: true
                  metadata: {}
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Connector Plugin.
        "401":
          content:
            application/json:
              example:
                error:
                  code: 401
                  message: Unauthorized
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Unauthorized
        "404":
          content:
            application/json:
              example:
                error:
                  code: 404
                  message: resource not found
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                error:
                  code: 500
                  message: Oops, something went wrong
              schema:
                $ref: '#/components/schemas/connect.v1.ConnectorError'
          description: Internal Server Error
      security:
      - api-key: []
      summary: Validate a Connector Plugin
      tags:
      - Plugins (v1)
      x-lifecycle-stage: General Availability
    x-lifecycle-stage: General Availability
  /partner/v2/entitlements:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all entitlements.
      operationId: listPartnerV2Entitlements
      parameters:
      - description: Filter the results by exact match for organization.id.
        example: b3a17773-05cc-4431-9560-433fb4613da8
        explode: true
        in: query
        name: organization.id
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partner.v2.EntitlementList'
          description: Entitlement.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - oauth:
        - partner:describe
      summary: List of Entitlements
      tags:
      - Entitlements (partner/v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements?organization.id=SOME_STRING_VALUE&page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
    post:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to create an entitlement.
      operationId: createPartnerV2Entitlement
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/partner.v2.Entitlement'
              - required:
                - external_id
                - name
                - plan_id
                - product_id
                type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/partner.v2.Entitlement'
                - required:
                  - external_id
                  - name
                  - plan_id
                  - product_id
                  type: object
          description: An Entitlement was created.
          headers:
            Location:
              description: Entitlement resource uri
              explode: false
              schema:
                example: https://api.confluent.cloud/partner/v2/entitlements/{id}
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: https://api.confluent.cloud/{object}/{id}
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - oauth:
        - partner:create
      summary: Create an Entitlement
      tags:
      - Entitlements (partner/v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url https://api.confluent.cloud/partner/v2/entitlements \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"external_id":"1111-2222-3333-4444","name":"Acme Prod Entitlement","plan_id":"confluent-cloud-payg-prod","product_id":"confluent-cloud-kafka-service-azure","usage_reporting_id":"1111-2222-3333-4444","resource_id":"1111-2222-3333-4444","organization":{"related":"string"}}'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"related\":\"string\"}}");
          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements")
            .post(body)
            .addHeader("content-type", "application/json")
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"external_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"name\\\":\\\"Acme Prod Entitlement\\\",\\\"plan_id\\\":\\\"confluent-cloud-payg-prod\\\
          \",\\\"product_id\\\":\\\"confluent-cloud-kafka-service-azure\\\",\\\"usage_reporting_id\\\
          \":\\\"1111-2222-3333-4444\\\",\\\"resource_id\\\":\\\"1111-2222-3333-4444\\\
          \",\\\"organization\\\":{\\\"related\\\":\\\"string\\\"}}\")\n\n\treq, _\
          \ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          payload = "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"related\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Bearer REPLACE_BEARER_TOKEN"
              }

          conn.request("POST", "/partner/v2/entitlements", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "POST",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements",
            "headers": {
              "content-type": "application/json",
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.write(JSON.stringify({
            external_id: '1111-2222-3333-4444',
            name: 'Acme Prod Entitlement',
            plan_id: 'confluent-cloud-payg-prod',
            product_id: 'confluent-cloud-kafka-service-azure',
            usage_reporting_id: '1111-2222-3333-4444',
            resource_id: '1111-2222-3333-4444',
            organization: {related: 'string'}
          }));
          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "content-type: application/json");
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"related\":\"string\"}}");

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          request.AddParameter("application/json", "{\"external_id\":\"1111-2222-3333-4444\",\"name\":\"Acme Prod Entitlement\",\"plan_id\":\"confluent-cloud-payg-prod\",\"product_id\":\"confluent-cloud-kafka-service-azure\",\"usage_reporting_id\":\"1111-2222-3333-4444\",\"resource_id\":\"1111-2222-3333-4444\",\"organization\":{\"related\":\"string\"}}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Partner v2
  /partner/v2/entitlements/{id}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read an entitlement.
      operationId: getPartnerV2Entitlement
      parameters:
      - description: Scope the operation to the given organization.id.
        example: b3a17773-05cc-4431-9560-433fb4613da8
        explode: true
        in: query
        name: organization.id
        required: false
        schema:
          $ref: '#/components/schemas/SearchFilter'
        style: form
      - description: The unique identifier for the entitlement.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/partner.v2.Entitlement'
                - required:
                  - external_id
                  - name
                  - plan_id
                  - product_id
                  type: object
          description: Entitlement.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - oauth:
        - partner:describe
      summary: Read an Entitlement
      tags:
      - Entitlements (partner/v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/entitlements/{id}?organization.id=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Partner v2
  /partner/v2/organizations/{id}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read an organization.
      operationId: getPartnerV2Organization
      parameters:
      - description: The unique identifier for the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/partner.v2.Organization'
                - required:
                  - api_version
                  - id
                  - kind
                  - metadata
                  type: object
          description: Organization.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - oauth:
        - marketplace::describe
      summary: Read an Organization
      tags:
      - Organizations (partner/v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/organizations/{id}' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/organizations/{id}")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/organizations/{id}\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/organizations/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/organizations/{id}",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/organizations/{id}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/organizations/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Partner v2
  /partner/v2/organizations:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all organizations.
      operationId: listPartnerV2Organizations
      parameters:
      - description: A pagination size for collection requests.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 10
          maximum: 100
          type: integer
          x-max-page-items: 500
        style: form
      - description: An opaque pagination token for collection requests.
        explode: true
        in: query
        name: page_token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partner.v2.OrganizationList'
          description: Organization.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - oauth:
        - marketplace::describe
      summary: List of Organizations
      tags:
      - Organizations (partner/v2)
      x-lifecycle-stage: Early Access
      x-request-access-name: Partner v2
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE")
            .get()
            .addHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

          conn.request("GET", "/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE",
            "headers": {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Bearer REPLACE_BEARER_TOKEN");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/partner/v2/organizations?page_size=SOME_INTEGER_VALUE&page_token=SOME_STRING_VALUE");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Partner v2
  /partner/v2/signup:
    post:
      description: "[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\
        \ [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\
        \nCreate an organization for a customer. You must pass in either an entitlement\
        \ object reference (a url to \na previously created entitlement) or entitlement\
        \ details. If you pass in an entitlement object reference, we will link with\
        \ the \ncreated entitlement. If you pass in the entitlement details, we will\
        \ create the entitlement with the organization \nin a single transaction.\
        \ If you pass in user details (email, given name, and family name), we will\n\
        create a user as well. If you do not pass in user details, you MUST call `/partner/v2/signup/activate`\n\
        with user details to complete signup."
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerSignupRequest'
        description: A JSON object containing signup information
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerSignupResponse'
          description: Successful signup.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: https://api.confluent.cloud/{object}/{id}
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - oauth:
        - partner:create
      summary: Signup an Organization on behalf of a Customer
      tags:
      - Signup (partner/v2)
      x-lifecycle-stage: Early Access
  /partner/v2/signup/activate:
    post:
      description: "[![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\
        \ [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)\n\
        \nCreates a user in the organization previously created in `/partner/v2/signup`.\
        \ This completes the signup\nprocess if you did not pass in user details to\
        \ `/partner/v2/signup`. Calling this endpoint if the signup \nprocess has\
        \ been completed will result in a `409 Conflict` error."
      operationId: activateSignup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivatePartnerSignupRequest'
        description: A JSON object containing signup information
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerSignupResponse'
          description: Successful signup activation. User is being created.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "409":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "409"
                  code: resource_already_exists
                  title: Resource Already exists
                  detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                    exists.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request is in conflict with the current server state
          headers:
            Location:
              description: Resource URI of conflicting resource
              explode: false
              schema:
                example: https://api.confluent.cloud/{object}/{id}
                format: uri
                type: string
              style: simple
          x-summary: Conflict
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - oauth:
        - partner:create
      summary: Activate an Incomplete Signup
      tags:
      - Signup (partner/v2)
      x-lifecycle-stage: Early Access
    x-lifecycle-stage: Early Access
components:
  requestBodies:
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
  responses:
    BadRequestError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "400"
              code: invalid_filter
              title: Invalid Filter
              detail: The 'delorean' resource can't be filtered by 'num_doors'
              source:
                parameter: num_doors
          schema:
            $ref: '#/components/schemas/Failure'
      description: Bad Request
    UnauthenticatedError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "401"
              code: user_unauthenticated
              title: Authentication Required
              detail: Valid authentication credentials must be provided
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request lacks valid authentication credentials for this resource.
      headers:
        WWW-Authenticate:
          description: The unique identifier for the API request.
          example: Basic error="invalid_key", error_description="The API Key is invalid"
          explode: false
          schema:
            type: string
          style: simple
      x-summary: Unauthorized
    OverQuotaError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "402"
              code: quota_exceeded
              title: Kafka Clusters Per Org Quota Exceeded
              detail: 'The request would exceed the quota: kafka_clusters_per_environment'
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request would exceed one or more quotas.
      x-summary: Over Quota
    UnauthorizedError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "403"
              code: user_unauthorized
              title: User Access Unauthorized
              detail: The user 'mcfly' is not allowed to access the 'delorean' resource
                without the 'plutonium' role.
          schema:
            $ref: '#/components/schemas/Failure'
      description: The access credentials were considered insufficient to grant access
      x-summary: Forbidden
    ConflictError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "409"
              code: resource_already_exists
              title: Resource Already exists
              detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                exists.
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request is in conflict with the current server state
      headers:
        Location:
          description: Resource URI of conflicting resource
          explode: false
          schema:
            example: https://api.confluent.cloud/{object}/{id}
            format: uri
            type: string
          style: simple
      x-summary: Conflict
    NotFoundError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "404"
              title: Not Found
          schema:
            $ref: '#/components/schemas/Failure'
      description: Not Found
    RateLimitError:
      description: Rate Limit Exceeded
    DefaultSystemError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "500"
              code: out_of_gas
              title: DeLorean Out Of Gas
              detail: The DeLorean has run out of gas, but Doc Brown will fill 'er
                up for you asap
          schema:
            $ref: '#/components/schemas/Failure'
      description: Oops, something went wrong!
    connect.v1.UnauthenticatedError:
      content:
        application/json:
          example:
            error:
              code: 401
              message: Unauthorized
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Unauthorized
    connect.v1.AccountNotFoundError:
      content:
        application/json:
          example:
            error:
              code: 404
              message: account not found
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Not Found
    connect.v1.ResourceNotFoundError:
      content:
        application/json:
          example:
            error:
              code: 404
              message: resource not found
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Not Found
    connect.v1.DefaultSystemError:
      content:
        application/json:
          example:
            error:
              code: 500
              message: Oops, something went wrong
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Internal Server Error
    connect.v1.BadRequestError:
      content:
        application/json:
          example:
            error:
              code: 400
              message: Bad Request
          schema:
            $ref: '#/components/schemas/connect.v1.ConnectorError'
      description: Bad Request
    connect.v1.OK:
      content:
        application/json:
          example:
            error: null
          schema:
            $ref: '#/components/schemas/inline_response_200'
      description: OK
  schemas:
    v2.Environment:
      additionalProperties: false
      description: '`Environment` objects represent an isolated namespace for your
        Confluent resources'
      example:
        metadata:
          updated_at: 2006-01-02T15:04:05-07:00
          self: https://api.confluent.cloud/v2/kafka-clusters/lkc-f3a90de
          created_at: 2006-01-02T15:04:05-07:00
          resource_name: crn://confluent.cloud/kafka=lkc-f3a90de
          deleted_at: 2006-01-02T15:04:05-07:00
        kind: Environment
        id: dlz-f3a90de
        api_version: v2
        display_name: prod-finance01
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Environment
          readOnly: true
          type: string
        id:
          description: ID is the "natural identifier" for an object within its scope/namespace;
            it is normally unique across time but not space. That is, you can assume
            that the ID will not be reclaimed and reused after an object is deleted
            ("time"); however, it may collide with IDs for other object `kinds` or
            objects of the same `kind` within a different scope/namespace ("space").
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        display_name:
          description: A human-readable name for the Environment
          example: prod-finance01
          type: string
      type: object
    v2.EnvironmentList:
      additionalProperties: false
      description: '`Environment` objects represent an isolated namespace for your
        Confluent resources'
      example:
        metadata:
          next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          total_size: 123
          first: https://api.confluent.cloud/v2/resourcekinds
        data:
        - ""
        - ""
        kind: EnvironmentList
        api_version: v2
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - EnvironmentList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ListMeta'
        data:
          items:
            allOf:
            - $ref: '#/components/schemas/v2.Environment'
            - required:
              - id
              - metadata
              type: object
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    ObjectMeta:
      description: ObjectMeta is metadata that all persisted resources must have,
        which includes all objects users must create.
      example:
        updated_at: 2006-01-02T15:04:05-07:00
        self: https://api.confluent.cloud/v2/kafka-clusters/lkc-f3a90de
        created_at: 2006-01-02T15:04:05-07:00
        resource_name: crn://confluent.cloud/kafka=lkc-f3a90de
        deleted_at: 2006-01-02T15:04:05-07:00
      properties:
        self:
          description: Self is a Uniform Resource Locator (URL) at which an object
            can be addressed. This URL encodes the service location, API version,
            and other particulars necessary to locate the resource at a point in time
          example: https://api.confluent.cloud/v2/kafka-clusters/lkc-f3a90de
          format: uri-reference
          readOnly: true
          type: string
        resource_name:
          description: Resource Name is a Uniform Resource Identifier (URI) that is
            globally unique across space and time. It is represented as a Confluent
            Resource Name
          example: crn://confluent.cloud/kafka=lkc-f3a90de
          format: uri
          readOnly: true
          type: string
        created_at:
          description: The date and time at which this object was created. It is represented
            in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          description: The date and time at which this object was last updated. It
            is represented in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
        deleted_at:
          description: The date and time at which this object was (or will be) deleted.
            It is represented in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
      readOnly: true
      required:
      - self
    ListMeta:
      description: ListMeta describes metadata that resource collections may have
      example:
        next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
        last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
        prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
        total_size: 123
        first: https://api.confluent.cloud/v2/resourcekinds
      properties:
        first:
          description: A link to the first page of results. If a response does not
            contain a first link, then direct navigation to the first page is not
            supported.
          example: https://api.confluent.cloud/v2/resourcekinds
          format: uri-reference
          nullable: true
          type: string
        last:
          description: A link to the last page of results. If a response does not
            contain a last link, then direct navigation to the last page is not supported.
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          format: uri-reference
          nullable: true
          type: string
        prev:
          description: A link to the previous page of results. If a response does
            not contain a prev link, then either there is no previous data or backwards
            traversal through the result set is not supported.
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          format: uri-reference
          nullable: true
          type: string
        next:
          description: A link to the next page of results. If a response does not
            contain a next link, then there is no more data available.
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          format: uri-reference
          nullable: true
          type: string
        total_size:
          example: 123
          minimum: 0
          type: integer
      type: object
    ObjectReference:
      description: ObjectReference provides information for you to locate the referred
        object
      properties:
        related:
          description: URL for accessing or modifying the referred object
          format: uri-reference
          type: string
      type: object
    Failure:
      description: Provides information about problems encountered while performing
        an operation.
      properties:
        errors:
          items:
            $ref: '#/components/schemas/Error'
          type: array
          uniqueItems: true
      required:
      - errors
      type: object
    Error:
      additionalProperties: false
      description: Describes a particular error encountered while performing an operation.
      properties:
        id:
          description: A unique identifier for this particular occurrence of the problem.
          type: string
        status:
          description: The HTTP status code applicable to this problem, expressed
            as a string value.
          type: string
        code:
          description: An application-specific error code, expressed as a string value.
          type: string
        title:
          description: A short, human-readable summary of the problem. It **SHOULD
            NOT** change from occurrence to occurrence of the problem, except for
            purposes of localization.
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        source:
          $ref: '#/components/schemas/Error_source'
      type: object
    v2.User:
      additionalProperties: false
      description: '`User` objects represent individuals who may access your Confluent
        resources.'
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - User
          readOnly: true
          type: string
        id:
          description: ID is the "natural identifier" for an object within its scope/namespace;
            it is normally unique across time but not space. That is, you can assume
            that the ID will not be reclaimed and reused after an object is deleted
            ("time"); however, it may collide with IDs for other object `kinds` or
            objects of the same `kind` within a different scope/namespace ("space").
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        email:
          description: The user's email address
          example: marty.mcfly@example.com
          format: email
          type: string
          x-immutable: true
        given_name:
          description: The user's given name
          example: Marty
          type: string
        family_name:
          description: The user's family name
          example: McFly
          type: string
      type: object
    v2.ServiceAccount:
      additionalProperties: false
      description: '`ServiceAccount` something'
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ServiceAccount
          readOnly: true
          type: string
        id:
          description: ID is the "natural identifier" for an object within its scope/namespace;
            it is normally unique across time but not space. That is, you can assume
            that the ID will not be reclaimed and reused after an object is deleted
            ("time"); however, it may collide with IDs for other object `kinds` or
            objects of the same `kind` within a different scope/namespace ("space").
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        display_name:
          description: A human-readable name for the Service Account
          example: DeLorean_auto_repair
          type: string
          x-immutable: true
        description:
          description: A free-form description of the Service Account
          example: Doc's repair bot for the DeLorean
          type: string
      type: object
    v2.UserList:
      additionalProperties: false
      description: '`User` objects represent individuals who may access your Confluent
        resources.'
      example:
        metadata:
          next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          total_size: 123
          first: https://api.confluent.cloud/v2/resourcekinds
        data:
        - ""
        - ""
        kind: UserList
        api_version: v2
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - UserList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ListMeta'
        data:
          items:
            allOf:
            - $ref: '#/components/schemas/v2.User'
            - required:
              - email
              - id
              - metadata
              type: object
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    v2.ServiceAccountList:
      additionalProperties: false
      description: '`ServiceAccount` something'
      example:
        metadata:
          next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          total_size: 123
          first: https://api.confluent.cloud/v2/resourcekinds
        data:
        - ""
        - ""
        kind: ServiceAccountList
        api_version: v2
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - ServiceAccountList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ListMeta'
        data:
          items:
            allOf:
            - $ref: '#/components/schemas/v2.ServiceAccount'
            - required:
              - display_name
              - id
              - metadata
              type: object
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    connect.v1.ConnectorError:
      properties:
        error:
          $ref: '#/components/schemas/connect_v1_ConnectorError_error'
      type: object
    connect.v1.Connector:
      example:
        name: name
        type: sink
        config:
          key: config
        tasks:
        - task: 0
          connector: connector
        - task: 0
          connector: connector
      properties:
        name:
          description: Name of the connector
          type: string
        config:
          additionalProperties:
            type: string
          description: "Configuration parameters for the connector. These configurations\n\
            are the minimum set of key-value pairs (KVP) which can be used to \ndefine\
            \ how the connector connects Kafka to the external system.\nSome of these\
            \ KVPs are common to all the connectors, such as \nconnection parameters\
            \ to Kafka, connector metadata, etc. The list\nof common connector configurations\
            \ is as follows\n\n- cloud.environment\n- cloud.provider\n- connector.class\n\
            - kafka.api.key\n- kafka.api.secret\n- kafka.endpoint\n- kafka.region\n\
            - name\n\nA specific connector such as `GcsSink` would have additional\n\
            parameters such as `gcs.bucket.name`, `flush.size`, etc."
          properties:
            cloud.environment:
              description: The cloud environment type.
              enum:
              - private
              - devel
              - stag
              - prod
              type: string
            cloud.provider:
              description: The cloud service provider, e.g. aws, azure, etc.
              type: string
              x-extensible-enum:
              - aws
              - azure
              - gcp
            connector.class:
              description: The connector class name. E.g. BigQuerySink, GcsSink, etc.
              type: string
            name:
              description: Name or alias of the class (plugin) for this connector.
              type: string
            kafka.endpoint:
              description: The kafka cluster endpoint.
              type: string
            kafka.region:
              description: The kafka cluster region.
              type: string
            kafka.api.key:
              description: The kafka cluster api key.
              type: string
            kafka.api.secret:
              description: The kafka cluster api secret key.
              type: string
          required:
          - cloud.environment
          - cloud.provider
          - connector.class
          - kafka.api.key
          - kafka.api.secret
          - kafka.endpoint
          - kafka.region
          - name
          type: object
        tasks:
          description: List of active tasks generated by the connector
          items:
            $ref: '#/components/schemas/connect_v1_Connector_tasks'
          type: array
        type:
          description: Type of connector, sink or source
          enum:
          - sink
          - source
          type: string
      required:
      - config
      - name
      type: object
    connect.v1.Connectors:
      description: List of active task configs that have been created by the connector
      items:
        properties:
          id:
            description: The ID of task
            properties:
              connector:
                description: The name of the connector the task belongs to
                type: string
              task:
                description: Task ID within the connector
                type: integer
            type: object
          config:
            additionalProperties:
              type: string
            description: "Configuration parameters for the connector. These configurations\n\
              are the minimum set of key-value pairs (KVP) which can be used to \n\
              define how the connector connects Kafka to the external system.\nSome\
              \ of these KVPs are common to all the connectors, such as \nconnection\
              \ parameters to Kafka, connector metadata, etc. The list\nof common\
              \ connector configurations is as follows\n\n  - cloud.environment\n\
              \  - cloud.provider\n  - connector.class\n  - kafka.api.key\n  - kafka.api.secret\n\
              \  - kafka.endpoint\n  - kafka.region\n  - name\n\nA specific connector\
              \ such as `GcsSink` would have additional\nparameters such as `gcs.bucket.name`,\
              \ `flush.size`, etc."
            properties:
              cloud.environment:
                description: The cloud environment type.
                enum:
                - private
                - devel
                - stag
                - prod
                type: string
              cloud.provider:
                description: The cloud service provider, e.g. aws, azure, etc.
                type: string
                x-extensible-enum:
                - aws
                - azure
                - gcp
              connector.class:
                description: The connector class name. E.g. BigQuerySink, GcsSink,
                  etc.
                type: string
              name:
                description: Name or alias of the class (plugin) for this connector.
                type: string
              kafka.endpoint:
                description: The kafka cluster endpoint.
                type: string
              kafka.region:
                description: The kafka cluster region.
                type: string
              kafka.api.key:
                description: The kafka cluster api key.
                type: string
              kafka.api.secret:
                description: The kafka cluster api secret key.
                type: string
            required:
            - cloud.environment
            - cloud.provider
            - connector.class
            - kafka.api.key
            - kafka.api.secret
            - kafka.endpoint
            - kafka.region
            - name
            type: object
        type: object
      type: array
    partner.v2.Entitlement:
      additionalProperties: false
      description: '`Entitlement` objects represent metadata about a marketplace entitlement.'
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - partner/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Entitlement
          readOnly: true
          type: string
        id:
          description: ID is the "natural identifier" for an object within its scope/namespace;
            it is normally unique across time but not space. That is, you can assume
            that the ID will not be reclaimed and reused after an object is deleted
            ("time"); however, it may collide with IDs for other object `kinds` or
            objects of the same `kind` within a different scope/namespace ("space").
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        external_id:
          description: The unique external ID of the entitlement (this should be unique
            to customer)
          example: 1111-2222-3333-4444
          type: string
        name:
          description: The name of the entitlement
          example: Acme Prod Entitlement
          type: string
        plan_id:
          description: The plan ID the entitlement
          example: confluent-cloud-payg-prod
          type: string
          x-extensible-enum:
          - confluent-cloud-payg-prod
          - payg-prod.gcpmarketplace.confluent.cloud
        product_id:
          description: The product ID of the entitlement
          example: confluent-cloud-kafka-service-azure
          type: string
          x-extensible-enum:
          - confluent-cloud-kafka-service-azure
          - confluent-cloud-for-apache-kafka
          - payg-prod.gcpmarketplace.confluent.cloud
        usage_reporting_id:
          description: |
            The usage reporting ID of the entitlement (if usage reporting uses
            a different ID, otherwise, same as external_id)
          example: 1111-2222-3333-4444
          type: string
        resource_id:
          description: The resource ID of the entitlement
          example: 1111-2222-3333-4444
          type: string
        organization:
          allOf:
          - $ref: '#/components/schemas/ObjectReference'
          - required:
            - related
          description: The organization associated with this object.
      type: object
    SearchFilter:
      description: Filter a collection by a string search
      type: string
    partner.v2.EntitlementList:
      additionalProperties: false
      description: '`Entitlement` objects represent metadata about a marketplace entitlement.'
      example:
        metadata:
          next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          total_size: 123
          first: https://api.confluent.cloud/v2/resourcekinds
        data:
        - ""
        - ""
        kind: EntitlementList
        api_version: partner/v2
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - partner/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - EntitlementList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ListMeta'
        data:
          items:
            allOf:
            - $ref: '#/components/schemas/partner.v2.Entitlement'
            - required:
              - external_id
              - id
              - metadata
              - name
              - plan_id
              - product_id
              type: object
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    partner.v2.Organization:
      additionalProperties: false
      description: '`Organizations` objects represent an entire Confluent Cloud organization.'
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - partner/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - Organization
          readOnly: true
          type: string
        id:
          description: ID is the "natural identifier" for an object within its scope/namespace;
            it is normally unique across time but not space. That is, you can assume
            that the ID will not be reclaimed and reused after an object is deleted
            ("time"); however, it may collide with IDs for other object `kinds` or
            objects of the same `kind` within a different scope/namespace ("space").
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        name:
          description: The name of the organization
          example: Acme Organization
          pattern: ^[^<>#%'*^`{|}~\"]{1,31}$
          type: string
        sso_url:
          description: The login URL for the customer to access Confluent Cloud
          example: https://confluent.cloud/login/sso/AzureAD-OIDC-Conn
          format: uri
          readOnly: true
          type: string
        sso_config:
          discriminator:
            propertyName: kind
          oneOf:
          - $ref: '#/components/schemas/AzureSSOConfig'
          x-oneOf-name: PartnerV2OrganizationSsoConfigOneOf
      type: object
    AzureSSOConfig:
      properties:
        kind:
          example: AzureSSOConfig
          type: string
        tenant_id:
          description: The Azure AD tenant ID
          example: b3a17773-05cc-4431-9560-433fb4613da8
          type: string
      required:
      - kind
      - tenant_id
      type: object
    partner.v2.OrganizationList:
      additionalProperties: false
      description: '`Organizations` objects represent an entire Confluent Cloud organization.'
      example:
        metadata:
          next: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          last: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          prev: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          total_size: 123
          first: https://api.confluent.cloud/v2/resourcekinds
        data:
        - ""
        - ""
        kind: OrganizationList
        api_version: partner/v2
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - partner/v2
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - OrganizationList
          readOnly: true
          type: string
        metadata:
          $ref: '#/components/schemas/ListMeta'
        data:
          items:
            allOf:
            - $ref: '#/components/schemas/partner.v2.Organization'
            - required:
              - id
              - metadata
              type: object
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    PartnerSignupRequest:
      additionalProperties: false
      description: The partner signup request
      example:
        organization: ""
        entitlement: ""
        user: ""
      properties:
        organization:
          allOf:
          - $ref: '#/components/schemas/partner.v2.Organization'
          - required:
            - name
            - sso_config
        user:
          allOf:
          - $ref: '#/components/schemas/v2.User'
          - required:
            - email
            - family_name
            - given_name
        entitlement:
          oneOf:
          - allOf:
            - $ref: '#/components/schemas/partner.v2.Entitlement'
            - required:
              - external_id
              - name
              - plan_id
              - product_id
          - allOf:
            - $ref: '#/components/schemas/ObjectReference'
            - required:
              - related
          x-oneOf-name: PartnerSignupRequestEntitlementOneOf
      required:
      - entitlement
      - organization
      type: object
    PartnerSignupResponse:
      additionalProperties: false
      description: The partner signup response
      example:
        organization_id: b3a17773-05cc-4431-9560-433fb4613da8
        sso_url: https://confluent.cloud/login/sso/AzureAD-OIDC-Conn
      properties:
        organization_id:
          description: The ID of the organization
          example: b3a17773-05cc-4431-9560-433fb4613da8
          type: string
        sso_url:
          description: The login URL for the customer to access Confluent Cloud
          example: https://confluent.cloud/login/sso/AzureAD-OIDC-Conn
          format: uri
          type: string
      required:
      - organization_id
      - sso_url
      type: object
    ActivatePartnerSignupRequest:
      additionalProperties: false
      description: The partner signup activation request
      example:
        organization_id: b3a17773-05cc-4431-9560-433fb4613da8
        user: ""
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/v2.User'
          - required:
            - email
            - family_name
            - given_name
        organization_id:
          description: The ID of the organization
          example: b3a17773-05cc-4431-9560-433fb4613da8
          type: string
      required:
      - organization_id
      - user
      type: object
    inline_object:
      properties:
        name:
          description: Name of the connector to create.
          type: string
        config:
          additionalProperties:
            description: Other configuration parameters for the connector. All values
              should be strings. See the connector's docs for details.
            type: string
          description: Configuration parameters for the connector. All values should
            be strings.
          properties:
            connector.class:
              description: The connector class name. E.g. BigQuerySink, GcsSink, etc.
              type: string
            name:
              description: Name or alias of the class (plugin) for this connector.
              type: string
            kafka.api.key:
              description: The kafka cluster api key.
              type: string
            kafka.api.secret:
              description: The kafka cluster api secret key.
              type: string
          required:
          - connector.class
          - kafka.api.key
          - kafka.api.secret
          - name
          type: object
      type: object
    inline_response_400:
      properties:
        code:
          type: integer
        message:
          type: string
    inline_response_500:
      properties:
        error_code:
          type: integer
        message:
          type: string
    inline_response_200:
      example:
        error: '{}'
      properties:
        error:
          nullable: true
          type: object
    inline_response_200_1_connector:
      description: The map containing connector status.
      example:
        trace: trace
        state: NONE
        worker_id: worker_id
      properties:
        state:
          description: The state of the connector.
          enum:
          - NONE
          - PROVISIONING
          - RUNNING
          - DEGRADED
          - FAILED
          - PAUSED
          - DELETED
          type: string
        worker_id:
          description: The worker ID of the connector.
          type: string
        trace:
          description: The exception name in case of error.
          type: string
      required:
      - state
      - worker_id
    inline_response_200_1_tasks:
      example:
        msg: msg
        id: 0
        state: state
        worker_id: worker_id
      properties:
        id:
          description: The ID of task.
          type: integer
        state:
          description: The state of the connector.
          type: string
        worker_id:
          description: The worker ID of the connector.
          type: string
        msg:
          type: string
      required:
      - id
      - state
      - worker_id
    inline_response_200_1:
      example:
        connector:
          trace: trace
          state: NONE
          worker_id: worker_id
        name: name
        type: sink
        tasks:
        - msg: msg
          id: 0
          state: state
          worker_id: worker_id
        - msg: msg
          id: 0
          state: state
          worker_id: worker_id
      properties:
        name:
          description: The name of the connector.
          type: string
        type:
          description: Type of connector, sink or source.
          enum:
          - sink
          - source
          type: string
        connector:
          $ref: '#/components/schemas/inline_response_200_1_connector'
        tasks:
          description: The map containing the task status.
          items:
            $ref: '#/components/schemas/inline_response_200_1_tasks'
          type: array
      required:
      - connector
      - name
      - type
    inline_response_200_2:
      example:
        type: sink
        class: class
        version: version
      properties:
        class:
          description: The connector class name. E.g. BigQuerySink.
          type: string
        type:
          description: Type of connector, sink or source.
          enum:
          - sink
          - source
          type: string
        version:
          description: The version string for the connector available.
          type: string
      required:
      - class
      - type
    inline_response_200_3_definition:
      description: The definition for a config in the connector plugin, which includes
        the name, type, importance, etc.
      example:
        importance: NONE
        documentation: documentation
        name: name
        width: NONE
        alias: alias
        default_value: default_value
        dependents:
        - dependents
        - dependents
        type: NONE
        display_name: display_name
        required: true
        group: group
        order: 6
      properties:
        name:
          description: The name of the configuration
          type: string
        type:
          description: The config types
          enum:
          - NONE
          - BOOLEAN
          - INT
          - SHORT
          - LONG
          - DOUBLE
          - STRING
          - LIST
          - ENUM
          - PASSWORD
          type: string
        required:
          description: Whether this configuration is required
          type: boolean
        default_value:
          description: Default value for this configuration
          type: string
        importance:
          description: The importance level for a configuration
          enum:
          - NONE
          - HIGH
          - MEDIUM
          - LOW
          type: string
        documentation:
          description: The documentation for the configuration
          type: string
        group:
          description: The UI group to which the configuration belongs to
          type: string
        width:
          description: The width of a configuration value
          enum:
          - NONE
          - SHORT
          - MEDIUM
          - LONG
          type: string
        display_name:
          type: string
        dependents:
          description: Other configurations on which this configuration is dependent
          items:
            type: string
          type: array
        order:
          description: The order of configuration in specified group
          type: integer
        alias:
          type: string
    inline_response_200_3_value:
      description: The current value for a config, which includes the name, value,
        recommended values, etc.
      example:
        recommended_values:
        - recommended_values
        - recommended_values
        visible: true
        name: name
        value: value
        errors:
        - errors
        - errors
      properties:
        name:
          description: The name of the configuration
          type: string
        value:
          description: The value for the configuration
          type: string
        recommended_values:
          description: The list of valid values for the configuration
          items:
            type: string
          type: array
        errors:
          description: Errors, if any, in the configuration value
          items:
            type: string
          type: array
        visible:
          description: |-
            The visibility of the configuration. Based on the values of other configuration
            fields, this visibility boolean value points out if the current field should be
            visible or not.
          type: boolean
    inline_response_200_3_configs:
      example:
        metadata: '{}'
        definition:
          importance: NONE
          documentation: documentation
          name: name
          width: NONE
          alias: alias
          default_value: default_value
          dependents:
          - dependents
          - dependents
          type: NONE
          display_name: display_name
          required: true
          group: group
          order: 6
        value:
          recommended_values:
          - recommended_values
          - recommended_values
          visible: true
          name: name
          value: value
          errors:
          - errors
          - errors
      properties:
        definition:
          $ref: '#/components/schemas/inline_response_200_3_definition'
        value:
          $ref: '#/components/schemas/inline_response_200_3_value'
        metadata:
          description: |-
            Map of metadata details about the connector configuration, such as type of
            input, etc.
          type: object
    inline_response_200_3:
      example:
        configs:
        - metadata: '{}'
          definition:
            importance: NONE
            documentation: documentation
            name: name
            width: NONE
            alias: alias
            default_value: default_value
            dependents:
            - dependents
            - dependents
            type: NONE
            display_name: display_name
            required: true
            group: group
            order: 6
          value:
            recommended_values:
            - recommended_values
            - recommended_values
            visible: true
            name: name
            value: value
            errors:
            - errors
            - errors
        - metadata: '{}'
          definition:
            importance: NONE
            documentation: documentation
            name: name
            width: NONE
            alias: alias
            default_value: default_value
            dependents:
            - dependents
            - dependents
            type: NONE
            display_name: display_name
            required: true
            group: group
            order: 6
          value:
            recommended_values:
            - recommended_values
            - recommended_values
            visible: true
            name: name
            value: value
            errors:
            - errors
            - errors
        name: name
        groups:
        - groups
        - groups
        error_count: 0
      properties:
        name:
          description: The class name of the connector plugin.
          type: string
        groups:
          description: The list of groups used in configuration definitions.
          items:
            type: string
          type: array
        error_count:
          description: The total number of errors encountered during configuration
            validation.
          type: integer
        configs:
          items:
            $ref: '#/components/schemas/inline_response_200_3_configs'
          type: array
    Error_source:
      properties:
        pointer:
          description: A JSON Pointer [RFC6901] to the associated entity in the request
            document [e.g. "/data" for a primary data object, or "/data/attributes/title"
            for a specific attribute].
          type: string
        parameter:
          description: A string indicating which query parameter caused the error.
          type: string
    connect_v1_ConnectorError_error:
      properties:
        code:
          description: Error code for the type of error
          type: integer
        message:
          description: Human readable error message
          type: string
    connect_v1_Connector_tasks:
      example:
        task: 0
        connector: connector
      properties:
        connector:
          description: The name of the connector the task belongs to
          type: string
        task:
          description: Task ID within the connector
          type: integer
      required:
      - connector
      - task
  securitySchemes:
    api-key:
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API
        Key ID as the username and API Key Secret as the password.
      scheme: basic
      type: http
    oauth:
      description: Authenticate with OAuth 2.0. Currently this is only supported for
        partner APIs.
      flows:
        clientCredentials:
          scopes:
            partner:alter: enables partners to alter entitlements
            partner:create: enables partners to create entitlements and signup on
              behalf of customers
            partner:delete: enables partners to delete entitlements and organizations
            partner:describe: enables partners to read and list entitlements and organizations
          tokenUrl: /oauth2/token
      type: oauth2
x-tagGroups:
- name: Core API (v2)
  tags:
  - Environments (v2)
  - Users (v2)
  - Service Accounts (v2)
- name: Connect API (v1)
  tags:
  - Connectors (v1)
  - Lifecycle (v1)
  - Status (v1)
  - Plugins (v1)
- name: Partner API (v2)
  tags:
  - Entitlements (partner/v2)
  - Organizations (partner/v2)
  - Signup (partner/v2)
