// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Identity & Access Management API - Internal Structs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha0
Contact: paas-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// IamV2AuthorizeRequestPrincipalContext context related to principal
type IamV2AuthorizeRequestPrincipalContext struct {
	PrincipalIds *[]string `json:"principal_ids,omitempty"`
}

// NewIamV2AuthorizeRequestPrincipalContext instantiates a new IamV2AuthorizeRequestPrincipalContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamV2AuthorizeRequestPrincipalContext() *IamV2AuthorizeRequestPrincipalContext {
	this := IamV2AuthorizeRequestPrincipalContext{}
	return &this
}

// NewIamV2AuthorizeRequestPrincipalContextWithDefaults instantiates a new IamV2AuthorizeRequestPrincipalContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamV2AuthorizeRequestPrincipalContextWithDefaults() *IamV2AuthorizeRequestPrincipalContext {
	this := IamV2AuthorizeRequestPrincipalContext{}
	return &this
}

// GetPrincipalIds returns the PrincipalIds field value if set, zero value otherwise.
func (o *IamV2AuthorizeRequestPrincipalContext) GetPrincipalIds() []string {
	if o == nil || o.PrincipalIds == nil {
		var ret []string
		return ret
	}
	return *o.PrincipalIds
}

// GetPrincipalIdsOk returns a tuple with the PrincipalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2AuthorizeRequestPrincipalContext) GetPrincipalIdsOk() (*[]string, bool) {
	if o == nil || o.PrincipalIds == nil {
		return nil, false
	}
	return o.PrincipalIds, true
}

// HasPrincipalIds returns a boolean if a field has been set.
func (o *IamV2AuthorizeRequestPrincipalContext) HasPrincipalIds() bool {
	if o != nil && o.PrincipalIds != nil {
		return true
	}

	return false
}

// SetPrincipalIds gets a reference to the given []string and assigns it to the PrincipalIds field.
func (o *IamV2AuthorizeRequestPrincipalContext) SetPrincipalIds(v []string) {
	o.PrincipalIds = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *IamV2AuthorizeRequestPrincipalContext) Redact() {
	o.recurseRedact(o.PrincipalIds)
}

func (o *IamV2AuthorizeRequestPrincipalContext) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o IamV2AuthorizeRequestPrincipalContext) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o IamV2AuthorizeRequestPrincipalContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrincipalIds != nil {
		toSerialize["principal_ids"] = o.PrincipalIds
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableIamV2AuthorizeRequestPrincipalContext struct {
	value *IamV2AuthorizeRequestPrincipalContext
	isSet bool
}

func (v NullableIamV2AuthorizeRequestPrincipalContext) Get() *IamV2AuthorizeRequestPrincipalContext {
	return v.value
}

func (v *NullableIamV2AuthorizeRequestPrincipalContext) Set(val *IamV2AuthorizeRequestPrincipalContext) {
	v.value = val
	v.isSet = true
}

func (v NullableIamV2AuthorizeRequestPrincipalContext) IsSet() bool {
	return v.isSet
}

func (v *NullableIamV2AuthorizeRequestPrincipalContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamV2AuthorizeRequestPrincipalContext(val *IamV2AuthorizeRequestPrincipalContext) *NullableIamV2AuthorizeRequestPrincipalContext {
	return &NullableIamV2AuthorizeRequestPrincipalContext{value: val, isSet: true}
}

func (v NullableIamV2AuthorizeRequestPrincipalContext) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableIamV2AuthorizeRequestPrincipalContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
