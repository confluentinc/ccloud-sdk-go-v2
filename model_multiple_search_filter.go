/*
 * Network API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1-alpha1
 * Contact: cire-traffic@confluent.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccloud

import (
	"encoding/json"
)

// MultipleSearchFilter Filter a collection by a string search for one or more values
type MultipleSearchFilter struct {
	Items []string
}

// NewMultipleSearchFilter instantiates a new MultipleSearchFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleSearchFilter() *MultipleSearchFilter {
	this := MultipleSearchFilter{}
	return &this
}

// NewMultipleSearchFilterWithDefaults instantiates a new MultipleSearchFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleSearchFilterWithDefaults() *MultipleSearchFilter {
	this := MultipleSearchFilter{}
	return &this
}

func (o MultipleSearchFilter) MarshalJSON() ([]byte, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return json.Marshal(toSerialize)
}

func (o *MultipleSearchFilter) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableMultipleSearchFilter struct {
	value *MultipleSearchFilter
	isSet bool
}

func (v NullableMultipleSearchFilter) Get() *MultipleSearchFilter {
	return v.value
}

func (v *NullableMultipleSearchFilter) Set(val *MultipleSearchFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleSearchFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleSearchFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleSearchFilter(val *MultipleSearchFilter) *NullableMultipleSearchFilter {
	return &NullableMultipleSearchFilter{value: val, isSet: true}
}

func (v NullableMultipleSearchFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleSearchFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


