/*
 * Discovery API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1-alpha0
 * Contact: api-framework-team@confluent.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// MetaV1GroupVersion `GroupVersion` contains the API \"group/version\", \"group\", and \"version\" string for an API
type MetaV1GroupVersion struct {
	// Specifies the API group and version in the form \"group/version\"
	ApiVersion string `json:"api_version"`
	// Specifies the API group name. This removes the need for API clients to split group_version manually.
	Group string `json:"group"`
	// Specifies the API version. This removes the need for API clients to split group_version manually.
	Version string `json:"version"`
}

// NewMetaV1GroupVersion instantiates a new MetaV1GroupVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaV1GroupVersion(apiVersion string, group string, version string) *MetaV1GroupVersion {
	this := MetaV1GroupVersion{}
	this.ApiVersion = apiVersion
	this.Group = group
	this.Version = version
	return &this
}

// NewMetaV1GroupVersionWithDefaults instantiates a new MetaV1GroupVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaV1GroupVersionWithDefaults() *MetaV1GroupVersion {
	this := MetaV1GroupVersion{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *MetaV1GroupVersion) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *MetaV1GroupVersion) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *MetaV1GroupVersion) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetGroup returns the Group field value
func (o *MetaV1GroupVersion) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *MetaV1GroupVersion) GetGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *MetaV1GroupVersion) SetGroup(v string) {
	o.Group = v
}

// GetVersion returns the Version field value
func (o *MetaV1GroupVersion) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *MetaV1GroupVersion) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *MetaV1GroupVersion) SetVersion(v string) {
	o.Version = v
}

func (o MetaV1GroupVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["api_version"] = o.ApiVersion
	}
	if true {
		toSerialize["group"] = o.Group
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableMetaV1GroupVersion struct {
	value *MetaV1GroupVersion
	isSet bool
}

func (v NullableMetaV1GroupVersion) Get() *MetaV1GroupVersion {
	return v.value
}

func (v *NullableMetaV1GroupVersion) Set(val *MetaV1GroupVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaV1GroupVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaV1GroupVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaV1GroupVersion(val *MetaV1GroupVersion) *NullableMetaV1GroupVersion {
	return &NullableMetaV1GroupVersion{value: val, isSet: true}
}

func (v NullableMetaV1GroupVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaV1GroupVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


