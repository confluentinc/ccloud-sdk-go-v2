openapi: 3.0.0
info:
  contact:
    email: api-framework-team@confluent.io
    name: API Foundations Team
    url: https://confluent.slack.com/app_redirect?channel=apif-eng
  title: Discovery API
  version: 0.0.1-alpha0
  x-api-id: 7e461871-20e6-482d-9805-0f825ae2fd59
  x-api-group: meta/v1
  x-audience: external-public
  x-tag-group: Discovery API (%s)
servers:
- description: Confluent Cloud production
  url: https://api.confluent.cloud
- description: Confluent Cloud staging
  url: https://api.stag.cpdev.cloud
- description: Confluent Cloud development
  url: https://api.devel.cpdev.cloud
tags:
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Discovery v1](https://img.shields.io/badge/-Request%20Access%20To%20Discovery%20v1-%23bc8540)](mailto:ccloud-api-access+meta-v1-early-access@confluent.io?subject=Request%20to%20join%20meta/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20meta/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `APIGroup` objects represent the various APIs supported by Confluent Cloud.


    Related guide: [API Discovery in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).
  name: API Groups (meta/v1)
- description: |-
    [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Discovery v1](https://img.shields.io/badge/-Request%20Access%20To%20Discovery%20v1-%23bc8540)](mailto:ccloud-api-access+meta-v1-early-access@confluent.io?subject=Request%20to%20join%20meta/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20meta/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

    `APIGroup` objects represent the various APIs supported by Confluent Cloud.


    Related guide: [API Discovery in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).
  name: API Resources (meta/v1)
paths:
  /:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Discovery v1](https://img.shields.io/badge/-Request%20Access%20To%20Discovery%20v1-%23bc8540)](mailto:ccloud-api-access+meta-v1-early-access@confluent.io?subject=Request%20to%20join%20meta/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20meta/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all API groups.
      operationId: listMetaV1APIGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meta.v1.APIGroupList'
          description: API Group.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: List of API Groups
      tags:
      - API Groups (meta/v1)
      x-lifecycle-stage: Early Access
      x-request-access-name: Discovery v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url https://api.confluent.cloud/ \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/\"\n\n\t\
          req, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Discovery v1
  /{name}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Discovery v1](https://img.shields.io/badge/-Request%20Access%20To%20Discovery%20v1-%23bc8540)](mailto:ccloud-api-access+meta-v1-early-access@confluent.io?subject=Request%20to%20join%20meta/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20meta/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Make a request to read an API group.
      operationId: getMetaV1APIGroup
      parameters:
      - description: The API Group name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/meta.v1.APIGroup'
                - required:
                  - api_version
                  - id
                  - kind
                  type: object
          description: API Group.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "404":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "404"
                  title: Not Found
              schema:
                $ref: '#/components/schemas/Failure'
          description: Not Found
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: Read an API Group
      tags:
      - API Groups (meta/v1)
      x-lifecycle-stage: Early Access
      x-request-access-name: Discovery v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/{name}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/{name}")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/{name}\"\n\
          \n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/{name}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/{name}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/{name}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/{name}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Discovery v1
  /{group}/{version}:
    get:
      description: |-
        [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Discovery v1](https://img.shields.io/badge/-Request%20Access%20To%20Discovery%20v1-%23bc8540)](mailto:ccloud-api-access+meta-v1-early-access@confluent.io?subject=Request%20to%20join%20meta/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20meta/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

        Retrieve a sorted, filtered, paginated list of all API resources.
      operationId: listMetaV1APIResources
      parameters:
      - description: The Group
        explode: false
        in: path
        name: group
        required: true
        schema:
          type: string
        style: simple
      - description: The Version
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meta.v1.APIResourceList'
          description: API Resource.
        "400":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "400"
                  code: invalid_filter
                  title: Invalid Filter
                  detail: The 'delorean' resource can't be filtered by 'num_doors'
                  source:
                    parameter: num_doors
              schema:
                $ref: '#/components/schemas/Failure'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "401"
                  code: user_unauthenticated
                  title: Authentication Required
                  detail: Valid authentication credentials must be provided
              schema:
                $ref: '#/components/schemas/Failure'
          description: The request lacks valid authentication credentials for this
            resource.
          headers:
            WWW-Authenticate:
              description: The unique identifier for the API request.
              example: Basic error="invalid_key", error_description="The API Key is
                invalid"
              explode: false
              schema:
                type: string
              style: simple
          x-summary: Unauthorized
        "403":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "403"
                  code: user_unauthorized
                  title: User Access Unauthorized
                  detail: The user 'mcfly' is not allowed to access the 'delorean'
                    resource without the 'plutonium' role.
              schema:
                $ref: '#/components/schemas/Failure'
          description: The access credentials were considered insufficient to grant
            access
          x-summary: Forbidden
        "429":
          description: Rate Limit Exceeded
        "500":
          content:
            application/json:
              example:
                errors:
                - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
                  status: "500"
                  code: out_of_gas
                  title: DeLorean Out Of Gas
                  detail: The DeLorean has run out of gas, but Doc Brown will fill
                    'er up for you asap
              schema:
                $ref: '#/components/schemas/Failure'
          description: Oops, something went wrong!
      security:
      - api-key: []
      summary: List of API Resources
      tags:
      - API Resources (meta/v1)
      x-lifecycle-stage: Early Access
      x-request-access-name: Discovery v1
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'https://api.confluent.cloud/{group}/{version}' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          Request request = new Request.Builder()
            .url("https://api.confluent.cloud/{group}/{version}")
            .get()
            .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://api.confluent.cloud/{group}/{version}\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("api.confluent.cloud")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/{group}/{version}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Node
        source: |-
          const http = require("https");

          const options = {
            "method": "GET",
            "hostname": "api.confluent.cloud",
            "port": null,
            "path": "/{group}/{version}",
            "headers": {
              "Authorization": "Basic REPLACE_BASIC_AUTH"
            }
          };

          const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
              chunks.push(chunk);
            });

            res.on("end", function () {
              const body = Buffer.concat(chunks);
              console.log(body.toString());
            });
          });

          req.end();
      - lang: C
        source: |-
          CURL *hnd = curl_easy_init();

          curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
          curl_easy_setopt(hnd, CURLOPT_URL, "https://api.confluent.cloud/{group}/{version}");

          struct curl_slist *headers = NULL;
          headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
          curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

          CURLcode ret = curl_easy_perform(hnd);
      - lang: C#
        source: |-
          var client = new RestClient("https://api.confluent.cloud/{group}/{version}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
          IRestResponse response = client.Execute(request);
    x-lifecycle-stage: Early Access
    x-request-access-name: Discovery v1
components:
  responses:
    BadRequestError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "400"
              code: invalid_filter
              title: Invalid Filter
              detail: The 'delorean' resource can't be filtered by 'num_doors'
              source:
                parameter: num_doors
          schema:
            $ref: '#/components/schemas/Failure'
      description: Bad Request
    UnauthenticatedError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "401"
              code: user_unauthenticated
              title: Authentication Required
              detail: Valid authentication credentials must be provided
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request lacks valid authentication credentials for this resource.
      headers:
        WWW-Authenticate:
          description: The unique identifier for the API request.
          example: Basic error="invalid_key", error_description="The API Key is invalid"
          explode: false
          schema:
            type: string
          style: simple
      x-summary: Unauthorized
    OverQuotaError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "402"
              code: quota_exceeded
              title: Kafka Clusters Per Org Quota Exceeded
              detail: 'The request would exceed the quota: kafka_clusters_per_environment'
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request would exceed one or more quotas.
      x-summary: Over Quota
    UnauthorizedError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "403"
              code: user_unauthorized
              title: User Access Unauthorized
              detail: The user 'mcfly' is not allowed to access the 'delorean' resource
                without the 'plutonium' role.
          schema:
            $ref: '#/components/schemas/Failure'
      description: The access credentials were considered insufficient to grant access
      x-summary: Forbidden
    ConflictError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "409"
              code: resource_already_exists
              title: Resource Already exists
              detail: The entitlement '91e3e86f-fca6-4f14-98f5-a48e64113ce2' already
                exists.
          schema:
            $ref: '#/components/schemas/Failure'
      description: The request is in conflict with the current server state
      headers:
        Location:
          description: Resource URI of conflicting resource
          explode: false
          schema:
            example: https://api.confluent.cloud/{object}/{id}
            format: uri
            type: string
          style: simple
      x-summary: Conflict
    NotFoundError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "404"
              title: Not Found
          schema:
            $ref: '#/components/schemas/Failure'
      description: Not Found
    RateLimitError:
      description: Rate Limit Exceeded
    DefaultSystemError:
      content:
        application/json:
          example:
            errors:
            - id: ed42afdc-f0d5-4c0d-b428-9fc6ed6e279d
              status: "500"
              code: out_of_gas
              title: DeLorean Out Of Gas
              detail: The DeLorean has run out of gas, but Doc Brown will fill 'er
                up for you asap
          schema:
            $ref: '#/components/schemas/Failure'
      description: Oops, something went wrong!
  schemas:
    meta.v1.APIGroup:
      additionalProperties: false
      description: '`APIGroup` objects represent the various APIs supported by Confluent
        Cloud.'
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - meta/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - APIGroup
          readOnly: true
          type: string
        id:
          description: ID is the "natural identifier" for an object within its scope/namespace;
            it is normally unique across time but not space. That is, you can assume
            that the ID will not be reclaimed and reused after an object is deleted
            ("time"); however, it may collide with IDs for other object `kinds` or
            objects of the same `kind` within a different scope/namespace ("space").
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/ObjectMeta'
          - properties:
              self:
                example: https://api.confluent.cloud/v2/kafka-clusters/lkc-f3a90de
        name:
          description: The API Group name
          example: connect
          type: string
        preferredVersion:
          allOf:
          - $ref: '#/components/schemas/meta.v1.GroupVersion'
        versions:
          items:
            $ref: '#/components/schemas/meta.v1.GroupVersion'
          type: array
      type: object
    meta.v1.APIResource:
      additionalProperties: false
      description: '`APIGroup` objects represent the various APIs supported by Confluent
        Cloud.'
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - meta/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - APIResource
          readOnly: true
          type: string
        id:
          description: ID is the "natural identifier" for an object within its scope/namespace;
            it is normally unique across time but not space. That is, you can assume
            that the ID will not be reclaimed and reused after an object is deleted
            ("time"); however, it may collide with IDs for other object `kinds` or
            objects of the same `kind` within a different scope/namespace ("space").
          example: dlz-f3a90de
          readOnly: true
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/ObjectMeta'
          - properties:
              self:
                example: https://api.confluent.cloud/v2/kafka-clusters/lkc-f3a90de
        resource_kind:
          description: The resource kind
          example: Connector
          type: string
        resource_version:
          allOf:
          - $ref: '#/components/schemas/meta.v1.GroupVersion'
        plural_name:
          description: The resource name
          example: connectors
          type: string
        singular_name:
          description: The resource name
          example: connector
          type: string
        verbs:
          description: A list of supported operations for this resource
          example:
          - create
          - get
          - patch
          - delete
          - list
          items:
            type: string
            x-extensible-enum:
            - create
            - get
            - patch
            - delete
            - list
          type: array
        short_names:
          description: A list of suggested short names for the resource
          example:
          - connect
          items:
            type: string
          type: array
      type: object
    meta.v1.GroupVersion:
      description: '`GroupVersion` contains the API "group/version", "group", and
        "version" string for an API'
      properties:
        api_version:
          description: Specifies the API group and version in the form "group/version"
          example: connect/v1
          type: string
        group:
          description: Specifies the API group name. This removes the need for API
            clients to split group_version manually.
          example: connect
          type: string
        version:
          description: Specifies the API version. This removes the need for API clients
            to split group_version manually.
          example: v1
          type: string
      required:
      - api_version
      - group
      - version
      type: object
    meta.v1.APIGroupList:
      additionalProperties: false
      description: '`APIGroup` objects represent the various APIs supported by Confluent
        Cloud.'
      example:
        metadata: ""
        data:
        - ""
        - ""
        kind: APIGroupList
        api_version: meta/v1
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - meta/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - APIGroupList
          readOnly: true
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/ListMeta'
          - properties:
              first:
                example: https://api.confluent.cloud/v2/resourcekinds
              last:
                example: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
              prev:
                example: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
              next:
                example: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
        data:
          items:
            allOf:
            - $ref: '#/components/schemas/meta.v1.APIGroup'
            - required:
              - id
              - metadata
              type: object
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    meta.v1.APIResourceList:
      additionalProperties: false
      description: '`APIGroup` objects represent the various APIs supported by Confluent
        Cloud.'
      example:
        metadata: ""
        data:
        - ""
        - ""
        kind: APIResourceList
        api_version: meta/v1
      properties:
        api_version:
          description: APIVersion defines the schema version of this representation
            of a resource.
          enum:
          - meta/v1
          readOnly: true
          type: string
        kind:
          description: Kind defines the object this REST resource represents.
          enum:
          - APIResourceList
          readOnly: true
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/ListMeta'
          - properties:
              first:
                example: https://api.confluent.cloud/v2/resourcekinds
              last:
                example: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
              prev:
                example: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
              next:
                example: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
        data:
          items:
            allOf:
            - $ref: '#/components/schemas/meta.v1.APIResource'
            - required:
              - id
              - metadata
              type: object
          type: array
          uniqueItems: true
      required:
      - api_version
      - data
      - kind
      - metadata
      type: object
    ObjectMeta:
      description: ObjectMeta is metadata that all persisted resources must have,
        which includes all objects users must create.
      properties:
        self:
          description: Self is a Uniform Resource Locator (URL) at which an object
            can be addressed. This URL encodes the service location, API version,
            and other particulars necessary to locate the resource at a point in time
          example: https://api.confluent.cloud/v2/kafka-clusters/lkc-f3a90de
          format: uri-reference
          readOnly: true
          type: string
        resource_name:
          description: Resource Name is a Uniform Resource Identifier (URI) that is
            globally unique across space and time. It is represented as a Confluent
            Resource Name
          example: crn://confluent.cloud/kafka=lkc-f3a90de
          format: uri
          readOnly: true
          type: string
        created_at:
          description: The date and time at which this object was created. It is represented
            in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          description: The date and time at which this object was last updated. It
            is represented in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
        deleted_at:
          description: The date and time at which this object was (or will be) deleted.
            It is represented in RFC3339 format and is in UTC.
          example: 2006-01-02T15:04:05-07:00
          format: date-time
          readOnly: true
          type: string
      readOnly: true
      required:
      - self
    ListMeta:
      description: ListMeta describes metadata that resource collections may have
      properties:
        first:
          description: A link to the first page of results. If a response does not
            contain a first link, then direct navigation to the first page is not
            supported.
          example: https://api.confluent.cloud/v2/resourcekinds
          format: uri-reference
          nullable: true
          type: string
        last:
          description: A link to the last page of results. If a response does not
            contain a last link, then direct navigation to the last page is not supported.
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=bcAOehAY8F16YD84Z1wT
          format: uri-reference
          nullable: true
          type: string
        prev:
          description: A link to the previous page of results. If a response does
            not contain a prev link, then either there is no previous data or backwards
            traversal through the result set is not supported.
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=YIXRY97wWYmwzrax4dld
          format: uri-reference
          nullable: true
          type: string
        next:
          description: A link to the next page of results. If a response does not
            contain a next link, then there is no more data available.
          example: https://api.confluent.cloud/v2/resourcekinds?page_token=UvmDWOB1iwfAIBPj6EYb
          format: uri-reference
          nullable: true
          type: string
        total_size:
          example: 123
          minimum: 0
          type: integer
      type: object
    ObjectReference:
      description: ObjectReference provides information for you to locate the referred
        object
      properties:
        id:
          description: ID of the referred resource
          minLength: 1
          type: string
        environment:
          description: Environment of the referred resource, if env-scoped
          minLength: 1
          type: string
        related:
          description: API URL for accessing or modifying the referred object
          format: uri-reference
          minLength: 1
          readOnly: true
          type: string
        resource_name:
          description: CRN reference to the referred resource
          format: crn
          minLength: 1
          readOnly: true
          type: string
        api_version:
          description: API group and version of the referred resource
          minLength: 1
          readOnly: true
          type: string
        kind:
          description: Kind of the referred resource
          minLength: 1
          readOnly: true
          type: string
      required:
      - id
      - related
      - resource_name
      type: object
    Failure:
      description: Provides information about problems encountered while performing
        an operation.
      properties:
        errors:
          items:
            $ref: '#/components/schemas/Error'
          type: array
          uniqueItems: true
      required:
      - errors
      type: object
    Error:
      additionalProperties: false
      description: Describes a particular error encountered while performing an operation.
      properties:
        id:
          description: A unique identifier for this particular occurrence of the problem.
          type: string
        status:
          description: The HTTP status code applicable to this problem, expressed
            as a string value.
          type: string
        code:
          description: An application-specific error code, expressed as a string value.
          type: string
        title:
          description: A short, human-readable summary of the problem. It **SHOULD
            NOT** change from occurrence to occurrence of the problem, except for
            purposes of localization.
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        source:
          $ref: '#/components/schemas/Error_source'
      type: object
    Error_source:
      properties:
        pointer:
          description: A JSON Pointer [RFC6901] to the associated entity in the request
            document [e.g. "/spec" for a spec object, or "/spec/title" for a specific
            field].
          type: string
        parameter:
          description: A string indicating which query parameter caused the error.
          type: string
      type: object
  securitySchemes:
    api-key:
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API
        Key ID as the username and API Key Secret as the password.
      scheme: basic
      type: http
