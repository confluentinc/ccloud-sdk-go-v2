// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Certificate Authority Management API

mTLS Public API spec

API version: 0.0.1-alpha1
Contact: cloud-authn-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type CertificateIdentityPoolsIamV2Api interface {

	/*
		CreateIamV2CertificateIdentityPool Create a Certificate Identity Pool

		[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

	Make a request to create a certificate identity pool.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param certificateAuthorityId The Certificate Authority
		 @return ApiCreateIamV2CertificateIdentityPoolRequest
	*/
	CreateIamV2CertificateIdentityPool(ctx _context.Context, certificateAuthorityId string) ApiCreateIamV2CertificateIdentityPoolRequest

	// CreateIamV2CertificateIdentityPoolExecute executes the request
	//  @return IamV2CertificateIdentityPool
	CreateIamV2CertificateIdentityPoolExecute(r ApiCreateIamV2CertificateIdentityPoolRequest) (IamV2CertificateIdentityPool, *_nethttp.Response, error)

	/*
		DeleteIamV2CertificateIdentityPool Delete a Certificate Identity Pool

		[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

	Make a request to delete a certificate identity pool.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param certificateAuthorityId The Certificate Authority
		 @param id The unique identifier for the certificate identity pool.
		 @return ApiDeleteIamV2CertificateIdentityPoolRequest
	*/
	DeleteIamV2CertificateIdentityPool(ctx _context.Context, certificateAuthorityId string, id string) ApiDeleteIamV2CertificateIdentityPoolRequest

	// DeleteIamV2CertificateIdentityPoolExecute executes the request
	//  @return IamV2CertificateIdentityPool
	DeleteIamV2CertificateIdentityPoolExecute(r ApiDeleteIamV2CertificateIdentityPoolRequest) (IamV2CertificateIdentityPool, *_nethttp.Response, error)

	/*
		GetIamV2CertificateIdentityPool Read a Certificate Identity Pool

		[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

	Make a request to read a certificate identity pool.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param certificateAuthorityId The Certificate Authority
		 @param id The unique identifier for the certificate identity pool.
		 @return ApiGetIamV2CertificateIdentityPoolRequest
	*/
	GetIamV2CertificateIdentityPool(ctx _context.Context, certificateAuthorityId string, id string) ApiGetIamV2CertificateIdentityPoolRequest

	// GetIamV2CertificateIdentityPoolExecute executes the request
	//  @return IamV2CertificateIdentityPool
	GetIamV2CertificateIdentityPoolExecute(r ApiGetIamV2CertificateIdentityPoolRequest) (IamV2CertificateIdentityPool, *_nethttp.Response, error)

	/*
		ListIamV2CertificateIdentityPools List of Certificate Identity Pools

		[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

	Retrieve a sorted, filtered, paginated list of all certificate identity pools.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param certificateAuthorityId The Certificate Authority
		 @return ApiListIamV2CertificateIdentityPoolsRequest
	*/
	ListIamV2CertificateIdentityPools(ctx _context.Context, certificateAuthorityId string) ApiListIamV2CertificateIdentityPoolsRequest

	// ListIamV2CertificateIdentityPoolsExecute executes the request
	//  @return IamV2CertificateIdentityPoolList
	ListIamV2CertificateIdentityPoolsExecute(r ApiListIamV2CertificateIdentityPoolsRequest) (IamV2CertificateIdentityPoolList, *_nethttp.Response, error)

	/*
		UpdateIamV2CertificateIdentityPool Update a Certificate Identity Pool

		[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

	Make a request to update a certificate identity pool.



		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param certificateAuthorityId The Certificate Authority
		 @param id The unique identifier for the certificate identity pool.
		 @return ApiUpdateIamV2CertificateIdentityPoolRequest
	*/
	UpdateIamV2CertificateIdentityPool(ctx _context.Context, certificateAuthorityId string, id string) ApiUpdateIamV2CertificateIdentityPoolRequest

	// UpdateIamV2CertificateIdentityPoolExecute executes the request
	//  @return IamV2CertificateIdentityPool
	UpdateIamV2CertificateIdentityPoolExecute(r ApiUpdateIamV2CertificateIdentityPoolRequest) (IamV2CertificateIdentityPool, *_nethttp.Response, error)
}

// CertificateIdentityPoolsIamV2ApiService CertificateIdentityPoolsIamV2Api service
type CertificateIdentityPoolsIamV2ApiService service

type ApiCreateIamV2CertificateIdentityPoolRequest struct {
	ctx                          _context.Context
	ApiService                   CertificateIdentityPoolsIamV2Api
	certificateAuthorityId       string
	assignedResourceOwner        *string
	iamV2CertificateIdentityPool *IamV2CertificateIdentityPool
}

// The resource_id of the principal who will be assigned resource owner on the created certificate identity pool. Principal can be group-mapping (group-xxx),  user (u-xxx), service-account (sa-xxx) or identity-pool (pool-xxx).
func (r ApiCreateIamV2CertificateIdentityPoolRequest) AssignedResourceOwner(assignedResourceOwner string) ApiCreateIamV2CertificateIdentityPoolRequest {
	r.assignedResourceOwner = &assignedResourceOwner
	return r
}
func (r ApiCreateIamV2CertificateIdentityPoolRequest) IamV2CertificateIdentityPool(iamV2CertificateIdentityPool IamV2CertificateIdentityPool) ApiCreateIamV2CertificateIdentityPoolRequest {
	r.iamV2CertificateIdentityPool = &iamV2CertificateIdentityPool
	return r
}

func (r ApiCreateIamV2CertificateIdentityPoolRequest) Execute() (IamV2CertificateIdentityPool, *_nethttp.Response, error) {
	return r.ApiService.CreateIamV2CertificateIdentityPoolExecute(r)
}

/*
CreateIamV2CertificateIdentityPool Create a Certificate Identity Pool

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to create a certificate identity pool.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param certificateAuthorityId The Certificate Authority
	@return ApiCreateIamV2CertificateIdentityPoolRequest
*/
func (a *CertificateIdentityPoolsIamV2ApiService) CreateIamV2CertificateIdentityPool(ctx _context.Context, certificateAuthorityId string) ApiCreateIamV2CertificateIdentityPoolRequest {
	return ApiCreateIamV2CertificateIdentityPoolRequest{
		ApiService:             a,
		ctx:                    ctx,
		certificateAuthorityId: certificateAuthorityId,
	}
}

// Execute executes the request
//
//	@return IamV2CertificateIdentityPool
func (a *CertificateIdentityPoolsIamV2ApiService) CreateIamV2CertificateIdentityPoolExecute(r ApiCreateIamV2CertificateIdentityPoolRequest) (IamV2CertificateIdentityPool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IamV2CertificateIdentityPool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateIdentityPoolsIamV2ApiService.CreateIamV2CertificateIdentityPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/v2/certificate-authorities/{certificate_authority_id}/identity-pools"
	localVarPath = strings.Replace(localVarPath, "{"+"certificate_authority_id"+"}", _neturl.PathEscape(parameterToString(r.certificateAuthorityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.assignedResourceOwner != nil {
		localVarQueryParams.Add("assigned_resource_owner", parameterToString(*r.assignedResourceOwner, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.iamV2CertificateIdentityPool
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteIamV2CertificateIdentityPoolRequest struct {
	ctx                    _context.Context
	ApiService             CertificateIdentityPoolsIamV2Api
	certificateAuthorityId string
	id                     string
}

func (r ApiDeleteIamV2CertificateIdentityPoolRequest) Execute() (IamV2CertificateIdentityPool, *_nethttp.Response, error) {
	return r.ApiService.DeleteIamV2CertificateIdentityPoolExecute(r)
}

/*
DeleteIamV2CertificateIdentityPool Delete a Certificate Identity Pool

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to delete a certificate identity pool.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param certificateAuthorityId The Certificate Authority
	@param id The unique identifier for the certificate identity pool.
	@return ApiDeleteIamV2CertificateIdentityPoolRequest
*/
func (a *CertificateIdentityPoolsIamV2ApiService) DeleteIamV2CertificateIdentityPool(ctx _context.Context, certificateAuthorityId string, id string) ApiDeleteIamV2CertificateIdentityPoolRequest {
	return ApiDeleteIamV2CertificateIdentityPoolRequest{
		ApiService:             a,
		ctx:                    ctx,
		certificateAuthorityId: certificateAuthorityId,
		id:                     id,
	}
}

// Execute executes the request
//
//	@return IamV2CertificateIdentityPool
func (a *CertificateIdentityPoolsIamV2ApiService) DeleteIamV2CertificateIdentityPoolExecute(r ApiDeleteIamV2CertificateIdentityPoolRequest) (IamV2CertificateIdentityPool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IamV2CertificateIdentityPool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateIdentityPoolsIamV2ApiService.DeleteIamV2CertificateIdentityPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/v2/certificate-authorities/{certificate_authority_id}/identity-pools/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"certificate_authority_id"+"}", _neturl.PathEscape(parameterToString(r.certificateAuthorityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetIamV2CertificateIdentityPoolRequest struct {
	ctx                    _context.Context
	ApiService             CertificateIdentityPoolsIamV2Api
	certificateAuthorityId string
	id                     string
}

func (r ApiGetIamV2CertificateIdentityPoolRequest) Execute() (IamV2CertificateIdentityPool, *_nethttp.Response, error) {
	return r.ApiService.GetIamV2CertificateIdentityPoolExecute(r)
}

/*
GetIamV2CertificateIdentityPool Read a Certificate Identity Pool

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to read a certificate identity pool.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param certificateAuthorityId The Certificate Authority
	@param id The unique identifier for the certificate identity pool.
	@return ApiGetIamV2CertificateIdentityPoolRequest
*/
func (a *CertificateIdentityPoolsIamV2ApiService) GetIamV2CertificateIdentityPool(ctx _context.Context, certificateAuthorityId string, id string) ApiGetIamV2CertificateIdentityPoolRequest {
	return ApiGetIamV2CertificateIdentityPoolRequest{
		ApiService:             a,
		ctx:                    ctx,
		certificateAuthorityId: certificateAuthorityId,
		id:                     id,
	}
}

// Execute executes the request
//
//	@return IamV2CertificateIdentityPool
func (a *CertificateIdentityPoolsIamV2ApiService) GetIamV2CertificateIdentityPoolExecute(r ApiGetIamV2CertificateIdentityPoolRequest) (IamV2CertificateIdentityPool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IamV2CertificateIdentityPool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateIdentityPoolsIamV2ApiService.GetIamV2CertificateIdentityPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/v2/certificate-authorities/{certificate_authority_id}/identity-pools/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"certificate_authority_id"+"}", _neturl.PathEscape(parameterToString(r.certificateAuthorityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListIamV2CertificateIdentityPoolsRequest struct {
	ctx                    _context.Context
	ApiService             CertificateIdentityPoolsIamV2Api
	certificateAuthorityId string
	pageSize               *int32
	pageToken              *string
}

// A pagination size for collection requests.
func (r ApiListIamV2CertificateIdentityPoolsRequest) PageSize(pageSize int32) ApiListIamV2CertificateIdentityPoolsRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListIamV2CertificateIdentityPoolsRequest) PageToken(pageToken string) ApiListIamV2CertificateIdentityPoolsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListIamV2CertificateIdentityPoolsRequest) Execute() (IamV2CertificateIdentityPoolList, *_nethttp.Response, error) {
	return r.ApiService.ListIamV2CertificateIdentityPoolsExecute(r)
}

/*
ListIamV2CertificateIdentityPools List of Certificate Identity Pools

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a sorted, filtered, paginated list of all certificate identity pools.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param certificateAuthorityId The Certificate Authority
	@return ApiListIamV2CertificateIdentityPoolsRequest
*/
func (a *CertificateIdentityPoolsIamV2ApiService) ListIamV2CertificateIdentityPools(ctx _context.Context, certificateAuthorityId string) ApiListIamV2CertificateIdentityPoolsRequest {
	return ApiListIamV2CertificateIdentityPoolsRequest{
		ApiService:             a,
		ctx:                    ctx,
		certificateAuthorityId: certificateAuthorityId,
	}
}

// Execute executes the request
//
//	@return IamV2CertificateIdentityPoolList
func (a *CertificateIdentityPoolsIamV2ApiService) ListIamV2CertificateIdentityPoolsExecute(r ApiListIamV2CertificateIdentityPoolsRequest) (IamV2CertificateIdentityPoolList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IamV2CertificateIdentityPoolList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateIdentityPoolsIamV2ApiService.ListIamV2CertificateIdentityPools")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/v2/certificate-authorities/{certificate_authority_id}/identity-pools"
	localVarPath = strings.Replace(localVarPath, "{"+"certificate_authority_id"+"}", _neturl.PathEscape(parameterToString(r.certificateAuthorityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateIamV2CertificateIdentityPoolRequest struct {
	ctx                          _context.Context
	ApiService                   CertificateIdentityPoolsIamV2Api
	certificateAuthorityId       string
	id                           string
	iamV2CertificateIdentityPool *IamV2CertificateIdentityPool
}

func (r ApiUpdateIamV2CertificateIdentityPoolRequest) IamV2CertificateIdentityPool(iamV2CertificateIdentityPool IamV2CertificateIdentityPool) ApiUpdateIamV2CertificateIdentityPoolRequest {
	r.iamV2CertificateIdentityPool = &iamV2CertificateIdentityPool
	return r
}

func (r ApiUpdateIamV2CertificateIdentityPoolRequest) Execute() (IamV2CertificateIdentityPool, *_nethttp.Response, error) {
	return r.ApiService.UpdateIamV2CertificateIdentityPoolExecute(r)
}

/*
UpdateIamV2CertificateIdentityPool Update a Certificate Identity Pool

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Make a request to update a certificate identity pool.

	@param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param certificateAuthorityId The Certificate Authority
	@param id The unique identifier for the certificate identity pool.
	@return ApiUpdateIamV2CertificateIdentityPoolRequest
*/
func (a *CertificateIdentityPoolsIamV2ApiService) UpdateIamV2CertificateIdentityPool(ctx _context.Context, certificateAuthorityId string, id string) ApiUpdateIamV2CertificateIdentityPoolRequest {
	return ApiUpdateIamV2CertificateIdentityPoolRequest{
		ApiService:             a,
		ctx:                    ctx,
		certificateAuthorityId: certificateAuthorityId,
		id:                     id,
	}
}

// Execute executes the request
//
//	@return IamV2CertificateIdentityPool
func (a *CertificateIdentityPoolsIamV2ApiService) UpdateIamV2CertificateIdentityPoolExecute(r ApiUpdateIamV2CertificateIdentityPoolRequest) (IamV2CertificateIdentityPool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IamV2CertificateIdentityPool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateIdentityPoolsIamV2ApiService.UpdateIamV2CertificateIdentityPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/v2/certificate-authorities/{certificate_authority_id}/identity-pools/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"certificate_authority_id"+"}", _neturl.PathEscape(parameterToString(r.certificateAuthorityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.iamV2CertificateIdentityPool
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
