// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Certificate Authority Management API

mTLS Public API spec

API version: 0.0.1-alpha1
Contact: cloud-authn-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// IamV2CertificateAuthority `CertificateAuthority` objects represent signing certificate authorities in Confluent Cloud.  The API allows you to list, create, read, update, and delete your Certificate Authority.
type IamV2CertificateAuthority struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id       *string     `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The human-readable name of the certificate authority.
	DisplayName *string `json:"display_name,omitempty"`
	// A description of the certificate authority.
	Description *string `json:"description,omitempty"`
	// The fingerprints for each certificate in the certificate chain. These are SHA-1 encoded strings that act as unique identifiers for the certificates in the chain.
	Fingerprints *[]string `json:"fingerprints,omitempty"`
	// The expiration dates of certificates in the chain.
	ExpirationDates *[]time.Time `json:"expiration_dates,omitempty"`
	// The serial numbers for each certificate in the certificate chain.
	SerialNumbers *[]string `json:"serial_numbers,omitempty"`
	// The file name of the uploaded pem file for this certificate authority.
	CertificateChainFilename *string `json:"certificate_chain_filename,omitempty"`
	// The source specifies whether the Certificate Revocation List (CRL) is updated from either local file uploaded (LOCAL) or from url of CRL (URL).
	CrlSource *string `json:"crl_source,omitempty"`
	// The url from which to fetch the CRL for the certificate authority if crl_source is URL.
	CrlUrl *string `json:"crl_url,omitempty"`
	// The timestamp for when CRL was last updated.
	CrlUpdatedAt *time.Time `json:"crl_updated_at,omitempty"`
	// The current state of the certificate authority.
	State *string `json:"state,omitempty"`
}

// NewIamV2CertificateAuthority instantiates a new IamV2CertificateAuthority object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamV2CertificateAuthority() *IamV2CertificateAuthority {
	this := IamV2CertificateAuthority{}
	return &this
}

// NewIamV2CertificateAuthorityWithDefaults instantiates a new IamV2CertificateAuthority object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamV2CertificateAuthorityWithDefaults() *IamV2CertificateAuthority {
	this := IamV2CertificateAuthority{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *IamV2CertificateAuthority) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *IamV2CertificateAuthority) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IamV2CertificateAuthority) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *IamV2CertificateAuthority) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IamV2CertificateAuthority) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IamV2CertificateAuthority) SetDescription(v string) {
	o.Description = &v
}

// GetFingerprints returns the Fingerprints field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetFingerprints() []string {
	if o == nil || o.Fingerprints == nil {
		var ret []string
		return ret
	}
	return *o.Fingerprints
}

// GetFingerprintsOk returns a tuple with the Fingerprints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetFingerprintsOk() (*[]string, bool) {
	if o == nil || o.Fingerprints == nil {
		return nil, false
	}
	return o.Fingerprints, true
}

// HasFingerprints returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasFingerprints() bool {
	if o != nil && o.Fingerprints != nil {
		return true
	}

	return false
}

// SetFingerprints gets a reference to the given []string and assigns it to the Fingerprints field.
func (o *IamV2CertificateAuthority) SetFingerprints(v []string) {
	o.Fingerprints = &v
}

// GetExpirationDates returns the ExpirationDates field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetExpirationDates() []time.Time {
	if o == nil || o.ExpirationDates == nil {
		var ret []time.Time
		return ret
	}
	return *o.ExpirationDates
}

// GetExpirationDatesOk returns a tuple with the ExpirationDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetExpirationDatesOk() (*[]time.Time, bool) {
	if o == nil || o.ExpirationDates == nil {
		return nil, false
	}
	return o.ExpirationDates, true
}

// HasExpirationDates returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasExpirationDates() bool {
	if o != nil && o.ExpirationDates != nil {
		return true
	}

	return false
}

// SetExpirationDates gets a reference to the given []time.Time and assigns it to the ExpirationDates field.
func (o *IamV2CertificateAuthority) SetExpirationDates(v []time.Time) {
	o.ExpirationDates = &v
}

// GetSerialNumbers returns the SerialNumbers field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetSerialNumbers() []string {
	if o == nil || o.SerialNumbers == nil {
		var ret []string
		return ret
	}
	return *o.SerialNumbers
}

// GetSerialNumbersOk returns a tuple with the SerialNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetSerialNumbersOk() (*[]string, bool) {
	if o == nil || o.SerialNumbers == nil {
		return nil, false
	}
	return o.SerialNumbers, true
}

// HasSerialNumbers returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasSerialNumbers() bool {
	if o != nil && o.SerialNumbers != nil {
		return true
	}

	return false
}

// SetSerialNumbers gets a reference to the given []string and assigns it to the SerialNumbers field.
func (o *IamV2CertificateAuthority) SetSerialNumbers(v []string) {
	o.SerialNumbers = &v
}

// GetCertificateChainFilename returns the CertificateChainFilename field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetCertificateChainFilename() string {
	if o == nil || o.CertificateChainFilename == nil {
		var ret string
		return ret
	}
	return *o.CertificateChainFilename
}

// GetCertificateChainFilenameOk returns a tuple with the CertificateChainFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetCertificateChainFilenameOk() (*string, bool) {
	if o == nil || o.CertificateChainFilename == nil {
		return nil, false
	}
	return o.CertificateChainFilename, true
}

// HasCertificateChainFilename returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasCertificateChainFilename() bool {
	if o != nil && o.CertificateChainFilename != nil {
		return true
	}

	return false
}

// SetCertificateChainFilename gets a reference to the given string and assigns it to the CertificateChainFilename field.
func (o *IamV2CertificateAuthority) SetCertificateChainFilename(v string) {
	o.CertificateChainFilename = &v
}

// GetCrlSource returns the CrlSource field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetCrlSource() string {
	if o == nil || o.CrlSource == nil {
		var ret string
		return ret
	}
	return *o.CrlSource
}

// GetCrlSourceOk returns a tuple with the CrlSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetCrlSourceOk() (*string, bool) {
	if o == nil || o.CrlSource == nil {
		return nil, false
	}
	return o.CrlSource, true
}

// HasCrlSource returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasCrlSource() bool {
	if o != nil && o.CrlSource != nil {
		return true
	}

	return false
}

// SetCrlSource gets a reference to the given string and assigns it to the CrlSource field.
func (o *IamV2CertificateAuthority) SetCrlSource(v string) {
	o.CrlSource = &v
}

// GetCrlUrl returns the CrlUrl field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetCrlUrl() string {
	if o == nil || o.CrlUrl == nil {
		var ret string
		return ret
	}
	return *o.CrlUrl
}

// GetCrlUrlOk returns a tuple with the CrlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetCrlUrlOk() (*string, bool) {
	if o == nil || o.CrlUrl == nil {
		return nil, false
	}
	return o.CrlUrl, true
}

// HasCrlUrl returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasCrlUrl() bool {
	if o != nil && o.CrlUrl != nil {
		return true
	}

	return false
}

// SetCrlUrl gets a reference to the given string and assigns it to the CrlUrl field.
func (o *IamV2CertificateAuthority) SetCrlUrl(v string) {
	o.CrlUrl = &v
}

// GetCrlUpdatedAt returns the CrlUpdatedAt field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetCrlUpdatedAt() time.Time {
	if o == nil || o.CrlUpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CrlUpdatedAt
}

// GetCrlUpdatedAtOk returns a tuple with the CrlUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetCrlUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.CrlUpdatedAt == nil {
		return nil, false
	}
	return o.CrlUpdatedAt, true
}

// HasCrlUpdatedAt returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasCrlUpdatedAt() bool {
	if o != nil && o.CrlUpdatedAt != nil {
		return true
	}

	return false
}

// SetCrlUpdatedAt gets a reference to the given time.Time and assigns it to the CrlUpdatedAt field.
func (o *IamV2CertificateAuthority) SetCrlUpdatedAt(v time.Time) {
	o.CrlUpdatedAt = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IamV2CertificateAuthority) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2CertificateAuthority) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IamV2CertificateAuthority) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *IamV2CertificateAuthority) SetState(v string) {
	o.State = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *IamV2CertificateAuthority) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.DisplayName)
	o.recurseRedact(o.Description)
	o.recurseRedact(o.Fingerprints)
	o.recurseRedact(o.ExpirationDates)
	o.recurseRedact(o.SerialNumbers)
	o.recurseRedact(o.CertificateChainFilename)
	o.recurseRedact(o.CrlSource)
	o.recurseRedact(o.CrlUrl)
	o.recurseRedact(o.CrlUpdatedAt)
	o.recurseRedact(o.State)
}

func (o *IamV2CertificateAuthority) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o IamV2CertificateAuthority) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o IamV2CertificateAuthority) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Fingerprints != nil {
		toSerialize["fingerprints"] = o.Fingerprints
	}
	if o.ExpirationDates != nil {
		toSerialize["expiration_dates"] = o.ExpirationDates
	}
	if o.SerialNumbers != nil {
		toSerialize["serial_numbers"] = o.SerialNumbers
	}
	if o.CertificateChainFilename != nil {
		toSerialize["certificate_chain_filename"] = o.CertificateChainFilename
	}
	if o.CrlSource != nil {
		toSerialize["crl_source"] = o.CrlSource
	}
	if o.CrlUrl != nil {
		toSerialize["crl_url"] = o.CrlUrl
	}
	if o.CrlUpdatedAt != nil {
		toSerialize["crl_updated_at"] = o.CrlUpdatedAt
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableIamV2CertificateAuthority struct {
	value *IamV2CertificateAuthority
	isSet bool
}

func (v NullableIamV2CertificateAuthority) Get() *IamV2CertificateAuthority {
	return v.value
}

func (v *NullableIamV2CertificateAuthority) Set(val *IamV2CertificateAuthority) {
	v.value = val
	v.isSet = true
}

func (v NullableIamV2CertificateAuthority) IsSet() bool {
	return v.isSet
}

func (v *NullableIamV2CertificateAuthority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamV2CertificateAuthority(val *IamV2CertificateAuthority) *NullableIamV2CertificateAuthority {
	return &NullableIamV2CertificateAuthority{value: val, isSet: true}
}

func (v NullableIamV2CertificateAuthority) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableIamV2CertificateAuthority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
