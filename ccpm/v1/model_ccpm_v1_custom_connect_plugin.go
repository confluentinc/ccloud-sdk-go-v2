// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Connect Plugin Management API

This is Custom Connect Plugin Management API.

API version: 0.1.0
Contact: connect-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CcpmV1CustomConnectPlugin CustomConnectPlugins objects represent Custom Connect artifacts containing connector, and SMT jars on Confluent  Cloud. The API allows you to list, create, read, update, and delete your Custom Connect Plugins. Related guide: [Custom Connect Plugin API](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).   ## The Custom Connect Plugins Model <SchemaDefinition schemaRef=\"#/components/schemas/ccpm.v1.CustomConnectPlugin\" />
type CcpmV1CustomConnectPlugin struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id       *string                        `json:"id,omitempty"`
	Metadata *ObjectMeta                    `json:"metadata,omitempty"`
	Spec     *CcpmV1CustomConnectPluginSpec `json:"spec,omitempty"`
}

// NewCcpmV1CustomConnectPlugin instantiates a new CcpmV1CustomConnectPlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCcpmV1CustomConnectPlugin() *CcpmV1CustomConnectPlugin {
	this := CcpmV1CustomConnectPlugin{}
	return &this
}

// NewCcpmV1CustomConnectPluginWithDefaults instantiates a new CcpmV1CustomConnectPlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCcpmV1CustomConnectPluginWithDefaults() *CcpmV1CustomConnectPlugin {
	this := CcpmV1CustomConnectPlugin{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPlugin) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPlugin) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPlugin) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *CcpmV1CustomConnectPlugin) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPlugin) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPlugin) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPlugin) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *CcpmV1CustomConnectPlugin) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPlugin) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPlugin) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPlugin) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CcpmV1CustomConnectPlugin) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPlugin) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPlugin) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPlugin) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *CcpmV1CustomConnectPlugin) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPlugin) GetSpec() CcpmV1CustomConnectPluginSpec {
	if o == nil || o.Spec == nil {
		var ret CcpmV1CustomConnectPluginSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPlugin) GetSpecOk() (*CcpmV1CustomConnectPluginSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPlugin) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given CcpmV1CustomConnectPluginSpec and assigns it to the Spec field.
func (o *CcpmV1CustomConnectPlugin) SetSpec(v CcpmV1CustomConnectPluginSpec) {
	o.Spec = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CcpmV1CustomConnectPlugin) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.Spec)
}

func (o *CcpmV1CustomConnectPlugin) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CcpmV1CustomConnectPlugin) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CcpmV1CustomConnectPlugin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCcpmV1CustomConnectPlugin struct {
	value *CcpmV1CustomConnectPlugin
	isSet bool
}

func (v NullableCcpmV1CustomConnectPlugin) Get() *CcpmV1CustomConnectPlugin {
	return v.value
}

func (v *NullableCcpmV1CustomConnectPlugin) Set(val *CcpmV1CustomConnectPlugin) {
	v.value = val
	v.isSet = true
}

func (v NullableCcpmV1CustomConnectPlugin) IsSet() bool {
	return v.isSet
}

func (v *NullableCcpmV1CustomConnectPlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCcpmV1CustomConnectPlugin(val *CcpmV1CustomConnectPlugin) *NullableCcpmV1CustomConnectPlugin {
	return &NullableCcpmV1CustomConnectPlugin{value: val, isSet: true}
}

func (v NullableCcpmV1CustomConnectPlugin) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCcpmV1CustomConnectPlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
