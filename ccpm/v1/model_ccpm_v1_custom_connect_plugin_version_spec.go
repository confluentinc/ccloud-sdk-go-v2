// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Connect Plugin Management API

This is Custom Connect Plugin Management API.

API version: 0.1.0
Contact: connect-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CcpmV1CustomConnectPluginVersionSpec The desired state of the Custom Connect Plugin Version
type CcpmV1CustomConnectPluginVersionSpec struct {
	// Version of the Custom Connect Plugin. The version must comply with SemVer (e.g., `1.2.3`, `1.2.3-beta`, `1.2.3-rc.123`, `1.2.3-rc.123+build.456`).
	Version *string `json:"version,omitempty"`
	// A sensitive property is a connector configuration property that must be hidden after a user enters property value when setting up connector.
	SensitiveConfigProperties *[]string `json:"sensitive_config_properties,omitempty"`
	// Document link of Custom Connect Plugin.
	DocumentationLink *string `json:"documentation_link,omitempty"`
	// Archive format of Custom Connect Plugin.
	ContentFormat *string `json:"content_format,omitempty"`
	// List of connector classes. The connector class must be a valid Java class name or alias for the connector. You can get the connector class from the connector documentation provided by the developer.
	ConnectorClasses *[]CcpmV1ConnectorClass `json:"connector_classes,omitempty"`
	// Upload source of Custom Connect Plugin Version. Only required in `create` request, will be ignored in `read`, `update` or `list`.
	UploadSource *CcpmV1CustomConnectPluginVersionSpecUploadSourceOneOf `json:"upload_source,omitempty"`
	// The environment to which this belongs.
	Environment *EnvScopedObjectReference `json:"environment,omitempty"`
}

// NewCcpmV1CustomConnectPluginVersionSpec instantiates a new CcpmV1CustomConnectPluginVersionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCcpmV1CustomConnectPluginVersionSpec() *CcpmV1CustomConnectPluginVersionSpec {
	this := CcpmV1CustomConnectPluginVersionSpec{}
	return &this
}

// NewCcpmV1CustomConnectPluginVersionSpecWithDefaults instantiates a new CcpmV1CustomConnectPluginVersionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCcpmV1CustomConnectPluginVersionSpecWithDefaults() *CcpmV1CustomConnectPluginVersionSpec {
	this := CcpmV1CustomConnectPluginVersionSpec{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CcpmV1CustomConnectPluginVersionSpec) SetVersion(v string) {
	o.Version = &v
}

// GetSensitiveConfigProperties returns the SensitiveConfigProperties field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetSensitiveConfigProperties() []string {
	if o == nil || o.SensitiveConfigProperties == nil {
		var ret []string
		return ret
	}
	return *o.SensitiveConfigProperties
}

// GetSensitiveConfigPropertiesOk returns a tuple with the SensitiveConfigProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetSensitiveConfigPropertiesOk() (*[]string, bool) {
	if o == nil || o.SensitiveConfigProperties == nil {
		return nil, false
	}
	return o.SensitiveConfigProperties, true
}

// HasSensitiveConfigProperties returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) HasSensitiveConfigProperties() bool {
	if o != nil && o.SensitiveConfigProperties != nil {
		return true
	}

	return false
}

// SetSensitiveConfigProperties gets a reference to the given []string and assigns it to the SensitiveConfigProperties field.
func (o *CcpmV1CustomConnectPluginVersionSpec) SetSensitiveConfigProperties(v []string) {
	o.SensitiveConfigProperties = &v
}

// GetDocumentationLink returns the DocumentationLink field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetDocumentationLink() string {
	if o == nil || o.DocumentationLink == nil {
		var ret string
		return ret
	}
	return *o.DocumentationLink
}

// GetDocumentationLinkOk returns a tuple with the DocumentationLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetDocumentationLinkOk() (*string, bool) {
	if o == nil || o.DocumentationLink == nil {
		return nil, false
	}
	return o.DocumentationLink, true
}

// HasDocumentationLink returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) HasDocumentationLink() bool {
	if o != nil && o.DocumentationLink != nil {
		return true
	}

	return false
}

// SetDocumentationLink gets a reference to the given string and assigns it to the DocumentationLink field.
func (o *CcpmV1CustomConnectPluginVersionSpec) SetDocumentationLink(v string) {
	o.DocumentationLink = &v
}

// GetContentFormat returns the ContentFormat field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetContentFormat() string {
	if o == nil || o.ContentFormat == nil {
		var ret string
		return ret
	}
	return *o.ContentFormat
}

// GetContentFormatOk returns a tuple with the ContentFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetContentFormatOk() (*string, bool) {
	if o == nil || o.ContentFormat == nil {
		return nil, false
	}
	return o.ContentFormat, true
}

// HasContentFormat returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) HasContentFormat() bool {
	if o != nil && o.ContentFormat != nil {
		return true
	}

	return false
}

// SetContentFormat gets a reference to the given string and assigns it to the ContentFormat field.
func (o *CcpmV1CustomConnectPluginVersionSpec) SetContentFormat(v string) {
	o.ContentFormat = &v
}

// GetConnectorClasses returns the ConnectorClasses field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetConnectorClasses() []CcpmV1ConnectorClass {
	if o == nil || o.ConnectorClasses == nil {
		var ret []CcpmV1ConnectorClass
		return ret
	}
	return *o.ConnectorClasses
}

// GetConnectorClassesOk returns a tuple with the ConnectorClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetConnectorClassesOk() (*[]CcpmV1ConnectorClass, bool) {
	if o == nil || o.ConnectorClasses == nil {
		return nil, false
	}
	return o.ConnectorClasses, true
}

// HasConnectorClasses returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) HasConnectorClasses() bool {
	if o != nil && o.ConnectorClasses != nil {
		return true
	}

	return false
}

// SetConnectorClasses gets a reference to the given []CcpmV1ConnectorClass and assigns it to the ConnectorClasses field.
func (o *CcpmV1CustomConnectPluginVersionSpec) SetConnectorClasses(v []CcpmV1ConnectorClass) {
	o.ConnectorClasses = &v
}

// GetUploadSource returns the UploadSource field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetUploadSource() CcpmV1CustomConnectPluginVersionSpecUploadSourceOneOf {
	if o == nil || o.UploadSource == nil {
		var ret CcpmV1CustomConnectPluginVersionSpecUploadSourceOneOf
		return ret
	}
	return *o.UploadSource
}

// GetUploadSourceOk returns a tuple with the UploadSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetUploadSourceOk() (*CcpmV1CustomConnectPluginVersionSpecUploadSourceOneOf, bool) {
	if o == nil || o.UploadSource == nil {
		return nil, false
	}
	return o.UploadSource, true
}

// HasUploadSource returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) HasUploadSource() bool {
	if o != nil && o.UploadSource != nil {
		return true
	}

	return false
}

// SetUploadSource gets a reference to the given CcpmV1CustomConnectPluginVersionSpecUploadSourceOneOf and assigns it to the UploadSource field.
func (o *CcpmV1CustomConnectPluginVersionSpec) SetUploadSource(v CcpmV1CustomConnectPluginVersionSpecUploadSourceOneOf) {
	o.UploadSource = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetEnvironment() EnvScopedObjectReference {
	if o == nil || o.Environment == nil {
		var ret EnvScopedObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) GetEnvironmentOk() (*EnvScopedObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *CcpmV1CustomConnectPluginVersionSpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given EnvScopedObjectReference and assigns it to the Environment field.
func (o *CcpmV1CustomConnectPluginVersionSpec) SetEnvironment(v EnvScopedObjectReference) {
	o.Environment = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CcpmV1CustomConnectPluginVersionSpec) Redact() {
	o.recurseRedact(o.Version)
	o.recurseRedact(o.SensitiveConfigProperties)
	o.recurseRedact(o.DocumentationLink)
	o.recurseRedact(o.ContentFormat)
	o.recurseRedact(o.ConnectorClasses)
	o.recurseRedact(o.UploadSource)
	o.recurseRedact(o.Environment)
}

func (o *CcpmV1CustomConnectPluginVersionSpec) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CcpmV1CustomConnectPluginVersionSpec) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CcpmV1CustomConnectPluginVersionSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.SensitiveConfigProperties != nil {
		toSerialize["sensitive_config_properties"] = o.SensitiveConfigProperties
	}
	if o.DocumentationLink != nil {
		toSerialize["documentation_link"] = o.DocumentationLink
	}
	if o.ContentFormat != nil {
		toSerialize["content_format"] = o.ContentFormat
	}
	if o.ConnectorClasses != nil {
		toSerialize["connector_classes"] = o.ConnectorClasses
	}
	if o.UploadSource != nil {
		toSerialize["upload_source"] = o.UploadSource
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCcpmV1CustomConnectPluginVersionSpec struct {
	value *CcpmV1CustomConnectPluginVersionSpec
	isSet bool
}

func (v NullableCcpmV1CustomConnectPluginVersionSpec) Get() *CcpmV1CustomConnectPluginVersionSpec {
	return v.value
}

func (v *NullableCcpmV1CustomConnectPluginVersionSpec) Set(val *CcpmV1CustomConnectPluginVersionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCcpmV1CustomConnectPluginVersionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCcpmV1CustomConnectPluginVersionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCcpmV1CustomConnectPluginVersionSpec(val *CcpmV1CustomConnectPluginVersionSpec) *NullableCcpmV1CustomConnectPluginVersionSpec {
	return &NullableCcpmV1CustomConnectPluginVersionSpec{value: val, isSet: true}
}

func (v NullableCcpmV1CustomConnectPluginVersionSpec) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCcpmV1CustomConnectPluginVersionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
