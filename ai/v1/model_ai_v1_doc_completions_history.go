// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
AI API

API for interacting with AI models from within Confluent Cloud.

API version: 0.0.1
Contact: api-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// AiV1DocCompletionsHistory A question and answer pair from a previous interaction.
type AiV1DocCompletionsHistory struct {
	// Question for the Docs AI assistant.
	Question *string `json:"question,omitempty"`
	// Markdown-formatted answer from the Confluent AI assistant.
	Answer *string `json:"answer,omitempty"`
	// The date and time at which this question was asked. It is represented in RFC3339 format and is in UTC.
	AskedAt *time.Time `json:"asked_at,omitempty"`
}

// NewAiV1DocCompletionsHistory instantiates a new AiV1DocCompletionsHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAiV1DocCompletionsHistory() *AiV1DocCompletionsHistory {
	this := AiV1DocCompletionsHistory{}
	return &this
}

// NewAiV1DocCompletionsHistoryWithDefaults instantiates a new AiV1DocCompletionsHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAiV1DocCompletionsHistoryWithDefaults() *AiV1DocCompletionsHistory {
	this := AiV1DocCompletionsHistory{}
	return &this
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *AiV1DocCompletionsHistory) GetQuestion() string {
	if o == nil || o.Question == nil {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1DocCompletionsHistory) GetQuestionOk() (*string, bool) {
	if o == nil || o.Question == nil {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *AiV1DocCompletionsHistory) HasQuestion() bool {
	if o != nil && o.Question != nil {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *AiV1DocCompletionsHistory) SetQuestion(v string) {
	o.Question = &v
}

// GetAnswer returns the Answer field value if set, zero value otherwise.
func (o *AiV1DocCompletionsHistory) GetAnswer() string {
	if o == nil || o.Answer == nil {
		var ret string
		return ret
	}
	return *o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1DocCompletionsHistory) GetAnswerOk() (*string, bool) {
	if o == nil || o.Answer == nil {
		return nil, false
	}
	return o.Answer, true
}

// HasAnswer returns a boolean if a field has been set.
func (o *AiV1DocCompletionsHistory) HasAnswer() bool {
	if o != nil && o.Answer != nil {
		return true
	}

	return false
}

// SetAnswer gets a reference to the given string and assigns it to the Answer field.
func (o *AiV1DocCompletionsHistory) SetAnswer(v string) {
	o.Answer = &v
}

// GetAskedAt returns the AskedAt field value if set, zero value otherwise.
func (o *AiV1DocCompletionsHistory) GetAskedAt() time.Time {
	if o == nil || o.AskedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.AskedAt
}

// GetAskedAtOk returns a tuple with the AskedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1DocCompletionsHistory) GetAskedAtOk() (*time.Time, bool) {
	if o == nil || o.AskedAt == nil {
		return nil, false
	}
	return o.AskedAt, true
}

// HasAskedAt returns a boolean if a field has been set.
func (o *AiV1DocCompletionsHistory) HasAskedAt() bool {
	if o != nil && o.AskedAt != nil {
		return true
	}

	return false
}

// SetAskedAt gets a reference to the given time.Time and assigns it to the AskedAt field.
func (o *AiV1DocCompletionsHistory) SetAskedAt(v time.Time) {
	o.AskedAt = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *AiV1DocCompletionsHistory) Redact() {
	o.recurseRedact(o.Question)
	o.recurseRedact(o.Answer)
	o.recurseRedact(o.AskedAt)
}

func (o *AiV1DocCompletionsHistory) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o AiV1DocCompletionsHistory) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o AiV1DocCompletionsHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Question != nil {
		toSerialize["question"] = o.Question
	}
	if o.Answer != nil {
		toSerialize["answer"] = o.Answer
	}
	if o.AskedAt != nil {
		toSerialize["asked_at"] = o.AskedAt
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableAiV1DocCompletionsHistory struct {
	value *AiV1DocCompletionsHistory
	isSet bool
}

func (v NullableAiV1DocCompletionsHistory) Get() *AiV1DocCompletionsHistory {
	return v.value
}

func (v *NullableAiV1DocCompletionsHistory) Set(val *AiV1DocCompletionsHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableAiV1DocCompletionsHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableAiV1DocCompletionsHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAiV1DocCompletionsHistory(val *AiV1DocCompletionsHistory) *NullableAiV1DocCompletionsHistory {
	return &NullableAiV1DocCompletionsHistory{value: val, isSet: true}
}

func (v NullableAiV1DocCompletionsHistory) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableAiV1DocCompletionsHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
