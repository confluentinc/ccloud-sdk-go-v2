// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
AI API

API for interacting with AI models from within Confluent Cloud.

API version: 0.0.1
Contact: api-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// AiV1Feedback Submit feedback on the AI assistant.
type AiV1Feedback struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id *string `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	AiSessionId *string `json:"ai_session_id,omitempty"`
	// The feedback reaction types are:  'THUMBS_UP': when a user upvotes AI Assistant's answer.  'THUMBS_DOWN': when a user downvotes the AI Assistant's answer. 
	Reaction *string `json:"reaction,omitempty"`
	// The feedback copy types are:  'ANSWER': when a user copies the AI Assistant's answer.  'CODE': when a user copies the code snippet from the AI Assistant's answer. 
	Copied *string `json:"copied,omitempty"`
	// Additional text feedback optionally provided by a user.
	Comment NullableString `json:"comment,omitempty"`
}

// NewAiV1Feedback instantiates a new AiV1Feedback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAiV1Feedback() *AiV1Feedback {
	this := AiV1Feedback{}
	var reaction string = "UNSPECIFIED"
	this.Reaction = &reaction
	var copied string = "UNSPECIFIED"
	this.Copied = &copied
	return &this
}

// NewAiV1FeedbackWithDefaults instantiates a new AiV1Feedback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAiV1FeedbackWithDefaults() *AiV1Feedback {
	this := AiV1Feedback{}
	var reaction string = "UNSPECIFIED"
	this.Reaction = &reaction
	var copied string = "UNSPECIFIED"
	this.Copied = &copied
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *AiV1Feedback) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1Feedback) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *AiV1Feedback) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *AiV1Feedback) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *AiV1Feedback) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1Feedback) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *AiV1Feedback) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *AiV1Feedback) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AiV1Feedback) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1Feedback) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AiV1Feedback) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AiV1Feedback) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AiV1Feedback) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1Feedback) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AiV1Feedback) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *AiV1Feedback) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetAiSessionId returns the AiSessionId field value if set, zero value otherwise.
func (o *AiV1Feedback) GetAiSessionId() string {
	if o == nil || o.AiSessionId == nil {
		var ret string
		return ret
	}
	return *o.AiSessionId
}

// GetAiSessionIdOk returns a tuple with the AiSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1Feedback) GetAiSessionIdOk() (*string, bool) {
	if o == nil || o.AiSessionId == nil {
		return nil, false
	}
	return o.AiSessionId, true
}

// HasAiSessionId returns a boolean if a field has been set.
func (o *AiV1Feedback) HasAiSessionId() bool {
	if o != nil && o.AiSessionId != nil {
		return true
	}

	return false
}

// SetAiSessionId gets a reference to the given string and assigns it to the AiSessionId field.
func (o *AiV1Feedback) SetAiSessionId(v string) {
	o.AiSessionId = &v
}

// GetReaction returns the Reaction field value if set, zero value otherwise.
func (o *AiV1Feedback) GetReaction() string {
	if o == nil || o.Reaction == nil {
		var ret string
		return ret
	}
	return *o.Reaction
}

// GetReactionOk returns a tuple with the Reaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1Feedback) GetReactionOk() (*string, bool) {
	if o == nil || o.Reaction == nil {
		return nil, false
	}
	return o.Reaction, true
}

// HasReaction returns a boolean if a field has been set.
func (o *AiV1Feedback) HasReaction() bool {
	if o != nil && o.Reaction != nil {
		return true
	}

	return false
}

// SetReaction gets a reference to the given string and assigns it to the Reaction field.
func (o *AiV1Feedback) SetReaction(v string) {
	o.Reaction = &v
}

// GetCopied returns the Copied field value if set, zero value otherwise.
func (o *AiV1Feedback) GetCopied() string {
	if o == nil || o.Copied == nil {
		var ret string
		return ret
	}
	return *o.Copied
}

// GetCopiedOk returns a tuple with the Copied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1Feedback) GetCopiedOk() (*string, bool) {
	if o == nil || o.Copied == nil {
		return nil, false
	}
	return o.Copied, true
}

// HasCopied returns a boolean if a field has been set.
func (o *AiV1Feedback) HasCopied() bool {
	if o != nil && o.Copied != nil {
		return true
	}

	return false
}

// SetCopied gets a reference to the given string and assigns it to the Copied field.
func (o *AiV1Feedback) SetCopied(v string) {
	o.Copied = &v
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AiV1Feedback) GetComment() string {
	if o == nil || o.Comment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AiV1Feedback) GetCommentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *AiV1Feedback) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *AiV1Feedback) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *AiV1Feedback) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *AiV1Feedback) UnsetComment() {
	o.Comment.Unset()
}

// Redact resets all sensitive fields to their zero value.
func (o *AiV1Feedback) Redact() {
    o.recurseRedact(o.ApiVersion)
    o.recurseRedact(o.Kind)
    o.recurseRedact(o.Id)
    o.recurseRedact(o.Metadata)
    o.recurseRedact(o.AiSessionId)
    o.recurseRedact(o.Reaction)
    o.recurseRedact(o.Copied)
    o.recurseRedact(o.Comment)
}

func (o *AiV1Feedback) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o AiV1Feedback) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o AiV1Feedback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.AiSessionId != nil {
		toSerialize["ai_session_id"] = o.AiSessionId
	}
	if o.Reaction != nil {
		toSerialize["reaction"] = o.Reaction
	}
	if o.Copied != nil {
		toSerialize["copied"] = o.Copied
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableAiV1Feedback struct {
	value *AiV1Feedback
	isSet bool
}

func (v NullableAiV1Feedback) Get() *AiV1Feedback {
	return v.value
}

func (v *NullableAiV1Feedback) Set(val *AiV1Feedback) {
	v.value = val
	v.isSet = true
}

func (v NullableAiV1Feedback) IsSet() bool {
	return v.isSet
}

func (v *NullableAiV1Feedback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAiV1Feedback(val *AiV1Feedback) *NullableAiV1Feedback {
	return &NullableAiV1Feedback{value: val, isSet: true}
}

func (v NullableAiV1Feedback) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableAiV1Feedback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


