// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
AI API

API for interacting with AI models from within Confluent Cloud.

API version: 0.0.1
Contact: api-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// AiV1TaggedSchemaField Schema field to Tags mapping
type AiV1TaggedSchemaField struct {
	// Qualified name of the schema field
	FieldName *string `json:"field_name,omitempty"`
	// List of suggested tag definitions for the schema field
	Tags *[]AiV1TagDefinition `json:"tags,omitempty"`
}

// NewAiV1TaggedSchemaField instantiates a new AiV1TaggedSchemaField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAiV1TaggedSchemaField() *AiV1TaggedSchemaField {
	this := AiV1TaggedSchemaField{}
	return &this
}

// NewAiV1TaggedSchemaFieldWithDefaults instantiates a new AiV1TaggedSchemaField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAiV1TaggedSchemaFieldWithDefaults() *AiV1TaggedSchemaField {
	this := AiV1TaggedSchemaField{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *AiV1TaggedSchemaField) GetFieldName() string {
	if o == nil || o.FieldName == nil {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1TaggedSchemaField) GetFieldNameOk() (*string, bool) {
	if o == nil || o.FieldName == nil {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *AiV1TaggedSchemaField) HasFieldName() bool {
	if o != nil && o.FieldName != nil {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *AiV1TaggedSchemaField) SetFieldName(v string) {
	o.FieldName = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AiV1TaggedSchemaField) GetTags() []AiV1TagDefinition {
	if o == nil || o.Tags == nil {
		var ret []AiV1TagDefinition
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiV1TaggedSchemaField) GetTagsOk() (*[]AiV1TagDefinition, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AiV1TaggedSchemaField) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []AiV1TagDefinition and assigns it to the Tags field.
func (o *AiV1TaggedSchemaField) SetTags(v []AiV1TagDefinition) {
	o.Tags = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *AiV1TaggedSchemaField) Redact() {
	o.recurseRedact(o.FieldName)
	o.recurseRedact(o.Tags)
}

func (o *AiV1TaggedSchemaField) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o AiV1TaggedSchemaField) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o AiV1TaggedSchemaField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldName != nil {
		toSerialize["field_name"] = o.FieldName
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableAiV1TaggedSchemaField struct {
	value *AiV1TaggedSchemaField
	isSet bool
}

func (v NullableAiV1TaggedSchemaField) Get() *AiV1TaggedSchemaField {
	return v.value
}

func (v *NullableAiV1TaggedSchemaField) Set(val *AiV1TaggedSchemaField) {
	v.value = val
	v.isSet = true
}

func (v NullableAiV1TaggedSchemaField) IsSet() bool {
	return v.isSet
}

func (v *NullableAiV1TaggedSchemaField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAiV1TaggedSchemaField(val *AiV1TaggedSchemaField) *NullableAiV1TaggedSchemaField {
	return &NullableAiV1TaggedSchemaField{value: val, isSet: true}
}

func (v NullableAiV1TaggedSchemaField) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableAiV1TaggedSchemaField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
