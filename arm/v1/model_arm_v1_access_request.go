// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Access Request Management APIs

# Introduction

API version: 0.1.0
Contact: data-governance@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// ArmV1AccessRequest `AccessRequest` object contains details of the request (access, message, metadata) that you initiate   ## The Access Requests Model <SchemaDefinition schemaRef=\"#/components/schemas/arm.v1.AccessRequest\" />
type ArmV1AccessRequest struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// The resource id
	Id       *string     `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The desire accesses, can only support requesting 1 topic.
	Accesses *[]ArmV1Access `json:"accesses,omitempty"`
	// The user who initiate this request
	Requester *ArmV1Requester `json:"requester,omitempty"`
	// The status of the request
	Status *string `json:"status,omitempty"`
	// Optional message attached with the request
	Message *string `json:"message,omitempty"`
	// The date and time at which this request is created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time at which this request will expire if not approved or rejected
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
}

// NewArmV1AccessRequest instantiates a new ArmV1AccessRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArmV1AccessRequest() *ArmV1AccessRequest {
	this := ArmV1AccessRequest{}
	return &this
}

// NewArmV1AccessRequestWithDefaults instantiates a new ArmV1AccessRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArmV1AccessRequestWithDefaults() *ArmV1AccessRequest {
	this := ArmV1AccessRequest{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *ArmV1AccessRequest) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ArmV1AccessRequest) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ArmV1AccessRequest) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *ArmV1AccessRequest) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetAccesses returns the Accesses field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetAccesses() []ArmV1Access {
	if o == nil || o.Accesses == nil {
		var ret []ArmV1Access
		return ret
	}
	return *o.Accesses
}

// GetAccessesOk returns a tuple with the Accesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetAccessesOk() (*[]ArmV1Access, bool) {
	if o == nil || o.Accesses == nil {
		return nil, false
	}
	return o.Accesses, true
}

// HasAccesses returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasAccesses() bool {
	if o != nil && o.Accesses != nil {
		return true
	}

	return false
}

// SetAccesses gets a reference to the given []ArmV1Access and assigns it to the Accesses field.
func (o *ArmV1AccessRequest) SetAccesses(v []ArmV1Access) {
	o.Accesses = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetRequester() ArmV1Requester {
	if o == nil || o.Requester == nil {
		var ret ArmV1Requester
		return ret
	}
	return *o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetRequesterOk() (*ArmV1Requester, bool) {
	if o == nil || o.Requester == nil {
		return nil, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasRequester() bool {
	if o != nil && o.Requester != nil {
		return true
	}

	return false
}

// SetRequester gets a reference to the given ArmV1Requester and assigns it to the Requester field.
func (o *ArmV1AccessRequest) SetRequester(v ArmV1Requester) {
	o.Requester = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ArmV1AccessRequest) SetStatus(v string) {
	o.Status = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ArmV1AccessRequest) SetMessage(v string) {
	o.Message = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ArmV1AccessRequest) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *ArmV1AccessRequest) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmV1AccessRequest) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *ArmV1AccessRequest) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *ArmV1AccessRequest) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ArmV1AccessRequest) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.Accesses)
	o.recurseRedact(o.Requester)
	o.recurseRedact(o.Status)
	o.recurseRedact(o.Message)
	o.recurseRedact(o.CreatedAt)
	o.recurseRedact(o.ExpiresAt)
}

func (o *ArmV1AccessRequest) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ArmV1AccessRequest) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ArmV1AccessRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Accesses != nil {
		toSerialize["accesses"] = o.Accesses
	}
	if o.Requester != nil {
		toSerialize["requester"] = o.Requester
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableArmV1AccessRequest struct {
	value *ArmV1AccessRequest
	isSet bool
}

func (v NullableArmV1AccessRequest) Get() *ArmV1AccessRequest {
	return v.value
}

func (v *NullableArmV1AccessRequest) Set(val *ArmV1AccessRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableArmV1AccessRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableArmV1AccessRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArmV1AccessRequest(val *ArmV1AccessRequest) *NullableArmV1AccessRequest {
	return &NullableArmV1AccessRequest{value: val, isSet: true}
}

func (v NullableArmV1AccessRequest) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableArmV1AccessRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
