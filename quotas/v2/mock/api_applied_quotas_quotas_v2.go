// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_applied_quotas_quotas_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2 "github.com/confluentinc/ccloud-sdk-go-v2/quotas/v2"
)

// AppliedQuotasQuotasV2Api is a mock of AppliedQuotasQuotasV2Api interface
type AppliedQuotasQuotasV2Api struct {
	lockGetQuotasV2AppliedQuota sync.Mutex
	GetQuotasV2AppliedQuotaFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2AppliedQuotaRequest

	lockGetQuotasV2AppliedQuotaExecute sync.Mutex
	GetQuotasV2AppliedQuotaExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2AppliedQuotaRequest) (github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.QuotasV2AppliedQuota, *net_http.Response, error)

	lockListQuotasV2AppliedQuotas sync.Mutex
	ListQuotasV2AppliedQuotasFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2AppliedQuotasRequest

	lockListQuotasV2AppliedQuotasExecute sync.Mutex
	ListQuotasV2AppliedQuotasExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2AppliedQuotasRequest) (github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.QuotasV2AppliedQuotaList, *net_http.Response, error)

	calls struct {
		GetQuotasV2AppliedQuota []struct {
			Ctx context.Context
			Id  string
		}
		GetQuotasV2AppliedQuotaExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2AppliedQuotaRequest
		}
		ListQuotasV2AppliedQuotas []struct {
			Ctx context.Context
		}
		ListQuotasV2AppliedQuotasExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2AppliedQuotasRequest
		}
	}
}

// GetQuotasV2AppliedQuota mocks base method by wrapping the associated func.
func (m *AppliedQuotasQuotasV2Api) GetQuotasV2AppliedQuota(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2AppliedQuotaRequest {
	m.lockGetQuotasV2AppliedQuota.Lock()
	defer m.lockGetQuotasV2AppliedQuota.Unlock()

	if m.GetQuotasV2AppliedQuotaFunc == nil {
		panic("mocker: AppliedQuotasQuotasV2Api.GetQuotasV2AppliedQuotaFunc is nil but AppliedQuotasQuotasV2Api.GetQuotasV2AppliedQuota was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetQuotasV2AppliedQuota = append(m.calls.GetQuotasV2AppliedQuota, call)

	return m.GetQuotasV2AppliedQuotaFunc(ctx, id)
}

// GetQuotasV2AppliedQuotaCalled returns true if GetQuotasV2AppliedQuota was called at least once.
func (m *AppliedQuotasQuotasV2Api) GetQuotasV2AppliedQuotaCalled() bool {
	m.lockGetQuotasV2AppliedQuota.Lock()
	defer m.lockGetQuotasV2AppliedQuota.Unlock()

	return len(m.calls.GetQuotasV2AppliedQuota) > 0
}

// GetQuotasV2AppliedQuotaCalls returns the calls made to GetQuotasV2AppliedQuota.
func (m *AppliedQuotasQuotasV2Api) GetQuotasV2AppliedQuotaCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetQuotasV2AppliedQuota.Lock()
	defer m.lockGetQuotasV2AppliedQuota.Unlock()

	return m.calls.GetQuotasV2AppliedQuota
}

// GetQuotasV2AppliedQuotaExecute mocks base method by wrapping the associated func.
func (m *AppliedQuotasQuotasV2Api) GetQuotasV2AppliedQuotaExecute(r github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2AppliedQuotaRequest) (github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.QuotasV2AppliedQuota, *net_http.Response, error) {
	m.lockGetQuotasV2AppliedQuotaExecute.Lock()
	defer m.lockGetQuotasV2AppliedQuotaExecute.Unlock()

	if m.GetQuotasV2AppliedQuotaExecuteFunc == nil {
		panic("mocker: AppliedQuotasQuotasV2Api.GetQuotasV2AppliedQuotaExecuteFunc is nil but AppliedQuotasQuotasV2Api.GetQuotasV2AppliedQuotaExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2AppliedQuotaRequest
	}{
		R: r,
	}

	m.calls.GetQuotasV2AppliedQuotaExecute = append(m.calls.GetQuotasV2AppliedQuotaExecute, call)

	return m.GetQuotasV2AppliedQuotaExecuteFunc(r)
}

// GetQuotasV2AppliedQuotaExecuteCalled returns true if GetQuotasV2AppliedQuotaExecute was called at least once.
func (m *AppliedQuotasQuotasV2Api) GetQuotasV2AppliedQuotaExecuteCalled() bool {
	m.lockGetQuotasV2AppliedQuotaExecute.Lock()
	defer m.lockGetQuotasV2AppliedQuotaExecute.Unlock()

	return len(m.calls.GetQuotasV2AppliedQuotaExecute) > 0
}

// GetQuotasV2AppliedQuotaExecuteCalls returns the calls made to GetQuotasV2AppliedQuotaExecute.
func (m *AppliedQuotasQuotasV2Api) GetQuotasV2AppliedQuotaExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2AppliedQuotaRequest
} {
	m.lockGetQuotasV2AppliedQuotaExecute.Lock()
	defer m.lockGetQuotasV2AppliedQuotaExecute.Unlock()

	return m.calls.GetQuotasV2AppliedQuotaExecute
}

// ListQuotasV2AppliedQuotas mocks base method by wrapping the associated func.
func (m *AppliedQuotasQuotasV2Api) ListQuotasV2AppliedQuotas(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2AppliedQuotasRequest {
	m.lockListQuotasV2AppliedQuotas.Lock()
	defer m.lockListQuotasV2AppliedQuotas.Unlock()

	if m.ListQuotasV2AppliedQuotasFunc == nil {
		panic("mocker: AppliedQuotasQuotasV2Api.ListQuotasV2AppliedQuotasFunc is nil but AppliedQuotasQuotasV2Api.ListQuotasV2AppliedQuotas was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListQuotasV2AppliedQuotas = append(m.calls.ListQuotasV2AppliedQuotas, call)

	return m.ListQuotasV2AppliedQuotasFunc(ctx)
}

// ListQuotasV2AppliedQuotasCalled returns true if ListQuotasV2AppliedQuotas was called at least once.
func (m *AppliedQuotasQuotasV2Api) ListQuotasV2AppliedQuotasCalled() bool {
	m.lockListQuotasV2AppliedQuotas.Lock()
	defer m.lockListQuotasV2AppliedQuotas.Unlock()

	return len(m.calls.ListQuotasV2AppliedQuotas) > 0
}

// ListQuotasV2AppliedQuotasCalls returns the calls made to ListQuotasV2AppliedQuotas.
func (m *AppliedQuotasQuotasV2Api) ListQuotasV2AppliedQuotasCalls() []struct {
	Ctx context.Context
} {
	m.lockListQuotasV2AppliedQuotas.Lock()
	defer m.lockListQuotasV2AppliedQuotas.Unlock()

	return m.calls.ListQuotasV2AppliedQuotas
}

// ListQuotasV2AppliedQuotasExecute mocks base method by wrapping the associated func.
func (m *AppliedQuotasQuotasV2Api) ListQuotasV2AppliedQuotasExecute(r github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2AppliedQuotasRequest) (github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.QuotasV2AppliedQuotaList, *net_http.Response, error) {
	m.lockListQuotasV2AppliedQuotasExecute.Lock()
	defer m.lockListQuotasV2AppliedQuotasExecute.Unlock()

	if m.ListQuotasV2AppliedQuotasExecuteFunc == nil {
		panic("mocker: AppliedQuotasQuotasV2Api.ListQuotasV2AppliedQuotasExecuteFunc is nil but AppliedQuotasQuotasV2Api.ListQuotasV2AppliedQuotasExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2AppliedQuotasRequest
	}{
		R: r,
	}

	m.calls.ListQuotasV2AppliedQuotasExecute = append(m.calls.ListQuotasV2AppliedQuotasExecute, call)

	return m.ListQuotasV2AppliedQuotasExecuteFunc(r)
}

// ListQuotasV2AppliedQuotasExecuteCalled returns true if ListQuotasV2AppliedQuotasExecute was called at least once.
func (m *AppliedQuotasQuotasV2Api) ListQuotasV2AppliedQuotasExecuteCalled() bool {
	m.lockListQuotasV2AppliedQuotasExecute.Lock()
	defer m.lockListQuotasV2AppliedQuotasExecute.Unlock()

	return len(m.calls.ListQuotasV2AppliedQuotasExecute) > 0
}

// ListQuotasV2AppliedQuotasExecuteCalls returns the calls made to ListQuotasV2AppliedQuotasExecute.
func (m *AppliedQuotasQuotasV2Api) ListQuotasV2AppliedQuotasExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2AppliedQuotasRequest
} {
	m.lockListQuotasV2AppliedQuotasExecute.Lock()
	defer m.lockListQuotasV2AppliedQuotasExecute.Unlock()

	return m.calls.ListQuotasV2AppliedQuotasExecute
}

// Reset resets the calls made to the mocked methods.
func (m *AppliedQuotasQuotasV2Api) Reset() {
	m.lockGetQuotasV2AppliedQuota.Lock()
	m.calls.GetQuotasV2AppliedQuota = nil
	m.lockGetQuotasV2AppliedQuota.Unlock()
	m.lockGetQuotasV2AppliedQuotaExecute.Lock()
	m.calls.GetQuotasV2AppliedQuotaExecute = nil
	m.lockGetQuotasV2AppliedQuotaExecute.Unlock()
	m.lockListQuotasV2AppliedQuotas.Lock()
	m.calls.ListQuotasV2AppliedQuotas = nil
	m.lockListQuotasV2AppliedQuotas.Unlock()
	m.lockListQuotasV2AppliedQuotasExecute.Lock()
	m.calls.ListQuotasV2AppliedQuotasExecute = nil
	m.lockListQuotasV2AppliedQuotasExecute.Unlock()
}
