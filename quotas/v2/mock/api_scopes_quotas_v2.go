// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_scopes_quotas_v2.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2 "github.com/confluentinc/ccloud-sdk-go-v2/quotas/v2"
)

// ScopesQuotasV2Api is a mock of ScopesQuotasV2Api interface
type ScopesQuotasV2Api struct {
	lockGetQuotasV2Scope sync.Mutex
	GetQuotasV2ScopeFunc func(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2ScopeRequest

	lockGetQuotasV2ScopeExecute sync.Mutex
	GetQuotasV2ScopeExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2ScopeRequest) (github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.QuotasV2Scope, *net_http.Response, error)

	lockListQuotasV2Scopes sync.Mutex
	ListQuotasV2ScopesFunc func(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2ScopesRequest

	lockListQuotasV2ScopesExecute sync.Mutex
	ListQuotasV2ScopesExecuteFunc func(r github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2ScopesRequest) (github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.QuotasV2ScopeList, *net_http.Response, error)

	calls struct {
		GetQuotasV2Scope []struct {
			Ctx context.Context
			Id  string
		}
		GetQuotasV2ScopeExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2ScopeRequest
		}
		ListQuotasV2Scopes []struct {
			Ctx context.Context
		}
		ListQuotasV2ScopesExecute []struct {
			R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2ScopesRequest
		}
	}
}

// GetQuotasV2Scope mocks base method by wrapping the associated func.
func (m *ScopesQuotasV2Api) GetQuotasV2Scope(ctx context.Context, id string) github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2ScopeRequest {
	m.lockGetQuotasV2Scope.Lock()
	defer m.lockGetQuotasV2Scope.Unlock()

	if m.GetQuotasV2ScopeFunc == nil {
		panic("mocker: ScopesQuotasV2Api.GetQuotasV2ScopeFunc is nil but ScopesQuotasV2Api.GetQuotasV2Scope was called.")
	}

	call := struct {
		Ctx context.Context
		Id  string
	}{
		Ctx: ctx,
		Id:  id,
	}

	m.calls.GetQuotasV2Scope = append(m.calls.GetQuotasV2Scope, call)

	return m.GetQuotasV2ScopeFunc(ctx, id)
}

// GetQuotasV2ScopeCalled returns true if GetQuotasV2Scope was called at least once.
func (m *ScopesQuotasV2Api) GetQuotasV2ScopeCalled() bool {
	m.lockGetQuotasV2Scope.Lock()
	defer m.lockGetQuotasV2Scope.Unlock()

	return len(m.calls.GetQuotasV2Scope) > 0
}

// GetQuotasV2ScopeCalls returns the calls made to GetQuotasV2Scope.
func (m *ScopesQuotasV2Api) GetQuotasV2ScopeCalls() []struct {
	Ctx context.Context
	Id  string
} {
	m.lockGetQuotasV2Scope.Lock()
	defer m.lockGetQuotasV2Scope.Unlock()

	return m.calls.GetQuotasV2Scope
}

// GetQuotasV2ScopeExecute mocks base method by wrapping the associated func.
func (m *ScopesQuotasV2Api) GetQuotasV2ScopeExecute(r github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2ScopeRequest) (github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.QuotasV2Scope, *net_http.Response, error) {
	m.lockGetQuotasV2ScopeExecute.Lock()
	defer m.lockGetQuotasV2ScopeExecute.Unlock()

	if m.GetQuotasV2ScopeExecuteFunc == nil {
		panic("mocker: ScopesQuotasV2Api.GetQuotasV2ScopeExecuteFunc is nil but ScopesQuotasV2Api.GetQuotasV2ScopeExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2ScopeRequest
	}{
		R: r,
	}

	m.calls.GetQuotasV2ScopeExecute = append(m.calls.GetQuotasV2ScopeExecute, call)

	return m.GetQuotasV2ScopeExecuteFunc(r)
}

// GetQuotasV2ScopeExecuteCalled returns true if GetQuotasV2ScopeExecute was called at least once.
func (m *ScopesQuotasV2Api) GetQuotasV2ScopeExecuteCalled() bool {
	m.lockGetQuotasV2ScopeExecute.Lock()
	defer m.lockGetQuotasV2ScopeExecute.Unlock()

	return len(m.calls.GetQuotasV2ScopeExecute) > 0
}

// GetQuotasV2ScopeExecuteCalls returns the calls made to GetQuotasV2ScopeExecute.
func (m *ScopesQuotasV2Api) GetQuotasV2ScopeExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiGetQuotasV2ScopeRequest
} {
	m.lockGetQuotasV2ScopeExecute.Lock()
	defer m.lockGetQuotasV2ScopeExecute.Unlock()

	return m.calls.GetQuotasV2ScopeExecute
}

// ListQuotasV2Scopes mocks base method by wrapping the associated func.
func (m *ScopesQuotasV2Api) ListQuotasV2Scopes(ctx context.Context) github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2ScopesRequest {
	m.lockListQuotasV2Scopes.Lock()
	defer m.lockListQuotasV2Scopes.Unlock()

	if m.ListQuotasV2ScopesFunc == nil {
		panic("mocker: ScopesQuotasV2Api.ListQuotasV2ScopesFunc is nil but ScopesQuotasV2Api.ListQuotasV2Scopes was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ListQuotasV2Scopes = append(m.calls.ListQuotasV2Scopes, call)

	return m.ListQuotasV2ScopesFunc(ctx)
}

// ListQuotasV2ScopesCalled returns true if ListQuotasV2Scopes was called at least once.
func (m *ScopesQuotasV2Api) ListQuotasV2ScopesCalled() bool {
	m.lockListQuotasV2Scopes.Lock()
	defer m.lockListQuotasV2Scopes.Unlock()

	return len(m.calls.ListQuotasV2Scopes) > 0
}

// ListQuotasV2ScopesCalls returns the calls made to ListQuotasV2Scopes.
func (m *ScopesQuotasV2Api) ListQuotasV2ScopesCalls() []struct {
	Ctx context.Context
} {
	m.lockListQuotasV2Scopes.Lock()
	defer m.lockListQuotasV2Scopes.Unlock()

	return m.calls.ListQuotasV2Scopes
}

// ListQuotasV2ScopesExecute mocks base method by wrapping the associated func.
func (m *ScopesQuotasV2Api) ListQuotasV2ScopesExecute(r github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2ScopesRequest) (github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.QuotasV2ScopeList, *net_http.Response, error) {
	m.lockListQuotasV2ScopesExecute.Lock()
	defer m.lockListQuotasV2ScopesExecute.Unlock()

	if m.ListQuotasV2ScopesExecuteFunc == nil {
		panic("mocker: ScopesQuotasV2Api.ListQuotasV2ScopesExecuteFunc is nil but ScopesQuotasV2Api.ListQuotasV2ScopesExecute was called.")
	}

	call := struct {
		R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2ScopesRequest
	}{
		R: r,
	}

	m.calls.ListQuotasV2ScopesExecute = append(m.calls.ListQuotasV2ScopesExecute, call)

	return m.ListQuotasV2ScopesExecuteFunc(r)
}

// ListQuotasV2ScopesExecuteCalled returns true if ListQuotasV2ScopesExecute was called at least once.
func (m *ScopesQuotasV2Api) ListQuotasV2ScopesExecuteCalled() bool {
	m.lockListQuotasV2ScopesExecute.Lock()
	defer m.lockListQuotasV2ScopesExecute.Unlock()

	return len(m.calls.ListQuotasV2ScopesExecute) > 0
}

// ListQuotasV2ScopesExecuteCalls returns the calls made to ListQuotasV2ScopesExecute.
func (m *ScopesQuotasV2Api) ListQuotasV2ScopesExecuteCalls() []struct {
	R github_com_confluentinc_ccloud_sdk_go_v2_quotas_v2.ApiListQuotasV2ScopesRequest
} {
	m.lockListQuotasV2ScopesExecute.Lock()
	defer m.lockListQuotasV2ScopesExecute.Unlock()

	return m.calls.ListQuotasV2ScopesExecute
}

// Reset resets the calls made to the mocked methods.
func (m *ScopesQuotasV2Api) Reset() {
	m.lockGetQuotasV2Scope.Lock()
	m.calls.GetQuotasV2Scope = nil
	m.lockGetQuotasV2Scope.Unlock()
	m.lockGetQuotasV2ScopeExecute.Lock()
	m.calls.GetQuotasV2ScopeExecute = nil
	m.lockGetQuotasV2ScopeExecute.Unlock()
	m.lockListQuotasV2Scopes.Lock()
	m.calls.ListQuotasV2Scopes = nil
	m.lockListQuotasV2Scopes.Unlock()
	m.lockListQuotasV2ScopesExecute.Lock()
	m.calls.ListQuotasV2ScopesExecute = nil
	m.lockListQuotasV2ScopesExecute.Unlock()
}
